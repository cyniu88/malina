/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/json2/json.hpp:
    1|       |/*
    2|       |    __ _____ _____ _____
    3|       | __|  |   __|     |   | |  JSON for Modern C++
    4|       ||  |  |__   |  |  | | | |  version 3.7.3
    5|       ||_____|_____|_____|_|___|  https://github.com/nlohmann/json
    6|       |
    7|       |Licensed under the MIT License <http://opensource.org/licenses/MIT>.
    8|       |SPDX-License-Identifier: MIT
    9|       |Copyright (c) 2013-2019 Niels Lohmann <http://nlohmann.me>.
   10|       |
   11|       |Permission is hereby  granted, free of charge, to any  person obtaining a copy
   12|       |of this software and associated  documentation files (the "Software"), to deal
   13|       |in the Software  without restriction, including without  limitation the rights
   14|       |to  use, copy,  modify, merge,  publish, distribute,  sublicense, and/or  sell
   15|       |copies  of  the Software,  and  to  permit persons  to  whom  the Software  is
   16|       |furnished to do so, subject to the following conditions:
   17|       |
   18|       |The above copyright notice and this permission notice shall be included in all
   19|       |copies or substantial portions of the Software.
   20|       |
   21|       |THE SOFTWARE  IS PROVIDED "AS  IS", WITHOUT WARRANTY  OF ANY KIND,  EXPRESS OR
   22|       |IMPLIED,  INCLUDING BUT  NOT  LIMITED TO  THE  WARRANTIES OF  MERCHANTABILITY,
   23|       |FITNESS FOR  A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT  SHALL THE
   24|       |AUTHORS  OR COPYRIGHT  HOLDERS  BE  LIABLE FOR  ANY  CLAIM,  DAMAGES OR  OTHER
   25|       |LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   26|       |OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE
   27|       |SOFTWARE.
   28|       |*/
   29|       |
   30|       |#ifndef INCLUDE_NLOHMANN_JSON_HPP_
   31|       |#define INCLUDE_NLOHMANN_JSON_HPP_
   32|       |
   33|       |#define NLOHMANN_JSON_VERSION_MAJOR 3
   34|       |#define NLOHMANN_JSON_VERSION_MINOR 7
   35|       |#define NLOHMANN_JSON_VERSION_PATCH 3
   36|       |
   37|       |#include <algorithm> // all_of, find, for_each
   38|       |#include <cassert> // assert
   39|       |#include <ciso646> // and, not, or
   40|       |#include <cstddef> // nullptr_t, ptrdiff_t, size_t
   41|       |#include <functional> // hash, less
   42|       |#include <initializer_list> // initializer_list
   43|       |#include <iosfwd> // istream, ostream
   44|       |#include <iterator> // random_access_iterator_tag
   45|       |#include <memory> // unique_ptr
   46|       |#include <numeric> // accumulate
   47|       |#include <string> // string, stoi, to_string
   48|       |#include <utility> // declval, forward, move, pair, swap
   49|       |#include <vector> // vector
   50|       |
   51|       |// #include <nlohmann/adl_serializer.hpp>
   52|       |
   53|       |
   54|       |#include <utility>
   55|       |
   56|       |// #include <nlohmann/detail/conversions/from_json.hpp>
   57|       |
   58|       |
   59|       |#include <algorithm> // transform
   60|       |#include <array> // array
   61|       |#include <ciso646> // and, not
   62|       |#include <forward_list> // forward_list
   63|       |#include <iterator> // inserter, front_inserter, end
   64|       |#include <map> // map
   65|       |#include <string> // string
   66|       |#include <tuple> // tuple, make_tuple
   67|       |#include <type_traits> // is_arithmetic, is_same, is_enum, underlying_type, is_convertible
   68|       |#include <unordered_map> // unordered_map
   69|       |#include <utility> // pair, declval
   70|       |#include <valarray> // valarray
   71|       |
   72|       |// #include <nlohmann/detail/exceptions.hpp>
   73|       |
   74|       |
   75|       |#include <exception> // exception
   76|       |#include <stdexcept> // runtime_error
   77|       |#include <string> // to_string
   78|       |
   79|       |// #include <nlohmann/detail/input/position_t.hpp>
   80|       |
   81|       |
   82|       |#include <cstddef> // size_t
   83|       |
   84|       |namespace nlohmann
   85|       |{
   86|       |namespace detail
   87|       |{
   88|       |/// struct to capture the start position of the current token
   89|       |struct position_t
   90|       |{
   91|       |    /// the total number of characters read
   92|       |    std::size_t chars_read_total = 0;
   93|       |    /// the number of characters read in the current line
   94|       |    std::size_t chars_read_current_line = 0;
   95|       |    /// the number of lines read
   96|       |    std::size_t lines_read = 0;
   97|       |
   98|       |    /// conversion to size_t to preserve SAX interface
   99|       |    constexpr operator size_t() const
  100|     28|    {
  101|     28|        return chars_read_total;
  102|     28|    }
  103|       |};
  104|       |
  105|       |} // namespace detail
  106|       |} // namespace nlohmann
  107|       |
  108|       |// #include <nlohmann/detail/macro_scope.hpp>
  109|       |
  110|       |
  111|       |#include <utility> // pair
  112|       |// #include <nlohmann/thirdparty/hedley/hedley.hpp>
  113|       |/* Hedley - https://nemequ.github.io/hedley
  114|       | * Created by Evan Nemerson <evan@nemerson.com>
  115|       | *
  116|       | * To the extent possible under law, the author(s) have dedicated all
  117|       | * copyright and related and neighboring rights to this software to
  118|       | * the public domain worldwide. This software is distributed without
  119|       | * any warranty.
  120|       | *
  121|       | * For details, see <http://creativecommons.org/publicdomain/zero/1.0/>.
  122|       | * SPDX-License-Identifier: CC0-1.0
  123|       | */
  124|       |
  125|       |#if !defined(JSON_HEDLEY_VERSION) || (JSON_HEDLEY_VERSION < 11)
  126|       |#if defined(JSON_HEDLEY_VERSION)
  127|       |    #undef JSON_HEDLEY_VERSION
  128|       |#endif
  129|       |#define JSON_HEDLEY_VERSION 11
  130|       |
  131|       |#if defined(JSON_HEDLEY_STRINGIFY_EX)
  132|       |    #undef JSON_HEDLEY_STRINGIFY_EX
  133|       |#endif
  134|       |#define JSON_HEDLEY_STRINGIFY_EX(x) #x
  135|       |
  136|       |#if defined(JSON_HEDLEY_STRINGIFY)
  137|       |    #undef JSON_HEDLEY_STRINGIFY
  138|       |#endif
  139|       |#define JSON_HEDLEY_STRINGIFY(x) JSON_HEDLEY_STRINGIFY_EX(x)
  140|       |
  141|       |#if defined(JSON_HEDLEY_CONCAT_EX)
  142|       |    #undef JSON_HEDLEY_CONCAT_EX
  143|       |#endif
  144|       |#define JSON_HEDLEY_CONCAT_EX(a,b) a##b
  145|       |
  146|       |#if defined(JSON_HEDLEY_CONCAT)
  147|       |    #undef JSON_HEDLEY_CONCAT
  148|       |#endif
  149|       |#define JSON_HEDLEY_CONCAT(a,b) JSON_HEDLEY_CONCAT_EX(a,b)
  150|       |
  151|       |#if defined(JSON_HEDLEY_VERSION_ENCODE)
  152|       |    #undef JSON_HEDLEY_VERSION_ENCODE
  153|       |#endif
  154|       |#define JSON_HEDLEY_VERSION_ENCODE(major,minor,revision) (((major) * 1000000) + ((minor) * 1000) + (revision))
  155|       |
  156|       |#if defined(JSON_HEDLEY_VERSION_DECODE_MAJOR)
  157|       |    #undef JSON_HEDLEY_VERSION_DECODE_MAJOR
  158|       |#endif
  159|       |#define JSON_HEDLEY_VERSION_DECODE_MAJOR(version) ((version) / 1000000)
  160|       |
  161|       |#if defined(JSON_HEDLEY_VERSION_DECODE_MINOR)
  162|       |    #undef JSON_HEDLEY_VERSION_DECODE_MINOR
  163|       |#endif
  164|       |#define JSON_HEDLEY_VERSION_DECODE_MINOR(version) (((version) % 1000000) / 1000)
  165|       |
  166|       |#if defined(JSON_HEDLEY_VERSION_DECODE_REVISION)
  167|       |    #undef JSON_HEDLEY_VERSION_DECODE_REVISION
  168|       |#endif
  169|       |#define JSON_HEDLEY_VERSION_DECODE_REVISION(version) ((version) % 1000)
  170|       |
  171|       |#if defined(JSON_HEDLEY_GNUC_VERSION)
  172|       |    #undef JSON_HEDLEY_GNUC_VERSION
  173|       |#endif
  174|       |#if defined(__GNUC__) && defined(__GNUC_PATCHLEVEL__)
  175|       |    #define JSON_HEDLEY_GNUC_VERSION JSON_HEDLEY_VERSION_ENCODE(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)
  176|       |#elif defined(__GNUC__)
  177|       |    #define JSON_HEDLEY_GNUC_VERSION JSON_HEDLEY_VERSION_ENCODE(__GNUC__, __GNUC_MINOR__, 0)
  178|       |#endif
  179|       |
  180|       |#if defined(JSON_HEDLEY_GNUC_VERSION_CHECK)
  181|       |    #undef JSON_HEDLEY_GNUC_VERSION_CHECK
  182|       |#endif
  183|       |#if defined(JSON_HEDLEY_GNUC_VERSION)
  184|       |    #define JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_GNUC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  185|       |#else
  186|       |    #define JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch) (0)
  187|       |#endif
  188|       |
  189|       |#if defined(JSON_HEDLEY_MSVC_VERSION)
  190|       |    #undef JSON_HEDLEY_MSVC_VERSION
  191|       |#endif
  192|       |#if defined(_MSC_FULL_VER) && (_MSC_FULL_VER >= 140000000)
  193|       |    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_FULL_VER / 10000000, (_MSC_FULL_VER % 10000000) / 100000, (_MSC_FULL_VER % 100000) / 100)
  194|       |#elif defined(_MSC_FULL_VER)
  195|       |    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_FULL_VER / 1000000, (_MSC_FULL_VER % 1000000) / 10000, (_MSC_FULL_VER % 10000) / 10)
  196|       |#elif defined(_MSC_VER)
  197|       |    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_VER / 100, _MSC_VER % 100, 0)
  198|       |#endif
  199|       |
  200|       |#if defined(JSON_HEDLEY_MSVC_VERSION_CHECK)
  201|       |    #undef JSON_HEDLEY_MSVC_VERSION_CHECK
  202|       |#endif
  203|       |#if !defined(_MSC_VER)
  204|       |    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (0)
  205|       |#elif defined(_MSC_VER) && (_MSC_VER >= 1400)
  206|       |    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 10000000) + (minor * 100000) + (patch)))
  207|       |#elif defined(_MSC_VER) && (_MSC_VER >= 1200)
  208|       |    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 1000000) + (minor * 10000) + (patch)))
  209|       |#else
  210|       |    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_VER >= ((major * 100) + (minor)))
  211|       |#endif
  212|       |
  213|       |#if defined(JSON_HEDLEY_INTEL_VERSION)
  214|       |    #undef JSON_HEDLEY_INTEL_VERSION
  215|       |#endif
  216|       |#if defined(__INTEL_COMPILER) && defined(__INTEL_COMPILER_UPDATE)
  217|       |    #define JSON_HEDLEY_INTEL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, __INTEL_COMPILER_UPDATE)
  218|       |#elif defined(__INTEL_COMPILER)
  219|       |    #define JSON_HEDLEY_INTEL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, 0)
  220|       |#endif
  221|       |
  222|       |#if defined(JSON_HEDLEY_INTEL_VERSION_CHECK)
  223|       |    #undef JSON_HEDLEY_INTEL_VERSION_CHECK
  224|       |#endif
  225|       |#if defined(JSON_HEDLEY_INTEL_VERSION)
  226|       |    #define JSON_HEDLEY_INTEL_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_INTEL_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  227|       |#else
  228|       |    #define JSON_HEDLEY_INTEL_VERSION_CHECK(major,minor,patch) (0)
  229|       |#endif
  230|       |
  231|       |#if defined(JSON_HEDLEY_PGI_VERSION)
  232|       |    #undef JSON_HEDLEY_PGI_VERSION
  233|       |#endif
  234|       |#if defined(__PGI) && defined(__PGIC__) && defined(__PGIC_MINOR__) && defined(__PGIC_PATCHLEVEL__)
  235|       |    #define JSON_HEDLEY_PGI_VERSION JSON_HEDLEY_VERSION_ENCODE(__PGIC__, __PGIC_MINOR__, __PGIC_PATCHLEVEL__)
  236|       |#endif
  237|       |
  238|       |#if defined(JSON_HEDLEY_PGI_VERSION_CHECK)
  239|       |    #undef JSON_HEDLEY_PGI_VERSION_CHECK
  240|       |#endif
  241|       |#if defined(JSON_HEDLEY_PGI_VERSION)
  242|       |    #define JSON_HEDLEY_PGI_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_PGI_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  243|       |#else
  244|       |    #define JSON_HEDLEY_PGI_VERSION_CHECK(major,minor,patch) (0)
  245|       |#endif
  246|       |
  247|       |#if defined(JSON_HEDLEY_SUNPRO_VERSION)
  248|       |    #undef JSON_HEDLEY_SUNPRO_VERSION
  249|       |#endif
  250|       |#if defined(__SUNPRO_C) && (__SUNPRO_C > 0x1000)
  251|       |    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((((__SUNPRO_C >> 16) & 0xf) * 10) + ((__SUNPRO_C >> 12) & 0xf), (((__SUNPRO_C >> 8) & 0xf) * 10) + ((__SUNPRO_C >> 4) & 0xf), (__SUNPRO_C & 0xf) * 10)
  252|       |#elif defined(__SUNPRO_C)
  253|       |    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((__SUNPRO_C >> 8) & 0xf, (__SUNPRO_C >> 4) & 0xf, (__SUNPRO_C) & 0xf)
  254|       |#elif defined(__SUNPRO_CC) && (__SUNPRO_CC > 0x1000)
  255|       |    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((((__SUNPRO_CC >> 16) & 0xf) * 10) + ((__SUNPRO_CC >> 12) & 0xf), (((__SUNPRO_CC >> 8) & 0xf) * 10) + ((__SUNPRO_CC >> 4) & 0xf), (__SUNPRO_CC & 0xf) * 10)
  256|       |#elif defined(__SUNPRO_CC)
  257|       |    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((__SUNPRO_CC >> 8) & 0xf, (__SUNPRO_CC >> 4) & 0xf, (__SUNPRO_CC) & 0xf)
  258|       |#endif
  259|       |
  260|       |#if defined(JSON_HEDLEY_SUNPRO_VERSION_CHECK)
  261|       |    #undef JSON_HEDLEY_SUNPRO_VERSION_CHECK
  262|       |#endif
  263|       |#if defined(JSON_HEDLEY_SUNPRO_VERSION)
  264|       |    #define JSON_HEDLEY_SUNPRO_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_SUNPRO_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  265|       |#else
  266|       |    #define JSON_HEDLEY_SUNPRO_VERSION_CHECK(major,minor,patch) (0)
  267|       |#endif
  268|       |
  269|       |#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION)
  270|       |    #undef JSON_HEDLEY_EMSCRIPTEN_VERSION
  271|       |#endif
  272|       |#if defined(__EMSCRIPTEN__)
  273|       |    #define JSON_HEDLEY_EMSCRIPTEN_VERSION JSON_HEDLEY_VERSION_ENCODE(__EMSCRIPTEN_major__, __EMSCRIPTEN_minor__, __EMSCRIPTEN_tiny__)
  274|       |#endif
  275|       |
  276|       |#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK)
  277|       |    #undef JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK
  278|       |#endif
  279|       |#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION)
  280|       |    #define JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_EMSCRIPTEN_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  281|       |#else
  282|       |    #define JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK(major,minor,patch) (0)
  283|       |#endif
  284|       |
  285|       |#if defined(JSON_HEDLEY_ARM_VERSION)
  286|       |    #undef JSON_HEDLEY_ARM_VERSION
  287|       |#endif
  288|       |#if defined(__CC_ARM) && defined(__ARMCOMPILER_VERSION)
  289|       |    #define JSON_HEDLEY_ARM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ARMCOMPILER_VERSION / 1000000, (__ARMCOMPILER_VERSION % 1000000) / 10000, (__ARMCOMPILER_VERSION % 10000) / 100)
  290|       |#elif defined(__CC_ARM) && defined(__ARMCC_VERSION)
  291|       |    #define JSON_HEDLEY_ARM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ARMCC_VERSION / 1000000, (__ARMCC_VERSION % 1000000) / 10000, (__ARMCC_VERSION % 10000) / 100)
  292|       |#endif
  293|       |
  294|       |#if defined(JSON_HEDLEY_ARM_VERSION_CHECK)
  295|       |    #undef JSON_HEDLEY_ARM_VERSION_CHECK
  296|       |#endif
  297|       |#if defined(JSON_HEDLEY_ARM_VERSION)
  298|       |    #define JSON_HEDLEY_ARM_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_ARM_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  299|       |#else
  300|       |    #define JSON_HEDLEY_ARM_VERSION_CHECK(major,minor,patch) (0)
  301|       |#endif
  302|       |
  303|       |#if defined(JSON_HEDLEY_IBM_VERSION)
  304|       |    #undef JSON_HEDLEY_IBM_VERSION
  305|       |#endif
  306|       |#if defined(__ibmxl__)
  307|       |    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ibmxl_version__, __ibmxl_release__, __ibmxl_modification__)
  308|       |#elif defined(__xlC__) && defined(__xlC_ver__)
  309|       |    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__xlC__ >> 8, __xlC__ & 0xff, (__xlC_ver__ >> 8) & 0xff)
  310|       |#elif defined(__xlC__)
  311|       |    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__xlC__ >> 8, __xlC__ & 0xff, 0)
  312|       |#endif
  313|       |
  314|       |#if defined(JSON_HEDLEY_IBM_VERSION_CHECK)
  315|       |    #undef JSON_HEDLEY_IBM_VERSION_CHECK
  316|       |#endif
  317|       |#if defined(JSON_HEDLEY_IBM_VERSION)
  318|       |    #define JSON_HEDLEY_IBM_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_IBM_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  319|       |#else
  320|       |    #define JSON_HEDLEY_IBM_VERSION_CHECK(major,minor,patch) (0)
  321|       |#endif
  322|       |
  323|       |#if defined(JSON_HEDLEY_TI_VERSION)
  324|       |    #undef JSON_HEDLEY_TI_VERSION
  325|       |#endif
  326|       |#if defined(__TI_COMPILER_VERSION__)
  327|       |    #define JSON_HEDLEY_TI_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
  328|       |#endif
  329|       |
  330|       |#if defined(JSON_HEDLEY_TI_VERSION_CHECK)
  331|       |    #undef JSON_HEDLEY_TI_VERSION_CHECK
  332|       |#endif
  333|       |#if defined(JSON_HEDLEY_TI_VERSION)
  334|       |    #define JSON_HEDLEY_TI_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  335|       |#else
  336|       |    #define JSON_HEDLEY_TI_VERSION_CHECK(major,minor,patch) (0)
  337|       |#endif
  338|       |
  339|       |#if defined(JSON_HEDLEY_CRAY_VERSION)
  340|       |    #undef JSON_HEDLEY_CRAY_VERSION
  341|       |#endif
  342|       |#if defined(_CRAYC)
  343|       |    #if defined(_RELEASE_PATCHLEVEL)
  344|       |        #define JSON_HEDLEY_CRAY_VERSION JSON_HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR, _RELEASE_MINOR, _RELEASE_PATCHLEVEL)
  345|       |    #else
  346|       |        #define JSON_HEDLEY_CRAY_VERSION JSON_HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR, _RELEASE_MINOR, 0)
  347|       |    #endif
  348|       |#endif
  349|       |
  350|       |#if defined(JSON_HEDLEY_CRAY_VERSION_CHECK)
  351|       |    #undef JSON_HEDLEY_CRAY_VERSION_CHECK
  352|       |#endif
  353|       |#if defined(JSON_HEDLEY_CRAY_VERSION)
  354|       |    #define JSON_HEDLEY_CRAY_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_CRAY_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  355|       |#else
  356|       |    #define JSON_HEDLEY_CRAY_VERSION_CHECK(major,minor,patch) (0)
  357|       |#endif
  358|       |
  359|       |#if defined(JSON_HEDLEY_IAR_VERSION)
  360|       |    #undef JSON_HEDLEY_IAR_VERSION
  361|       |#endif
  362|       |#if defined(__IAR_SYSTEMS_ICC__)
  363|       |    #if __VER__ > 1000
  364|       |        #define JSON_HEDLEY_IAR_VERSION JSON_HEDLEY_VERSION_ENCODE((__VER__ / 1000000), ((__VER__ / 1000) % 1000), (__VER__ % 1000))
  365|       |    #else
  366|       |        #define JSON_HEDLEY_IAR_VERSION JSON_HEDLEY_VERSION_ENCODE(VER / 100, __VER__ % 100, 0)
  367|       |    #endif
  368|       |#endif
  369|       |
  370|       |#if defined(JSON_HEDLEY_IAR_VERSION_CHECK)
  371|       |    #undef JSON_HEDLEY_IAR_VERSION_CHECK
  372|       |#endif
  373|       |#if defined(JSON_HEDLEY_IAR_VERSION)
  374|       |    #define JSON_HEDLEY_IAR_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_IAR_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  375|       |#else
  376|       |    #define JSON_HEDLEY_IAR_VERSION_CHECK(major,minor,patch) (0)
  377|       |#endif
  378|       |
  379|       |#if defined(JSON_HEDLEY_TINYC_VERSION)
  380|       |    #undef JSON_HEDLEY_TINYC_VERSION
  381|       |#endif
  382|       |#if defined(__TINYC__)
  383|       |    #define JSON_HEDLEY_TINYC_VERSION JSON_HEDLEY_VERSION_ENCODE(__TINYC__ / 1000, (__TINYC__ / 100) % 10, __TINYC__ % 100)
  384|       |#endif
  385|       |
  386|       |#if defined(JSON_HEDLEY_TINYC_VERSION_CHECK)
  387|       |    #undef JSON_HEDLEY_TINYC_VERSION_CHECK
  388|       |#endif
  389|       |#if defined(JSON_HEDLEY_TINYC_VERSION)
  390|       |    #define JSON_HEDLEY_TINYC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TINYC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  391|       |#else
  392|       |    #define JSON_HEDLEY_TINYC_VERSION_CHECK(major,minor,patch) (0)
  393|       |#endif
  394|       |
  395|       |#if defined(JSON_HEDLEY_DMC_VERSION)
  396|       |    #undef JSON_HEDLEY_DMC_VERSION
  397|       |#endif
  398|       |#if defined(__DMC__)
  399|       |    #define JSON_HEDLEY_DMC_VERSION JSON_HEDLEY_VERSION_ENCODE(__DMC__ >> 8, (__DMC__ >> 4) & 0xf, __DMC__ & 0xf)
  400|       |#endif
  401|       |
  402|       |#if defined(JSON_HEDLEY_DMC_VERSION_CHECK)
  403|       |    #undef JSON_HEDLEY_DMC_VERSION_CHECK
  404|       |#endif
  405|       |#if defined(JSON_HEDLEY_DMC_VERSION)
  406|       |    #define JSON_HEDLEY_DMC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_DMC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  407|       |#else
  408|       |    #define JSON_HEDLEY_DMC_VERSION_CHECK(major,minor,patch) (0)
  409|       |#endif
  410|       |
  411|       |#if defined(JSON_HEDLEY_COMPCERT_VERSION)
  412|       |    #undef JSON_HEDLEY_COMPCERT_VERSION
  413|       |#endif
  414|       |#if defined(__COMPCERT_VERSION__)
  415|       |    #define JSON_HEDLEY_COMPCERT_VERSION JSON_HEDLEY_VERSION_ENCODE(__COMPCERT_VERSION__ / 10000, (__COMPCERT_VERSION__ / 100) % 100, __COMPCERT_VERSION__ % 100)
  416|       |#endif
  417|       |
  418|       |#if defined(JSON_HEDLEY_COMPCERT_VERSION_CHECK)
  419|       |    #undef JSON_HEDLEY_COMPCERT_VERSION_CHECK
  420|       |#endif
  421|       |#if defined(JSON_HEDLEY_COMPCERT_VERSION)
  422|       |    #define JSON_HEDLEY_COMPCERT_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_COMPCERT_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  423|       |#else
  424|       |    #define JSON_HEDLEY_COMPCERT_VERSION_CHECK(major,minor,patch) (0)
  425|       |#endif
  426|       |
  427|       |#if defined(JSON_HEDLEY_PELLES_VERSION)
  428|       |    #undef JSON_HEDLEY_PELLES_VERSION
  429|       |#endif
  430|       |#if defined(__POCC__)
  431|       |    #define JSON_HEDLEY_PELLES_VERSION JSON_HEDLEY_VERSION_ENCODE(__POCC__ / 100, __POCC__ % 100, 0)
  432|       |#endif
  433|       |
  434|       |#if defined(JSON_HEDLEY_PELLES_VERSION_CHECK)
  435|       |    #undef JSON_HEDLEY_PELLES_VERSION_CHECK
  436|       |#endif
  437|       |#if defined(JSON_HEDLEY_PELLES_VERSION)
  438|       |    #define JSON_HEDLEY_PELLES_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_PELLES_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  439|       |#else
  440|       |    #define JSON_HEDLEY_PELLES_VERSION_CHECK(major,minor,patch) (0)
  441|       |#endif
  442|       |
  443|       |#if defined(JSON_HEDLEY_GCC_VERSION)
  444|       |    #undef JSON_HEDLEY_GCC_VERSION
  445|       |#endif
  446|       |#if \
  447|       |    defined(JSON_HEDLEY_GNUC_VERSION) && \
  448|       |    !defined(__clang__) && \
  449|       |    !defined(JSON_HEDLEY_INTEL_VERSION) && \
  450|       |    !defined(JSON_HEDLEY_PGI_VERSION) && \
  451|       |    !defined(JSON_HEDLEY_ARM_VERSION) && \
  452|       |    !defined(JSON_HEDLEY_TI_VERSION) && \
  453|       |    !defined(__COMPCERT__)
  454|       |    #define JSON_HEDLEY_GCC_VERSION JSON_HEDLEY_GNUC_VERSION
  455|       |#endif
  456|       |
  457|       |#if defined(JSON_HEDLEY_GCC_VERSION_CHECK)
  458|       |    #undef JSON_HEDLEY_GCC_VERSION_CHECK
  459|       |#endif
  460|       |#if defined(JSON_HEDLEY_GCC_VERSION)
  461|       |    #define JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_GCC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
  462|       |#else
  463|       |    #define JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch) (0)
  464|       |#endif
  465|       |
  466|       |#if defined(JSON_HEDLEY_HAS_ATTRIBUTE)
  467|       |    #undef JSON_HEDLEY_HAS_ATTRIBUTE
  468|       |#endif
  469|       |#if defined(__has_attribute)
  470|       |    #define JSON_HEDLEY_HAS_ATTRIBUTE(attribute) __has_attribute(attribute)
  471|       |#else
  472|       |    #define JSON_HEDLEY_HAS_ATTRIBUTE(attribute) (0)
  473|       |#endif
  474|       |
  475|       |#if defined(JSON_HEDLEY_GNUC_HAS_ATTRIBUTE)
  476|       |    #undef JSON_HEDLEY_GNUC_HAS_ATTRIBUTE
  477|       |#endif
  478|       |#if defined(__has_attribute)
  479|       |    #define JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(attribute,major,minor,patch) __has_attribute(attribute)
  480|       |#else
  481|       |    #define JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
  482|       |#endif
  483|       |
  484|       |#if defined(JSON_HEDLEY_GCC_HAS_ATTRIBUTE)
  485|       |    #undef JSON_HEDLEY_GCC_HAS_ATTRIBUTE
  486|       |#endif
  487|       |#if defined(__has_attribute)
  488|       |    #define JSON_HEDLEY_GCC_HAS_ATTRIBUTE(attribute,major,minor,patch) __has_attribute(attribute)
  489|       |#else
  490|       |    #define JSON_HEDLEY_GCC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
  491|       |#endif
  492|       |
  493|       |#if defined(JSON_HEDLEY_HAS_CPP_ATTRIBUTE)
  494|       |    #undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE
  495|       |#endif
  496|       |#if \
  497|       |    defined(__has_cpp_attribute) && \
  498|       |    defined(__cplusplus) && \
  499|       |    (!defined(JSON_HEDLEY_SUNPRO_VERSION) || JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0))
  500|       |    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute) __has_cpp_attribute(attribute)
  501|       |#else
  502|       |    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute) (0)
  503|       |#endif
  504|       |
  505|       |#if defined(JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS)
  506|       |    #undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS
  507|       |#endif
  508|       |#if !defined(__cplusplus) || !defined(__has_cpp_attribute)
  509|       |    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) (0)
  510|       |#elif \
  511|       |    !defined(JSON_HEDLEY_PGI_VERSION) && \
  512|       |    (!defined(JSON_HEDLEY_SUNPRO_VERSION) || JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0)) && \
  513|       |    (!defined(JSON_HEDLEY_MSVC_VERSION) || JSON_HEDLEY_MSVC_VERSION_CHECK(19,20,0))
  514|       |    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) JSON_HEDLEY_HAS_CPP_ATTRIBUTE(ns::attribute)
  515|       |#else
  516|       |    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) (0)
  517|       |#endif
  518|       |
  519|       |#if defined(JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE)
  520|       |    #undef JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE
  521|       |#endif
  522|       |#if defined(__has_cpp_attribute) && defined(__cplusplus)
  523|       |    #define JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) __has_cpp_attribute(attribute)
  524|       |#else
  525|       |    #define JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
  526|       |#endif
  527|       |
  528|       |#if defined(JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE)
  529|       |    #undef JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE
  530|       |#endif
  531|       |#if defined(__has_cpp_attribute) && defined(__cplusplus)
  532|       |    #define JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) __has_cpp_attribute(attribute)
  533|       |#else
  534|       |    #define JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
  535|       |#endif
  536|       |
  537|       |#if defined(JSON_HEDLEY_HAS_BUILTIN)
  538|       |    #undef JSON_HEDLEY_HAS_BUILTIN
  539|       |#endif
  540|       |#if defined(__has_builtin)
  541|       |    #define JSON_HEDLEY_HAS_BUILTIN(builtin) __has_builtin(builtin)
  542|       |#else
  543|       |    #define JSON_HEDLEY_HAS_BUILTIN(builtin) (0)
  544|       |#endif
  545|       |
  546|       |#if defined(JSON_HEDLEY_GNUC_HAS_BUILTIN)
  547|       |    #undef JSON_HEDLEY_GNUC_HAS_BUILTIN
  548|       |#endif
  549|       |#if defined(__has_builtin)
  550|       |    #define JSON_HEDLEY_GNUC_HAS_BUILTIN(builtin,major,minor,patch) __has_builtin(builtin)
  551|       |#else
  552|       |    #define JSON_HEDLEY_GNUC_HAS_BUILTIN(builtin,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
  553|       |#endif
  554|       |
  555|       |#if defined(JSON_HEDLEY_GCC_HAS_BUILTIN)
  556|       |    #undef JSON_HEDLEY_GCC_HAS_BUILTIN
  557|       |#endif
  558|       |#if defined(__has_builtin)
  559|       |    #define JSON_HEDLEY_GCC_HAS_BUILTIN(builtin,major,minor,patch) __has_builtin(builtin)
  560|       |#else
  561|       |    #define JSON_HEDLEY_GCC_HAS_BUILTIN(builtin,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
  562|       |#endif
  563|       |
  564|       |#if defined(JSON_HEDLEY_HAS_FEATURE)
  565|       |    #undef JSON_HEDLEY_HAS_FEATURE
  566|       |#endif
  567|       |#if defined(__has_feature)
  568|       |    #define JSON_HEDLEY_HAS_FEATURE(feature) __has_feature(feature)
  569|       |#else
  570|       |    #define JSON_HEDLEY_HAS_FEATURE(feature) (0)
  571|       |#endif
  572|       |
  573|       |#if defined(JSON_HEDLEY_GNUC_HAS_FEATURE)
  574|       |    #undef JSON_HEDLEY_GNUC_HAS_FEATURE
  575|       |#endif
  576|       |#if defined(__has_feature)
  577|       |    #define JSON_HEDLEY_GNUC_HAS_FEATURE(feature,major,minor,patch) __has_feature(feature)
  578|       |#else
  579|       |    #define JSON_HEDLEY_GNUC_HAS_FEATURE(feature,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
  580|       |#endif
  581|       |
  582|       |#if defined(JSON_HEDLEY_GCC_HAS_FEATURE)
  583|       |    #undef JSON_HEDLEY_GCC_HAS_FEATURE
  584|       |#endif
  585|       |#if defined(__has_feature)
  586|       |    #define JSON_HEDLEY_GCC_HAS_FEATURE(feature,major,minor,patch) __has_feature(feature)
  587|       |#else
  588|       |    #define JSON_HEDLEY_GCC_HAS_FEATURE(feature,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
  589|       |#endif
  590|       |
  591|       |#if defined(JSON_HEDLEY_HAS_EXTENSION)
  592|       |    #undef JSON_HEDLEY_HAS_EXTENSION
  593|       |#endif
  594|       |#if defined(__has_extension)
  595|       |    #define JSON_HEDLEY_HAS_EXTENSION(extension) __has_extension(extension)
  596|       |#else
  597|       |    #define JSON_HEDLEY_HAS_EXTENSION(extension) (0)
  598|       |#endif
  599|       |
  600|       |#if defined(JSON_HEDLEY_GNUC_HAS_EXTENSION)
  601|       |    #undef JSON_HEDLEY_GNUC_HAS_EXTENSION
  602|       |#endif
  603|       |#if defined(__has_extension)
  604|       |    #define JSON_HEDLEY_GNUC_HAS_EXTENSION(extension,major,minor,patch) __has_extension(extension)
  605|       |#else
  606|       |    #define JSON_HEDLEY_GNUC_HAS_EXTENSION(extension,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
  607|       |#endif
  608|       |
  609|       |#if defined(JSON_HEDLEY_GCC_HAS_EXTENSION)
  610|       |    #undef JSON_HEDLEY_GCC_HAS_EXTENSION
  611|       |#endif
  612|       |#if defined(__has_extension)
  613|       |    #define JSON_HEDLEY_GCC_HAS_EXTENSION(extension,major,minor,patch) __has_extension(extension)
  614|       |#else
  615|       |    #define JSON_HEDLEY_GCC_HAS_EXTENSION(extension,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
  616|       |#endif
  617|       |
  618|       |#if defined(JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE)
  619|       |    #undef JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE
  620|       |#endif
  621|       |#if defined(__has_declspec_attribute)
  622|       |    #define JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute) __has_declspec_attribute(attribute)
  623|       |#else
  624|       |    #define JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute) (0)
  625|       |#endif
  626|       |
  627|       |#if defined(JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE)
  628|       |    #undef JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE
  629|       |#endif
  630|       |#if defined(__has_declspec_attribute)
  631|       |    #define JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) __has_declspec_attribute(attribute)
  632|       |#else
  633|       |    #define JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
  634|       |#endif
  635|       |
  636|       |#if defined(JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE)
  637|       |    #undef JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE
  638|       |#endif
  639|       |#if defined(__has_declspec_attribute)
  640|       |    #define JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) __has_declspec_attribute(attribute)
  641|       |#else
  642|       |    #define JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
  643|       |#endif
  644|       |
  645|       |#if defined(JSON_HEDLEY_HAS_WARNING)
  646|       |    #undef JSON_HEDLEY_HAS_WARNING
  647|       |#endif
  648|       |#if defined(__has_warning)
  649|       |    #define JSON_HEDLEY_HAS_WARNING(warning) __has_warning(warning)
  650|       |#else
  651|       |    #define JSON_HEDLEY_HAS_WARNING(warning) (0)
  652|       |#endif
  653|       |
  654|       |#if defined(JSON_HEDLEY_GNUC_HAS_WARNING)
  655|       |    #undef JSON_HEDLEY_GNUC_HAS_WARNING
  656|       |#endif
  657|       |#if defined(__has_warning)
  658|       |    #define JSON_HEDLEY_GNUC_HAS_WARNING(warning,major,minor,patch) __has_warning(warning)
  659|       |#else
  660|       |    #define JSON_HEDLEY_GNUC_HAS_WARNING(warning,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
  661|       |#endif
  662|       |
  663|       |#if defined(JSON_HEDLEY_GCC_HAS_WARNING)
  664|       |    #undef JSON_HEDLEY_GCC_HAS_WARNING
  665|       |#endif
  666|       |#if defined(__has_warning)
  667|       |    #define JSON_HEDLEY_GCC_HAS_WARNING(warning,major,minor,patch) __has_warning(warning)
  668|       |#else
  669|       |    #define JSON_HEDLEY_GCC_HAS_WARNING(warning,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
  670|       |#endif
  671|       |
  672|       |/* JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_ is for
  673|       |   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. */
  674|       |#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_)
  675|       |    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_
  676|       |#endif
  677|       |#if defined(__cplusplus) && JSON_HEDLEY_HAS_WARNING("-Wc++98-compat")
  678|       |#  define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr) \
  679|       |    JSON_HEDLEY_DIAGNOSTIC_PUSH \
  680|       |    _Pragma("clang diagnostic ignored \"-Wc++98-compat\"") \
  681|       |    xpr \
  682|       |    JSON_HEDLEY_DIAGNOSTIC_POP
  683|       |#else
  684|       |#  define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(x) x
  685|       |#endif
  686|       |
  687|       |#if \
  688|       |    (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)) || \
  689|       |    defined(__clang__) || \
  690|       |    JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0) || \
  691|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
  692|       |    JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0) || \
  693|       |    JSON_HEDLEY_PGI_VERSION_CHECK(18,4,0) || \
  694|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
  695|       |    JSON_HEDLEY_TI_VERSION_CHECK(6,0,0) || \
  696|       |    JSON_HEDLEY_CRAY_VERSION_CHECK(5,0,0) || \
  697|       |    JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,17) || \
  698|       |    JSON_HEDLEY_SUNPRO_VERSION_CHECK(8,0,0) || \
  699|       |    (JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) && defined(__C99_PRAGMA_OPERATOR))
  700|       |    #define JSON_HEDLEY_PRAGMA(value) _Pragma(#value)
  701|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
  702|       |    #define JSON_HEDLEY_PRAGMA(value) __pragma(value)
  703|       |#else
  704|       |    #define JSON_HEDLEY_PRAGMA(value)
  705|       |#endif
  706|       |
  707|       |#if defined(JSON_HEDLEY_DIAGNOSTIC_PUSH)
  708|       |    #undef JSON_HEDLEY_DIAGNOSTIC_PUSH
  709|       |#endif
  710|       |#if defined(JSON_HEDLEY_DIAGNOSTIC_POP)
  711|       |    #undef JSON_HEDLEY_DIAGNOSTIC_POP
  712|       |#endif
  713|       |#if defined(__clang__)
  714|       |    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("clang diagnostic push")
  715|       |    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("clang diagnostic pop")
  716|       |#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
  717|       |    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("warning(push)")
  718|       |    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("warning(pop)")
  719|       |#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)
  720|       |    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("GCC diagnostic push")
  721|       |    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("GCC diagnostic pop")
  722|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
  723|       |    #define JSON_HEDLEY_DIAGNOSTIC_PUSH __pragma(warning(push))
  724|       |    #define JSON_HEDLEY_DIAGNOSTIC_POP __pragma(warning(pop))
  725|       |#elif JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0)
  726|       |    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("push")
  727|       |    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("pop")
  728|       |#elif JSON_HEDLEY_TI_VERSION_CHECK(8,1,0)
  729|       |    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("diag_push")
  730|       |    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("diag_pop")
  731|       |#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,90,0)
  732|       |    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("warning(push)")
  733|       |    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("warning(pop)")
  734|       |#else
  735|       |    #define JSON_HEDLEY_DIAGNOSTIC_PUSH
  736|       |    #define JSON_HEDLEY_DIAGNOSTIC_POP
  737|       |#endif
  738|       |
  739|       |#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED)
  740|       |    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED
  741|       |#endif
  742|       |#if JSON_HEDLEY_HAS_WARNING("-Wdeprecated-declarations")
  743|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"")
  744|       |#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
  745|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("warning(disable:1478 1786)")
  746|       |#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
  747|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1215,1444")
  748|       |#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)
  749|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("GCC diagnostic ignored \"-Wdeprecated-declarations\"")
  750|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
  751|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED __pragma(warning(disable:4996))
  752|       |#elif JSON_HEDLEY_TI_VERSION_CHECK(8,0,0)
  753|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1291,1718")
  754|       |#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) && !defined(__cplusplus)
  755|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("error_messages(off,E_DEPRECATED_ATT,E_DEPRECATED_ATT_MESS)")
  756|       |#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) && defined(__cplusplus)
  757|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("error_messages(off,symdeprecated,symdeprecated2)")
  758|       |#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
  759|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress=Pe1444,Pe1215")
  760|       |#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,90,0)
  761|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("warn(disable:2241)")
  762|       |#else
  763|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED
  764|       |#endif
  765|       |
  766|       |#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS)
  767|       |    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS
  768|       |#endif
  769|       |#if JSON_HEDLEY_HAS_WARNING("-Wunknown-pragmas")
  770|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("clang diagnostic ignored \"-Wunknown-pragmas\"")
  771|       |#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
  772|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("warning(disable:161)")
  773|       |#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
  774|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 1675")
  775|       |#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)
  776|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("GCC diagnostic ignored \"-Wunknown-pragmas\"")
  777|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
  778|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS __pragma(warning(disable:4068))
  779|       |#elif JSON_HEDLEY_TI_VERSION_CHECK(8,0,0)
  780|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 163")
  781|       |#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
  782|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress=Pe161")
  783|       |#else
  784|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS
  785|       |#endif
  786|       |
  787|       |#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES)
  788|       |    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES
  789|       |#endif
  790|       |#if JSON_HEDLEY_HAS_WARNING("-Wunknown-attributes")
  791|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("clang diagnostic ignored \"-Wunknown-attributes\"")
  792|       |#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)
  793|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("GCC diagnostic ignored \"-Wdeprecated-declarations\"")
  794|       |#elif JSON_HEDLEY_INTEL_VERSION_CHECK(17,0,0)
  795|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("warning(disable:1292)")
  796|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(19,0,0)
  797|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES __pragma(warning(disable:5030))
  798|       |#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
  799|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1097")
  800|       |#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,14,0) && defined(__cplusplus)
  801|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("error_messages(off,attrskipunsup)")
  802|       |#elif JSON_HEDLEY_TI_VERSION_CHECK(8,0,0)
  803|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1173")
  804|       |#else
  805|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES
  806|       |#endif
  807|       |
  808|       |#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL)
  809|       |    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL
  810|       |#endif
  811|       |#if JSON_HEDLEY_HAS_WARNING("-Wcast-qual")
  812|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma("clang diagnostic ignored \"-Wcast-qual\"")
  813|       |#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
  814|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma("warning(disable:2203 2331)")
  815|       |#elif JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0)
  816|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma("GCC diagnostic ignored \"-Wcast-qual\"")
  817|       |#else
  818|       |    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL
  819|       |#endif
  820|       |
  821|       |#if defined(JSON_HEDLEY_DEPRECATED)
  822|       |    #undef JSON_HEDLEY_DEPRECATED
  823|       |#endif
  824|       |#if defined(JSON_HEDLEY_DEPRECATED_FOR)
  825|       |    #undef JSON_HEDLEY_DEPRECATED_FOR
  826|       |#endif
  827|       |#if defined(__cplusplus) && (__cplusplus >= 201402L)
  828|       |    #define JSON_HEDLEY_DEPRECATED(since) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[deprecated("Since " #since)]])
  829|       |    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[deprecated("Since " #since "; use " #replacement)]])
  830|       |#elif \
  831|       |    JSON_HEDLEY_HAS_EXTENSION(attribute_deprecated_with_message) || \
  832|       |    JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0) || \
  833|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
  834|       |    JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0) || \
  835|       |    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) || \
  836|       |    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
  837|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,3,0)
  838|       |    #define JSON_HEDLEY_DEPRECATED(since) __attribute__((__deprecated__("Since " #since)))
  839|       |    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __attribute__((__deprecated__("Since " #since "; use " #replacement)))
  840|       |#elif \
  841|       |    JSON_HEDLEY_HAS_ATTRIBUTE(deprecated) || \
  842|       |    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
  843|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
  844|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,0,0) || \
  845|       |    (JSON_HEDLEY_TI_VERSION_CHECK(7,3,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__))
  846|       |    #define JSON_HEDLEY_DEPRECATED(since) __attribute__((__deprecated__))
  847|       |    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __attribute__((__deprecated__))
  848|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0)
  849|       |    #define JSON_HEDLEY_DEPRECATED(since) __declspec(deprecated("Since " # since))
  850|       |    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __declspec(deprecated("Since " #since "; use " #replacement))
  851|       |#elif \
  852|       |    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \
  853|       |    JSON_HEDLEY_PELLES_VERSION_CHECK(6,50,0)
  854|       |    #define JSON_HEDLEY_DEPRECATED(since) __declspec(deprecated)
  855|       |    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __declspec(deprecated)
  856|       |#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
  857|       |    #define JSON_HEDLEY_DEPRECATED(since) _Pragma("deprecated")
  858|       |    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) _Pragma("deprecated")
  859|       |#else
  860|       |    #define JSON_HEDLEY_DEPRECATED(since)
  861|       |    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement)
  862|       |#endif
  863|       |
  864|       |#if defined(JSON_HEDLEY_UNAVAILABLE)
  865|       |    #undef JSON_HEDLEY_UNAVAILABLE
  866|       |#endif
  867|       |#if \
  868|       |    JSON_HEDLEY_HAS_ATTRIBUTE(warning) || \
  869|       |    JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0) || \
  870|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
  871|       |    #define JSON_HEDLEY_UNAVAILABLE(available_since) __attribute__((__warning__("Not available until " #available_since)))
  872|       |#else
  873|       |    #define JSON_HEDLEY_UNAVAILABLE(available_since)
  874|       |#endif
  875|       |
  876|       |#if defined(JSON_HEDLEY_WARN_UNUSED_RESULT)
  877|       |    #undef JSON_HEDLEY_WARN_UNUSED_RESULT
  878|       |#endif
  879|       |#if defined(__cplusplus) && (__cplusplus >= 201703L)
  880|       |    #define JSON_HEDLEY_WARN_UNUSED_RESULT JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])
  881|       |#elif \
  882|       |    JSON_HEDLEY_HAS_ATTRIBUTE(warn_unused_result) || \
  883|       |    JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \
  884|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
  885|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,0,0) || \
  886|       |    (JSON_HEDLEY_TI_VERSION_CHECK(7,3,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
  887|       |    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0) && defined(__cplusplus)) || \
  888|       |    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
  889|       |    #define JSON_HEDLEY_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))
  890|       |#elif defined(_Check_return_) /* SAL */
  891|       |    #define JSON_HEDLEY_WARN_UNUSED_RESULT _Check_return_
  892|       |#else
  893|       |    #define JSON_HEDLEY_WARN_UNUSED_RESULT
  894|       |#endif
  895|       |
  896|       |#if defined(JSON_HEDLEY_SENTINEL)
  897|       |    #undef JSON_HEDLEY_SENTINEL
  898|       |#endif
  899|       |#if \
  900|       |    JSON_HEDLEY_HAS_ATTRIBUTE(sentinel) || \
  901|       |    JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \
  902|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
  903|       |    JSON_HEDLEY_ARM_VERSION_CHECK(5,4,0)
  904|       |    #define JSON_HEDLEY_SENTINEL(position) __attribute__((__sentinel__(position)))
  905|       |#else
  906|       |    #define JSON_HEDLEY_SENTINEL(position)
  907|       |#endif
  908|       |
  909|       |#if defined(JSON_HEDLEY_NO_RETURN)
  910|       |    #undef JSON_HEDLEY_NO_RETURN
  911|       |#endif
  912|       |#if JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
  913|       |    #define JSON_HEDLEY_NO_RETURN __noreturn
  914|       |#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
  915|       |    #define JSON_HEDLEY_NO_RETURN __attribute__((__noreturn__))
  916|       |#elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
  917|       |    #define JSON_HEDLEY_NO_RETURN _Noreturn
  918|       |#elif defined(__cplusplus) && (__cplusplus >= 201103L)
  919|       |    #define JSON_HEDLEY_NO_RETURN JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[noreturn]])
  920|       |#elif \
  921|       |    JSON_HEDLEY_HAS_ATTRIBUTE(noreturn) || \
  922|       |    JSON_HEDLEY_GCC_VERSION_CHECK(3,2,0) || \
  923|       |    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
  924|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
  925|       |    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
  926|       |    JSON_HEDLEY_TI_VERSION_CHECK(18,0,0) || \
  927|       |    (JSON_HEDLEY_TI_VERSION_CHECK(17,3,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__))
  928|       |    #define JSON_HEDLEY_NO_RETURN __attribute__((__noreturn__))
  929|       |#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
  930|       |    #define JSON_HEDLEY_NO_RETURN _Pragma("does_not_return")
  931|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0)
  932|       |    #define JSON_HEDLEY_NO_RETURN __declspec(noreturn)
  933|       |#elif JSON_HEDLEY_TI_VERSION_CHECK(6,0,0) && defined(__cplusplus)
  934|       |    #define JSON_HEDLEY_NO_RETURN _Pragma("FUNC_NEVER_RETURNS;")
  935|       |#elif JSON_HEDLEY_COMPCERT_VERSION_CHECK(3,2,0)
  936|       |    #define JSON_HEDLEY_NO_RETURN __attribute((noreturn))
  937|       |#elif JSON_HEDLEY_PELLES_VERSION_CHECK(9,0,0)
  938|       |    #define JSON_HEDLEY_NO_RETURN __declspec(noreturn)
  939|       |#else
  940|       |    #define JSON_HEDLEY_NO_RETURN
  941|       |#endif
  942|       |
  943|       |#if defined(JSON_HEDLEY_NO_ESCAPE)
  944|       |    #undef JSON_HEDLEY_NO_ESCAPE
  945|       |#endif
  946|       |#if JSON_HEDLEY_HAS_ATTRIBUTE(noescape)
  947|       |    #define JSON_HEDLEY_NO_ESCAPE __attribute__((__noescape__))
  948|       |#else
  949|       |    #define JSON_HEDLEY_NO_ESCAPE
  950|       |#endif
  951|       |
  952|       |#if defined(JSON_HEDLEY_UNREACHABLE)
  953|       |    #undef JSON_HEDLEY_UNREACHABLE
  954|       |#endif
  955|       |#if defined(JSON_HEDLEY_UNREACHABLE_RETURN)
  956|       |    #undef JSON_HEDLEY_UNREACHABLE_RETURN
  957|       |#endif
  958|       |#if \
  959|       |    (JSON_HEDLEY_HAS_BUILTIN(__builtin_unreachable) && (!defined(JSON_HEDLEY_ARM_VERSION))) || \
  960|       |    JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0) || \
  961|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
  962|       |    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,5)
  963|       |    #define JSON_HEDLEY_UNREACHABLE() __builtin_unreachable()
  964|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0)
  965|       |    #define JSON_HEDLEY_UNREACHABLE() __assume(0)
  966|       |#elif JSON_HEDLEY_TI_VERSION_CHECK(6,0,0)
  967|       |    #if defined(__cplusplus)
  968|       |        #define JSON_HEDLEY_UNREACHABLE() std::_nassert(0)
  969|       |    #else
  970|       |        #define JSON_HEDLEY_UNREACHABLE() _nassert(0)
  971|       |    #endif
  972|       |    #define JSON_HEDLEY_UNREACHABLE_RETURN(value) return value
  973|       |#elif defined(EXIT_FAILURE)
  974|       |    #define JSON_HEDLEY_UNREACHABLE() abort()
  975|       |#else
  976|       |    #define JSON_HEDLEY_UNREACHABLE()
  977|       |    #define JSON_HEDLEY_UNREACHABLE_RETURN(value) return value
  978|       |#endif
  979|       |#if !defined(JSON_HEDLEY_UNREACHABLE_RETURN)
  980|       |    #define JSON_HEDLEY_UNREACHABLE_RETURN(value) JSON_HEDLEY_UNREACHABLE()
  981|       |#endif
  982|       |
  983|       |#if defined(JSON_HEDLEY_ASSUME)
  984|       |    #undef JSON_HEDLEY_ASSUME
  985|       |#endif
  986|       |#if \
  987|       |    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \
  988|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
  989|       |    #define JSON_HEDLEY_ASSUME(expr) __assume(expr)
  990|       |#elif JSON_HEDLEY_HAS_BUILTIN(__builtin_assume)
  991|       |    #define JSON_HEDLEY_ASSUME(expr) __builtin_assume(expr)
  992|       |#elif JSON_HEDLEY_TI_VERSION_CHECK(6,0,0)
  993|       |    #if defined(__cplusplus)
  994|       |        #define JSON_HEDLEY_ASSUME(expr) std::_nassert(expr)
  995|       |    #else
  996|       |        #define JSON_HEDLEY_ASSUME(expr) _nassert(expr)
  997|       |    #endif
  998|       |#elif \
  999|       |    (JSON_HEDLEY_HAS_BUILTIN(__builtin_unreachable) && !defined(JSON_HEDLEY_ARM_VERSION)) || \
 1000|       |    JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0) || \
 1001|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1002|       |    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,5)
 1003|       |    #define JSON_HEDLEY_ASSUME(expr) ((void) ((expr) ? 1 : (__builtin_unreachable(), 1)))
 1004|       |#else
 1005|       |    #define JSON_HEDLEY_ASSUME(expr) ((void) (expr))
 1006|       |#endif
 1007|       |
 1008|       |JSON_HEDLEY_DIAGNOSTIC_PUSH
 1009|       |#if JSON_HEDLEY_HAS_WARNING("-Wpedantic")
 1010|       |    #pragma clang diagnostic ignored "-Wpedantic"
 1011|       |#endif
 1012|       |#if JSON_HEDLEY_HAS_WARNING("-Wc++98-compat-pedantic") && defined(__cplusplus)
 1013|       |    #pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
 1014|       |#endif
 1015|       |#if JSON_HEDLEY_GCC_HAS_WARNING("-Wvariadic-macros",4,0,0)
 1016|       |    #if defined(__clang__)
 1017|       |        #pragma clang diagnostic ignored "-Wvariadic-macros"
 1018|       |    #elif defined(JSON_HEDLEY_GCC_VERSION)
 1019|       |        #pragma GCC diagnostic ignored "-Wvariadic-macros"
 1020|       |    #endif
 1021|       |#endif
 1022|       |#if defined(JSON_HEDLEY_NON_NULL)
 1023|       |    #undef JSON_HEDLEY_NON_NULL
 1024|       |#endif
 1025|       |#if \
 1026|       |    JSON_HEDLEY_HAS_ATTRIBUTE(nonnull) || \
 1027|       |    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \
 1028|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1029|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)
 1030|       |    #define JSON_HEDLEY_NON_NULL(...) __attribute__((__nonnull__(__VA_ARGS__)))
 1031|       |#else
 1032|       |    #define JSON_HEDLEY_NON_NULL(...)
 1033|       |#endif
 1034|       |JSON_HEDLEY_DIAGNOSTIC_POP
 1035|       |
 1036|       |#if defined(JSON_HEDLEY_PRINTF_FORMAT)
 1037|       |    #undef JSON_HEDLEY_PRINTF_FORMAT
 1038|       |#endif
 1039|       |#if defined(__MINGW32__) && JSON_HEDLEY_GCC_HAS_ATTRIBUTE(format,4,4,0) && !defined(__USE_MINGW_ANSI_STDIO)
 1040|       |    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(ms_printf, string_idx, first_to_check)))
 1041|       |#elif defined(__MINGW32__) && JSON_HEDLEY_GCC_HAS_ATTRIBUTE(format,4,4,0) && defined(__USE_MINGW_ANSI_STDIO)
 1042|       |    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(gnu_printf, string_idx, first_to_check)))
 1043|       |#elif \
 1044|       |    JSON_HEDLEY_HAS_ATTRIBUTE(format) || \
 1045|       |    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
 1046|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1047|       |    JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0) || \
 1048|       |    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
 1049|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,0,0) || \
 1050|       |    (JSON_HEDLEY_TI_VERSION_CHECK(7,3,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__))
 1051|       |    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(__printf__, string_idx, first_to_check)))
 1052|       |#elif JSON_HEDLEY_PELLES_VERSION_CHECK(6,0,0)
 1053|       |    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __declspec(vaformat(printf,string_idx,first_to_check))
 1054|       |#else
 1055|       |    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check)
 1056|       |#endif
 1057|       |
 1058|       |#if defined(JSON_HEDLEY_CONSTEXPR)
 1059|       |    #undef JSON_HEDLEY_CONSTEXPR
 1060|       |#endif
 1061|       |#if defined(__cplusplus)
 1062|       |    #if __cplusplus >= 201103L
 1063|       |        #define JSON_HEDLEY_CONSTEXPR JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(constexpr)
 1064|       |    #endif
 1065|       |#endif
 1066|       |#if !defined(JSON_HEDLEY_CONSTEXPR)
 1067|       |    #define JSON_HEDLEY_CONSTEXPR
 1068|       |#endif
 1069|       |
 1070|       |#if defined(JSON_HEDLEY_PREDICT)
 1071|       |    #undef JSON_HEDLEY_PREDICT
 1072|       |#endif
 1073|       |#if defined(JSON_HEDLEY_LIKELY)
 1074|       |    #undef JSON_HEDLEY_LIKELY
 1075|       |#endif
 1076|       |#if defined(JSON_HEDLEY_UNLIKELY)
 1077|       |    #undef JSON_HEDLEY_UNLIKELY
 1078|       |#endif
 1079|       |#if defined(JSON_HEDLEY_UNPREDICTABLE)
 1080|       |    #undef JSON_HEDLEY_UNPREDICTABLE
 1081|       |#endif
 1082|       |#if JSON_HEDLEY_HAS_BUILTIN(__builtin_unpredictable)
 1083|       |    #define JSON_HEDLEY_UNPREDICTABLE(expr) __builtin_unpredictable(!!(expr))
 1084|       |#endif
 1085|       |#if \
 1086|       |  JSON_HEDLEY_HAS_BUILTIN(__builtin_expect_with_probability) || \
 1087|       |  JSON_HEDLEY_GCC_VERSION_CHECK(9,0,0)
 1088|       |#  define JSON_HEDLEY_PREDICT(expr, value, probability) __builtin_expect_with_probability(expr, value, probability)
 1089|       |#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability) __builtin_expect_with_probability(!!(expr), 1, probability)
 1090|       |#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability) __builtin_expect_with_probability(!!(expr), 0, probability)
 1091|  4.83M|#  define JSON_HEDLEY_LIKELY(expr) __builtin_expect(!!(expr), 1)
 1092|   623k|#  define JSON_HEDLEY_UNLIKELY(expr) __builtin_expect(!!(expr), 0)
 1093|       |#if !defined(JSON_HEDLEY_BUILTIN_UNPREDICTABLE)
 1094|       |    #define JSON_HEDLEY_BUILTIN_UNPREDICTABLE(expr) __builtin_expect_with_probability(!!(expr), 1, 0.5)
 1095|       |#endif
 1096|       |#elif \
 1097|       |  JSON_HEDLEY_HAS_BUILTIN(__builtin_expect) || \
 1098|       |  JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0) || \
 1099|       |  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1100|       |  (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0) && defined(__cplusplus)) || \
 1101|       |  JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
 1102|       |  JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
 1103|       |  JSON_HEDLEY_TI_VERSION_CHECK(6,1,0) || \
 1104|       |  JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,27)
 1105|       |#  define JSON_HEDLEY_PREDICT(expr, expected, probability) \
 1106|       |    (((probability) >= 0.9) ? __builtin_expect(!!(expr), (expected)) : (((void) (expected)), !!(expr)))
 1107|       |#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability) \
 1108|       |    (__extension__ ({ \
 1109|       |        JSON_HEDLEY_CONSTEXPR double hedley_probability_ = (probability); \
 1110|       |        ((hedley_probability_ >= 0.9) ? __builtin_expect(!!(expr), 1) : ((hedley_probability_ <= 0.1) ? __builtin_expect(!!(expr), 0) : !!(expr))); \
 1111|       |    }))
 1112|       |#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability) \
 1113|       |    (__extension__ ({ \
 1114|       |        JSON_HEDLEY_CONSTEXPR double hedley_probability_ = (probability); \
 1115|       |        ((hedley_probability_ >= 0.9) ? __builtin_expect(!!(expr), 0) : ((hedley_probability_ <= 0.1) ? __builtin_expect(!!(expr), 1) : !!(expr))); \
 1116|       |    }))
 1117|       |#  define JSON_HEDLEY_LIKELY(expr)   __builtin_expect(!!(expr), 1)
 1118|       |#  define JSON_HEDLEY_UNLIKELY(expr) __builtin_expect(!!(expr), 0)
 1119|       |#else
 1120|       |#  define JSON_HEDLEY_PREDICT(expr, expected, probability) (((void) (expected)), !!(expr))
 1121|       |#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability) (!!(expr))
 1122|       |#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability) (!!(expr))
 1123|       |#  define JSON_HEDLEY_LIKELY(expr) (!!(expr))
 1124|       |#  define JSON_HEDLEY_UNLIKELY(expr) (!!(expr))
 1125|       |#endif
 1126|       |#if !defined(JSON_HEDLEY_UNPREDICTABLE)
 1127|       |    #define JSON_HEDLEY_UNPREDICTABLE(expr) JSON_HEDLEY_PREDICT(expr, 1, 0.5)
 1128|       |#endif
 1129|       |
 1130|       |#if defined(JSON_HEDLEY_MALLOC)
 1131|       |    #undef JSON_HEDLEY_MALLOC
 1132|       |#endif
 1133|       |#if \
 1134|       |    JSON_HEDLEY_HAS_ATTRIBUTE(malloc) || \
 1135|       |    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
 1136|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1137|       |    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
 1138|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
 1139|       |    JSON_HEDLEY_IBM_VERSION_CHECK(12,1,0) || \
 1140|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,0,0) || \
 1141|       |    (JSON_HEDLEY_TI_VERSION_CHECK(7,3,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__))
 1142|       |    #define JSON_HEDLEY_MALLOC __attribute__((__malloc__))
 1143|       |#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
 1144|       |    #define JSON_HEDLEY_MALLOC _Pragma("returns_new_memory")
 1145|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(14, 0, 0)
 1146|       |    #define JSON_HEDLEY_MALLOC __declspec(restrict)
 1147|       |#else
 1148|       |    #define JSON_HEDLEY_MALLOC
 1149|       |#endif
 1150|       |
 1151|       |#if defined(JSON_HEDLEY_PURE)
 1152|       |    #undef JSON_HEDLEY_PURE
 1153|       |#endif
 1154|       |#if \
 1155|       |    JSON_HEDLEY_HAS_ATTRIBUTE(pure) || \
 1156|       |    JSON_HEDLEY_GCC_VERSION_CHECK(2,96,0) || \
 1157|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1158|       |    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
 1159|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
 1160|       |    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
 1161|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,0,0) || \
 1162|       |    (JSON_HEDLEY_TI_VERSION_CHECK(7,3,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
 1163|       |    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
 1164|       |    #define JSON_HEDLEY_PURE __attribute__((__pure__))
 1165|       |#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
 1166|       |    #define JSON_HEDLEY_PURE _Pragma("does_not_write_global_data")
 1167|       |#elif JSON_HEDLEY_TI_VERSION_CHECK(6,0,0) && defined(__cplusplus)
 1168|       |    #define JSON_HEDLEY_PURE _Pragma("FUNC_IS_PURE;")
 1169|       |#else
 1170|       |    #define JSON_HEDLEY_PURE
 1171|       |#endif
 1172|       |
 1173|       |#if defined(JSON_HEDLEY_CONST)
 1174|       |    #undef JSON_HEDLEY_CONST
 1175|       |#endif
 1176|       |#if \
 1177|       |    JSON_HEDLEY_HAS_ATTRIBUTE(const) || \
 1178|       |    JSON_HEDLEY_GCC_VERSION_CHECK(2,5,0) || \
 1179|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1180|       |    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
 1181|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
 1182|       |    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
 1183|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,0,0) || \
 1184|       |    (JSON_HEDLEY_TI_VERSION_CHECK(7,3,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
 1185|       |    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
 1186|       |    #define JSON_HEDLEY_CONST __attribute__((__const__))
 1187|       |#elif \
 1188|       |    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
 1189|       |    #define JSON_HEDLEY_CONST _Pragma("no_side_effect")
 1190|       |#else
 1191|       |    #define JSON_HEDLEY_CONST JSON_HEDLEY_PURE
 1192|       |#endif
 1193|       |
 1194|       |#if defined(JSON_HEDLEY_RESTRICT)
 1195|       |    #undef JSON_HEDLEY_RESTRICT
 1196|       |#endif
 1197|       |#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && !defined(__cplusplus)
 1198|       |    #define JSON_HEDLEY_RESTRICT restrict
 1199|       |#elif \
 1200|       |    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
 1201|       |    JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0) || \
 1202|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1203|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
 1204|       |    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
 1205|       |    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
 1206|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,0,0) || \
 1207|       |    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,14,0) && defined(__cplusplus)) || \
 1208|       |    JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0) || \
 1209|       |    defined(__clang__)
 1210|       |    #define JSON_HEDLEY_RESTRICT __restrict
 1211|       |#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,3,0) && !defined(__cplusplus)
 1212|       |    #define JSON_HEDLEY_RESTRICT _Restrict
 1213|       |#else
 1214|       |    #define JSON_HEDLEY_RESTRICT
 1215|       |#endif
 1216|       |
 1217|       |#if defined(JSON_HEDLEY_INLINE)
 1218|       |    #undef JSON_HEDLEY_INLINE
 1219|       |#endif
 1220|       |#if \
 1221|       |    (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)) || \
 1222|       |    (defined(__cplusplus) && (__cplusplus >= 199711L))
 1223|       |    #define JSON_HEDLEY_INLINE inline
 1224|       |#elif \
 1225|       |    defined(JSON_HEDLEY_GCC_VERSION) || \
 1226|       |    JSON_HEDLEY_ARM_VERSION_CHECK(6,2,0)
 1227|       |    #define JSON_HEDLEY_INLINE __inline__
 1228|       |#elif \
 1229|       |    JSON_HEDLEY_MSVC_VERSION_CHECK(12,0,0) || \
 1230|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
 1231|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,0,0)
 1232|       |    #define JSON_HEDLEY_INLINE __inline
 1233|       |#else
 1234|       |    #define JSON_HEDLEY_INLINE
 1235|       |#endif
 1236|       |
 1237|       |#if defined(JSON_HEDLEY_ALWAYS_INLINE)
 1238|       |    #undef JSON_HEDLEY_ALWAYS_INLINE
 1239|       |#endif
 1240|       |#if \
 1241|       |    JSON_HEDLEY_HAS_ATTRIBUTE(always_inline) || \
 1242|       |    JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \
 1243|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1244|       |    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
 1245|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
 1246|       |    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
 1247|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,0,0) || \
 1248|       |    (JSON_HEDLEY_TI_VERSION_CHECK(7,3,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__))
 1249|       |    #define JSON_HEDLEY_ALWAYS_INLINE __attribute__((__always_inline__)) JSON_HEDLEY_INLINE
 1250|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(12,0,0)
 1251|       |    #define JSON_HEDLEY_ALWAYS_INLINE __forceinline
 1252|       |#elif JSON_HEDLEY_TI_VERSION_CHECK(7,0,0) && defined(__cplusplus)
 1253|       |    #define JSON_HEDLEY_ALWAYS_INLINE _Pragma("FUNC_ALWAYS_INLINE;")
 1254|       |#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
 1255|       |    #define JSON_HEDLEY_ALWAYS_INLINE _Pragma("inline=forced")
 1256|       |#else
 1257|       |    #define JSON_HEDLEY_ALWAYS_INLINE JSON_HEDLEY_INLINE
 1258|       |#endif
 1259|       |
 1260|       |#if defined(JSON_HEDLEY_NEVER_INLINE)
 1261|       |    #undef JSON_HEDLEY_NEVER_INLINE
 1262|       |#endif
 1263|       |#if \
 1264|       |    JSON_HEDLEY_HAS_ATTRIBUTE(noinline) || \
 1265|       |    JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \
 1266|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1267|       |    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
 1268|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
 1269|       |    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
 1270|       |    JSON_HEDLEY_TI_VERSION_CHECK(8,0,0) || \
 1271|       |    (JSON_HEDLEY_TI_VERSION_CHECK(7,3,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__))
 1272|       |    #define JSON_HEDLEY_NEVER_INLINE __attribute__((__noinline__))
 1273|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0)
 1274|       |    #define JSON_HEDLEY_NEVER_INLINE __declspec(noinline)
 1275|       |#elif JSON_HEDLEY_PGI_VERSION_CHECK(10,2,0)
 1276|       |    #define JSON_HEDLEY_NEVER_INLINE _Pragma("noinline")
 1277|       |#elif JSON_HEDLEY_TI_VERSION_CHECK(6,0,0) && defined(__cplusplus)
 1278|       |    #define JSON_HEDLEY_NEVER_INLINE _Pragma("FUNC_CANNOT_INLINE;")
 1279|       |#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
 1280|       |    #define JSON_HEDLEY_NEVER_INLINE _Pragma("inline=never")
 1281|       |#elif JSON_HEDLEY_COMPCERT_VERSION_CHECK(3,2,0)
 1282|       |    #define JSON_HEDLEY_NEVER_INLINE __attribute((noinline))
 1283|       |#elif JSON_HEDLEY_PELLES_VERSION_CHECK(9,0,0)
 1284|       |    #define JSON_HEDLEY_NEVER_INLINE __declspec(noinline)
 1285|       |#else
 1286|       |    #define JSON_HEDLEY_NEVER_INLINE
 1287|       |#endif
 1288|       |
 1289|       |#if defined(JSON_HEDLEY_PRIVATE)
 1290|       |    #undef JSON_HEDLEY_PRIVATE
 1291|       |#endif
 1292|       |#if defined(JSON_HEDLEY_PUBLIC)
 1293|       |    #undef JSON_HEDLEY_PUBLIC
 1294|       |#endif
 1295|       |#if defined(JSON_HEDLEY_IMPORT)
 1296|       |    #undef JSON_HEDLEY_IMPORT
 1297|       |#endif
 1298|       |#if defined(_WIN32) || defined(__CYGWIN__)
 1299|       |    #define JSON_HEDLEY_PRIVATE
 1300|       |    #define JSON_HEDLEY_PUBLIC   __declspec(dllexport)
 1301|       |    #define JSON_HEDLEY_IMPORT   __declspec(dllimport)
 1302|       |#else
 1303|       |    #if \
 1304|       |        JSON_HEDLEY_HAS_ATTRIBUTE(visibility) || \
 1305|       |        JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \
 1306|       |        JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
 1307|       |        JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1308|       |        JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
 1309|       |        JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \
 1310|       |        JSON_HEDLEY_TI_VERSION_CHECK(8,0,0) || \
 1311|       |        (JSON_HEDLEY_TI_VERSION_CHECK(7,3,0) && defined(__TI_EABI__) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__))
 1312|       |        #define JSON_HEDLEY_PRIVATE __attribute__((__visibility__("hidden")))
 1313|       |        #define JSON_HEDLEY_PUBLIC  __attribute__((__visibility__("default")))
 1314|       |    #else
 1315|       |        #define JSON_HEDLEY_PRIVATE
 1316|       |        #define JSON_HEDLEY_PUBLIC
 1317|       |    #endif
 1318|       |    #define JSON_HEDLEY_IMPORT    extern
 1319|       |#endif
 1320|       |
 1321|       |#if defined(JSON_HEDLEY_NO_THROW)
 1322|       |    #undef JSON_HEDLEY_NO_THROW
 1323|       |#endif
 1324|       |#if \
 1325|       |    JSON_HEDLEY_HAS_ATTRIBUTE(nothrow) || \
 1326|       |    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \
 1327|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
 1328|       |    #define JSON_HEDLEY_NO_THROW __attribute__((__nothrow__))
 1329|       |#elif \
 1330|       |    JSON_HEDLEY_MSVC_VERSION_CHECK(13,1,0) || \
 1331|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)
 1332|       |    #define JSON_HEDLEY_NO_THROW __declspec(nothrow)
 1333|       |#else
 1334|       |    #define JSON_HEDLEY_NO_THROW
 1335|       |#endif
 1336|       |
 1337|       |#if defined(JSON_HEDLEY_FALL_THROUGH)
 1338|       |    #undef JSON_HEDLEY_FALL_THROUGH
 1339|       |#endif
 1340|       |#if JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(fallthrough,7,0,0) && !defined(JSON_HEDLEY_PGI_VERSION)
 1341|       |    #define JSON_HEDLEY_FALL_THROUGH __attribute__((__fallthrough__))
 1342|       |#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(clang,fallthrough)
 1343|       |    #define JSON_HEDLEY_FALL_THROUGH JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[clang::fallthrough]])
 1344|       |#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE(fallthrough)
 1345|       |    #define JSON_HEDLEY_FALL_THROUGH JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[fallthrough]])
 1346|       |#elif defined(__fallthrough) /* SAL */
 1347|       |    #define JSON_HEDLEY_FALL_THROUGH __fallthrough
 1348|       |#else
 1349|       |    #define JSON_HEDLEY_FALL_THROUGH
 1350|       |#endif
 1351|       |
 1352|       |#if defined(JSON_HEDLEY_RETURNS_NON_NULL)
 1353|       |    #undef JSON_HEDLEY_RETURNS_NON_NULL
 1354|       |#endif
 1355|       |#if \
 1356|       |    JSON_HEDLEY_HAS_ATTRIBUTE(returns_nonnull) || \
 1357|       |    JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0)
 1358|       |    #define JSON_HEDLEY_RETURNS_NON_NULL __attribute__((__returns_nonnull__))
 1359|       |#elif defined(_Ret_notnull_) /* SAL */
 1360|       |    #define JSON_HEDLEY_RETURNS_NON_NULL _Ret_notnull_
 1361|       |#else
 1362|       |    #define JSON_HEDLEY_RETURNS_NON_NULL
 1363|       |#endif
 1364|       |
 1365|       |#if defined(JSON_HEDLEY_ARRAY_PARAM)
 1366|       |    #undef JSON_HEDLEY_ARRAY_PARAM
 1367|       |#endif
 1368|       |#if \
 1369|       |    defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
 1370|       |    !defined(__STDC_NO_VLA__) && \
 1371|       |    !defined(__cplusplus) && \
 1372|       |    !defined(JSON_HEDLEY_PGI_VERSION) && \
 1373|       |    !defined(JSON_HEDLEY_TINYC_VERSION)
 1374|       |    #define JSON_HEDLEY_ARRAY_PARAM(name) (name)
 1375|       |#else
 1376|       |    #define JSON_HEDLEY_ARRAY_PARAM(name)
 1377|       |#endif
 1378|       |
 1379|       |#if defined(JSON_HEDLEY_IS_CONSTANT)
 1380|       |    #undef JSON_HEDLEY_IS_CONSTANT
 1381|       |#endif
 1382|       |#if defined(JSON_HEDLEY_REQUIRE_CONSTEXPR)
 1383|       |    #undef JSON_HEDLEY_REQUIRE_CONSTEXPR
 1384|       |#endif
 1385|       |/* JSON_HEDLEY_IS_CONSTEXPR_ is for
 1386|       |   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. */
 1387|       |#if defined(JSON_HEDLEY_IS_CONSTEXPR_)
 1388|       |    #undef JSON_HEDLEY_IS_CONSTEXPR_
 1389|       |#endif
 1390|       |#if \
 1391|       |    JSON_HEDLEY_HAS_BUILTIN(__builtin_constant_p) || \
 1392|       |    JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \
 1393|       |    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1394|       |    JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,19) || \
 1395|       |    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
 1396|       |    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \
 1397|       |    JSON_HEDLEY_TI_VERSION_CHECK(6,1,0) || \
 1398|       |    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0) && !defined(__cplusplus)) || \
 1399|       |    JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0)
 1400|       |    #define JSON_HEDLEY_IS_CONSTANT(expr) __builtin_constant_p(expr)
 1401|       |#endif
 1402|       |#if !defined(__cplusplus)
 1403|       |#  if \
 1404|       |       JSON_HEDLEY_HAS_BUILTIN(__builtin_types_compatible_p) || \
 1405|       |       JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \
 1406|       |       JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1407|       |       JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \
 1408|       |       JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0) || \
 1409|       |       JSON_HEDLEY_ARM_VERSION_CHECK(5,4,0) || \
 1410|       |       JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,24)
 1411|       |#if defined(__INTPTR_TYPE__)
 1412|       |    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) __builtin_types_compatible_p(__typeof__((1 ? (void*) ((__INTPTR_TYPE__) ((expr) * 0)) : (int*) 0)), int*)
 1413|       |#else
 1414|       |    #include <stdint.h>
 1415|       |    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) __builtin_types_compatible_p(__typeof__((1 ? (void*) ((intptr_t) ((expr) * 0)) : (int*) 0)), int*)
 1416|       |#endif
 1417|       |#  elif \
 1418|       |       (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L) && !defined(JSON_HEDLEY_SUNPRO_VERSION) && !defined(JSON_HEDLEY_PGI_VERSION)) || \
 1419|       |       JSON_HEDLEY_HAS_EXTENSION(c_generic_selections) || \
 1420|       |       JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0) || \
 1421|       |       JSON_HEDLEY_INTEL_VERSION_CHECK(17,0,0) || \
 1422|       |       JSON_HEDLEY_IBM_VERSION_CHECK(12,1,0) || \
 1423|       |       JSON_HEDLEY_ARM_VERSION_CHECK(5,3,0)
 1424|       |#if defined(__INTPTR_TYPE__)
 1425|       |    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) _Generic((1 ? (void*) ((__INTPTR_TYPE__) ((expr) * 0)) : (int*) 0), int*: 1, void*: 0)
 1426|       |#else
 1427|       |    #include <stdint.h>
 1428|       |    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) _Generic((1 ? (void*) ((intptr_t) * 0) : (int*) 0), int*: 1, void*: 0)
 1429|       |#endif
 1430|       |#  elif \
 1431|       |       defined(JSON_HEDLEY_GCC_VERSION) || \
 1432|       |       defined(JSON_HEDLEY_INTEL_VERSION) || \
 1433|       |       defined(JSON_HEDLEY_TINYC_VERSION) || \
 1434|       |       defined(JSON_HEDLEY_TI_VERSION) || \
 1435|       |       defined(__clang__)
 1436|       |#    define JSON_HEDLEY_IS_CONSTEXPR_(expr) ( \
 1437|       |        sizeof(void) != \
 1438|       |        sizeof(*( \
 1439|       |                  1 ? \
 1440|       |                  ((void*) ((expr) * 0L) ) : \
 1441|       |((struct { char v[sizeof(void) * 2]; } *) 1) \
 1442|       |                ) \
 1443|       |              ) \
 1444|       |                                            )
 1445|       |#  endif
 1446|       |#endif
 1447|       |#if defined(JSON_HEDLEY_IS_CONSTEXPR_)
 1448|       |    #if !defined(JSON_HEDLEY_IS_CONSTANT)
 1449|       |        #define JSON_HEDLEY_IS_CONSTANT(expr) JSON_HEDLEY_IS_CONSTEXPR_(expr)
 1450|       |    #endif
 1451|       |    #define JSON_HEDLEY_REQUIRE_CONSTEXPR(expr) (JSON_HEDLEY_IS_CONSTEXPR_(expr) ? (expr) : (-1))
 1452|       |#else
 1453|       |    #if !defined(JSON_HEDLEY_IS_CONSTANT)
 1454|       |        #define JSON_HEDLEY_IS_CONSTANT(expr) (0)
 1455|       |    #endif
 1456|       |    #define JSON_HEDLEY_REQUIRE_CONSTEXPR(expr) (expr)
 1457|       |#endif
 1458|       |
 1459|       |#if defined(JSON_HEDLEY_BEGIN_C_DECLS)
 1460|       |    #undef JSON_HEDLEY_BEGIN_C_DECLS
 1461|       |#endif
 1462|       |#if defined(JSON_HEDLEY_END_C_DECLS)
 1463|       |    #undef JSON_HEDLEY_END_C_DECLS
 1464|       |#endif
 1465|       |#if defined(JSON_HEDLEY_C_DECL)
 1466|       |    #undef JSON_HEDLEY_C_DECL
 1467|       |#endif
 1468|       |#if defined(__cplusplus)
 1469|       |    #define JSON_HEDLEY_BEGIN_C_DECLS extern "C" {
 1470|       |    #define JSON_HEDLEY_END_C_DECLS }
 1471|       |    #define JSON_HEDLEY_C_DECL extern "C"
 1472|       |#else
 1473|       |    #define JSON_HEDLEY_BEGIN_C_DECLS
 1474|       |    #define JSON_HEDLEY_END_C_DECLS
 1475|       |    #define JSON_HEDLEY_C_DECL
 1476|       |#endif
 1477|       |
 1478|       |#if defined(JSON_HEDLEY_STATIC_ASSERT)
 1479|       |    #undef JSON_HEDLEY_STATIC_ASSERT
 1480|       |#endif
 1481|       |#if \
 1482|       |  !defined(__cplusplus) && ( \
 1483|       |      (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L)) || \
 1484|       |      JSON_HEDLEY_HAS_FEATURE(c_static_assert) || \
 1485|       |      JSON_HEDLEY_GCC_VERSION_CHECK(6,0,0) || \
 1486|       |      JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
 1487|       |      defined(_Static_assert) \
 1488|       |    )
 1489|       |#  define JSON_HEDLEY_STATIC_ASSERT(expr, message) _Static_assert(expr, message)
 1490|       |#elif \
 1491|       |  (defined(__cplusplus) && (__cplusplus >= 201103L)) || \
 1492|       |  JSON_HEDLEY_MSVC_VERSION_CHECK(16,0,0) || \
 1493|       |  (defined(__cplusplus) && JSON_HEDLEY_TI_VERSION_CHECK(8,3,0))
 1494|       |#  define JSON_HEDLEY_STATIC_ASSERT(expr, message) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(static_assert(expr, message))
 1495|       |#else
 1496|       |#  define JSON_HEDLEY_STATIC_ASSERT(expr, message)
 1497|       |#endif
 1498|       |
 1499|       |#if defined(JSON_HEDLEY_CONST_CAST)
 1500|       |    #undef JSON_HEDLEY_CONST_CAST
 1501|       |#endif
 1502|       |#if defined(__cplusplus)
 1503|       |#  define JSON_HEDLEY_CONST_CAST(T, expr) (const_cast<T>(expr))
 1504|       |#elif \
 1505|       |  JSON_HEDLEY_HAS_WARNING("-Wcast-qual") || \
 1506|       |  JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0) || \
 1507|       |  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
 1508|       |#  define JSON_HEDLEY_CONST_CAST(T, expr) (__extension__ ({ \
 1509|       |        JSON_HEDLEY_DIAGNOSTIC_PUSH \
 1510|       |        JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL \
 1511|       |        ((T) (expr)); \
 1512|       |        JSON_HEDLEY_DIAGNOSTIC_POP \
 1513|       |    }))
 1514|       |#else
 1515|       |#  define JSON_HEDLEY_CONST_CAST(T, expr) ((T) (expr))
 1516|       |#endif
 1517|       |
 1518|       |#if defined(JSON_HEDLEY_REINTERPRET_CAST)
 1519|       |    #undef JSON_HEDLEY_REINTERPRET_CAST
 1520|       |#endif
 1521|       |#if defined(__cplusplus)
 1522|       |    #define JSON_HEDLEY_REINTERPRET_CAST(T, expr) (reinterpret_cast<T>(expr))
 1523|       |#else
 1524|       |    #define JSON_HEDLEY_REINTERPRET_CAST(T, expr) (*((T*) &(expr)))
 1525|       |#endif
 1526|       |
 1527|       |#if defined(JSON_HEDLEY_STATIC_CAST)
 1528|       |    #undef JSON_HEDLEY_STATIC_CAST
 1529|       |#endif
 1530|       |#if defined(__cplusplus)
 1531|       |    #define JSON_HEDLEY_STATIC_CAST(T, expr) (static_cast<T>(expr))
 1532|       |#else
 1533|       |    #define JSON_HEDLEY_STATIC_CAST(T, expr) ((T) (expr))
 1534|       |#endif
 1535|       |
 1536|       |#if defined(JSON_HEDLEY_CPP_CAST)
 1537|       |    #undef JSON_HEDLEY_CPP_CAST
 1538|       |#endif
 1539|       |#if defined(__cplusplus)
 1540|       |    #define JSON_HEDLEY_CPP_CAST(T, expr) static_cast<T>(expr)
 1541|       |#else
 1542|       |    #define JSON_HEDLEY_CPP_CAST(T, expr) (expr)
 1543|       |#endif
 1544|       |
 1545|       |#if defined(JSON_HEDLEY_NULL)
 1546|       |    #undef JSON_HEDLEY_NULL
 1547|       |#endif
 1548|       |#if defined(__cplusplus)
 1549|       |    #if __cplusplus >= 201103L
 1550|       |        #define JSON_HEDLEY_NULL JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(nullptr)
 1551|       |    #elif defined(NULL)
 1552|       |        #define JSON_HEDLEY_NULL NULL
 1553|       |    #else
 1554|       |        #define JSON_HEDLEY_NULL JSON_HEDLEY_STATIC_CAST(void*, 0)
 1555|       |    #endif
 1556|       |#elif defined(NULL)
 1557|       |    #define JSON_HEDLEY_NULL NULL
 1558|       |#else
 1559|       |    #define JSON_HEDLEY_NULL ((void*) 0)
 1560|       |#endif
 1561|       |
 1562|       |#if defined(JSON_HEDLEY_MESSAGE)
 1563|       |    #undef JSON_HEDLEY_MESSAGE
 1564|       |#endif
 1565|       |#if JSON_HEDLEY_HAS_WARNING("-Wunknown-pragmas")
 1566|       |#  define JSON_HEDLEY_MESSAGE(msg) \
 1567|       |    JSON_HEDLEY_DIAGNOSTIC_PUSH \
 1568|       |    JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS \
 1569|       |    JSON_HEDLEY_PRAGMA(message msg) \
 1570|       |    JSON_HEDLEY_DIAGNOSTIC_POP
 1571|       |#elif \
 1572|       |  JSON_HEDLEY_GCC_VERSION_CHECK(4,4,0) || \
 1573|       |  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
 1574|       |#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message msg)
 1575|       |#elif JSON_HEDLEY_CRAY_VERSION_CHECK(5,0,0)
 1576|       |#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(_CRI message msg)
 1577|       |#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
 1578|       |#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message(msg))
 1579|       |#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,0,0)
 1580|       |#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message(msg))
 1581|       |#else
 1582|       |#  define JSON_HEDLEY_MESSAGE(msg)
 1583|       |#endif
 1584|       |
 1585|       |#if defined(JSON_HEDLEY_WARNING)
 1586|       |    #undef JSON_HEDLEY_WARNING
 1587|       |#endif
 1588|       |#if JSON_HEDLEY_HAS_WARNING("-Wunknown-pragmas")
 1589|       |#  define JSON_HEDLEY_WARNING(msg) \
 1590|       |    JSON_HEDLEY_DIAGNOSTIC_PUSH \
 1591|       |    JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS \
 1592|       |    JSON_HEDLEY_PRAGMA(clang warning msg) \
 1593|       |    JSON_HEDLEY_DIAGNOSTIC_POP
 1594|       |#elif \
 1595|       |  JSON_HEDLEY_GCC_VERSION_CHECK(4,8,0) || \
 1596|       |  JSON_HEDLEY_PGI_VERSION_CHECK(18,4,0)
 1597|       |#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_PRAGMA(GCC warning msg)
 1598|       |#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
 1599|       |#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_PRAGMA(message(msg))
 1600|       |#else
 1601|       |#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_MESSAGE(msg)
 1602|       |#endif
 1603|       |
 1604|       |#if defined(JSON_HEDLEY_REQUIRE)
 1605|       |    #undef JSON_HEDLEY_REQUIRE
 1606|       |#endif
 1607|       |#if defined(JSON_HEDLEY_REQUIRE_MSG)
 1608|       |    #undef JSON_HEDLEY_REQUIRE_MSG
 1609|       |#endif
 1610|       |#if JSON_HEDLEY_HAS_ATTRIBUTE(diagnose_if)
 1611|       |#  if JSON_HEDLEY_HAS_WARNING("-Wgcc-compat")
 1612|       |#    define JSON_HEDLEY_REQUIRE(expr) \
 1613|       |    JSON_HEDLEY_DIAGNOSTIC_PUSH \
 1614|       |    _Pragma("clang diagnostic ignored \"-Wgcc-compat\"") \
 1615|       |    __attribute__((diagnose_if(!(expr), #expr, "error"))) \
 1616|       |    JSON_HEDLEY_DIAGNOSTIC_POP
 1617|       |#    define JSON_HEDLEY_REQUIRE_MSG(expr,msg) \
 1618|       |    JSON_HEDLEY_DIAGNOSTIC_PUSH \
 1619|       |    _Pragma("clang diagnostic ignored \"-Wgcc-compat\"") \
 1620|       |    __attribute__((diagnose_if(!(expr), msg, "error"))) \
 1621|       |    JSON_HEDLEY_DIAGNOSTIC_POP
 1622|       |#  else
 1623|       |#    define JSON_HEDLEY_REQUIRE(expr) __attribute__((diagnose_if(!(expr), #expr, "error")))
 1624|       |#    define JSON_HEDLEY_REQUIRE_MSG(expr,msg) __attribute__((diagnose_if(!(expr), msg, "error")))
 1625|       |#  endif
 1626|       |#else
 1627|       |#  define JSON_HEDLEY_REQUIRE(expr)
 1628|       |#  define JSON_HEDLEY_REQUIRE_MSG(expr,msg)
 1629|       |#endif
 1630|       |
 1631|       |#if defined(JSON_HEDLEY_FLAGS)
 1632|       |    #undef JSON_HEDLEY_FLAGS
 1633|       |#endif
 1634|       |#if JSON_HEDLEY_HAS_ATTRIBUTE(flag_enum)
 1635|       |    #define JSON_HEDLEY_FLAGS __attribute__((__flag_enum__))
 1636|       |#endif
 1637|       |
 1638|       |#if defined(JSON_HEDLEY_FLAGS_CAST)
 1639|       |    #undef JSON_HEDLEY_FLAGS_CAST
 1640|       |#endif
 1641|       |#if JSON_HEDLEY_INTEL_VERSION_CHECK(19,0,0)
 1642|       |#  define JSON_HEDLEY_FLAGS_CAST(T, expr) (__extension__ ({ \
 1643|       |        JSON_HEDLEY_DIAGNOSTIC_PUSH \
 1644|       |        _Pragma("warning(disable:188)") \
 1645|       |        ((T) (expr)); \
 1646|       |        JSON_HEDLEY_DIAGNOSTIC_POP \
 1647|       |    }))
 1648|       |#else
 1649|       |#  define JSON_HEDLEY_FLAGS_CAST(T, expr) JSON_HEDLEY_STATIC_CAST(T, expr)
 1650|       |#endif
 1651|       |
 1652|       |#if defined(JSON_HEDLEY_EMPTY_BASES)
 1653|       |    #undef JSON_HEDLEY_EMPTY_BASES
 1654|       |#endif
 1655|       |#if JSON_HEDLEY_MSVC_VERSION_CHECK(19,0,23918) && !JSON_HEDLEY_MSVC_VERSION_CHECK(20,0,0)
 1656|       |    #define JSON_HEDLEY_EMPTY_BASES __declspec(empty_bases)
 1657|       |#else
 1658|       |    #define JSON_HEDLEY_EMPTY_BASES
 1659|       |#endif
 1660|       |
 1661|       |/* Remaining macros are deprecated. */
 1662|       |
 1663|       |#if defined(JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK)
 1664|       |    #undef JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK
 1665|       |#endif
 1666|       |#if defined(__clang__)
 1667|       |    #define JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK(major,minor,patch) (0)
 1668|       |#else
 1669|       |    #define JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK(major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
 1670|       |#endif
 1671|       |
 1672|       |#if defined(JSON_HEDLEY_CLANG_HAS_ATTRIBUTE)
 1673|       |    #undef JSON_HEDLEY_CLANG_HAS_ATTRIBUTE
 1674|       |#endif
 1675|       |#define JSON_HEDLEY_CLANG_HAS_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_ATTRIBUTE(attribute)
 1676|       |
 1677|       |#if defined(JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE)
 1678|       |    #undef JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE
 1679|       |#endif
 1680|       |#define JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute)
 1681|       |
 1682|       |#if defined(JSON_HEDLEY_CLANG_HAS_BUILTIN)
 1683|       |    #undef JSON_HEDLEY_CLANG_HAS_BUILTIN
 1684|       |#endif
 1685|       |#define JSON_HEDLEY_CLANG_HAS_BUILTIN(builtin) JSON_HEDLEY_HAS_BUILTIN(builtin)
 1686|       |
 1687|       |#if defined(JSON_HEDLEY_CLANG_HAS_FEATURE)
 1688|       |    #undef JSON_HEDLEY_CLANG_HAS_FEATURE
 1689|       |#endif
 1690|       |#define JSON_HEDLEY_CLANG_HAS_FEATURE(feature) JSON_HEDLEY_HAS_FEATURE(feature)
 1691|       |
 1692|       |#if defined(JSON_HEDLEY_CLANG_HAS_EXTENSION)
 1693|       |    #undef JSON_HEDLEY_CLANG_HAS_EXTENSION
 1694|       |#endif
 1695|       |#define JSON_HEDLEY_CLANG_HAS_EXTENSION(extension) JSON_HEDLEY_HAS_EXTENSION(extension)
 1696|       |
 1697|       |#if defined(JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE)
 1698|       |    #undef JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE
 1699|       |#endif
 1700|       |#define JSON_HEDLEY_CLANG_HAS_DECLSPEC_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute)
 1701|       |
 1702|       |#if defined(JSON_HEDLEY_CLANG_HAS_WARNING)
 1703|       |    #undef JSON_HEDLEY_CLANG_HAS_WARNING
 1704|       |#endif
 1705|       |#define JSON_HEDLEY_CLANG_HAS_WARNING(warning) JSON_HEDLEY_HAS_WARNING(warning)
 1706|       |
 1707|       |#endif /* !defined(JSON_HEDLEY_VERSION) || (JSON_HEDLEY_VERSION < X) */
 1708|       |
 1709|       |
 1710|       |// This file contains all internal macro definitions
 1711|       |// You MUST include macro_unscope.hpp at the end of json.hpp to undef all of them
 1712|       |
 1713|       |// exclude unsupported compilers
 1714|       |#if !defined(JSON_SKIP_UNSUPPORTED_COMPILER_CHECK)
 1715|       |    #if defined(__clang__)
 1716|       |        #if (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__) < 30400
 1717|       |            #error "unsupported Clang version - see https://github.com/nlohmann/json#supported-compilers"
 1718|       |        #endif
 1719|       |    #elif defined(__GNUC__) && !(defined(__ICC) || defined(__INTEL_COMPILER))
 1720|       |        #if (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) < 40800
 1721|       |            #error "unsupported GCC version - see https://github.com/nlohmann/json#supported-compilers"
 1722|       |        #endif
 1723|       |    #endif
 1724|       |#endif
 1725|       |
 1726|       |// C++ language standard detection
 1727|       |#if (defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_HAS_CXX17) && _HAS_CXX17 == 1) // fix for issue #464
 1728|       |    #define JSON_HAS_CPP_17
 1729|       |    #define JSON_HAS_CPP_14
 1730|       |#elif (defined(__cplusplus) && __cplusplus >= 201402L) || (defined(_HAS_CXX14) && _HAS_CXX14 == 1)
 1731|       |    #define JSON_HAS_CPP_14
 1732|       |#endif
 1733|       |
 1734|       |// disable float-equal warnings on GCC/clang
 1735|       |#if defined(__clang__) || defined(__GNUC__) || defined(__GNUG__)
 1736|       |    #pragma GCC diagnostic push
 1737|       |    #pragma GCC diagnostic ignored "-Wfloat-equal"
 1738|       |#endif
 1739|       |
 1740|       |// disable documentation warnings on clang
 1741|       |#if defined(__clang__)
 1742|       |    #pragma GCC diagnostic push
 1743|       |    #pragma GCC diagnostic ignored "-Wdocumentation"
 1744|       |#endif
 1745|       |
 1746|       |// allow to disable exceptions
 1747|       |#if (defined(__cpp_exceptions) || defined(__EXCEPTIONS) || defined(_CPPUNWIND)) && !defined(JSON_NOEXCEPTION)
 1748|     30|    #define JSON_THROW(exception) throw exception
 1749|  6.72k|    #define JSON_TRY try
 1750|       |    #define JSON_CATCH(exception) catch(exception)
 1751|       |    #define JSON_INTERNAL_CATCH(exception) catch(exception)
 1752|       |#else
 1753|       |    #include <cstdlib>
 1754|       |    #define JSON_THROW(exception) std::abort()
 1755|       |    #define JSON_TRY if(true)
 1756|       |    #define JSON_CATCH(exception) if(false)
 1757|       |    #define JSON_INTERNAL_CATCH(exception) if(false)
 1758|       |#endif
 1759|       |
 1760|       |// override exception macros
 1761|       |#if defined(JSON_THROW_USER)
 1762|       |    #undef JSON_THROW
 1763|       |    #define JSON_THROW JSON_THROW_USER
 1764|       |#endif
 1765|       |#if defined(JSON_TRY_USER)
 1766|       |    #undef JSON_TRY
 1767|       |    #define JSON_TRY JSON_TRY_USER
 1768|       |#endif
 1769|       |#if defined(JSON_CATCH_USER)
 1770|       |    #undef JSON_CATCH
 1771|       |    #define JSON_CATCH JSON_CATCH_USER
 1772|       |    #undef JSON_INTERNAL_CATCH
 1773|       |    #define JSON_INTERNAL_CATCH JSON_CATCH_USER
 1774|       |#endif
 1775|       |#if defined(JSON_INTERNAL_CATCH_USER)
 1776|       |    #undef JSON_INTERNAL_CATCH
 1777|       |    #define JSON_INTERNAL_CATCH JSON_INTERNAL_CATCH_USER
 1778|       |#endif
 1779|       |
 1780|       |/*!
 1781|       |@brief macro to briefly define a mapping between an enum and JSON
 1782|       |@def NLOHMANN_JSON_SERIALIZE_ENUM
 1783|       |@since version 3.4.0
 1784|       |*/
 1785|       |#define NLOHMANN_JSON_SERIALIZE_ENUM(ENUM_TYPE, ...)                                            \
 1786|       |    template<typename BasicJsonType>                                                            \
 1787|       |    inline void to_json(BasicJsonType& j, const ENUM_TYPE& e)                                   \
 1788|       |    {                                                                                           \
 1789|       |        static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE " must be an enum!");          \
 1790|       |        static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__;                     \
 1791|       |        auto it = std::find_if(std::begin(m), std::end(m),                                      \
 1792|       |                               [e](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool  \
 1793|       |        {                                                                                       \
 1794|       |            return ej_pair.first == e;                                                          \
 1795|       |        });                                                                                     \
 1796|       |        j = ((it != std::end(m)) ? it : std::begin(m))->second;                                 \
 1797|       |    }                                                                                           \
 1798|       |    template<typename BasicJsonType>                                                            \
 1799|       |    inline void from_json(const BasicJsonType& j, ENUM_TYPE& e)                                 \
 1800|       |    {                                                                                           \
 1801|       |        static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE " must be an enum!");          \
 1802|       |        static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__;                     \
 1803|       |        auto it = std::find_if(std::begin(m), std::end(m),                                      \
 1804|       |                               [&j](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool \
 1805|       |        {                                                                                       \
 1806|       |            return ej_pair.second == j;                                                         \
 1807|       |        });                                                                                     \
 1808|       |        e = ((it != std::end(m)) ? it : std::begin(m))->first;                                  \
 1809|       |    }
 1810|       |
 1811|       |// Ugly macros to avoid uglier copy-paste when specializing basic_json. They
 1812|       |// may be removed in the future once the class is split.
 1813|       |
 1814|       |#define NLOHMANN_BASIC_JSON_TPL_DECLARATION                                \
 1815|       |    template<template<typename, typename, typename...> class ObjectType,   \
 1816|       |             template<typename, typename...> class ArrayType,              \
 1817|       |             class StringType, class BooleanType, class NumberIntegerType, \
 1818|       |             class NumberUnsignedType, class NumberFloatType,              \
 1819|       |             template<typename> class AllocatorType,                       \
 1820|       |             template<typename, typename = void> class JSONSerializer>
 1821|       |
 1822|       |#define NLOHMANN_BASIC_JSON_TPL                                            \
 1823|       |    basic_json<ObjectType, ArrayType, StringType, BooleanType,             \
 1824|       |    NumberIntegerType, NumberUnsignedType, NumberFloatType,                \
 1825|       |    AllocatorType, JSONSerializer>
 1826|       |
 1827|       |
 1828|       |namespace nlohmann
 1829|       |{
 1830|       |namespace detail
 1831|       |{
 1832|       |////////////////
 1833|       |// exceptions //
 1834|       |////////////////
 1835|       |
 1836|       |/*!
 1837|       |@brief general exception of the @ref basic_json class
 1838|       |
 1839|       |This class is an extension of `std::exception` objects with a member @a id for
 1840|       |exception ids. It is used as the base class for all exceptions thrown by the
 1841|       |@ref basic_json class. This class can hence be used as "wildcard" to catch
 1842|       |exceptions.
 1843|       |
 1844|       |Subclasses:
 1845|       |- @ref parse_error for exceptions indicating a parse error
 1846|       |- @ref invalid_iterator for exceptions indicating errors with iterators
 1847|       |- @ref type_error for exceptions indicating executing a member function with
 1848|       |                  a wrong type
 1849|       |- @ref out_of_range for exceptions indicating access out of the defined range
 1850|       |- @ref other_error for exceptions indicating other library errors
 1851|       |
 1852|       |@internal
 1853|       |@note To have nothrow-copy-constructible exceptions, we internally use
 1854|       |      `std::runtime_error` which can cope with arbitrary-length error messages.
 1855|       |      Intermediate strings are built with static functions and then passed to
 1856|       |      the actual constructor.
 1857|       |@endinternal
 1858|       |
 1859|       |@liveexample{The following code shows how arbitrary library exceptions can be
 1860|       |caught.,exception}
 1861|       |
 1862|       |@since version 3.0.0
 1863|       |*/
 1864|       |class exception : public std::exception
 1865|       |{
 1866|       |  public:
 1867|       |    /// returns the explanatory string
 1868|       |    JSON_HEDLEY_RETURNS_NON_NULL
 1869|       |    const char* what() const noexcept override
 1870|      1|    {
 1871|      1|        return m.what();
 1872|      1|    }
 1873|       |
 1874|       |    /// the id of the exception
 1875|       |    const int id;
 1876|       |
 1877|       |  protected:
 1878|       |    JSON_HEDLEY_NON_NULL(3)
 1879|     30|    exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}
 1880|       |
 1881|       |    static std::string name(const std::string& ename, int id_)
 1882|     30|    {
 1883|     30|        return "[json.exception." + ename + "." + std::to_string(id_) + "] ";
 1884|     30|    }
 1885|       |
 1886|       |  private:
 1887|       |    /// an exception object as storage for error messages
 1888|       |    std::runtime_error m;
 1889|       |};
 1890|       |
 1891|       |/*!
 1892|       |@brief exception indicating a parse error
 1893|       |
 1894|       |This exception is thrown by the library when a parse error occurs. Parse errors
 1895|       |can occur during the deserialization of JSON text, CBOR, MessagePack, as well
 1896|       |as when using JSON Patch.
 1897|       |
 1898|       |Member @a byte holds the byte index of the last read character in the input
 1899|       |file.
 1900|       |
 1901|       |Exceptions have ids 1xx.
 1902|       |
 1903|       |name / id                      | example message | description
 1904|       |------------------------------ | --------------- | -------------------------
 1905|       |json.exception.parse_error.101 | parse error at 2: unexpected end of input; expected string literal | This error indicates a syntax error while deserializing a JSON text. The error message describes that an unexpected token (character) was encountered, and the member @a byte indicates the error position.
 1906|       |json.exception.parse_error.102 | parse error at 14: missing or wrong low surrogate | JSON uses the `\uxxxx` format to describe Unicode characters. Code points above above 0xFFFF are split into two `\uxxxx` entries ("surrogate pairs"). This error indicates that the surrogate pair is incomplete or contains an invalid code point.
 1907|       |json.exception.parse_error.103 | parse error: code points above 0x10FFFF are invalid | Unicode supports code points up to 0x10FFFF. Code points above 0x10FFFF are invalid.
 1908|       |json.exception.parse_error.104 | parse error: JSON patch must be an array of objects | [RFC 6902](https://tools.ietf.org/html/rfc6902) requires a JSON Patch document to be a JSON document that represents an array of objects.
 1909|       |json.exception.parse_error.105 | parse error: operation must have string member 'op' | An operation of a JSON Patch document must contain exactly one "op" member, whose value indicates the operation to perform. Its value must be one of "add", "remove", "replace", "move", "copy", or "test"; other values are errors.
 1910|       |json.exception.parse_error.106 | parse error: array index '01' must not begin with '0' | An array index in a JSON Pointer ([RFC 6901](https://tools.ietf.org/html/rfc6901)) may be `0` or any number without a leading `0`.
 1911|       |json.exception.parse_error.107 | parse error: JSON pointer must be empty or begin with '/' - was: 'foo' | A JSON Pointer must be a Unicode string containing a sequence of zero or more reference tokens, each prefixed by a `/` character.
 1912|       |json.exception.parse_error.108 | parse error: escape character '~' must be followed with '0' or '1' | In a JSON Pointer, only `~0` and `~1` are valid escape sequences.
 1913|       |json.exception.parse_error.109 | parse error: array index 'one' is not a number | A JSON Pointer array index must be a number.
 1914|       |json.exception.parse_error.110 | parse error at 1: cannot read 2 bytes from vector | When parsing CBOR or MessagePack, the byte vector ends before the complete value has been read.
 1915|       |json.exception.parse_error.112 | parse error at 1: error reading CBOR; last byte: 0xF8 | Not all types of CBOR or MessagePack are supported. This exception occurs if an unsupported byte was read.
 1916|       |json.exception.parse_error.113 | parse error at 2: expected a CBOR string; last byte: 0x98 | While parsing a map key, a value that is not a string has been read.
 1917|       |json.exception.parse_error.114 | parse error: Unsupported BSON record type 0x0F | The parsing of the corresponding BSON record type is not implemented (yet).
 1918|       |
 1919|       |@note For an input with n bytes, 1 is the index of the first character and n+1
 1920|       |      is the index of the terminating null byte or the end of file. This also
 1921|       |      holds true when reading a byte vector (CBOR or MessagePack).
 1922|       |
 1923|       |@liveexample{The following code shows how a `parse_error` exception can be
 1924|       |caught.,parse_error}
 1925|       |
 1926|       |@sa - @ref exception for the base class of the library exceptions
 1927|       |@sa - @ref invalid_iterator for exceptions indicating errors with iterators
 1928|       |@sa - @ref type_error for exceptions indicating executing a member function with
 1929|       |                    a wrong type
 1930|       |@sa - @ref out_of_range for exceptions indicating access out of the defined range
 1931|       |@sa - @ref other_error for exceptions indicating other library errors
 1932|       |
 1933|       |@since version 3.0.0
 1934|       |*/
 1935|       |class parse_error : public exception
 1936|       |{
 1937|       |  public:
 1938|       |    /*!
 1939|       |    @brief create a parse error exception
 1940|       |    @param[in] id_       the id of the exception
 1941|       |    @param[in] pos       the position where the error occurred (or with
 1942|       |                         chars_read_total=0 if the position cannot be
 1943|       |                         determined)
 1944|       |    @param[in] what_arg  the explanatory string
 1945|       |    @return parse_error object
 1946|       |    */
 1947|       |    static parse_error create(int id_, const position_t& pos, const std::string& what_arg)
 1948|     28|    {
 1949|     28|        std::string w = exception::name("parse_error", id_) + "parse error" +
 1950|     28|                        position_string(pos) + ": " + what_arg;
 1951|     28|        return parse_error(id_, pos.chars_read_total, w.c_str());
 1952|     28|    }
 1953|       |
 1954|       |    static parse_error create(int id_, std::size_t byte_, const std::string& what_arg)
 1955|      0|    {
 1956|      0|        std::string w = exception::name("parse_error", id_) + "parse error" +
 1957|      0|                        (byte_ != 0 ? (" at byte " + std::to_string(byte_)) : "") +
 1958|      0|                        ": " + what_arg;
 1959|      0|        return parse_error(id_, byte_, w.c_str());
 1960|      0|    }
 1961|       |
 1962|       |    /*!
 1963|       |    @brief byte index of the parse error
 1964|       |
 1965|       |    The byte index of the last read character in the input file.
 1966|       |
 1967|       |    @note For an input with n bytes, 1 is the index of the first character and
 1968|       |          n+1 is the index of the terminating null byte or the end of file.
 1969|       |          This also holds true when reading a byte vector (CBOR or MessagePack).
 1970|       |    */
 1971|       |    const std::size_t byte;
 1972|       |
 1973|       |  private:
 1974|       |    parse_error(int id_, std::size_t byte_, const char* what_arg)
 1975|     28|        : exception(id_, what_arg), byte(byte_) {}
 1976|       |
 1977|       |    static std::string position_string(const position_t& pos)
 1978|     28|    {
 1979|     28|        return " at line " + std::to_string(pos.lines_read + 1) +
 1980|     28|               ", column " + std::to_string(pos.chars_read_current_line);
 1981|     28|    }
 1982|       |};
 1983|       |
 1984|       |/*!
 1985|       |@brief exception indicating errors with iterators
 1986|       |
 1987|       |This exception is thrown if iterators passed to a library function do not match
 1988|       |the expected semantics.
 1989|       |
 1990|       |Exceptions have ids 2xx.
 1991|       |
 1992|       |name / id                           | example message | description
 1993|       |----------------------------------- | --------------- | -------------------------
 1994|       |json.exception.invalid_iterator.201 | iterators are not compatible | The iterators passed to constructor @ref basic_json(InputIT first, InputIT last) are not compatible, meaning they do not belong to the same container. Therefore, the range (@a first, @a last) is invalid.
 1995|       |json.exception.invalid_iterator.202 | iterator does not fit current value | In an erase or insert function, the passed iterator @a pos does not belong to the JSON value for which the function was called. It hence does not define a valid position for the deletion/insertion.
 1996|       |json.exception.invalid_iterator.203 | iterators do not fit current value | Either iterator passed to function @ref erase(IteratorType first, IteratorType last) does not belong to the JSON value from which values shall be erased. It hence does not define a valid range to delete values from.
 1997|       |json.exception.invalid_iterator.204 | iterators out of range | When an iterator range for a primitive type (number, boolean, or string) is passed to a constructor or an erase function, this range has to be exactly (@ref begin(), @ref end()), because this is the only way the single stored value is expressed. All other ranges are invalid.
 1998|       |json.exception.invalid_iterator.205 | iterator out of range | When an iterator for a primitive type (number, boolean, or string) is passed to an erase function, the iterator has to be the @ref begin() iterator, because it is the only way to address the stored value. All other iterators are invalid.
 1999|       |json.exception.invalid_iterator.206 | cannot construct with iterators from null | The iterators passed to constructor @ref basic_json(InputIT first, InputIT last) belong to a JSON null value and hence to not define a valid range.
 2000|       |json.exception.invalid_iterator.207 | cannot use key() for non-object iterators | The key() member function can only be used on iterators belonging to a JSON object, because other types do not have a concept of a key.
 2001|       |json.exception.invalid_iterator.208 | cannot use operator[] for object iterators | The operator[] to specify a concrete offset cannot be used on iterators belonging to a JSON object, because JSON objects are unordered.
 2002|       |json.exception.invalid_iterator.209 | cannot use offsets with object iterators | The offset operators (+, -, +=, -=) cannot be used on iterators belonging to a JSON object, because JSON objects are unordered.
 2003|       |json.exception.invalid_iterator.210 | iterators do not fit | The iterator range passed to the insert function are not compatible, meaning they do not belong to the same container. Therefore, the range (@a first, @a last) is invalid.
 2004|       |json.exception.invalid_iterator.211 | passed iterators may not belong to container | The iterator range passed to the insert function must not be a subrange of the container to insert to.
 2005|       |json.exception.invalid_iterator.212 | cannot compare iterators of different containers | When two iterators are compared, they must belong to the same container.
 2006|       |json.exception.invalid_iterator.213 | cannot compare order of object iterators | The order of object iterators cannot be compared, because JSON objects are unordered.
 2007|       |json.exception.invalid_iterator.214 | cannot get value | Cannot get value for iterator: Either the iterator belongs to a null value or it is an iterator to a primitive type (number, boolean, or string), but the iterator is different to @ref begin().
 2008|       |
 2009|       |@liveexample{The following code shows how an `invalid_iterator` exception can be
 2010|       |caught.,invalid_iterator}
 2011|       |
 2012|       |@sa - @ref exception for the base class of the library exceptions
 2013|       |@sa - @ref parse_error for exceptions indicating a parse error
 2014|       |@sa - @ref type_error for exceptions indicating executing a member function with
 2015|       |                    a wrong type
 2016|       |@sa - @ref out_of_range for exceptions indicating access out of the defined range
 2017|       |@sa - @ref other_error for exceptions indicating other library errors
 2018|       |
 2019|       |@since version 3.0.0
 2020|       |*/
 2021|       |class invalid_iterator : public exception
 2022|       |{
 2023|       |  public:
 2024|       |    static invalid_iterator create(int id_, const std::string& what_arg)
 2025|      0|    {
 2026|      0|        std::string w = exception::name("invalid_iterator", id_) + what_arg;
 2027|      0|        return invalid_iterator(id_, w.c_str());
 2028|      0|    }
 2029|       |
 2030|       |  private:
 2031|       |    JSON_HEDLEY_NON_NULL(3)
 2032|       |    invalid_iterator(int id_, const char* what_arg)
 2033|      0|        : exception(id_, what_arg) {}
 2034|       |};
 2035|       |
 2036|       |/*!
 2037|       |@brief exception indicating executing a member function with a wrong type
 2038|       |
 2039|       |This exception is thrown in case of a type error; that is, a library function is
 2040|       |executed on a JSON value whose type does not match the expected semantics.
 2041|       |
 2042|       |Exceptions have ids 3xx.
 2043|       |
 2044|       |name / id                     | example message | description
 2045|       |----------------------------- | --------------- | -------------------------
 2046|       |json.exception.type_error.301 | cannot create object from initializer list | To create an object from an initializer list, the initializer list must consist only of a list of pairs whose first element is a string. When this constraint is violated, an array is created instead.
 2047|       |json.exception.type_error.302 | type must be object, but is array | During implicit or explicit value conversion, the JSON type must be compatible to the target type. For instance, a JSON string can only be converted into string types, but not into numbers or boolean types.
 2048|       |json.exception.type_error.303 | incompatible ReferenceType for get_ref, actual type is object | To retrieve a reference to a value stored in a @ref basic_json object with @ref get_ref, the type of the reference must match the value type. For instance, for a JSON array, the @a ReferenceType must be @ref array_t &.
 2049|       |json.exception.type_error.304 | cannot use at() with string | The @ref at() member functions can only be executed for certain JSON types.
 2050|       |json.exception.type_error.305 | cannot use operator[] with string | The @ref operator[] member functions can only be executed for certain JSON types.
 2051|       |json.exception.type_error.306 | cannot use value() with string | The @ref value() member functions can only be executed for certain JSON types.
 2052|       |json.exception.type_error.307 | cannot use erase() with string | The @ref erase() member functions can only be executed for certain JSON types.
 2053|       |json.exception.type_error.308 | cannot use push_back() with string | The @ref push_back() and @ref operator+= member functions can only be executed for certain JSON types.
 2054|       |json.exception.type_error.309 | cannot use insert() with | The @ref insert() member functions can only be executed for certain JSON types.
 2055|       |json.exception.type_error.310 | cannot use swap() with number | The @ref swap() member functions can only be executed for certain JSON types.
 2056|       |json.exception.type_error.311 | cannot use emplace_back() with string | The @ref emplace_back() member function can only be executed for certain JSON types.
 2057|       |json.exception.type_error.312 | cannot use update() with string | The @ref update() member functions can only be executed for certain JSON types.
 2058|       |json.exception.type_error.313 | invalid value to unflatten | The @ref unflatten function converts an object whose keys are JSON Pointers back into an arbitrary nested JSON value. The JSON Pointers must not overlap, because then the resulting value would not be well defined.
 2059|       |json.exception.type_error.314 | only objects can be unflattened | The @ref unflatten function only works for an object whose keys are JSON Pointers.
 2060|       |json.exception.type_error.315 | values in object must be primitive | The @ref unflatten function only works for an object whose keys are JSON Pointers and whose values are primitive.
 2061|       |json.exception.type_error.316 | invalid UTF-8 byte at index 10: 0x7E | The @ref dump function only works with UTF-8 encoded strings; that is, if you assign a `std::string` to a JSON value, make sure it is UTF-8 encoded. |
 2062|       |json.exception.type_error.317 | JSON value cannot be serialized to requested format | The dynamic type of the object cannot be represented in the requested serialization format (e.g. a raw `true` or `null` JSON object cannot be serialized to BSON) |
 2063|       |
 2064|       |@liveexample{The following code shows how a `type_error` exception can be
 2065|       |caught.,type_error}
 2066|       |
 2067|       |@sa - @ref exception for the base class of the library exceptions
 2068|       |@sa - @ref parse_error for exceptions indicating a parse error
 2069|       |@sa - @ref invalid_iterator for exceptions indicating errors with iterators
 2070|       |@sa - @ref out_of_range for exceptions indicating access out of the defined range
 2071|       |@sa - @ref other_error for exceptions indicating other library errors
 2072|       |
 2073|       |@since version 3.0.0
 2074|       |*/
 2075|       |class type_error : public exception
 2076|       |{
 2077|       |  public:
 2078|       |    static type_error create(int id_, const std::string& what_arg)
 2079|      1|    {
 2080|      1|        std::string w = exception::name("type_error", id_) + what_arg;
 2081|      1|        return type_error(id_, w.c_str());
 2082|      1|    }
 2083|       |
 2084|       |  private:
 2085|       |    JSON_HEDLEY_NON_NULL(3)
 2086|      1|    type_error(int id_, const char* what_arg) : exception(id_, what_arg) {}
 2087|       |};
 2088|       |
 2089|       |/*!
 2090|       |@brief exception indicating access out of the defined range
 2091|       |
 2092|       |This exception is thrown in case a library function is called on an input
 2093|       |parameter that exceeds the expected range, for instance in case of array
 2094|       |indices or nonexisting object keys.
 2095|       |
 2096|       |Exceptions have ids 4xx.
 2097|       |
 2098|       |name / id                       | example message | description
 2099|       |------------------------------- | --------------- | -------------------------
 2100|       |json.exception.out_of_range.401 | array index 3 is out of range | The provided array index @a i is larger than @a size-1.
 2101|       |json.exception.out_of_range.402 | array index '-' (3) is out of range | The special array index `-` in a JSON Pointer never describes a valid element of the array, but the index past the end. That is, it can only be used to add elements at this position, but not to read it.
 2102|       |json.exception.out_of_range.403 | key 'foo' not found | The provided key was not found in the JSON object.
 2103|       |json.exception.out_of_range.404 | unresolved reference token 'foo' | A reference token in a JSON Pointer could not be resolved.
 2104|       |json.exception.out_of_range.405 | JSON pointer has no parent | The JSON Patch operations 'remove' and 'add' can not be applied to the root element of the JSON value.
 2105|       |json.exception.out_of_range.406 | number overflow parsing '10E1000' | A parsed number could not be stored as without changing it to NaN or INF.
 2106|       |json.exception.out_of_range.407 | number overflow serializing '9223372036854775808' | UBJSON and BSON only support integer numbers up to 9223372036854775807. |
 2107|       |json.exception.out_of_range.408 | excessive array size: 8658170730974374167 | The size (following `#`) of an UBJSON array or object exceeds the maximal capacity. |
 2108|       |json.exception.out_of_range.409 | BSON key cannot contain code point U+0000 (at byte 2) | Key identifiers to be serialized to BSON cannot contain code point U+0000, since the key is stored as zero-terminated c-string |
 2109|       |
 2110|       |@liveexample{The following code shows how an `out_of_range` exception can be
 2111|       |caught.,out_of_range}
 2112|       |
 2113|       |@sa - @ref exception for the base class of the library exceptions
 2114|       |@sa - @ref parse_error for exceptions indicating a parse error
 2115|       |@sa - @ref invalid_iterator for exceptions indicating errors with iterators
 2116|       |@sa - @ref type_error for exceptions indicating executing a member function with
 2117|       |                    a wrong type
 2118|       |@sa - @ref other_error for exceptions indicating other library errors
 2119|       |
 2120|       |@since version 3.0.0
 2121|       |*/
 2122|       |class out_of_range : public exception
 2123|       |{
 2124|       |  public:
 2125|       |    static out_of_range create(int id_, const std::string& what_arg)
 2126|      1|    {
 2127|      1|        std::string w = exception::name("out_of_range", id_) + what_arg;
 2128|      1|        return out_of_range(id_, w.c_str());
 2129|      1|    }
 2130|       |
 2131|       |  private:
 2132|       |    JSON_HEDLEY_NON_NULL(3)
 2133|      1|    out_of_range(int id_, const char* what_arg) : exception(id_, what_arg) {}
 2134|       |};
 2135|       |
 2136|       |/*!
 2137|       |@brief exception indicating other library errors
 2138|       |
 2139|       |This exception is thrown in case of errors that cannot be classified with the
 2140|       |other exception types.
 2141|       |
 2142|       |Exceptions have ids 5xx.
 2143|       |
 2144|       |name / id                      | example message | description
 2145|       |------------------------------ | --------------- | -------------------------
 2146|       |json.exception.other_error.501 | unsuccessful: {"op":"test","path":"/baz", "value":"bar"} | A JSON Patch operation 'test' failed. The unsuccessful operation is also printed.
 2147|       |
 2148|       |@sa - @ref exception for the base class of the library exceptions
 2149|       |@sa - @ref parse_error for exceptions indicating a parse error
 2150|       |@sa - @ref invalid_iterator for exceptions indicating errors with iterators
 2151|       |@sa - @ref type_error for exceptions indicating executing a member function with
 2152|       |                    a wrong type
 2153|       |@sa - @ref out_of_range for exceptions indicating access out of the defined range
 2154|       |
 2155|       |@liveexample{The following code shows how an `other_error` exception can be
 2156|       |caught.,other_error}
 2157|       |
 2158|       |@since version 3.0.0
 2159|       |*/
 2160|       |class other_error : public exception
 2161|       |{
 2162|       |  public:
 2163|       |    static other_error create(int id_, const std::string& what_arg)
 2164|      0|    {
 2165|      0|        std::string w = exception::name("other_error", id_) + what_arg;
 2166|      0|        return other_error(id_, w.c_str());
 2167|      0|    }
 2168|       |
 2169|       |  private:
 2170|       |    JSON_HEDLEY_NON_NULL(3)
 2171|      0|    other_error(int id_, const char* what_arg) : exception(id_, what_arg) {}
 2172|       |};
 2173|       |}  // namespace detail
 2174|       |}  // namespace nlohmann
 2175|       |
 2176|       |// #include <nlohmann/detail/macro_scope.hpp>
 2177|       |
 2178|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
 2179|       |
 2180|       |
 2181|       |#include <ciso646> // not
 2182|       |#include <cstddef> // size_t
 2183|       |#include <type_traits> // conditional, enable_if, false_type, integral_constant, is_constructible, is_integral, is_same, remove_cv, remove_reference, true_type
 2184|       |
 2185|       |namespace nlohmann
 2186|       |{
 2187|       |namespace detail
 2188|       |{
 2189|       |// alias templates to reduce boilerplate
 2190|       |template<bool B, typename T = void>
 2191|       |using enable_if_t = typename std::enable_if<B, T>::type;
 2192|       |
 2193|       |template<typename T>
 2194|       |using uncvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;
 2195|       |
 2196|       |// implementation of C++14 index_sequence and affiliates
 2197|       |// source: https://stackoverflow.com/a/32223343
 2198|       |template<std::size_t... Ints>
 2199|       |struct index_sequence
 2200|       |{
 2201|       |    using type = index_sequence;
 2202|       |    using value_type = std::size_t;
 2203|       |    static constexpr std::size_t size() noexcept
 2204|       |    {
 2205|       |        return sizeof...(Ints);
 2206|       |    }
 2207|       |};
 2208|       |
 2209|       |template<class Sequence1, class Sequence2>
 2210|       |struct merge_and_renumber;
 2211|       |
 2212|       |template<std::size_t... I1, std::size_t... I2>
 2213|       |struct merge_and_renumber<index_sequence<I1...>, index_sequence<I2...>>
 2214|       |        : index_sequence < I1..., (sizeof...(I1) + I2)... > {};
 2215|       |
 2216|       |template<std::size_t N>
 2217|       |struct make_index_sequence
 2218|       |    : merge_and_renumber < typename make_index_sequence < N / 2 >::type,
 2219|       |      typename make_index_sequence < N - N / 2 >::type > {};
 2220|       |
 2221|       |template<> struct make_index_sequence<0> : index_sequence<> {};
 2222|       |template<> struct make_index_sequence<1> : index_sequence<0> {};
 2223|       |
 2224|       |template<typename... Ts>
 2225|       |using index_sequence_for = make_index_sequence<sizeof...(Ts)>;
 2226|       |
 2227|       |// dispatch utility (taken from ranges-v3)
 2228|       |template<unsigned N> struct priority_tag : priority_tag < N - 1 > {};
 2229|       |template<> struct priority_tag<0> {};
 2230|       |
 2231|       |// taken from ranges-v3
 2232|       |template<typename T>
 2233|       |struct static_const
 2234|       |{
 2235|       |    static constexpr T value{};
 2236|       |};
 2237|       |
 2238|       |template<typename T>
 2239|       |constexpr T static_const<T>::value;
 2240|       |}  // namespace detail
 2241|       |}  // namespace nlohmann
 2242|       |
 2243|       |// #include <nlohmann/detail/meta/type_traits.hpp>
 2244|       |
 2245|       |
 2246|       |#include <ciso646> // not
 2247|       |#include <limits> // numeric_limits
 2248|       |#include <type_traits> // false_type, is_constructible, is_integral, is_same, true_type
 2249|       |#include <utility> // declval
 2250|       |
 2251|       |// #include <nlohmann/detail/iterators/iterator_traits.hpp>
 2252|       |
 2253|       |
 2254|       |#include <iterator> // random_access_iterator_tag
 2255|       |
 2256|       |// #include <nlohmann/detail/meta/void_t.hpp>
 2257|       |
 2258|       |
 2259|       |namespace nlohmann
 2260|       |{
 2261|       |namespace detail
 2262|       |{
 2263|       |template <typename ...Ts> struct make_void
 2264|       |{
 2265|       |    using type = void;
 2266|       |};
 2267|       |template <typename ...Ts> using void_t = typename make_void<Ts...>::type;
 2268|       |} // namespace detail
 2269|       |}  // namespace nlohmann
 2270|       |
 2271|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
 2272|       |
 2273|       |
 2274|       |namespace nlohmann
 2275|       |{
 2276|       |namespace detail
 2277|       |{
 2278|       |template <typename It, typename = void>
 2279|       |struct iterator_types {};
 2280|       |
 2281|       |template <typename It>
 2282|       |struct iterator_types <
 2283|       |    It,
 2284|       |    void_t<typename It::difference_type, typename It::value_type, typename It::pointer,
 2285|       |    typename It::reference, typename It::iterator_category >>
 2286|       |{
 2287|       |    using difference_type = typename It::difference_type;
 2288|       |    using value_type = typename It::value_type;
 2289|       |    using pointer = typename It::pointer;
 2290|       |    using reference = typename It::reference;
 2291|       |    using iterator_category = typename It::iterator_category;
 2292|       |};
 2293|       |
 2294|       |// This is required as some compilers implement std::iterator_traits in a way that
 2295|       |// doesn't work with SFINAE. See https://github.com/nlohmann/json/issues/1341.
 2296|       |template <typename T, typename = void>
 2297|       |struct iterator_traits
 2298|       |{
 2299|       |};
 2300|       |
 2301|       |template <typename T>
 2302|       |struct iterator_traits < T, enable_if_t < !std::is_pointer<T>::value >>
 2303|       |            : iterator_types<T>
 2304|       |{
 2305|       |};
 2306|       |
 2307|       |template <typename T>
 2308|       |struct iterator_traits<T*, enable_if_t<std::is_object<T>::value>>
 2309|       |{
 2310|       |    using iterator_category = std::random_access_iterator_tag;
 2311|       |    using value_type = T;
 2312|       |    using difference_type = ptrdiff_t;
 2313|       |    using pointer = T*;
 2314|       |    using reference = T&;
 2315|       |};
 2316|       |} // namespace detail
 2317|       |} // namespace nlohmann
 2318|       |
 2319|       |// #include <nlohmann/detail/macro_scope.hpp>
 2320|       |
 2321|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
 2322|       |
 2323|       |// #include <nlohmann/detail/meta/detected.hpp>
 2324|       |
 2325|       |
 2326|       |#include <type_traits>
 2327|       |
 2328|       |// #include <nlohmann/detail/meta/void_t.hpp>
 2329|       |
 2330|       |
 2331|       |// https://en.cppreference.com/w/cpp/experimental/is_detected
 2332|       |namespace nlohmann
 2333|       |{
 2334|       |namespace detail
 2335|       |{
 2336|       |struct nonesuch
 2337|       |{
 2338|       |    nonesuch() = delete;
 2339|       |    ~nonesuch() = delete;
 2340|       |    nonesuch(nonesuch const&) = delete;
 2341|       |    nonesuch(nonesuch const&&) = delete;
 2342|       |    void operator=(nonesuch const&) = delete;
 2343|       |    void operator=(nonesuch&&) = delete;
 2344|       |};
 2345|       |
 2346|       |template <class Default,
 2347|       |          class AlwaysVoid,
 2348|       |          template <class...> class Op,
 2349|       |          class... Args>
 2350|       |struct detector
 2351|       |{
 2352|       |    using value_t = std::false_type;
 2353|       |    using type = Default;
 2354|       |};
 2355|       |
 2356|       |template <class Default, template <class...> class Op, class... Args>
 2357|       |struct detector<Default, void_t<Op<Args...>>, Op, Args...>
 2358|       |{
 2359|       |    using value_t = std::true_type;
 2360|       |    using type = Op<Args...>;
 2361|       |};
 2362|       |
 2363|       |template <template <class...> class Op, class... Args>
 2364|       |using is_detected = typename detector<nonesuch, void, Op, Args...>::value_t;
 2365|       |
 2366|       |template <template <class...> class Op, class... Args>
 2367|       |using detected_t = typename detector<nonesuch, void, Op, Args...>::type;
 2368|       |
 2369|       |template <class Default, template <class...> class Op, class... Args>
 2370|       |using detected_or = detector<Default, void, Op, Args...>;
 2371|       |
 2372|       |template <class Default, template <class...> class Op, class... Args>
 2373|       |using detected_or_t = typename detected_or<Default, Op, Args...>::type;
 2374|       |
 2375|       |template <class Expected, template <class...> class Op, class... Args>
 2376|       |using is_detected_exact = std::is_same<Expected, detected_t<Op, Args...>>;
 2377|       |
 2378|       |template <class To, template <class...> class Op, class... Args>
 2379|       |using is_detected_convertible =
 2380|       |    std::is_convertible<detected_t<Op, Args...>, To>;
 2381|       |}  // namespace detail
 2382|       |}  // namespace nlohmann
 2383|       |
 2384|       |// #include <nlohmann/json_fwd.hpp>
 2385|       |#ifndef INCLUDE_NLOHMANN_JSON_FWD_HPP_
 2386|       |#define INCLUDE_NLOHMANN_JSON_FWD_HPP_
 2387|       |
 2388|       |#include <cstdint> // int64_t, uint64_t
 2389|       |#include <map> // map
 2390|       |#include <memory> // allocator
 2391|       |#include <string> // string
 2392|       |#include <vector> // vector
 2393|       |
 2394|       |/*!
 2395|       |@brief namespace for Niels Lohmann
 2396|       |@see https://github.com/nlohmann
 2397|       |@since version 1.0.0
 2398|       |*/
 2399|       |namespace nlohmann
 2400|       |{
 2401|       |/*!
 2402|       |@brief default JSONSerializer template argument
 2403|       |
 2404|       |This serializer ignores the template arguments and uses ADL
 2405|       |([argument-dependent lookup](https://en.cppreference.com/w/cpp/language/adl))
 2406|       |for serialization.
 2407|       |*/
 2408|       |template<typename T = void, typename SFINAE = void>
 2409|       |struct adl_serializer;
 2410|       |
 2411|       |template<template<typename U, typename V, typename... Args> class ObjectType =
 2412|       |         std::map,
 2413|       |         template<typename U, typename... Args> class ArrayType = std::vector,
 2414|       |         class StringType = std::string, class BooleanType = bool,
 2415|       |         class NumberIntegerType = std::int64_t,
 2416|       |         class NumberUnsignedType = std::uint64_t,
 2417|       |         class NumberFloatType = double,
 2418|       |         template<typename U> class AllocatorType = std::allocator,
 2419|       |         template<typename T, typename SFINAE = void> class JSONSerializer =
 2420|       |         adl_serializer>
 2421|       |class basic_json;
 2422|       |
 2423|       |/*!
 2424|       |@brief JSON Pointer
 2425|       |
 2426|       |A JSON pointer defines a string syntax for identifying a specific value
 2427|       |within a JSON document. It can be used with functions `at` and
 2428|       |`operator[]`. Furthermore, JSON pointers are the base for JSON patches.
 2429|       |
 2430|       |@sa [RFC 6901](https://tools.ietf.org/html/rfc6901)
 2431|       |
 2432|       |@since version 2.0.0
 2433|       |*/
 2434|       |template<typename BasicJsonType>
 2435|       |class json_pointer;
 2436|       |
 2437|       |/*!
 2438|       |@brief default JSON class
 2439|       |
 2440|       |This type is the default specialization of the @ref basic_json class which
 2441|       |uses the standard template types.
 2442|       |
 2443|       |@since version 1.0.0
 2444|       |*/
 2445|       |using json = basic_json<>;
 2446|       |}  // namespace nlohmann
 2447|       |
 2448|       |#endif  // INCLUDE_NLOHMANN_JSON_FWD_HPP_
 2449|       |
 2450|       |
 2451|       |namespace nlohmann
 2452|       |{
 2453|       |/*!
 2454|       |@brief detail namespace with internal helper functions
 2455|       |
 2456|       |This namespace collects functions that should not be exposed,
 2457|       |implementations of some @ref basic_json methods, and meta-programming helpers.
 2458|       |
 2459|       |@since version 2.1.0
 2460|       |*/
 2461|       |namespace detail
 2462|       |{
 2463|       |/////////////
 2464|       |// helpers //
 2465|       |/////////////
 2466|       |
 2467|       |// Note to maintainers:
 2468|       |//
 2469|       |// Every trait in this file expects a non CV-qualified type.
 2470|       |// The only exceptions are in the 'aliases for detected' section
 2471|       |// (i.e. those of the form: decltype(T::member_function(std::declval<T>())))
 2472|       |//
 2473|       |// In this case, T has to be properly CV-qualified to constraint the function arguments
 2474|       |// (e.g. to_json(BasicJsonType&, const T&))
 2475|       |
 2476|       |template<typename> struct is_basic_json : std::false_type {};
 2477|       |
 2478|       |NLOHMANN_BASIC_JSON_TPL_DECLARATION
 2479|       |struct is_basic_json<NLOHMANN_BASIC_JSON_TPL> : std::true_type {};
 2480|       |
 2481|       |//////////////////////////
 2482|       |// aliases for detected //
 2483|       |//////////////////////////
 2484|       |
 2485|       |template <typename T>
 2486|       |using mapped_type_t = typename T::mapped_type;
 2487|       |
 2488|       |template <typename T>
 2489|       |using key_type_t = typename T::key_type;
 2490|       |
 2491|       |template <typename T>
 2492|       |using value_type_t = typename T::value_type;
 2493|       |
 2494|       |template <typename T>
 2495|       |using difference_type_t = typename T::difference_type;
 2496|       |
 2497|       |template <typename T>
 2498|       |using pointer_t = typename T::pointer;
 2499|       |
 2500|       |template <typename T>
 2501|       |using reference_t = typename T::reference;
 2502|       |
 2503|       |template <typename T>
 2504|       |using iterator_category_t = typename T::iterator_category;
 2505|       |
 2506|       |template <typename T>
 2507|       |using iterator_t = typename T::iterator;
 2508|       |
 2509|       |template <typename T, typename... Args>
 2510|       |using to_json_function = decltype(T::to_json(std::declval<Args>()...));
 2511|       |
 2512|       |template <typename T, typename... Args>
 2513|       |using from_json_function = decltype(T::from_json(std::declval<Args>()...));
 2514|       |
 2515|       |template <typename T, typename U>
 2516|       |using get_template_function = decltype(std::declval<T>().template get<U>());
 2517|       |
 2518|       |// trait checking if JSONSerializer<T>::from_json(json const&, udt&) exists
 2519|       |template <typename BasicJsonType, typename T, typename = void>
 2520|       |struct has_from_json : std::false_type {};
 2521|       |
 2522|       |template <typename BasicJsonType, typename T>
 2523|       |struct has_from_json<BasicJsonType, T,
 2524|       |           enable_if_t<not is_basic_json<T>::value>>
 2525|       |{
 2526|       |    using serializer = typename BasicJsonType::template json_serializer<T, void>;
 2527|       |
 2528|       |    static constexpr bool value =
 2529|       |        is_detected_exact<void, from_json_function, serializer,
 2530|       |        const BasicJsonType&, T&>::value;
 2531|       |};
 2532|       |
 2533|       |// This trait checks if JSONSerializer<T>::from_json(json const&) exists
 2534|       |// this overload is used for non-default-constructible user-defined-types
 2535|       |template <typename BasicJsonType, typename T, typename = void>
 2536|       |struct has_non_default_from_json : std::false_type {};
 2537|       |
 2538|       |template<typename BasicJsonType, typename T>
 2539|       |struct has_non_default_from_json<BasicJsonType, T, enable_if_t<not is_basic_json<T>::value>>
 2540|       |{
 2541|       |    using serializer = typename BasicJsonType::template json_serializer<T, void>;
 2542|       |
 2543|       |    static constexpr bool value =
 2544|       |        is_detected_exact<T, from_json_function, serializer,
 2545|       |        const BasicJsonType&>::value;
 2546|       |};
 2547|       |
 2548|       |// This trait checks if BasicJsonType::json_serializer<T>::to_json exists
 2549|       |// Do not evaluate the trait when T is a basic_json type, to avoid template instantiation infinite recursion.
 2550|       |template <typename BasicJsonType, typename T, typename = void>
 2551|       |struct has_to_json : std::false_type {};
 2552|       |
 2553|       |template <typename BasicJsonType, typename T>
 2554|       |struct has_to_json<BasicJsonType, T, enable_if_t<not is_basic_json<T>::value>>
 2555|       |{
 2556|       |    using serializer = typename BasicJsonType::template json_serializer<T, void>;
 2557|       |
 2558|       |    static constexpr bool value =
 2559|       |        is_detected_exact<void, to_json_function, serializer, BasicJsonType&,
 2560|       |        T>::value;
 2561|       |};
 2562|       |
 2563|       |
 2564|       |///////////////////
 2565|       |// is_ functions //
 2566|       |///////////////////
 2567|       |
 2568|       |template <typename T, typename = void>
 2569|       |struct is_iterator_traits : std::false_type {};
 2570|       |
 2571|       |template <typename T>
 2572|       |struct is_iterator_traits<iterator_traits<T>>
 2573|       |{
 2574|       |  private:
 2575|       |    using traits = iterator_traits<T>;
 2576|       |
 2577|       |  public:
 2578|       |    static constexpr auto value =
 2579|       |        is_detected<value_type_t, traits>::value &&
 2580|       |        is_detected<difference_type_t, traits>::value &&
 2581|       |        is_detected<pointer_t, traits>::value &&
 2582|       |        is_detected<iterator_category_t, traits>::value &&
 2583|       |        is_detected<reference_t, traits>::value;
 2584|       |};
 2585|       |
 2586|       |// source: https://stackoverflow.com/a/37193089/4116453
 2587|       |
 2588|       |template <typename T, typename = void>
 2589|       |struct is_complete_type : std::false_type {};
 2590|       |
 2591|       |template <typename T>
 2592|       |struct is_complete_type<T, decltype(void(sizeof(T)))> : std::true_type {};
 2593|       |
 2594|       |template <typename BasicJsonType, typename CompatibleObjectType,
 2595|       |          typename = void>
 2596|       |struct is_compatible_object_type_impl : std::false_type {};
 2597|       |
 2598|       |template <typename BasicJsonType, typename CompatibleObjectType>
 2599|       |struct is_compatible_object_type_impl <
 2600|       |    BasicJsonType, CompatibleObjectType,
 2601|       |    enable_if_t<is_detected<mapped_type_t, CompatibleObjectType>::value and
 2602|       |    is_detected<key_type_t, CompatibleObjectType>::value >>
 2603|       |{
 2604|       |
 2605|       |    using object_t = typename BasicJsonType::object_t;
 2606|       |
 2607|       |    // macOS's is_constructible does not play well with nonesuch...
 2608|       |    static constexpr bool value =
 2609|       |        std::is_constructible<typename object_t::key_type,
 2610|       |        typename CompatibleObjectType::key_type>::value and
 2611|       |        std::is_constructible<typename object_t::mapped_type,
 2612|       |        typename CompatibleObjectType::mapped_type>::value;
 2613|       |};
 2614|       |
 2615|       |template <typename BasicJsonType, typename CompatibleObjectType>
 2616|       |struct is_compatible_object_type
 2617|       |    : is_compatible_object_type_impl<BasicJsonType, CompatibleObjectType> {};
 2618|       |
 2619|       |template <typename BasicJsonType, typename ConstructibleObjectType,
 2620|       |          typename = void>
 2621|       |struct is_constructible_object_type_impl : std::false_type {};
 2622|       |
 2623|       |template <typename BasicJsonType, typename ConstructibleObjectType>
 2624|       |struct is_constructible_object_type_impl <
 2625|       |    BasicJsonType, ConstructibleObjectType,
 2626|       |    enable_if_t<is_detected<mapped_type_t, ConstructibleObjectType>::value and
 2627|       |    is_detected<key_type_t, ConstructibleObjectType>::value >>
 2628|       |{
 2629|       |    using object_t = typename BasicJsonType::object_t;
 2630|       |
 2631|       |    static constexpr bool value =
 2632|       |        (std::is_default_constructible<ConstructibleObjectType>::value and
 2633|       |         (std::is_move_assignable<ConstructibleObjectType>::value or
 2634|       |          std::is_copy_assignable<ConstructibleObjectType>::value) and
 2635|       |         (std::is_constructible<typename ConstructibleObjectType::key_type,
 2636|       |          typename object_t::key_type>::value and
 2637|       |          std::is_same <
 2638|       |          typename object_t::mapped_type,
 2639|       |          typename ConstructibleObjectType::mapped_type >::value)) or
 2640|       |        (has_from_json<BasicJsonType,
 2641|       |         typename ConstructibleObjectType::mapped_type>::value or
 2642|       |         has_non_default_from_json <
 2643|       |         BasicJsonType,
 2644|       |         typename ConstructibleObjectType::mapped_type >::value);
 2645|       |};
 2646|       |
 2647|       |template <typename BasicJsonType, typename ConstructibleObjectType>
 2648|       |struct is_constructible_object_type
 2649|       |    : is_constructible_object_type_impl<BasicJsonType,
 2650|       |      ConstructibleObjectType> {};
 2651|       |
 2652|       |template <typename BasicJsonType, typename CompatibleStringType,
 2653|       |          typename = void>
 2654|       |struct is_compatible_string_type_impl : std::false_type {};
 2655|       |
 2656|       |template <typename BasicJsonType, typename CompatibleStringType>
 2657|       |struct is_compatible_string_type_impl <
 2658|       |    BasicJsonType, CompatibleStringType,
 2659|       |    enable_if_t<is_detected_exact<typename BasicJsonType::string_t::value_type,
 2660|       |    value_type_t, CompatibleStringType>::value >>
 2661|       |{
 2662|       |    static constexpr auto value =
 2663|       |        std::is_constructible<typename BasicJsonType::string_t, CompatibleStringType>::value;
 2664|       |};
 2665|       |
 2666|       |template <typename BasicJsonType, typename ConstructibleStringType>
 2667|       |struct is_compatible_string_type
 2668|       |    : is_compatible_string_type_impl<BasicJsonType, ConstructibleStringType> {};
 2669|       |
 2670|       |template <typename BasicJsonType, typename ConstructibleStringType,
 2671|       |          typename = void>
 2672|       |struct is_constructible_string_type_impl : std::false_type {};
 2673|       |
 2674|       |template <typename BasicJsonType, typename ConstructibleStringType>
 2675|       |struct is_constructible_string_type_impl <
 2676|       |    BasicJsonType, ConstructibleStringType,
 2677|       |    enable_if_t<is_detected_exact<typename BasicJsonType::string_t::value_type,
 2678|       |    value_type_t, ConstructibleStringType>::value >>
 2679|       |{
 2680|       |    static constexpr auto value =
 2681|       |        std::is_constructible<ConstructibleStringType,
 2682|       |        typename BasicJsonType::string_t>::value;
 2683|       |};
 2684|       |
 2685|       |template <typename BasicJsonType, typename ConstructibleStringType>
 2686|       |struct is_constructible_string_type
 2687|       |    : is_constructible_string_type_impl<BasicJsonType, ConstructibleStringType> {};
 2688|       |
 2689|       |template <typename BasicJsonType, typename CompatibleArrayType, typename = void>
 2690|       |struct is_compatible_array_type_impl : std::false_type {};
 2691|       |
 2692|       |template <typename BasicJsonType, typename CompatibleArrayType>
 2693|       |struct is_compatible_array_type_impl <
 2694|       |    BasicJsonType, CompatibleArrayType,
 2695|       |    enable_if_t<is_detected<value_type_t, CompatibleArrayType>::value and
 2696|       |    is_detected<iterator_t, CompatibleArrayType>::value and
 2697|       |// This is needed because json_reverse_iterator has a ::iterator type...
 2698|       |// Therefore it is detected as a CompatibleArrayType.
 2699|       |// The real fix would be to have an Iterable concept.
 2700|       |    not is_iterator_traits<
 2701|       |    iterator_traits<CompatibleArrayType>>::value >>
 2702|       |{
 2703|       |    static constexpr bool value =
 2704|       |        std::is_constructible<BasicJsonType,
 2705|       |        typename CompatibleArrayType::value_type>::value;
 2706|       |};
 2707|       |
 2708|       |template <typename BasicJsonType, typename CompatibleArrayType>
 2709|       |struct is_compatible_array_type
 2710|       |    : is_compatible_array_type_impl<BasicJsonType, CompatibleArrayType> {};
 2711|       |
 2712|       |template <typename BasicJsonType, typename ConstructibleArrayType, typename = void>
 2713|       |struct is_constructible_array_type_impl : std::false_type {};
 2714|       |
 2715|       |template <typename BasicJsonType, typename ConstructibleArrayType>
 2716|       |struct is_constructible_array_type_impl <
 2717|       |    BasicJsonType, ConstructibleArrayType,
 2718|       |    enable_if_t<std::is_same<ConstructibleArrayType,
 2719|       |    typename BasicJsonType::value_type>::value >>
 2720|       |            : std::true_type {};
 2721|       |
 2722|       |template <typename BasicJsonType, typename ConstructibleArrayType>
 2723|       |struct is_constructible_array_type_impl <
 2724|       |    BasicJsonType, ConstructibleArrayType,
 2725|       |    enable_if_t<not std::is_same<ConstructibleArrayType,
 2726|       |    typename BasicJsonType::value_type>::value and
 2727|       |    std::is_default_constructible<ConstructibleArrayType>::value and
 2728|       |(std::is_move_assignable<ConstructibleArrayType>::value or
 2729|       | std::is_copy_assignable<ConstructibleArrayType>::value) and
 2730|       |is_detected<value_type_t, ConstructibleArrayType>::value and
 2731|       |is_detected<iterator_t, ConstructibleArrayType>::value and
 2732|       |is_complete_type<
 2733|       |detected_t<value_type_t, ConstructibleArrayType>>::value >>
 2734|       |{
 2735|       |    static constexpr bool value =
 2736|       |        // This is needed because json_reverse_iterator has a ::iterator type,
 2737|       |        // furthermore, std::back_insert_iterator (and other iterators) have a
 2738|       |        // base class `iterator`... Therefore it is detected as a
 2739|       |        // ConstructibleArrayType. The real fix would be to have an Iterable
 2740|       |        // concept.
 2741|       |        not is_iterator_traits<iterator_traits<ConstructibleArrayType>>::value and
 2742|       |
 2743|       |        (std::is_same<typename ConstructibleArrayType::value_type,
 2744|       |         typename BasicJsonType::array_t::value_type>::value or
 2745|       |         has_from_json<BasicJsonType,
 2746|       |         typename ConstructibleArrayType::value_type>::value or
 2747|       |         has_non_default_from_json <
 2748|       |         BasicJsonType, typename ConstructibleArrayType::value_type >::value);
 2749|       |};
 2750|       |
 2751|       |template <typename BasicJsonType, typename ConstructibleArrayType>
 2752|       |struct is_constructible_array_type
 2753|       |    : is_constructible_array_type_impl<BasicJsonType, ConstructibleArrayType> {};
 2754|       |
 2755|       |template <typename RealIntegerType, typename CompatibleNumberIntegerType,
 2756|       |          typename = void>
 2757|       |struct is_compatible_integer_type_impl : std::false_type {};
 2758|       |
 2759|       |template <typename RealIntegerType, typename CompatibleNumberIntegerType>
 2760|       |struct is_compatible_integer_type_impl <
 2761|       |    RealIntegerType, CompatibleNumberIntegerType,
 2762|       |    enable_if_t<std::is_integral<RealIntegerType>::value and
 2763|       |    std::is_integral<CompatibleNumberIntegerType>::value and
 2764|       |    not std::is_same<bool, CompatibleNumberIntegerType>::value >>
 2765|       |{
 2766|       |    // is there an assert somewhere on overflows?
 2767|       |    using RealLimits = std::numeric_limits<RealIntegerType>;
 2768|       |    using CompatibleLimits = std::numeric_limits<CompatibleNumberIntegerType>;
 2769|       |
 2770|       |    static constexpr auto value =
 2771|       |        std::is_constructible<RealIntegerType,
 2772|       |        CompatibleNumberIntegerType>::value and
 2773|       |        CompatibleLimits::is_integer and
 2774|       |        RealLimits::is_signed == CompatibleLimits::is_signed;
 2775|       |};
 2776|       |
 2777|       |template <typename RealIntegerType, typename CompatibleNumberIntegerType>
 2778|       |struct is_compatible_integer_type
 2779|       |    : is_compatible_integer_type_impl<RealIntegerType,
 2780|       |      CompatibleNumberIntegerType> {};
 2781|       |
 2782|       |template <typename BasicJsonType, typename CompatibleType, typename = void>
 2783|       |struct is_compatible_type_impl: std::false_type {};
 2784|       |
 2785|       |template <typename BasicJsonType, typename CompatibleType>
 2786|       |struct is_compatible_type_impl <
 2787|       |    BasicJsonType, CompatibleType,
 2788|       |    enable_if_t<is_complete_type<CompatibleType>::value >>
 2789|       |{
 2790|       |    static constexpr bool value =
 2791|       |        has_to_json<BasicJsonType, CompatibleType>::value;
 2792|       |};
 2793|       |
 2794|       |template <typename BasicJsonType, typename CompatibleType>
 2795|       |struct is_compatible_type
 2796|       |    : is_compatible_type_impl<BasicJsonType, CompatibleType> {};
 2797|       |
 2798|       |// https://en.cppreference.com/w/cpp/types/conjunction
 2799|       |template<class...> struct conjunction : std::true_type { };
 2800|       |template<class B1> struct conjunction<B1> : B1 { };
 2801|       |template<class B1, class... Bn>
 2802|       |struct conjunction<B1, Bn...>
 2803|       |: std::conditional<bool(B1::value), conjunction<Bn...>, B1>::type {};
 2804|       |
 2805|       |template <typename T1, typename T2>
 2806|       |struct is_constructible_tuple : std::false_type {};
 2807|       |
 2808|       |template <typename T1, typename... Args>
 2809|       |struct is_constructible_tuple<T1, std::tuple<Args...>> : conjunction<std::is_constructible<T1, Args>...> {};
 2810|       |}  // namespace detail
 2811|       |}  // namespace nlohmann
 2812|       |
 2813|       |// #include <nlohmann/detail/value_t.hpp>
 2814|       |
 2815|       |
 2816|       |#include <array> // array
 2817|       |#include <ciso646> // and
 2818|       |#include <cstddef> // size_t
 2819|       |#include <cstdint> // uint8_t
 2820|       |#include <string> // string
 2821|       |
 2822|       |namespace nlohmann
 2823|       |{
 2824|       |namespace detail
 2825|       |{
 2826|       |///////////////////////////
 2827|       |// JSON type enumeration //
 2828|       |///////////////////////////
 2829|       |
 2830|       |/*!
 2831|       |@brief the JSON type enumeration
 2832|       |
 2833|       |This enumeration collects the different JSON types. It is internally used to
 2834|       |distinguish the stored values, and the functions @ref basic_json::is_null(),
 2835|       |@ref basic_json::is_object(), @ref basic_json::is_array(),
 2836|       |@ref basic_json::is_string(), @ref basic_json::is_boolean(),
 2837|       |@ref basic_json::is_number() (with @ref basic_json::is_number_integer(),
 2838|       |@ref basic_json::is_number_unsigned(), and @ref basic_json::is_number_float()),
 2839|       |@ref basic_json::is_discarded(), @ref basic_json::is_primitive(), and
 2840|       |@ref basic_json::is_structured() rely on it.
 2841|       |
 2842|       |@note There are three enumeration entries (number_integer, number_unsigned, and
 2843|       |number_float), because the library distinguishes these three types for numbers:
 2844|       |@ref basic_json::number_unsigned_t is used for unsigned integers,
 2845|       |@ref basic_json::number_integer_t is used for signed integers, and
 2846|       |@ref basic_json::number_float_t is used for floating-point numbers or to
 2847|       |approximate integers which do not fit in the limits of their respective type.
 2848|       |
 2849|       |@sa @ref basic_json::basic_json(const value_t value_type) -- create a JSON
 2850|       |value with the default value for a given type
 2851|       |
 2852|       |@since version 1.0.0
 2853|       |*/
 2854|       |enum class value_t : std::uint8_t
 2855|       |{
 2856|       |    null,             ///< null value
 2857|       |    object,           ///< object (unordered set of name/value pairs)
 2858|       |    array,            ///< array (ordered collection of values)
 2859|       |    string,           ///< string value
 2860|       |    boolean,          ///< boolean value
 2861|       |    number_integer,   ///< number value (signed integer)
 2862|       |    number_unsigned,  ///< number value (unsigned integer)
 2863|       |    number_float,     ///< number value (floating-point)
 2864|       |    discarded         ///< discarded by the parser callback function
 2865|       |};
 2866|       |
 2867|       |/*!
 2868|       |@brief comparison operator for JSON types
 2869|       |
 2870|       |Returns an ordering that is similar to Python:
 2871|       |- order: null < boolean < number < object < array < string
 2872|       |- furthermore, each type is not smaller than itself
 2873|       |- discarded values are not comparable
 2874|       |
 2875|       |@since version 1.0.0
 2876|       |*/
 2877|       |inline bool operator<(const value_t lhs, const value_t rhs) noexcept
 2878|      0|{
 2879|      0|    static constexpr std::array<std::uint8_t, 8> order = {{
 2880|      0|            0 /* null */, 3 /* object */, 4 /* array */, 5 /* string */,
 2881|      0|            1 /* boolean */, 2 /* integer */, 2 /* unsigned */, 2 /* float */
 2882|      0|        }
 2883|      0|    };
 2884|      0|
 2885|      0|    const auto l_index = static_cast<std::size_t>(lhs);
 2886|      0|    const auto r_index = static_cast<std::size_t>(rhs);
 2887|      0|    return l_index < order.size() and r_index < order.size() and order[l_index] < order[r_index];
 2888|      0|}
 2889|       |}  // namespace detail
 2890|       |}  // namespace nlohmann
 2891|       |
 2892|       |
 2893|       |namespace nlohmann
 2894|       |{
 2895|       |namespace detail
 2896|       |{
 2897|       |template<typename BasicJsonType>
 2898|       |void from_json(const BasicJsonType& j, typename std::nullptr_t& n)
 2899|       |{
 2900|       |    if (JSON_HEDLEY_UNLIKELY(not j.is_null()))
 2901|       |    {
 2902|       |        JSON_THROW(type_error::create(302, "type must be null, but is " + std::string(j.type_name())));
 2903|       |    }
 2904|       |    n = nullptr;
 2905|       |}
 2906|       |
 2907|       |// overloads for basic_json template parameters
 2908|       |template<typename BasicJsonType, typename ArithmeticType,
 2909|       |         enable_if_t<std::is_arithmetic<ArithmeticType>::value and
 2910|       |                     not std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,
 2911|       |                     int> = 0>
 2912|       |void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)
 2913|     19|{
 2914|     19|    switch (static_cast<value_t>(j))
 2915|     19|    {
 2916|      1|        case value_t::number_unsigned:
 2917|      1|        {
 2918|      1|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
 2919|      1|            break;
 2920|      0|        }
 2921|      0|        case value_t::number_integer:
 2922|      0|        {
 2923|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
 2924|      0|            break;
 2925|      0|        }
 2926|     18|        case value_t::number_float:
 2927|     18|        {
 2928|     18|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
 2929|     18|            break;
 2930|      0|        }
 2931|       |
 2932|      0|        default:
 2933|      0|            JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
 2934|     19|    }
 2935|     19|}
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail20get_arithmetic_valueINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEiLi0EEEvRKT_RT0_
  ------------------
  | _ZN8nlohmann6detail20get_arithmetic_valueINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEdLi0EEEvRKT_RT0_:
  | 2913|     19|{
  | 2914|     19|    switch (static_cast<value_t>(j))
  | 2915|     19|    {
  | 2916|      1|        case value_t::number_unsigned:
  | 2917|      1|        {
  | 2918|      1|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
  | 2919|      1|            break;
  | 2920|      0|        }
  | 2921|      0|        case value_t::number_integer:
  | 2922|      0|        {
  | 2923|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
  | 2924|      0|            break;
  | 2925|      0|        }
  | 2926|     18|        case value_t::number_float:
  | 2927|     18|        {
  | 2928|     18|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
  | 2929|     18|            break;
  | 2930|      0|        }
  | 2931|       |
  | 2932|      0|        default:
  | 2933|      0|            JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
  | 2934|     19|    }
  | 2935|     19|}
  ------------------
 2936|       |
 2937|       |template<typename BasicJsonType>
 2938|       |void from_json(const BasicJsonType& j, typename BasicJsonType::boolean_t& b)
 2939|     16|{
 2940|     16|    if (JSON_HEDLEY_UNLIKELY(not j.is_boolean()))
 2941|      0|    {
 2942|      0|        JSON_THROW(type_error::create(302, "type must be boolean, but is " + std::string(j.type_name())));
 2943|      0|    }
 2944|     16|    b = *j.template get_ptr<const typename BasicJsonType::boolean_t*>();
 2945|     16|}
 2946|       |
 2947|       |template<typename BasicJsonType>
 2948|       |void from_json(const BasicJsonType& j, typename BasicJsonType::string_t& s)
 2949|  5.62k|{
 2950|  5.62k|    if (JSON_HEDLEY_UNLIKELY(not j.is_string()))
 2951|      0|    {
 2952|      0|        JSON_THROW(type_error::create(302, "type must be string, but is " + std::string(j.type_name())));
 2953|      0|    }
 2954|  5.62k|    s = *j.template get_ptr<const typename BasicJsonType::string_t*>();
 2955|  5.62k|}
 2956|       |
 2957|       |template <
 2958|       |    typename BasicJsonType, typename ConstructibleStringType,
 2959|       |    enable_if_t <
 2960|       |        is_constructible_string_type<BasicJsonType, ConstructibleStringType>::value and
 2961|       |        not std::is_same<typename BasicJsonType::string_t,
 2962|       |                         ConstructibleStringType>::value,
 2963|       |        int > = 0 >
 2964|       |void from_json(const BasicJsonType& j, ConstructibleStringType& s)
 2965|       |{
 2966|       |    if (JSON_HEDLEY_UNLIKELY(not j.is_string()))
 2967|       |    {
 2968|       |        JSON_THROW(type_error::create(302, "type must be string, but is " + std::string(j.type_name())));
 2969|       |    }
 2970|       |
 2971|       |    s = *j.template get_ptr<const typename BasicJsonType::string_t*>();
 2972|       |}
 2973|       |
 2974|       |template<typename BasicJsonType>
 2975|       |void from_json(const BasicJsonType& j, typename BasicJsonType::number_float_t& val)
 2976|     19|{
 2977|     19|    get_arithmetic_value(j, val);
 2978|     19|}
 2979|       |
 2980|       |template<typename BasicJsonType>
 2981|       |void from_json(const BasicJsonType& j, typename BasicJsonType::number_unsigned_t& val)
 2982|       |{
 2983|       |    get_arithmetic_value(j, val);
 2984|       |}
 2985|       |
 2986|       |template<typename BasicJsonType>
 2987|       |void from_json(const BasicJsonType& j, typename BasicJsonType::number_integer_t& val)
 2988|       |{
 2989|       |    get_arithmetic_value(j, val);
 2990|       |}
 2991|       |
 2992|       |template<typename BasicJsonType, typename EnumType,
 2993|       |         enable_if_t<std::is_enum<EnumType>::value, int> = 0>
 2994|       |void from_json(const BasicJsonType& j, EnumType& e)
 2995|      0|{
 2996|      0|    typename std::underlying_type<EnumType>::type val;
 2997|      0|    get_arithmetic_value(j, val);
 2998|      0|    e = static_cast<EnumType>(val);
 2999|      0|}
 3000|       |
 3001|       |// forward_list doesn't have an insert method
 3002|       |template<typename BasicJsonType, typename T, typename Allocator,
 3003|       |         enable_if_t<std::is_convertible<BasicJsonType, T>::value, int> = 0>
 3004|       |void from_json(const BasicJsonType& j, std::forward_list<T, Allocator>& l)
 3005|       |{
 3006|       |    if (JSON_HEDLEY_UNLIKELY(not j.is_array()))
 3007|       |    {
 3008|       |        JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(j.type_name())));
 3009|       |    }
 3010|       |    l.clear();
 3011|       |    std::transform(j.rbegin(), j.rend(),
 3012|       |                   std::front_inserter(l), [](const BasicJsonType & i)
 3013|       |    {
 3014|       |        return i.template get<T>();
 3015|       |    });
 3016|       |}
 3017|       |
 3018|       |// valarray doesn't have an insert method
 3019|       |template<typename BasicJsonType, typename T,
 3020|       |         enable_if_t<std::is_convertible<BasicJsonType, T>::value, int> = 0>
 3021|       |void from_json(const BasicJsonType& j, std::valarray<T>& l)
 3022|       |{
 3023|       |    if (JSON_HEDLEY_UNLIKELY(not j.is_array()))
 3024|       |    {
 3025|       |        JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(j.type_name())));
 3026|       |    }
 3027|       |    l.resize(j.size());
 3028|       |    std::copy(j.begin(), j.end(), std::begin(l));
 3029|       |}
 3030|       |
 3031|       |template <typename BasicJsonType, typename T, std::size_t N>
 3032|       |auto from_json(const BasicJsonType& j, T (&arr)[N])
 3033|       |-> decltype(j.template get<T>(), void())
 3034|       |{
 3035|       |    for (std::size_t i = 0; i < N; ++i)
 3036|       |    {
 3037|       |        arr[i] = j.at(i).template get<T>();
 3038|       |    }
 3039|       |}
 3040|       |
 3041|       |template<typename BasicJsonType>
 3042|       |void from_json_array_impl(const BasicJsonType& j, typename BasicJsonType::array_t& arr, priority_tag<3> /*unused*/)
 3043|       |{
 3044|       |    arr = *j.template get_ptr<const typename BasicJsonType::array_t*>();
 3045|       |}
 3046|       |
 3047|       |template <typename BasicJsonType, typename T, std::size_t N>
 3048|       |auto from_json_array_impl(const BasicJsonType& j, std::array<T, N>& arr,
 3049|       |                          priority_tag<2> /*unused*/)
 3050|       |-> decltype(j.template get<T>(), void())
 3051|       |{
 3052|       |    for (std::size_t i = 0; i < N; ++i)
 3053|       |    {
 3054|       |        arr[i] = j.at(i).template get<T>();
 3055|       |    }
 3056|       |}
 3057|       |
 3058|       |template<typename BasicJsonType, typename ConstructibleArrayType>
 3059|       |auto from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr, priority_tag<1> /*unused*/)
 3060|       |-> decltype(
 3061|       |    arr.reserve(std::declval<typename ConstructibleArrayType::size_type>()),
 3062|       |    j.template get<typename ConstructibleArrayType::value_type>(),
 3063|       |    void())
 3064|     98|{
 3065|     98|    using std::end;
 3066|       |
 3067|     98|    ConstructibleArrayType ret;
 3068|     98|    ret.reserve(j.size());
 3069|     98|    std::transform(j.begin(), j.end(),
 3070|     98|                   std::inserter(ret, end(ret)), [](const BasicJsonType & i)
 3071|    140|    {
 3072|       |        // get<BasicJsonType>() returns *this, this won't call a from_json
 3073|       |        // method when value_type is BasicJsonType
 3074|    140|        return i.template get<typename ConstructibleArrayType::value_type>();
 3075|    140|    });
  ------------------
  | _ZZN8nlohmann6detail20from_json_array_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEES4_ISA_SaISA_EEEEDTcmcmcldtfp0_7reserveclsr3stdE7declvalINT0_9size_typeEEEEcldtfp_3getINSF_10value_typeEEEcvv_EERKT_RSF_NS0_12priority_tagILj1EEEENKUlRKSC_E_clB5cxx11ESQ_:
  | 3071|     28|    {
  | 3072|       |        // get<BasicJsonType>() returns *this, this won't call a from_json
  | 3073|       |        // method when value_type is BasicJsonType
  | 3074|     28|        return i.template get<typename ConstructibleArrayType::value_type>();
  | 3075|     28|    });
  ------------------
  | _ZZN8nlohmann6detail20from_json_array_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEES4_IiSaIiEEEEDTcmcmcldtfp0_7reserveclsr3stdE7declvalINT0_9size_typeEEEEcldtfp_3getINSF_10value_typeEEEcvv_EERKT_RSF_NS0_12priority_tagILj1EEEENKUlRKSC_E_clESQ_:
  | 3071|    112|    {
  | 3072|       |        // get<BasicJsonType>() returns *this, this won't call a from_json
  | 3073|       |        // method when value_type is BasicJsonType
  | 3074|    112|        return i.template get<typename ConstructibleArrayType::value_type>();
  | 3075|    112|    });
  ------------------
 3076|     98|    arr = std::move(ret);
 3077|     98|}
  ------------------
  | _ZN8nlohmann6detail20from_json_array_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEES4_ISA_SaISA_EEEEDTcmcmcldtfp0_7reserveclsr3stdE7declvalINT0_9size_typeEEEEcldtfp_3getINSF_10value_typeEEEcvv_EERKT_RSF_NS0_12priority_tagILj1EEE:
  | 3064|     14|{
  | 3065|     14|    using std::end;
  | 3066|       |
  | 3067|     14|    ConstructibleArrayType ret;
  | 3068|     14|    ret.reserve(j.size());
  | 3069|     14|    std::transform(j.begin(), j.end(),
  | 3070|     14|                   std::inserter(ret, end(ret)), [](const BasicJsonType & i)
  | 3071|     14|    {
  | 3072|       |        // get<BasicJsonType>() returns *this, this won't call a from_json
  | 3073|       |        // method when value_type is BasicJsonType
  | 3074|     14|        return i.template get<typename ConstructibleArrayType::value_type>();
  | 3075|     14|    });
  | 3076|     14|    arr = std::move(ret);
  | 3077|     14|}
  ------------------
  | _ZN8nlohmann6detail20from_json_array_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEES4_IiSaIiEEEEDTcmcmcldtfp0_7reserveclsr3stdE7declvalINT0_9size_typeEEEEcldtfp_3getINSF_10value_typeEEEcvv_EERKT_RSF_NS0_12priority_tagILj1EEE:
  | 3064|     84|{
  | 3065|     84|    using std::end;
  | 3066|       |
  | 3067|     84|    ConstructibleArrayType ret;
  | 3068|     84|    ret.reserve(j.size());
  | 3069|     84|    std::transform(j.begin(), j.end(),
  | 3070|     84|                   std::inserter(ret, end(ret)), [](const BasicJsonType & i)
  | 3071|     84|    {
  | 3072|       |        // get<BasicJsonType>() returns *this, this won't call a from_json
  | 3073|       |        // method when value_type is BasicJsonType
  | 3074|     84|        return i.template get<typename ConstructibleArrayType::value_type>();
  | 3075|     84|    });
  | 3076|     84|    arr = std::move(ret);
  | 3077|     84|}
  ------------------
 3078|       |
 3079|       |template <typename BasicJsonType, typename ConstructibleArrayType>
 3080|       |void from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr,
 3081|       |                          priority_tag<0> /*unused*/)
 3082|       |{
 3083|       |    using std::end;
 3084|       |
 3085|       |    ConstructibleArrayType ret;
 3086|       |    std::transform(
 3087|       |        j.begin(), j.end(), std::inserter(ret, end(ret)),
 3088|       |        [](const BasicJsonType & i)
 3089|       |    {
 3090|       |        // get<BasicJsonType>() returns *this, this won't call a from_json
 3091|       |        // method when value_type is BasicJsonType
 3092|       |        return i.template get<typename ConstructibleArrayType::value_type>();
 3093|       |    });
 3094|       |    arr = std::move(ret);
 3095|       |}
 3096|       |
 3097|       |template <typename BasicJsonType, typename ConstructibleArrayType,
 3098|       |          enable_if_t <
 3099|       |              is_constructible_array_type<BasicJsonType, ConstructibleArrayType>::value and
 3100|       |              not is_constructible_object_type<BasicJsonType, ConstructibleArrayType>::value and
 3101|       |              not is_constructible_string_type<BasicJsonType, ConstructibleArrayType>::value and
 3102|       |              not is_basic_json<ConstructibleArrayType>::value,
 3103|       |              int > = 0 >
 3104|       |
 3105|       |auto from_json(const BasicJsonType& j, ConstructibleArrayType& arr)
 3106|       |-> decltype(from_json_array_impl(j, arr, priority_tag<3> {}),
 3107|       |j.template get<typename ConstructibleArrayType::value_type>(),
 3108|       |void())
 3109|     98|{
 3110|     98|    if (JSON_HEDLEY_UNLIKELY(not j.is_array()))
 3111|      0|    {
 3112|      0|        JSON_THROW(type_error::create(302, "type must be array, but is " +
 3113|      0|                                      std::string(j.type_name())));
 3114|      0|    }
 3115|       |
 3116|     98|    from_json_array_impl(j, arr, priority_tag<3> {});
 3117|     98|}
  ------------------
  | _ZN8nlohmann6detail9from_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEES4_ISA_SaISA_EELi0EEEDTcmcmcl20from_json_array_implfp_fp0_tlNS0_12priority_tagILj3EEEEEcldtfp_3getINT0_10value_typeEEEcvv_EERKT_RSH_:
  | 3109|     14|{
  | 3110|     14|    if (JSON_HEDLEY_UNLIKELY(not j.is_array()))
  | 3111|      0|    {
  | 3112|      0|        JSON_THROW(type_error::create(302, "type must be array, but is " +
  | 3113|      0|                                      std::string(j.type_name())));
  | 3114|      0|    }
  | 3115|       |
  | 3116|     14|    from_json_array_impl(j, arr, priority_tag<3> {});
  | 3117|     14|}
  ------------------
  | _ZN8nlohmann6detail9from_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEES4_IiSaIiEELi0EEEDTcmcmcl20from_json_array_implfp_fp0_tlNS0_12priority_tagILj3EEEEEcldtfp_3getINT0_10value_typeEEEcvv_EERKT_RSH_:
  | 3109|     84|{
  | 3110|     84|    if (JSON_HEDLEY_UNLIKELY(not j.is_array()))
  | 3111|      0|    {
  | 3112|      0|        JSON_THROW(type_error::create(302, "type must be array, but is " +
  | 3113|      0|                                      std::string(j.type_name())));
  | 3114|      0|    }
  | 3115|       |
  | 3116|     84|    from_json_array_impl(j, arr, priority_tag<3> {});
  | 3117|     84|}
  ------------------
 3118|       |
 3119|       |template<typename BasicJsonType, typename ConstructibleObjectType,
 3120|       |         enable_if_t<is_constructible_object_type<BasicJsonType, ConstructibleObjectType>::value, int> = 0>
 3121|       |void from_json(const BasicJsonType& j, ConstructibleObjectType& obj)
 3122|       |{
 3123|       |    if (JSON_HEDLEY_UNLIKELY(not j.is_object()))
 3124|       |    {
 3125|       |        JSON_THROW(type_error::create(302, "type must be object, but is " + std::string(j.type_name())));
 3126|       |    }
 3127|       |
 3128|       |    ConstructibleObjectType ret;
 3129|       |    auto inner_object = j.template get_ptr<const typename BasicJsonType::object_t*>();
 3130|       |    using value_type = typename ConstructibleObjectType::value_type;
 3131|       |    std::transform(
 3132|       |        inner_object->begin(), inner_object->end(),
 3133|       |        std::inserter(ret, ret.begin()),
 3134|       |        [](typename BasicJsonType::object_t::value_type const & p)
 3135|       |    {
 3136|       |        return value_type(p.first, p.second.template get<typename ConstructibleObjectType::mapped_type>());
 3137|       |    });
 3138|       |    obj = std::move(ret);
 3139|       |}
 3140|       |
 3141|       |// overload for arithmetic types, not chosen for basic_json template arguments
 3142|       |// (BooleanType, etc..); note: Is it really necessary to provide explicit
 3143|       |// overloads for boolean_t etc. in case of a custom BooleanType which is not
 3144|       |// an arithmetic type?
 3145|       |template<typename BasicJsonType, typename ArithmeticType,
 3146|       |         enable_if_t <
 3147|       |             std::is_arithmetic<ArithmeticType>::value and
 3148|       |             not std::is_same<ArithmeticType, typename BasicJsonType::number_unsigned_t>::value and
 3149|       |             not std::is_same<ArithmeticType, typename BasicJsonType::number_integer_t>::value and
 3150|       |             not std::is_same<ArithmeticType, typename BasicJsonType::number_float_t>::value and
 3151|       |             not std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,
 3152|       |             int> = 0>
 3153|       |void from_json(const BasicJsonType& j, ArithmeticType& val)
 3154|    739|{
 3155|    739|    switch (static_cast<value_t>(j))
 3156|    739|    {
 3157|    728|        case value_t::number_unsigned:
 3158|    728|        {
 3159|    728|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
 3160|    728|            break;
 3161|      0|        }
 3162|      7|        case value_t::number_integer:
 3163|      7|        {
 3164|      7|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
 3165|      7|            break;
 3166|      0|        }
 3167|      4|        case value_t::number_float:
 3168|      4|        {
 3169|      4|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
 3170|      4|            break;
 3171|      0|        }
 3172|      0|        case value_t::boolean:
 3173|      0|        {
 3174|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::boolean_t*>());
 3175|      0|            break;
 3176|      0|        }
 3177|       |
 3178|      0|        default:
 3179|      0|            JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
 3180|    739|    }
 3181|    739|}
  ------------------
  | _ZN8nlohmann6detail9from_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEiLi0EEEvRKT_RT0_:
  | 3154|    723|{
  | 3155|    723|    switch (static_cast<value_t>(j))
  | 3156|    723|    {
  | 3157|    716|        case value_t::number_unsigned:
  | 3158|    716|        {
  | 3159|    716|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
  | 3160|    716|            break;
  | 3161|      0|        }
  | 3162|      7|        case value_t::number_integer:
  | 3163|      7|        {
  | 3164|      7|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
  | 3165|      7|            break;
  | 3166|      0|        }
  | 3167|      0|        case value_t::number_float:
  | 3168|      0|        {
  | 3169|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
  | 3170|      0|            break;
  | 3171|      0|        }
  | 3172|      0|        case value_t::boolean:
  | 3173|      0|        {
  | 3174|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::boolean_t*>());
  | 3175|      0|            break;
  | 3176|      0|        }
  | 3177|       |
  | 3178|      0|        default:
  | 3179|      0|            JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
  | 3180|    723|    }
  | 3181|    723|}
  ------------------
  | _ZN8nlohmann6detail9from_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEjLi0EEEvRKT_RT0_:
  | 3154|     11|{
  | 3155|     11|    switch (static_cast<value_t>(j))
  | 3156|     11|    {
  | 3157|     11|        case value_t::number_unsigned:
  | 3158|     11|        {
  | 3159|     11|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
  | 3160|     11|            break;
  | 3161|      0|        }
  | 3162|      0|        case value_t::number_integer:
  | 3163|      0|        {
  | 3164|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
  | 3165|      0|            break;
  | 3166|      0|        }
  | 3167|      0|        case value_t::number_float:
  | 3168|      0|        {
  | 3169|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
  | 3170|      0|            break;
  | 3171|      0|        }
  | 3172|      0|        case value_t::boolean:
  | 3173|      0|        {
  | 3174|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::boolean_t*>());
  | 3175|      0|            break;
  | 3176|      0|        }
  | 3177|       |
  | 3178|      0|        default:
  | 3179|      0|            JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
  | 3180|     11|    }
  | 3181|     11|}
  ------------------
  | _ZN8nlohmann6detail9from_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEfLi0EEEvRKT_RT0_:
  | 3154|      5|{
  | 3155|      5|    switch (static_cast<value_t>(j))
  | 3156|      5|    {
  | 3157|      1|        case value_t::number_unsigned:
  | 3158|      1|        {
  | 3159|      1|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
  | 3160|      1|            break;
  | 3161|      0|        }
  | 3162|      0|        case value_t::number_integer:
  | 3163|      0|        {
  | 3164|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
  | 3165|      0|            break;
  | 3166|      0|        }
  | 3167|      4|        case value_t::number_float:
  | 3168|      4|        {
  | 3169|      4|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
  | 3170|      4|            break;
  | 3171|      0|        }
  | 3172|      0|        case value_t::boolean:
  | 3173|      0|        {
  | 3174|      0|            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::boolean_t*>());
  | 3175|      0|            break;
  | 3176|      0|        }
  | 3177|       |
  | 3178|      0|        default:
  | 3179|      0|            JSON_THROW(type_error::create(302, "type must be number, but is " + std::string(j.type_name())));
  | 3180|      5|    }
  | 3181|      5|}
  ------------------
 3182|       |
 3183|       |template<typename BasicJsonType, typename A1, typename A2>
 3184|       |void from_json(const BasicJsonType& j, std::pair<A1, A2>& p)
 3185|       |{
 3186|       |    p = {j.at(0).template get<A1>(), j.at(1).template get<A2>()};
 3187|       |}
 3188|       |
 3189|       |template<typename BasicJsonType, typename Tuple, std::size_t... Idx>
 3190|       |void from_json_tuple_impl(const BasicJsonType& j, Tuple& t, index_sequence<Idx...> /*unused*/)
 3191|       |{
 3192|       |    t = std::make_tuple(j.at(Idx).template get<typename std::tuple_element<Idx, Tuple>::type>()...);
 3193|       |}
 3194|       |
 3195|       |template<typename BasicJsonType, typename... Args>
 3196|       |void from_json(const BasicJsonType& j, std::tuple<Args...>& t)
 3197|       |{
 3198|       |    from_json_tuple_impl(j, t, index_sequence_for<Args...> {});
 3199|       |}
 3200|       |
 3201|       |template <typename BasicJsonType, typename Key, typename Value, typename Compare, typename Allocator,
 3202|       |          typename = enable_if_t<not std::is_constructible<
 3203|       |                                     typename BasicJsonType::string_t, Key>::value>>
 3204|       |void from_json(const BasicJsonType& j, std::map<Key, Value, Compare, Allocator>& m)
 3205|       |{
 3206|       |    if (JSON_HEDLEY_UNLIKELY(not j.is_array()))
 3207|       |    {
 3208|       |        JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(j.type_name())));
 3209|       |    }
 3210|       |    m.clear();
 3211|       |    for (const auto& p : j)
 3212|       |    {
 3213|       |        if (JSON_HEDLEY_UNLIKELY(not p.is_array()))
 3214|       |        {
 3215|       |            JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(p.type_name())));
 3216|       |        }
 3217|       |        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());
 3218|       |    }
 3219|       |}
 3220|       |
 3221|       |template <typename BasicJsonType, typename Key, typename Value, typename Hash, typename KeyEqual, typename Allocator,
 3222|       |          typename = enable_if_t<not std::is_constructible<
 3223|       |                                     typename BasicJsonType::string_t, Key>::value>>
 3224|       |void from_json(const BasicJsonType& j, std::unordered_map<Key, Value, Hash, KeyEqual, Allocator>& m)
 3225|       |{
 3226|       |    if (JSON_HEDLEY_UNLIKELY(not j.is_array()))
 3227|       |    {
 3228|       |        JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(j.type_name())));
 3229|       |    }
 3230|       |    m.clear();
 3231|       |    for (const auto& p : j)
 3232|       |    {
 3233|       |        if (JSON_HEDLEY_UNLIKELY(not p.is_array()))
 3234|       |        {
 3235|       |            JSON_THROW(type_error::create(302, "type must be array, but is " + std::string(p.type_name())));
 3236|       |        }
 3237|       |        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());
 3238|       |    }
 3239|       |}
 3240|       |
 3241|       |struct from_json_fn
 3242|       |{
 3243|       |    template<typename BasicJsonType, typename T>
 3244|       |    auto operator()(const BasicJsonType& j, T& val) const
 3245|       |    noexcept(noexcept(from_json(j, val)))
 3246|       |    -> decltype(from_json(j, val), void())
 3247|  6.49k|    {
 3248|  6.49k|        return from_json(j, val);
 3249|  6.49k|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEESB_EEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 3247|  5.62k|    {
  | 3248|  5.62k|        return from_json(j, val);
  | 3249|  5.62k|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEiEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 3247|    723|    {
  | 3248|    723|        return from_json(j, val);
  | 3249|    723|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEES5_ISB_SaISB_EEEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 3247|     14|    {
  | 3248|     14|        return from_json(j, val);
  | 3249|     14|    }
  ------------------
  | Unexecuted instantiation: _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEE5STATEEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEjEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 3247|     11|    {
  | 3248|     11|        return from_json(j, val);
  | 3249|     11|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEdEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 3247|     19|    {
  | 3248|     19|        return from_json(j, val);
  | 3249|     19|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEbEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 3247|     16|    {
  | 3248|     16|        return from_json(j, val);
  | 3249|     16|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEES5_IiSaIiEEEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 3247|     84|    {
  | 3248|     84|        return from_json(j, val);
  | 3249|     84|    }
  ------------------
  | _ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEfEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_:
  | 3247|      5|    {
  | 3248|      5|        return from_json(j, val);
  | 3249|      5|    }
  ------------------
 3250|       |};
 3251|       |}  // namespace detail
 3252|       |
 3253|       |/// namespace to hold default `from_json` function
 3254|       |/// to see why this is required:
 3255|       |/// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html
 3256|       |namespace
 3257|       |{
 3258|       |constexpr const auto& from_json = detail::static_const<detail::from_json_fn>::value;
 3259|       |} // namespace
 3260|       |} // namespace nlohmann
 3261|       |
 3262|       |// #include <nlohmann/detail/conversions/to_json.hpp>
 3263|       |
 3264|       |
 3265|       |#include <algorithm> // copy
 3266|       |#include <ciso646> // or, and, not
 3267|       |#include <iterator> // begin, end
 3268|       |#include <string> // string
 3269|       |#include <tuple> // tuple, get
 3270|       |#include <type_traits> // is_same, is_constructible, is_floating_point, is_enum, underlying_type
 3271|       |#include <utility> // move, forward, declval, pair
 3272|       |#include <valarray> // valarray
 3273|       |#include <vector> // vector
 3274|       |
 3275|       |// #include <nlohmann/detail/iterators/iteration_proxy.hpp>
 3276|       |
 3277|       |
 3278|       |#include <cstddef> // size_t
 3279|       |#include <iterator> // input_iterator_tag
 3280|       |#include <string> // string, to_string
 3281|       |#include <tuple> // tuple_size, get, tuple_element
 3282|       |
 3283|       |// #include <nlohmann/detail/meta/type_traits.hpp>
 3284|       |
 3285|       |// #include <nlohmann/detail/value_t.hpp>
 3286|       |
 3287|       |
 3288|       |namespace nlohmann
 3289|       |{
 3290|       |namespace detail
 3291|       |{
 3292|       |template<typename string_type>
 3293|       |void int_to_string( string_type& target, std::size_t value )
 3294|       |{
 3295|       |    target = std::to_string(value);
 3296|       |}
 3297|       |template <typename IteratorType> class iteration_proxy_value
 3298|       |{
 3299|       |  public:
 3300|       |    using difference_type = std::ptrdiff_t;
 3301|       |    using value_type = iteration_proxy_value;
 3302|       |    using pointer = value_type * ;
 3303|       |    using reference = value_type & ;
 3304|       |    using iterator_category = std::input_iterator_tag;
 3305|       |    using string_type = typename std::remove_cv< typename std::remove_reference<decltype( std::declval<IteratorType>().key() ) >::type >::type;
 3306|       |
 3307|       |  private:
 3308|       |    /// the iterator
 3309|       |    IteratorType anchor;
 3310|       |    /// an index for arrays (used to create key names)
 3311|       |    std::size_t array_index = 0;
 3312|       |    /// last stringified array index
 3313|       |    mutable std::size_t array_index_last = 0;
 3314|       |    /// a string representation of the array index
 3315|       |    mutable string_type array_index_str = "0";
 3316|       |    /// an empty string (to return a reference for primitive values)
 3317|       |    const string_type empty_str = "";
 3318|       |
 3319|       |  public:
 3320|       |    explicit iteration_proxy_value(IteratorType it) noexcept : anchor(it) {}
 3321|       |
 3322|       |    /// dereference operator (needed for range-based for)
 3323|       |    iteration_proxy_value& operator*()
 3324|       |    {
 3325|       |        return *this;
 3326|       |    }
 3327|       |
 3328|       |    /// increment operator (needed for range-based for)
 3329|       |    iteration_proxy_value& operator++()
 3330|       |    {
 3331|       |        ++anchor;
 3332|       |        ++array_index;
 3333|       |
 3334|       |        return *this;
 3335|       |    }
 3336|       |
 3337|       |    /// equality operator (needed for InputIterator)
 3338|       |    bool operator==(const iteration_proxy_value& o) const
 3339|       |    {
 3340|       |        return anchor == o.anchor;
 3341|       |    }
 3342|       |
 3343|       |    /// inequality operator (needed for range-based for)
 3344|       |    bool operator!=(const iteration_proxy_value& o) const
 3345|       |    {
 3346|       |        return anchor != o.anchor;
 3347|       |    }
 3348|       |
 3349|       |    /// return key of the iterator
 3350|       |    const string_type& key() const
 3351|       |    {
 3352|       |        assert(anchor.m_object != nullptr);
 3353|       |
 3354|       |        switch (anchor.m_object->type())
 3355|       |        {
 3356|       |            // use integer array index as key
 3357|       |            case value_t::array:
 3358|       |            {
 3359|       |                if (array_index != array_index_last)
 3360|       |                {
 3361|       |                    int_to_string( array_index_str, array_index );
 3362|       |                    array_index_last = array_index;
 3363|       |                }
 3364|       |                return array_index_str;
 3365|       |            }
 3366|       |
 3367|       |            // use key from the object
 3368|       |            case value_t::object:
 3369|       |                return anchor.key();
 3370|       |
 3371|       |            // use an empty key for all primitive types
 3372|       |            default:
 3373|       |                return empty_str;
 3374|       |        }
 3375|       |    }
 3376|       |
 3377|       |    /// return value of the iterator
 3378|       |    typename IteratorType::reference value() const
 3379|       |    {
 3380|       |        return anchor.value();
 3381|       |    }
 3382|       |};
 3383|       |
 3384|       |/// proxy class for the items() function
 3385|       |template<typename IteratorType> class iteration_proxy
 3386|       |{
 3387|       |  private:
 3388|       |    /// the container to iterate
 3389|       |    typename IteratorType::reference container;
 3390|       |
 3391|       |  public:
 3392|       |    /// construct iteration proxy from a container
 3393|       |    explicit iteration_proxy(typename IteratorType::reference cont) noexcept
 3394|       |        : container(cont) {}
 3395|       |
 3396|       |    /// return iterator begin (needed for range-based for)
 3397|       |    iteration_proxy_value<IteratorType> begin() noexcept
 3398|       |    {
 3399|       |        return iteration_proxy_value<IteratorType>(container.begin());
 3400|       |    }
 3401|       |
 3402|       |    /// return iterator end (needed for range-based for)
 3403|       |    iteration_proxy_value<IteratorType> end() noexcept
 3404|       |    {
 3405|       |        return iteration_proxy_value<IteratorType>(container.end());
 3406|       |    }
 3407|       |};
 3408|       |// Structured Bindings Support
 3409|       |// For further reference see https://blog.tartanllama.xyz/structured-bindings/
 3410|       |// And see https://github.com/nlohmann/json/pull/1391
 3411|       |template <std::size_t N, typename IteratorType, enable_if_t<N == 0, int> = 0>
 3412|       |auto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.key())
 3413|       |{
 3414|       |    return i.key();
 3415|       |}
 3416|       |// Structured Bindings Support
 3417|       |// For further reference see https://blog.tartanllama.xyz/structured-bindings/
 3418|       |// And see https://github.com/nlohmann/json/pull/1391
 3419|       |template <std::size_t N, typename IteratorType, enable_if_t<N == 1, int> = 0>
 3420|       |auto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.value())
 3421|       |{
 3422|       |    return i.value();
 3423|       |}
 3424|       |}  // namespace detail
 3425|       |}  // namespace nlohmann
 3426|       |
 3427|       |// The Addition to the STD Namespace is required to add
 3428|       |// Structured Bindings Support to the iteration_proxy_value class
 3429|       |// For further reference see https://blog.tartanllama.xyz/structured-bindings/
 3430|       |// And see https://github.com/nlohmann/json/pull/1391
 3431|       |namespace std
 3432|       |{
 3433|       |#if defined(__clang__)
 3434|       |    // Fix: https://github.com/nlohmann/json/issues/1401
 3435|       |    #pragma clang diagnostic push
 3436|       |    #pragma clang diagnostic ignored "-Wmismatched-tags"
 3437|       |#endif
 3438|       |template <typename IteratorType>
 3439|       |class tuple_size<::nlohmann::detail::iteration_proxy_value<IteratorType>>
 3440|       |            : public std::integral_constant<std::size_t, 2> {};
 3441|       |
 3442|       |template <std::size_t N, typename IteratorType>
 3443|       |class tuple_element<N, ::nlohmann::detail::iteration_proxy_value<IteratorType >>
 3444|       |{
 3445|       |  public:
 3446|       |    using type = decltype(
 3447|       |                     get<N>(std::declval <
 3448|       |                            ::nlohmann::detail::iteration_proxy_value<IteratorType >> ()));
 3449|       |};
 3450|       |#if defined(__clang__)
 3451|       |    #pragma clang diagnostic pop
 3452|       |#endif
 3453|       |} // namespace std
 3454|       |
 3455|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
 3456|       |
 3457|       |// #include <nlohmann/detail/meta/type_traits.hpp>
 3458|       |
 3459|       |// #include <nlohmann/detail/value_t.hpp>
 3460|       |
 3461|       |
 3462|       |namespace nlohmann
 3463|       |{
 3464|       |namespace detail
 3465|       |{
 3466|       |//////////////////
 3467|       |// constructors //
 3468|       |//////////////////
 3469|       |
 3470|       |template<value_t> struct external_constructor;
 3471|       |
 3472|       |template<>
 3473|       |struct external_constructor<value_t::boolean>
 3474|       |{
 3475|       |    template<typename BasicJsonType>
 3476|       |    static void construct(BasicJsonType& j, typename BasicJsonType::boolean_t b) noexcept
 3477|    352|    {
 3478|    352|        j.m_type = value_t::boolean;
 3479|    352|        j.m_value = b;
 3480|    352|        j.assert_invariant();
 3481|    352|    }
 3482|       |};
 3483|       |
 3484|       |template<>
 3485|       |struct external_constructor<value_t::string>
 3486|       |{
 3487|       |    template<typename BasicJsonType>
 3488|       |    static void construct(BasicJsonType& j, const typename BasicJsonType::string_t& s)
 3489|  33.4k|    {
 3490|  33.4k|        j.m_type = value_t::string;
 3491|  33.4k|        j.m_value = s;
 3492|  33.4k|        j.assert_invariant();
 3493|  33.4k|    }
 3494|       |
 3495|       |    template<typename BasicJsonType>
 3496|       |    static void construct(BasicJsonType& j, typename BasicJsonType::string_t&& s)
 3497|    863|    {
 3498|    863|        j.m_type = value_t::string;
 3499|    863|        j.m_value = std::move(s);
 3500|    863|        j.assert_invariant();
 3501|    863|    }
 3502|       |
 3503|       |    template<typename BasicJsonType, typename CompatibleStringType,
 3504|       |             enable_if_t<not std::is_same<CompatibleStringType, typename BasicJsonType::string_t>::value,
 3505|       |                         int> = 0>
 3506|       |    static void construct(BasicJsonType& j, const CompatibleStringType& str)
 3507|     89|    {
 3508|     89|        j.m_type = value_t::string;
 3509|     89|        j.m_value.string = j.template create<typename BasicJsonType::string_t>(str);
 3510|     89|        j.assert_invariant();
 3511|     89|    }
  ------------------
  | _ZN8nlohmann6detail20external_constructorILNS0_7value_tE3EE9constructINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEA474_cLi0EEEvRT_RKT0_:
  | 3507|     68|    {
  | 3508|     68|        j.m_type = value_t::string;
  | 3509|     68|        j.m_value.string = j.template create<typename BasicJsonType::string_t>(str);
  | 3510|     68|        j.assert_invariant();
  | 3511|     68|    }
  ------------------
  | _ZN8nlohmann6detail20external_constructorILNS0_7value_tE3EE9constructINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEPKcLi0EEEvRT_RKT0_:
  | 3507|     20|    {
  | 3508|     20|        j.m_type = value_t::string;
  | 3509|     20|        j.m_value.string = j.template create<typename BasicJsonType::string_t>(str);
  | 3510|     20|        j.assert_invariant();
  | 3511|     20|    }
  ------------------
  | _ZN8nlohmann6detail20external_constructorILNS0_7value_tE3EE9constructINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEA6_cLi0EEEvRT_RKT0_:
  | 3507|      1|    {
  | 3508|      1|        j.m_type = value_t::string;
  | 3509|      1|        j.m_value.string = j.template create<typename BasicJsonType::string_t>(str);
  | 3510|      1|        j.assert_invariant();
  | 3511|      1|    }
  ------------------
 3512|       |};
 3513|       |
 3514|       |template<>
 3515|       |struct external_constructor<value_t::number_float>
 3516|       |{
 3517|       |    template<typename BasicJsonType>
 3518|       |    static void construct(BasicJsonType& j, typename BasicJsonType::number_float_t val) noexcept
 3519|  29.4k|    {
 3520|  29.4k|        j.m_type = value_t::number_float;
 3521|  29.4k|        j.m_value = val;
 3522|  29.4k|        j.assert_invariant();
 3523|  29.4k|    }
 3524|       |};
 3525|       |
 3526|       |template<>
 3527|       |struct external_constructor<value_t::number_unsigned>
 3528|       |{
 3529|       |    template<typename BasicJsonType>
 3530|       |    static void construct(BasicJsonType& j, typename BasicJsonType::number_unsigned_t val) noexcept
 3531|  40.5k|    {
 3532|  40.5k|        j.m_type = value_t::number_unsigned;
 3533|  40.5k|        j.m_value = val;
 3534|  40.5k|        j.assert_invariant();
 3535|  40.5k|    }
 3536|       |};
 3537|       |
 3538|       |template<>
 3539|       |struct external_constructor<value_t::number_integer>
 3540|       |{
 3541|       |    template<typename BasicJsonType>
 3542|       |    static void construct(BasicJsonType& j, typename BasicJsonType::number_integer_t val) noexcept
 3543|  4.89k|    {
 3544|  4.89k|        j.m_type = value_t::number_integer;
 3545|  4.89k|        j.m_value = val;
 3546|  4.89k|        j.assert_invariant();
 3547|  4.89k|    }
 3548|       |};
 3549|       |
 3550|       |template<>
 3551|       |struct external_constructor<value_t::array>
 3552|       |{
 3553|       |    template<typename BasicJsonType>
 3554|       |    static void construct(BasicJsonType& j, const typename BasicJsonType::array_t& arr)
 3555|       |    {
 3556|       |        j.m_type = value_t::array;
 3557|       |        j.m_value = arr;
 3558|       |        j.assert_invariant();
 3559|       |    }
 3560|       |
 3561|       |    template<typename BasicJsonType>
 3562|       |    static void construct(BasicJsonType& j, typename BasicJsonType::array_t&& arr)
 3563|       |    {
 3564|       |        j.m_type = value_t::array;
 3565|       |        j.m_value = std::move(arr);
 3566|       |        j.assert_invariant();
 3567|       |    }
 3568|       |
 3569|       |    template<typename BasicJsonType, typename CompatibleArrayType,
 3570|       |             enable_if_t<not std::is_same<CompatibleArrayType, typename BasicJsonType::array_t>::value,
 3571|       |                         int> = 0>
 3572|       |    static void construct(BasicJsonType& j, const CompatibleArrayType& arr)
 3573|      5|    {
 3574|      5|        using std::begin;
 3575|      5|        using std::end;
 3576|      5|        j.m_type = value_t::array;
 3577|      5|        j.m_value.array = j.template create<typename BasicJsonType::array_t>(begin(arr), end(arr));
 3578|      5|        j.assert_invariant();
 3579|      5|    }
 3580|       |
 3581|       |    template<typename BasicJsonType>
 3582|       |    static void construct(BasicJsonType& j, const std::vector<bool>& arr)
 3583|       |    {
 3584|       |        j.m_type = value_t::array;
 3585|       |        j.m_value = value_t::array;
 3586|       |        j.m_value.array->reserve(arr.size());
 3587|       |        for (const bool x : arr)
 3588|       |        {
 3589|       |            j.m_value.array->push_back(x);
 3590|       |        }
 3591|       |        j.assert_invariant();
 3592|       |    }
 3593|       |
 3594|       |    template<typename BasicJsonType, typename T,
 3595|       |             enable_if_t<std::is_convertible<T, BasicJsonType>::value, int> = 0>
 3596|       |    static void construct(BasicJsonType& j, const std::valarray<T>& arr)
 3597|       |    {
 3598|       |        j.m_type = value_t::array;
 3599|       |        j.m_value = value_t::array;
 3600|       |        j.m_value.array->resize(arr.size());
 3601|       |        if (arr.size() > 0)
 3602|       |        {
 3603|       |            std::copy(std::begin(arr), std::end(arr), j.m_value.array->begin());
 3604|       |        }
 3605|       |        j.assert_invariant();
 3606|       |    }
 3607|       |};
 3608|       |
 3609|       |template<>
 3610|       |struct external_constructor<value_t::object>
 3611|       |{
 3612|       |    template<typename BasicJsonType>
 3613|       |    static void construct(BasicJsonType& j, const typename BasicJsonType::object_t& obj)
 3614|       |    {
 3615|       |        j.m_type = value_t::object;
 3616|       |        j.m_value = obj;
 3617|       |        j.assert_invariant();
 3618|       |    }
 3619|       |
 3620|       |    template<typename BasicJsonType>
 3621|       |    static void construct(BasicJsonType& j, typename BasicJsonType::object_t&& obj)
 3622|       |    {
 3623|       |        j.m_type = value_t::object;
 3624|       |        j.m_value = std::move(obj);
 3625|       |        j.assert_invariant();
 3626|       |    }
 3627|       |
 3628|       |    template<typename BasicJsonType, typename CompatibleObjectType,
 3629|       |             enable_if_t<not std::is_same<CompatibleObjectType, typename BasicJsonType::object_t>::value, int> = 0>
 3630|       |    static void construct(BasicJsonType& j, const CompatibleObjectType& obj)
 3631|       |    {
 3632|       |        using std::begin;
 3633|       |        using std::end;
 3634|       |
 3635|       |        j.m_type = value_t::object;
 3636|       |        j.m_value.object = j.template create<typename BasicJsonType::object_t>(begin(obj), end(obj));
 3637|       |        j.assert_invariant();
 3638|       |    }
 3639|       |};
 3640|       |
 3641|       |/////////////
 3642|       |// to_json //
 3643|       |/////////////
 3644|       |
 3645|       |template<typename BasicJsonType, typename T,
 3646|       |         enable_if_t<std::is_same<T, typename BasicJsonType::boolean_t>::value, int> = 0>
 3647|       |void to_json(BasicJsonType& j, T b) noexcept
 3648|    352|{
 3649|    352|    external_constructor<value_t::boolean>::construct(j, b);
 3650|    352|}
 3651|       |
 3652|       |template<typename BasicJsonType, typename CompatibleString,
 3653|       |         enable_if_t<std::is_constructible<typename BasicJsonType::string_t, CompatibleString>::value, int> = 0>
 3654|       |void to_json(BasicJsonType& j, const CompatibleString& s)
 3655|  33.5k|{
 3656|  33.5k|    external_constructor<value_t::string>::construct(j, s);
 3657|  33.5k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEESA_Li0EEEvRT_RKT0_:
  | 3655|  33.4k|{
  | 3656|  33.4k|    external_constructor<value_t::string>::construct(j, s);
  | 3657|  33.4k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEA474_cLi0EEEvRT_RKT0_:
  | 3655|     68|{
  | 3656|     68|    external_constructor<value_t::string>::construct(j, s);
  | 3657|     68|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEPKcLi0EEEvRT_RKT0_:
  | 3655|     20|{
  | 3656|     20|    external_constructor<value_t::string>::construct(j, s);
  | 3657|     20|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEA6_cLi0EEEvRT_RKT0_:
  | 3655|      1|{
  | 3656|      1|    external_constructor<value_t::string>::construct(j, s);
  | 3657|      1|}
  ------------------
 3658|       |
 3659|       |template<typename BasicJsonType>
 3660|       |void to_json(BasicJsonType& j, typename BasicJsonType::string_t&& s)
 3661|    863|{
 3662|    863|    external_constructor<value_t::string>::construct(j, std::move(s));
 3663|    863|}
 3664|       |
 3665|       |template<typename BasicJsonType, typename FloatType,
 3666|       |         enable_if_t<std::is_floating_point<FloatType>::value, int> = 0>
 3667|       |void to_json(BasicJsonType& j, FloatType val) noexcept
 3668|  29.4k|{
 3669|  29.4k|    external_constructor<value_t::number_float>::construct(j, static_cast<typename BasicJsonType::number_float_t>(val));
 3670|  29.4k|}
 3671|       |
 3672|       |template<typename BasicJsonType, typename CompatibleNumberUnsignedType,
 3673|       |         enable_if_t<is_compatible_integer_type<typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType>::value, int> = 0>
 3674|       |void to_json(BasicJsonType& j, CompatibleNumberUnsignedType val) noexcept
 3675|  40.5k|{
 3676|  40.5k|    external_constructor<value_t::number_unsigned>::construct(j, static_cast<typename BasicJsonType::number_unsigned_t>(val));
 3677|  40.5k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEmLi0EEEvRT_T0_:
  | 3675|  40.3k|{
  | 3676|  40.3k|    external_constructor<value_t::number_unsigned>::construct(j, static_cast<typename BasicJsonType::number_unsigned_t>(val));
  | 3677|  40.3k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEjLi0EEEvRT_T0_:
  | 3675|    238|{
  | 3676|    238|    external_constructor<value_t::number_unsigned>::construct(j, static_cast<typename BasicJsonType::number_unsigned_t>(val));
  | 3677|    238|}
  ------------------
 3678|       |
 3679|       |template<typename BasicJsonType, typename CompatibleNumberIntegerType,
 3680|       |         enable_if_t<is_compatible_integer_type<typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType>::value, int> = 0>
 3681|       |void to_json(BasicJsonType& j, CompatibleNumberIntegerType val) noexcept
 3682|  4.89k|{
 3683|  4.89k|    external_constructor<value_t::number_integer>::construct(j, static_cast<typename BasicJsonType::number_integer_t>(val));
 3684|  4.89k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEElLi0EEEvRT_T0_:
  | 3682|  4.69k|{
  | 3683|  4.69k|    external_constructor<value_t::number_integer>::construct(j, static_cast<typename BasicJsonType::number_integer_t>(val));
  | 3684|  4.69k|}
  ------------------
  | _ZN8nlohmann6detail7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEiLi0EEEvRT_T0_:
  | 3682|    202|{
  | 3683|    202|    external_constructor<value_t::number_integer>::construct(j, static_cast<typename BasicJsonType::number_integer_t>(val));
  | 3684|    202|}
  ------------------
 3685|       |
 3686|       |template<typename BasicJsonType, typename EnumType,
 3687|       |         enable_if_t<std::is_enum<EnumType>::value, int> = 0>
 3688|       |void to_json(BasicJsonType& j, EnumType e) noexcept
 3689|       |{
 3690|       |    using underlying_type = typename std::underlying_type<EnumType>::type;
 3691|       |    external_constructor<value_t::number_integer>::construct(j, static_cast<underlying_type>(e));
 3692|       |}
 3693|       |
 3694|       |template<typename BasicJsonType>
 3695|       |void to_json(BasicJsonType& j, const std::vector<bool>& e)
 3696|       |{
 3697|       |    external_constructor<value_t::array>::construct(j, e);
 3698|       |}
 3699|       |
 3700|       |template <typename BasicJsonType, typename CompatibleArrayType,
 3701|       |          enable_if_t<is_compatible_array_type<BasicJsonType,
 3702|       |                      CompatibleArrayType>::value and
 3703|       |                      not is_compatible_object_type<
 3704|       |                          BasicJsonType, CompatibleArrayType>::value and
 3705|       |                      not is_compatible_string_type<BasicJsonType, CompatibleArrayType>::value and
 3706|       |                      not is_basic_json<CompatibleArrayType>::value,
 3707|       |                      int> = 0>
 3708|       |void to_json(BasicJsonType& j, const CompatibleArrayType& arr)
 3709|      5|{
 3710|      5|    external_constructor<value_t::array>::construct(j, arr);
 3711|      5|}
 3712|       |
 3713|       |template<typename BasicJsonType, typename T,
 3714|       |         enable_if_t<std::is_convertible<T, BasicJsonType>::value, int> = 0>
 3715|       |void to_json(BasicJsonType& j, const std::valarray<T>& arr)
 3716|       |{
 3717|       |    external_constructor<value_t::array>::construct(j, std::move(arr));
 3718|       |}
 3719|       |
 3720|       |template<typename BasicJsonType>
 3721|       |void to_json(BasicJsonType& j, typename BasicJsonType::array_t&& arr)
 3722|       |{
 3723|       |    external_constructor<value_t::array>::construct(j, std::move(arr));
 3724|       |}
 3725|       |
 3726|       |template<typename BasicJsonType, typename CompatibleObjectType,
 3727|       |         enable_if_t<is_compatible_object_type<BasicJsonType, CompatibleObjectType>::value and not is_basic_json<CompatibleObjectType>::value, int> = 0>
 3728|       |void to_json(BasicJsonType& j, const CompatibleObjectType& obj)
 3729|       |{
 3730|       |    external_constructor<value_t::object>::construct(j, obj);
 3731|       |}
 3732|       |
 3733|       |template<typename BasicJsonType>
 3734|       |void to_json(BasicJsonType& j, typename BasicJsonType::object_t&& obj)
 3735|       |{
 3736|       |    external_constructor<value_t::object>::construct(j, std::move(obj));
 3737|       |}
 3738|       |
 3739|       |template <
 3740|       |    typename BasicJsonType, typename T, std::size_t N,
 3741|       |    enable_if_t<not std::is_constructible<typename BasicJsonType::string_t,
 3742|       |                const T(&)[N]>::value,
 3743|       |                int> = 0 >
 3744|       |void to_json(BasicJsonType& j, const T(&arr)[N])
 3745|       |{
 3746|       |    external_constructor<value_t::array>::construct(j, arr);
 3747|       |}
 3748|       |
 3749|       |template < typename BasicJsonType, typename T1, typename T2, enable_if_t < std::is_constructible<BasicJsonType, T1>::value&& std::is_constructible<BasicJsonType, T2>::value, int > = 0 >
 3750|       |void to_json(BasicJsonType& j, const std::pair<T1, T2>& p)
 3751|       |{
 3752|       |    j = { p.first, p.second };
 3753|       |}
 3754|       |
 3755|       |// for https://github.com/nlohmann/json/pull/1134
 3756|       |template < typename BasicJsonType, typename T,
 3757|       |           enable_if_t<std::is_same<T, iteration_proxy_value<typename BasicJsonType::iterator>>::value, int> = 0>
 3758|       |void to_json(BasicJsonType& j, const T& b)
 3759|       |{
 3760|       |    j = { {b.key(), b.value()} };
 3761|       |}
 3762|       |
 3763|       |template<typename BasicJsonType, typename Tuple, std::size_t... Idx>
 3764|       |void to_json_tuple_impl(BasicJsonType& j, const Tuple& t, index_sequence<Idx...> /*unused*/)
 3765|       |{
 3766|       |    j = { std::get<Idx>(t)... };
 3767|       |}
 3768|       |
 3769|       |template<typename BasicJsonType, typename T, enable_if_t<is_constructible_tuple<BasicJsonType, T>::value, int > = 0>
 3770|       |void to_json(BasicJsonType& j, const T& t)
 3771|       |{
 3772|       |    to_json_tuple_impl(j, t, make_index_sequence<std::tuple_size<T>::value> {});
 3773|       |}
 3774|       |
 3775|       |struct to_json_fn
 3776|       |{
 3777|       |    template<typename BasicJsonType, typename T>
 3778|       |    auto operator()(BasicJsonType& j, T&& val) const noexcept(noexcept(to_json(j, std::forward<T>(val))))
 3779|       |    -> decltype(to_json(j, std::forward<T>(val)), void())
 3780|   109k|    {
 3781|   109k|        return to_json(j, std::forward<T>(val));
 3782|   109k|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERSB_EEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3780|  33.4k|    {
  | 3781|  33.4k|        return to_json(j, std::forward<T>(val));
  | 3782|  33.4k|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERdEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3780|  29.4k|    {
  | 3781|  29.4k|        return to_json(j, std::forward<T>(val));
  | 3782|  29.4k|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERbEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3780|    348|    {
  | 3781|    348|        return to_json(j, std::forward<T>(val));
  | 3782|    348|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERlEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3780|  4.69k|    {
  | 3781|  4.69k|        return to_json(j, std::forward<T>(val));
  | 3782|  4.69k|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERmEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3780|  40.3k|    {
  | 3781|  40.3k|        return to_json(j, std::forward<T>(val));
  | 3782|  40.3k|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERA474_KcEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSH_:
  | 3780|     68|    {
  | 3781|     68|        return to_json(j, std::forward<T>(val));
  | 3782|     68|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEdEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 3780|     11|    {
  | 3781|     11|        return to_json(j, std::forward<T>(val));
  | 3782|     11|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEESB_EEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 3780|    863|    {
  | 3781|    863|        return to_json(j, std::forward<T>(val));
  | 3782|    863|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERjEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3780|    134|    {
  | 3781|    134|        return to_json(j, std::forward<T>(val));
  | 3782|    134|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERS5_ISB_SaISB_EEEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSH_:
  | 3780|      5|    {
  | 3781|      5|        return to_json(j, std::forward<T>(val));
  | 3782|      5|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERKSB_EEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_:
  | 3780|     18|    {
  | 3781|     18|        return to_json(j, std::forward<T>(val));
  | 3782|     18|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERKPKcEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSI_:
  | 3780|     20|    {
  | 3781|     20|        return to_json(j, std::forward<T>(val));
  | 3782|     20|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEbEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 3780|      4|    {
  | 3781|      4|        return to_json(j, std::forward<T>(val));
  | 3782|      4|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERA6_KcEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSH_:
  | 3780|      1|    {
  | 3781|      1|        return to_json(j, std::forward<T>(val));
  | 3782|      1|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEiEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 3780|    103|    {
  | 3781|    103|        return to_json(j, std::forward<T>(val));
  | 3782|    103|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEjEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 3780|    104|    {
  | 3781|    104|        return to_json(j, std::forward<T>(val));
  | 3782|    104|    }
  ------------------
  | _ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEERiEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3780|     99|    {
  | 3781|     99|        return to_json(j, std::forward<T>(val));
  | 3782|     99|    }
  ------------------
 3783|       |};
 3784|       |}  // namespace detail
 3785|       |
 3786|       |/// namespace to hold default `to_json` function
 3787|       |namespace
 3788|       |{
 3789|       |constexpr const auto& to_json = detail::static_const<detail::to_json_fn>::value;
 3790|       |} // namespace
 3791|       |} // namespace nlohmann
 3792|       |
 3793|       |
 3794|       |namespace nlohmann
 3795|       |{
 3796|       |
 3797|       |template<typename, typename>
 3798|       |struct adl_serializer
 3799|       |{
 3800|       |    /*!
 3801|       |    @brief convert a JSON value to any value type
 3802|       |
 3803|       |    This function is usually called by the `get()` function of the
 3804|       |    @ref basic_json class (either explicit or via conversion operators).
 3805|       |
 3806|       |    @param[in] j        JSON value to read from
 3807|       |    @param[in,out] val  value to write to
 3808|       |    */
 3809|       |    template<typename BasicJsonType, typename ValueType>
 3810|       |    static auto from_json(BasicJsonType&& j, ValueType& val) noexcept(
 3811|       |        noexcept(::nlohmann::from_json(std::forward<BasicJsonType>(j), val)))
 3812|       |    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), val), void())
 3813|  6.49k|    {
 3814|  6.49k|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
 3815|  6.49k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorS6_blmdSaS0_EES6_EEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSG_RT0_:
  | 3813|  5.62k|    {
  | 3814|  5.62k|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  | 3815|  5.62k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIivE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEiEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSG_RT0_:
  | 3813|    723|    {
  | 3814|    723|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  | 3815|    723|    }
  ------------------
  | _ZN8nlohmann14adl_serializerISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EEvE9from_jsonIRKNS_10basic_jsonISt3mapS1_S7_blmdSaS0_EES9_EEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSI_RT0_:
  | 3813|     14|    {
  | 3814|     14|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  | 3815|     14|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann14adl_serializerI5STATEvE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EES1_EEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSH_RT0_
  ------------------
  | _ZN8nlohmann14adl_serializerIjvE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEjEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSG_RT0_:
  | 3813|     11|    {
  | 3814|     11|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  | 3815|     11|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIdvE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEdEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSG_RT0_:
  | 3813|     19|    {
  | 3814|     19|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  | 3815|     19|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIbvE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEbEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSG_RT0_:
  | 3813|     16|    {
  | 3814|     16|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  | 3815|     16|    }
  ------------------
  | _ZN8nlohmann14adl_serializerISt6vectorIiSaIiEEvE9from_jsonIRKNS_10basic_jsonISt3mapS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EES3_EEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSI_RT0_:
  | 3813|     84|    {
  | 3814|     84|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  | 3815|     84|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIfvE9from_jsonIRKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEfEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSG_RT0_:
  | 3813|      5|    {
  | 3814|      5|        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
  | 3815|      5|    }
  ------------------
 3816|       |
 3817|       |    /*!
 3818|       |    @brief convert any value type to a JSON value
 3819|       |
 3820|       |    This function is usually called by the constructors of the @ref basic_json
 3821|       |    class.
 3822|       |
 3823|       |    @param[in,out] j  JSON value to write to
 3824|       |    @param[in] val    value to read from
 3825|       |    */
 3826|       |    template <typename BasicJsonType, typename ValueType>
 3827|       |    static auto to_json(BasicJsonType& j, ValueType&& val) noexcept(
 3828|       |        noexcept(::nlohmann::to_json(j, std::forward<ValueType>(val))))
 3829|       |    -> decltype(::nlohmann::to_json(j, std::forward<ValueType>(val)), void())
 3830|   109k|    {
 3831|   109k|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
 3832|   109k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE7to_jsonINS_10basic_jsonISt3mapSt6vectorS6_blmdSaS0_EERS6_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3830|  33.4k|    {
  | 3831|  33.4k|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|  33.4k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIdvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERdEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3830|  29.4k|    {
  | 3831|  29.4k|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|  29.4k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIbvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERbEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3830|    348|    {
  | 3831|    348|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|    348|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIlvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERlEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3830|  4.69k|    {
  | 3831|  4.69k|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|  4.69k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerImvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERmEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3830|  40.3k|    {
  | 3831|  40.3k|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|  40.3k|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIA474_cvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERA474_KcEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSI_:
  | 3830|     68|    {
  | 3831|     68|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|     68|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIdvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEdEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 3830|     11|    {
  | 3831|     11|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|     11|    }
  ------------------
  | _ZN8nlohmann14adl_serializerINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE7to_jsonINS_10basic_jsonISt3mapSt6vectorS6_blmdSaS0_EES6_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 3830|    863|    {
  | 3831|    863|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|    863|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIjvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERjEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3830|    134|    {
  | 3831|    134|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|    134|    }
  ------------------
  | _ZN8nlohmann14adl_serializerISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EEvE7to_jsonINS_10basic_jsonISt3mapS1_S7_blmdSaS0_EERS9_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSH_:
  | 3830|      5|    {
  | 3831|      5|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|      5|    }
  ------------------
  | _ZN8nlohmann14adl_serializerINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE7to_jsonINS_10basic_jsonISt3mapSt6vectorS6_blmdSaS0_EERKS6_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_:
  | 3830|     18|    {
  | 3831|     18|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|     18|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIPKcvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERKS2_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSI_:
  | 3830|     20|    {
  | 3831|     20|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|     20|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIbvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEbEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 3830|      4|    {
  | 3831|      4|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|      4|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIA6_cvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERA6_KcEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSI_:
  | 3830|      1|    {
  | 3831|      1|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|      1|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIivE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEiEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 3830|    103|    {
  | 3831|    103|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|    103|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIjvE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EEjEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSE_:
  | 3830|    104|    {
  | 3831|    104|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|    104|    }
  ------------------
  | _ZN8nlohmann14adl_serializerIivE7to_jsonINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaS0_EERiEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSF_:
  | 3830|     99|    {
  | 3831|     99|        ::nlohmann::to_json(j, std::forward<ValueType>(val));
  | 3832|     99|    }
  ------------------
 3833|       |};
 3834|       |
 3835|       |}  // namespace nlohmann
 3836|       |
 3837|       |// #include <nlohmann/detail/conversions/from_json.hpp>
 3838|       |
 3839|       |// #include <nlohmann/detail/conversions/to_json.hpp>
 3840|       |
 3841|       |// #include <nlohmann/detail/exceptions.hpp>
 3842|       |
 3843|       |// #include <nlohmann/detail/input/binary_reader.hpp>
 3844|       |
 3845|       |
 3846|       |#include <algorithm> // generate_n
 3847|       |#include <array> // array
 3848|       |#include <cassert> // assert
 3849|       |#include <cmath> // ldexp
 3850|       |#include <cstddef> // size_t
 3851|       |#include <cstdint> // uint8_t, uint16_t, uint32_t, uint64_t
 3852|       |#include <cstdio> // snprintf
 3853|       |#include <cstring> // memcpy
 3854|       |#include <iterator> // back_inserter
 3855|       |#include <limits> // numeric_limits
 3856|       |#include <string> // char_traits, string
 3857|       |#include <utility> // make_pair, move
 3858|       |
 3859|       |// #include <nlohmann/detail/exceptions.hpp>
 3860|       |
 3861|       |// #include <nlohmann/detail/input/input_adapters.hpp>
 3862|       |
 3863|       |
 3864|       |#include <array> // array
 3865|       |#include <cassert> // assert
 3866|       |#include <cstddef> // size_t
 3867|       |#include <cstdio> //FILE *
 3868|       |#include <cstring> // strlen
 3869|       |#include <istream> // istream
 3870|       |#include <iterator> // begin, end, iterator_traits, random_access_iterator_tag, distance, next
 3871|       |#include <memory> // shared_ptr, make_shared, addressof
 3872|       |#include <numeric> // accumulate
 3873|       |#include <string> // string, char_traits
 3874|       |#include <type_traits> // enable_if, is_base_of, is_pointer, is_integral, remove_pointer
 3875|       |#include <utility> // pair, declval
 3876|       |
 3877|       |// #include <nlohmann/detail/iterators/iterator_traits.hpp>
 3878|       |
 3879|       |// #include <nlohmann/detail/macro_scope.hpp>
 3880|       |
 3881|       |
 3882|       |namespace nlohmann
 3883|       |{
 3884|       |namespace detail
 3885|       |{
 3886|       |/// the supported input formats
 3887|       |enum class input_format_t { json, cbor, msgpack, ubjson, bson };
 3888|       |
 3889|       |////////////////////
 3890|       |// input adapters //
 3891|       |////////////////////
 3892|       |
 3893|       |/*!
 3894|       |@brief abstract input adapter interface
 3895|       |
 3896|       |Produces a stream of std::char_traits<char>::int_type characters from a
 3897|       |std::istream, a buffer, or some other input type. Accepts the return of
 3898|       |exactly one non-EOF character for future input. The int_type characters
 3899|       |returned consist of all valid char values as positive values (typically
 3900|       |unsigned char), plus an EOF value outside that range, specified by the value
 3901|       |of the function std::char_traits<char>::eof(). This value is typically -1, but
 3902|       |could be any arbitrary value which is not a valid char value.
 3903|       |*/
 3904|       |struct input_adapter_protocol
 3905|       |{
 3906|       |    /// get a character [0,255] or std::char_traits<char>::eof().
 3907|       |    virtual std::char_traits<char>::int_type get_character() = 0;
 3908|    645|    virtual ~input_adapter_protocol() = default;
 3909|       |};
 3910|       |
 3911|       |/// a type to simplify interfaces
 3912|       |using input_adapter_t = std::shared_ptr<input_adapter_protocol>;
 3913|       |
 3914|       |/*!
 3915|       |Input adapter for stdio file access. This adapter read only 1 byte and do not use any
 3916|       | buffer. This adapter is a very low level adapter.
 3917|       |*/
 3918|       |class file_input_adapter : public input_adapter_protocol
 3919|       |{
 3920|       |  public:
 3921|       |    JSON_HEDLEY_NON_NULL(2)
 3922|       |    explicit file_input_adapter(std::FILE* f)  noexcept
 3923|       |        : m_file(f)
 3924|      0|    {}
 3925|       |
 3926|       |    // make class move-only
 3927|       |    file_input_adapter(const file_input_adapter&) = delete;
 3928|       |    file_input_adapter(file_input_adapter&&) = default;
 3929|       |    file_input_adapter& operator=(const file_input_adapter&) = delete;
 3930|       |    file_input_adapter& operator=(file_input_adapter&&) = default;
 3931|       |    ~file_input_adapter() override = default;
 3932|       |
 3933|       |    std::char_traits<char>::int_type get_character() noexcept override
 3934|      0|    {
 3935|      0|        return std::fgetc(m_file);
 3936|      0|    }
 3937|       |
 3938|       |  private:
 3939|       |    /// the file pointer to read from
 3940|       |    std::FILE* m_file;
 3941|       |};
 3942|       |
 3943|       |
 3944|       |/*!
 3945|       |Input adapter for a (caching) istream. Ignores a UFT Byte Order Mark at
 3946|       |beginning of input. Does not support changing the underlying std::streambuf
 3947|       |in mid-input. Maintains underlying std::istream and std::streambuf to support
 3948|       |subsequent use of standard std::istream operations to process any input
 3949|       |characters following those used in parsing the JSON input.  Clears the
 3950|       |std::istream flags; any input errors (e.g., EOF) will be detected by the first
 3951|       |subsequent call for input from the std::istream.
 3952|       |*/
 3953|       |class input_stream_adapter : public input_adapter_protocol
 3954|       |{
 3955|       |  public:
 3956|       |    ~input_stream_adapter() override
 3957|    231|    {
 3958|       |        // clear stream flags; we use underlying streambuf I/O, do not
 3959|       |        // maintain ifstream flags, except eof
 3960|    231|        is.clear(is.rdstate() & std::ios::eofbit);
 3961|    231|    }
 3962|       |
 3963|       |    explicit input_stream_adapter(std::istream& i)
 3964|       |        : is(i), sb(*i.rdbuf())
 3965|    231|    {}
 3966|       |
 3967|       |    // delete because of pointer members
 3968|       |    input_stream_adapter(const input_stream_adapter&) = delete;
 3969|       |    input_stream_adapter& operator=(input_stream_adapter&) = delete;
 3970|       |    input_stream_adapter(input_stream_adapter&&) = delete;
 3971|       |    input_stream_adapter& operator=(input_stream_adapter&&) = delete;
 3972|       |
 3973|       |    // std::istream/std::streambuf use std::char_traits<char>::to_int_type, to
 3974|       |    // ensure that std::char_traits<char>::eof() and the character 0xFF do not
 3975|       |    // end up as the same value, eg. 0xFFFFFFFF.
 3976|       |    std::char_traits<char>::int_type get_character() override
 3977|   327k|    {
 3978|   327k|        auto res = sb.sbumpc();
 3979|       |        // set eof manually, as we don't use the istream interface.
 3980|   327k|        if (res == EOF)
 3981|     12|        {
 3982|     12|            is.clear(is.rdstate() | std::ios::eofbit);
 3983|     12|        }
 3984|   327k|        return res;
 3985|   327k|    }
 3986|       |
 3987|       |  private:
 3988|       |    /// the associated input stream
 3989|       |    std::istream& is;
 3990|       |    std::streambuf& sb;
 3991|       |};
 3992|       |
 3993|       |/// input adapter for buffer input
 3994|       |class input_buffer_adapter : public input_adapter_protocol
 3995|       |{
 3996|       |  public:
 3997|       |    input_buffer_adapter(const char* b, const std::size_t l) noexcept
 3998|       |        : cursor(b), limit(b == nullptr ? nullptr : (b + l))
 3999|    414|    {}
 4000|       |
 4001|       |    // delete because of pointer members
 4002|       |    input_buffer_adapter(const input_buffer_adapter&) = delete;
 4003|       |    input_buffer_adapter& operator=(input_buffer_adapter&) = delete;
 4004|       |    input_buffer_adapter(input_buffer_adapter&&) = delete;
 4005|       |    input_buffer_adapter& operator=(input_buffer_adapter&&) = delete;
 4006|       |    ~input_buffer_adapter() override = default;
 4007|       |
 4008|       |    std::char_traits<char>::int_type get_character() noexcept override
 4009|  2.16M|    {
 4010|  2.16M|        if (JSON_HEDLEY_LIKELY(cursor < limit))
 4011|  2.16M|        {
 4012|  2.16M|            assert(cursor != nullptr and limit != nullptr);
 4013|      0|            return std::char_traits<char>::to_int_type(*(cursor++));
 4014|  2.16M|        }
 4015|       |
 4016|     48|        return std::char_traits<char>::eof();
 4017|  2.16M|    }
 4018|       |
 4019|       |  private:
 4020|       |    /// pointer to the current character
 4021|       |    const char* cursor;
 4022|       |    /// pointer past the last character
 4023|       |    const char* const limit;
 4024|       |};
 4025|       |
 4026|       |template<typename WideStringType, size_t T>
 4027|       |struct wide_string_input_helper
 4028|       |{
 4029|       |    // UTF-32
 4030|       |    static void fill_buffer(const WideStringType& str,
 4031|       |                            size_t& current_wchar,
 4032|       |                            std::array<std::char_traits<char>::int_type, 4>& utf8_bytes,
 4033|       |                            size_t& utf8_bytes_index,
 4034|       |                            size_t& utf8_bytes_filled)
 4035|      0|    {
 4036|      0|        utf8_bytes_index = 0;
 4037|      0|
 4038|      0|        if (current_wchar == str.size())
 4039|      0|        {
 4040|      0|            utf8_bytes[0] = std::char_traits<char>::eof();
 4041|      0|            utf8_bytes_filled = 1;
 4042|      0|        }
 4043|      0|        else
 4044|      0|        {
 4045|      0|            // get the current character
 4046|      0|            const auto wc = static_cast<unsigned int>(str[current_wchar++]);
 4047|      0|
 4048|      0|            // UTF-32 to UTF-8 encoding
 4049|      0|            if (wc < 0x80)
 4050|      0|            {
 4051|      0|                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
 4052|      0|                utf8_bytes_filled = 1;
 4053|      0|            }
 4054|      0|            else if (wc <= 0x7FF)
 4055|      0|            {
 4056|      0|                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((wc >> 6u) & 0x1Fu));
 4057|      0|                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (wc & 0x3Fu));
 4058|      0|                utf8_bytes_filled = 2;
 4059|      0|            }
 4060|      0|            else if (wc <= 0xFFFF)
 4061|      0|            {
 4062|      0|                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((wc >> 12u) & 0x0Fu));
 4063|      0|                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((wc >> 6u) & 0x3Fu));
 4064|      0|                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (wc & 0x3Fu));
 4065|      0|                utf8_bytes_filled = 3;
 4066|      0|            }
 4067|      0|            else if (wc <= 0x10FFFF)
 4068|      0|            {
 4069|      0|                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | ((wc >> 18u) & 0x07u));
 4070|      0|                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((wc >> 12u) & 0x3Fu));
 4071|      0|                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((wc >> 6u) & 0x3Fu));
 4072|      0|                utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (wc & 0x3Fu));
 4073|      0|                utf8_bytes_filled = 4;
 4074|      0|            }
 4075|      0|            else
 4076|      0|            {
 4077|      0|                // unknown character
 4078|      0|                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
 4079|      0|                utf8_bytes_filled = 1;
 4080|      0|            }
 4081|      0|        }
 4082|      0|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail24wide_string_input_helperINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEELm4EE11fill_bufferERKS7_RmRSt5arrayIiLm4EESB_SB_
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail24wide_string_input_helperINSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEELm4EE11fill_bufferERKS7_RmRSt5arrayIiLm4EESB_SB_
  ------------------
 4083|       |};
 4084|       |
 4085|       |template<typename WideStringType>
 4086|       |struct wide_string_input_helper<WideStringType, 2>
 4087|       |{
 4088|       |    // UTF-16
 4089|       |    static void fill_buffer(const WideStringType& str,
 4090|       |                            size_t& current_wchar,
 4091|       |                            std::array<std::char_traits<char>::int_type, 4>& utf8_bytes,
 4092|       |                            size_t& utf8_bytes_index,
 4093|       |                            size_t& utf8_bytes_filled)
 4094|      0|    {
 4095|      0|        utf8_bytes_index = 0;
 4096|      0|
 4097|      0|        if (current_wchar == str.size())
 4098|      0|        {
 4099|      0|            utf8_bytes[0] = std::char_traits<char>::eof();
 4100|      0|            utf8_bytes_filled = 1;
 4101|      0|        }
 4102|      0|        else
 4103|      0|        {
 4104|      0|            // get the current character
 4105|      0|            const auto wc = static_cast<unsigned int>(str[current_wchar++]);
 4106|      0|
 4107|      0|            // UTF-16 to UTF-8 encoding
 4108|      0|            if (wc < 0x80)
 4109|      0|            {
 4110|      0|                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
 4111|      0|                utf8_bytes_filled = 1;
 4112|      0|            }
 4113|      0|            else if (wc <= 0x7FF)
 4114|      0|            {
 4115|      0|                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((wc >> 6u)));
 4116|      0|                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (wc & 0x3Fu));
 4117|      0|                utf8_bytes_filled = 2;
 4118|      0|            }
 4119|      0|            else if (0xD800 > wc or wc >= 0xE000)
 4120|      0|            {
 4121|      0|                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((wc >> 12u)));
 4122|      0|                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((wc >> 6u) & 0x3Fu));
 4123|      0|                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (wc & 0x3Fu));
 4124|      0|                utf8_bytes_filled = 3;
 4125|      0|            }
 4126|      0|            else
 4127|      0|            {
 4128|      0|                if (current_wchar < str.size())
 4129|      0|                {
 4130|      0|                    const auto wc2 = static_cast<unsigned int>(str[current_wchar++]);
 4131|      0|                    const auto charcode = 0x10000u + (((wc & 0x3FFu) << 10u) | (wc2 & 0x3FFu));
 4132|      0|                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | (charcode >> 18u));
 4133|      0|                    utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 12u) & 0x3Fu));
 4134|      0|                    utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 6u) & 0x3Fu));
 4135|      0|                    utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (charcode & 0x3Fu));
 4136|      0|                    utf8_bytes_filled = 4;
 4137|      0|                }
 4138|      0|                else
 4139|      0|                {
 4140|      0|                    // unknown character
 4141|      0|                    ++current_wchar;
 4142|      0|                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
 4143|      0|                    utf8_bytes_filled = 1;
 4144|      0|                }
 4145|      0|            }
 4146|      0|        }
 4147|      0|    }
 4148|       |};
 4149|       |
 4150|       |template<typename WideStringType>
 4151|       |class wide_string_input_adapter : public input_adapter_protocol
 4152|       |{
 4153|       |  public:
 4154|       |    explicit wide_string_input_adapter(const WideStringType& w) noexcept
 4155|       |        : str(w)
 4156|       |    {}
 4157|       |
 4158|       |    std::char_traits<char>::int_type get_character() noexcept override
 4159|      0|    {
 4160|      0|        // check if buffer needs to be filled
 4161|      0|        if (utf8_bytes_index == utf8_bytes_filled)
 4162|      0|        {
 4163|      0|            fill_buffer<sizeof(typename WideStringType::value_type)>();
 4164|      0|
 4165|      0|            assert(utf8_bytes_filled > 0);
 4166|      0|            assert(utf8_bytes_index == 0);
 4167|      0|        }
 4168|      0|
 4169|      0|        // use buffer
 4170|      0|        assert(utf8_bytes_filled > 0);
 4171|      0|        assert(utf8_bytes_index < utf8_bytes_filled);
 4172|      0|        return utf8_bytes[utf8_bytes_index++];
 4173|      0|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEE13get_characterEv
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEE13get_characterEv
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEE13get_characterEv
  ------------------
 4174|       |
 4175|       |  private:
 4176|       |    template<size_t T>
 4177|       |    void fill_buffer()
 4178|      0|    {
 4179|      0|        wide_string_input_helper<WideStringType, T>::fill_buffer(str, current_wchar, utf8_bytes, utf8_bytes_index, utf8_bytes_filled);
 4180|      0|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEE11fill_bufferILm4EEEvv
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEE11fill_bufferILm2EEEvv
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail25wide_string_input_adapterINSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEE11fill_bufferILm4EEEvv
  ------------------
 4181|       |
 4182|       |    /// the wstring to process
 4183|       |    const WideStringType& str;
 4184|       |
 4185|       |    /// index of the current wchar in str
 4186|       |    std::size_t current_wchar = 0;
 4187|       |
 4188|       |    /// a buffer for UTF-8 bytes
 4189|       |    std::array<std::char_traits<char>::int_type, 4> utf8_bytes = {{0, 0, 0, 0}};
 4190|       |
 4191|       |    /// index to the utf8_codes array for the next valid byte
 4192|       |    std::size_t utf8_bytes_index = 0;
 4193|       |    /// number of valid bytes in the utf8_codes array
 4194|       |    std::size_t utf8_bytes_filled = 0;
 4195|       |};
 4196|       |
 4197|       |class input_adapter
 4198|       |{
 4199|       |  public:
 4200|       |    // native support
 4201|       |    JSON_HEDLEY_NON_NULL(2)
 4202|       |    input_adapter(std::FILE* file)
 4203|      0|        : ia(std::make_shared<file_input_adapter>(file)) {}
 4204|       |    /// input adapter for input stream
 4205|       |    input_adapter(std::istream& i)
 4206|    231|        : ia(std::make_shared<input_stream_adapter>(i)) {}
 4207|       |
 4208|       |    /// input adapter for input stream
 4209|       |    input_adapter(std::istream&& i)
 4210|      0|        : ia(std::make_shared<input_stream_adapter>(i)) {}
 4211|       |
 4212|       |    input_adapter(const std::wstring& ws)
 4213|      0|        : ia(std::make_shared<wide_string_input_adapter<std::wstring>>(ws)) {}
 4214|       |
 4215|       |    input_adapter(const std::u16string& ws)
 4216|      0|        : ia(std::make_shared<wide_string_input_adapter<std::u16string>>(ws)) {}
 4217|       |
 4218|       |    input_adapter(const std::u32string& ws)
 4219|      0|        : ia(std::make_shared<wide_string_input_adapter<std::u32string>>(ws)) {}
 4220|       |
 4221|       |    /// input adapter for buffer
 4222|       |    template<typename CharT,
 4223|       |             typename std::enable_if<
 4224|       |                 std::is_pointer<CharT>::value and
 4225|       |                 std::is_integral<typename std::remove_pointer<CharT>::type>::value and
 4226|       |                 sizeof(typename std::remove_pointer<CharT>::type) == 1,
 4227|       |                 int>::type = 0>
 4228|       |    input_adapter(CharT b, std::size_t l)
 4229|       |        : ia(std::make_shared<input_buffer_adapter>(reinterpret_cast<const char*>(b), l)) {}
 4230|       |
 4231|       |    // derived support
 4232|       |
 4233|       |    /// input adapter for string literal
 4234|       |    template<typename CharT,
 4235|       |             typename std::enable_if<
 4236|       |                 std::is_pointer<CharT>::value and
 4237|       |                 std::is_integral<typename std::remove_pointer<CharT>::type>::value and
 4238|       |                 sizeof(typename std::remove_pointer<CharT>::type) == 1,
 4239|       |                 int>::type = 0>
 4240|       |    input_adapter(CharT b)
 4241|       |        : input_adapter(reinterpret_cast<const char*>(b),
 4242|       |                        std::strlen(reinterpret_cast<const char*>(b))) {}
 4243|       |
 4244|       |    /// input adapter for iterator range with contiguous storage
 4245|       |    template<class IteratorType,
 4246|       |             typename std::enable_if<
 4247|       |                 std::is_same<typename iterator_traits<IteratorType>::iterator_category, std::random_access_iterator_tag>::value,
 4248|       |                 int>::type = 0>
 4249|       |    input_adapter(IteratorType first, IteratorType last)
 4250|    414|    {
 4251|    414|#ifndef NDEBUG
 4252|       |        // assertion to check that the iterator range is indeed contiguous,
 4253|       |        // see https://stackoverflow.com/a/35008842/266378 for more discussion
 4254|    414|        const auto is_contiguous = std::accumulate(
 4255|    414|                                       first, last, std::pair<bool, int>(true, 0),
 4256|    414|                                       [&first](std::pair<bool, int> res, decltype(*first) val)
 4257|  2.16M|        {
 4258|  2.16M|            res.first &= (val == *(std::next(std::addressof(*first), res.second++)));
 4259|  2.16M|            return res;
 4260|  2.16M|        }).first;
  ------------------
  | _ZZN8nlohmann6detail13input_adapterC1IPKcLi0EEET_S5_ENKUlSt4pairIbiERS3_E_clES7_S8_:
  | 4257|  2.14M|        {
  | 4258|  2.14M|            res.first &= (val == *(std::next(std::addressof(*first), res.second++)));
  | 4259|  2.14M|            return res;
  | 4260|  2.14M|        }).first;
  ------------------
  | _ZZN8nlohmann6detail13input_adapterC1IN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEELi0EEET_SE_ENKUlSt4pairIbiERS5_E_clESG_SH_:
  | 4257|  15.7k|        {
  | 4258|  15.7k|            res.first &= (val == *(std::next(std::addressof(*first), res.second++)));
  | 4259|  15.7k|            return res;
  | 4260|  15.7k|        }).first;
  ------------------
 4261|    414|        assert(is_contiguous);
 4262|      0|#endif
 4263|       |
 4264|       |        // assertion to check that each element is 1 byte long
 4265|      0|        static_assert(
 4266|    414|            sizeof(typename iterator_traits<IteratorType>::value_type) == 1,
 4267|    414|            "each element in the iterator range must have the size of 1 byte");
 4268|       |
 4269|    414|        const auto len = static_cast<size_t>(std::distance(first, last));
 4270|    414|        if (JSON_HEDLEY_LIKELY(len > 0))
 4271|    405|        {
 4272|       |            // there is at least one element: use the address of first
 4273|    405|            ia = std::make_shared<input_buffer_adapter>(reinterpret_cast<const char*>(&(*first)), len);
 4274|    405|        }
 4275|      9|        else
 4276|      9|        {
 4277|       |            // the address of first cannot be used: use nullptr
 4278|      9|            ia = std::make_shared<input_buffer_adapter>(nullptr, len);
 4279|      9|        }
 4280|    414|    }
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IPKcLi0EEET_S5_:
  | 4250|    359|    {
  | 4251|    359|#ifndef NDEBUG
  | 4252|       |        // assertion to check that the iterator range is indeed contiguous,
  | 4253|       |        // see https://stackoverflow.com/a/35008842/266378 for more discussion
  | 4254|    359|        const auto is_contiguous = std::accumulate(
  | 4255|    359|                                       first, last, std::pair<bool, int>(true, 0),
  | 4256|    359|                                       [&first](std::pair<bool, int> res, decltype(*first) val)
  | 4257|    359|        {
  | 4258|    359|            res.first &= (val == *(std::next(std::addressof(*first), res.second++)));
  | 4259|    359|            return res;
  | 4260|    359|        }).first;
  | 4261|    359|        assert(is_contiguous);
  | 4262|      0|#endif
  | 4263|       |
  | 4264|       |        // assertion to check that each element is 1 byte long
  | 4265|      0|        static_assert(
  | 4266|    359|            sizeof(typename iterator_traits<IteratorType>::value_type) == 1,
  | 4267|    359|            "each element in the iterator range must have the size of 1 byte");
  | 4268|       |
  | 4269|    359|        const auto len = static_cast<size_t>(std::distance(first, last));
  | 4270|    359|        if (JSON_HEDLEY_LIKELY(len > 0))
  | 4271|    359|        {
  | 4272|       |            // there is at least one element: use the address of first
  | 4273|    359|            ia = std::make_shared<input_buffer_adapter>(reinterpret_cast<const char*>(&(*first)), len);
  | 4274|    359|        }
  | 4275|      0|        else
  | 4276|      0|        {
  | 4277|       |            // the address of first cannot be used: use nullptr
  | 4278|      0|            ia = std::make_shared<input_buffer_adapter>(nullptr, len);
  | 4279|      0|        }
  | 4280|    359|    }
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEELi0EEET_SE_:
  | 4250|     55|    {
  | 4251|     55|#ifndef NDEBUG
  | 4252|       |        // assertion to check that the iterator range is indeed contiguous,
  | 4253|       |        // see https://stackoverflow.com/a/35008842/266378 for more discussion
  | 4254|     55|        const auto is_contiguous = std::accumulate(
  | 4255|     55|                                       first, last, std::pair<bool, int>(true, 0),
  | 4256|     55|                                       [&first](std::pair<bool, int> res, decltype(*first) val)
  | 4257|     55|        {
  | 4258|     55|            res.first &= (val == *(std::next(std::addressof(*first), res.second++)));
  | 4259|     55|            return res;
  | 4260|     55|        }).first;
  | 4261|     55|        assert(is_contiguous);
  | 4262|      0|#endif
  | 4263|       |
  | 4264|       |        // assertion to check that each element is 1 byte long
  | 4265|      0|        static_assert(
  | 4266|     55|            sizeof(typename iterator_traits<IteratorType>::value_type) == 1,
  | 4267|     55|            "each element in the iterator range must have the size of 1 byte");
  | 4268|       |
  | 4269|     55|        const auto len = static_cast<size_t>(std::distance(first, last));
  | 4270|     55|        if (JSON_HEDLEY_LIKELY(len > 0))
  | 4271|     46|        {
  | 4272|       |            // there is at least one element: use the address of first
  | 4273|     46|            ia = std::make_shared<input_buffer_adapter>(reinterpret_cast<const char*>(&(*first)), len);
  | 4274|     46|        }
  | 4275|      9|        else
  | 4276|      9|        {
  | 4277|       |            // the address of first cannot be used: use nullptr
  | 4278|      9|            ia = std::make_shared<input_buffer_adapter>(nullptr, len);
  | 4279|      9|        }
  | 4280|     55|    }
  ------------------
 4281|       |
 4282|       |    /// input adapter for array
 4283|       |    template<class T, std::size_t N>
 4284|       |    input_adapter(T (&array)[N])
 4285|    359|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IKcLm117EEERAT0__T_:
  | 4285|     68|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IKcLm10282EEERAT0__T_:
  | 4285|     68|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IKcLm10259EEERAT0__T_:
  | 4285|    136|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IKcLm492EEERAT0__T_:
  | 4285|     68|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IKcLm528EEERAT0__T_:
  | 4285|     17|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IKcLm71EEERAT0__T_:
  | 4285|      1|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
  | _ZN8nlohmann6detail13input_adapterC2IKcLm84EEERAT0__T_:
  | 4285|      1|        : input_adapter(std::begin(array), std::end(array)) {}
  ------------------
 4286|       |
 4287|       |    /// input adapter for contiguous container
 4288|       |    template<class ContiguousContainer, typename
 4289|       |             std::enable_if<not std::is_pointer<ContiguousContainer>::value and
 4290|       |                            std::is_base_of<std::random_access_iterator_tag, typename iterator_traits<decltype(std::begin(std::declval<ContiguousContainer const>()))>::iterator_category>::value,
 4291|       |                            int>::type = 0>
 4292|       |    input_adapter(const ContiguousContainer& c)
 4293|     55|        : input_adapter(std::begin(c), std::end(c)) {}
 4294|       |
 4295|       |    operator input_adapter_t()
 4296|    645|    {
 4297|    645|        return ia;
 4298|    645|    }
 4299|       |
 4300|       |  private:
 4301|       |    /// the actual adapter
 4302|       |    input_adapter_t ia = nullptr;
 4303|       |};
 4304|       |}  // namespace detail
 4305|       |}  // namespace nlohmann
 4306|       |
 4307|       |// #include <nlohmann/detail/input/json_sax.hpp>
 4308|       |
 4309|       |
 4310|       |#include <cassert> // assert
 4311|       |#include <cstddef>
 4312|       |#include <string> // string
 4313|       |#include <utility> // move
 4314|       |#include <vector> // vector
 4315|       |
 4316|       |// #include <nlohmann/detail/exceptions.hpp>
 4317|       |
 4318|       |// #include <nlohmann/detail/macro_scope.hpp>
 4319|       |
 4320|       |
 4321|       |namespace nlohmann
 4322|       |{
 4323|       |
 4324|       |/*!
 4325|       |@brief SAX interface
 4326|       |
 4327|       |This class describes the SAX interface used by @ref nlohmann::json::sax_parse.
 4328|       |Each function is called in different situations while the input is parsed. The
 4329|       |boolean return value informs the parser whether to continue processing the
 4330|       |input.
 4331|       |*/
 4332|       |template<typename BasicJsonType>
 4333|       |struct json_sax
 4334|       |{
 4335|       |    /// type for (signed) integers
 4336|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4337|       |    /// type for unsigned integers
 4338|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4339|       |    /// type for floating-point numbers
 4340|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4341|       |    /// type for strings
 4342|       |    using string_t = typename BasicJsonType::string_t;
 4343|       |
 4344|       |    /*!
 4345|       |    @brief a null value was read
 4346|       |    @return whether parsing should proceed
 4347|       |    */
 4348|       |    virtual bool null() = 0;
 4349|       |
 4350|       |    /*!
 4351|       |    @brief a boolean value was read
 4352|       |    @param[in] val  boolean value
 4353|       |    @return whether parsing should proceed
 4354|       |    */
 4355|       |    virtual bool boolean(bool val) = 0;
 4356|       |
 4357|       |    /*!
 4358|       |    @brief an integer number was read
 4359|       |    @param[in] val  integer value
 4360|       |    @return whether parsing should proceed
 4361|       |    */
 4362|       |    virtual bool number_integer(number_integer_t val) = 0;
 4363|       |
 4364|       |    /*!
 4365|       |    @brief an unsigned integer number was read
 4366|       |    @param[in] val  unsigned integer value
 4367|       |    @return whether parsing should proceed
 4368|       |    */
 4369|       |    virtual bool number_unsigned(number_unsigned_t val) = 0;
 4370|       |
 4371|       |    /*!
 4372|       |    @brief an floating-point number was read
 4373|       |    @param[in] val  floating-point value
 4374|       |    @param[in] s    raw token value
 4375|       |    @return whether parsing should proceed
 4376|       |    */
 4377|       |    virtual bool number_float(number_float_t val, const string_t& s) = 0;
 4378|       |
 4379|       |    /*!
 4380|       |    @brief a string was read
 4381|       |    @param[in] val  string value
 4382|       |    @return whether parsing should proceed
 4383|       |    @note It is safe to move the passed string.
 4384|       |    */
 4385|       |    virtual bool string(string_t& val) = 0;
 4386|       |
 4387|       |    /*!
 4388|       |    @brief the beginning of an object was read
 4389|       |    @param[in] elements  number of object elements or -1 if unknown
 4390|       |    @return whether parsing should proceed
 4391|       |    @note binary formats may report the number of elements
 4392|       |    */
 4393|       |    virtual bool start_object(std::size_t elements) = 0;
 4394|       |
 4395|       |    /*!
 4396|       |    @brief an object key was read
 4397|       |    @param[in] val  object key
 4398|       |    @return whether parsing should proceed
 4399|       |    @note It is safe to move the passed string.
 4400|       |    */
 4401|       |    virtual bool key(string_t& val) = 0;
 4402|       |
 4403|       |    /*!
 4404|       |    @brief the end of an object was read
 4405|       |    @return whether parsing should proceed
 4406|       |    */
 4407|       |    virtual bool end_object() = 0;
 4408|       |
 4409|       |    /*!
 4410|       |    @brief the beginning of an array was read
 4411|       |    @param[in] elements  number of array elements or -1 if unknown
 4412|       |    @return whether parsing should proceed
 4413|       |    @note binary formats may report the number of elements
 4414|       |    */
 4415|       |    virtual bool start_array(std::size_t elements) = 0;
 4416|       |
 4417|       |    /*!
 4418|       |    @brief the end of an array was read
 4419|       |    @return whether parsing should proceed
 4420|       |    */
 4421|       |    virtual bool end_array() = 0;
 4422|       |
 4423|       |    /*!
 4424|       |    @brief a parse error occurred
 4425|       |    @param[in] position    the position in the input where the error occurs
 4426|       |    @param[in] last_token  the last read token
 4427|       |    @param[in] ex          an exception object describing the error
 4428|       |    @return whether parsing should proceed (must return false)
 4429|       |    */
 4430|       |    virtual bool parse_error(std::size_t position,
 4431|       |                             const std::string& last_token,
 4432|       |                             const detail::exception& ex) = 0;
 4433|       |
 4434|       |    virtual ~json_sax() = default;
 4435|       |};
 4436|       |
 4437|       |
 4438|       |namespace detail
 4439|       |{
 4440|       |/*!
 4441|       |@brief SAX implementation to create a JSON value from SAX events
 4442|       |
 4443|       |This class implements the @ref json_sax interface and processes the SAX events
 4444|       |to create a JSON value which makes it basically a DOM parser. The structure or
 4445|       |hierarchy of the JSON value is managed by the stack `ref_stack` which contains
 4446|       |a pointer to the respective array or object for each recursion depth.
 4447|       |
 4448|       |After successful parsing, the value that is passed by reference to the
 4449|       |constructor contains the parsed value.
 4450|       |
 4451|       |@tparam BasicJsonType  the JSON type
 4452|       |*/
 4453|       |template<typename BasicJsonType>
 4454|       |class json_sax_dom_parser
 4455|       |{
 4456|       |  public:
 4457|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4458|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4459|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4460|       |    using string_t = typename BasicJsonType::string_t;
 4461|       |
 4462|       |    /*!
 4463|       |    @param[in, out] r  reference to a JSON value that is manipulated while
 4464|       |                       parsing
 4465|       |    @param[in] allow_exceptions_  whether parse errors yield exceptions
 4466|       |    */
 4467|       |    explicit json_sax_dom_parser(BasicJsonType& r, const bool allow_exceptions_ = true)
 4468|       |        : root(r), allow_exceptions(allow_exceptions_)
 4469|    645|    {}
 4470|       |
 4471|       |    // make class move-only
 4472|       |    json_sax_dom_parser(const json_sax_dom_parser&) = delete;
 4473|       |    json_sax_dom_parser(json_sax_dom_parser&&) = default;
 4474|       |    json_sax_dom_parser& operator=(const json_sax_dom_parser&) = delete;
 4475|       |    json_sax_dom_parser& operator=(json_sax_dom_parser&&) = default;
 4476|    645|    ~json_sax_dom_parser() = default;
 4477|       |
 4478|       |    bool null()
 4479|    240|    {
 4480|    240|        handle_value(nullptr);
 4481|    240|        return true;
 4482|    240|    }
 4483|       |
 4484|       |    bool boolean(bool val)
 4485|    344|    {
 4486|    344|        handle_value(val);
 4487|    344|        return true;
 4488|    344|    }
 4489|       |
 4490|       |    bool number_integer(number_integer_t val)
 4491|  4.69k|    {
 4492|  4.69k|        handle_value(val);
 4493|  4.69k|        return true;
 4494|  4.69k|    }
 4495|       |
 4496|       |    bool number_unsigned(number_unsigned_t val)
 4497|  40.3k|    {
 4498|  40.3k|        handle_value(val);
 4499|  40.3k|        return true;
 4500|  40.3k|    }
 4501|       |
 4502|       |    bool number_float(number_float_t val, const string_t& /*unused*/)
 4503|  29.4k|    {
 4504|  29.4k|        handle_value(val);
 4505|  29.4k|        return true;
 4506|  29.4k|    }
 4507|       |
 4508|       |    bool string(string_t& val)
 4509|  33.1k|    {
 4510|  33.1k|        handle_value(val);
 4511|  33.1k|        return true;
 4512|  33.1k|    }
 4513|       |
 4514|       |    bool start_object(std::size_t len)
 4515|  27.1k|    {
 4516|  27.1k|        ref_stack.push_back(handle_value(BasicJsonType::value_t::object));
 4517|       |
 4518|  27.1k|        if (JSON_HEDLEY_UNLIKELY(len != std::size_t(-1) and len > ref_stack.back()->max_size()))
 4519|      0|        {
 4520|      0|            JSON_THROW(out_of_range::create(408,
 4521|      0|                                            "excessive object size: " + std::to_string(len)));
 4522|      0|        }
 4523|       |
 4524|  27.1k|        return true;
 4525|  27.1k|    }
 4526|       |
 4527|       |    bool key(string_t& val)
 4528|   129k|    {
 4529|       |        // add null at given key and store the reference for later
 4530|   129k|        object_element = &(ref_stack.back()->m_value.object->operator[](val));
 4531|   129k|        return true;
 4532|   129k|    }
 4533|       |
 4534|       |    bool end_object()
 4535|  27.1k|    {
 4536|  27.1k|        ref_stack.pop_back();
 4537|  27.1k|        return true;
 4538|  27.1k|    }
 4539|       |
 4540|       |    bool start_array(std::size_t len)
 4541|  1.48k|    {
 4542|  1.48k|        ref_stack.push_back(handle_value(BasicJsonType::value_t::array));
 4543|       |
 4544|  1.48k|        if (JSON_HEDLEY_UNLIKELY(len != std::size_t(-1) and len > ref_stack.back()->max_size()))
 4545|      0|        {
 4546|      0|            JSON_THROW(out_of_range::create(408,
 4547|      0|                                            "excessive array size: " + std::to_string(len)));
 4548|      0|        }
 4549|       |
 4550|  1.48k|        return true;
 4551|  1.48k|    }
 4552|       |
 4553|       |    bool end_array()
 4554|  1.48k|    {
 4555|  1.48k|        ref_stack.pop_back();
 4556|  1.48k|        return true;
 4557|  1.48k|    }
 4558|       |
 4559|       |    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/,
 4560|       |                     const detail::exception& ex)
 4561|     28|    {
 4562|     28|        errored = true;
 4563|     28|        if (allow_exceptions)
 4564|     28|        {
 4565|       |            // determine the proper exception type from the id
 4566|     28|            switch ((ex.id / 100) % 100)
 4567|     28|            {
 4568|     28|                case 1:
 4569|     28|                    JSON_THROW(*static_cast<const detail::parse_error*>(&ex));
 4570|      0|                case 4:
 4571|      0|                    JSON_THROW(*static_cast<const detail::out_of_range*>(&ex));
 4572|       |                // LCOV_EXCL_START
 4573|      0|                case 2:
 4574|      0|                    JSON_THROW(*static_cast<const detail::invalid_iterator*>(&ex));
 4575|      0|                case 3:
 4576|      0|                    JSON_THROW(*static_cast<const detail::type_error*>(&ex));
 4577|      0|                case 5:
 4578|      0|                    JSON_THROW(*static_cast<const detail::other_error*>(&ex));
 4579|      0|                default:
 4580|      0|                    assert(false);
 4581|       |                    // LCOV_EXCL_STOP
 4582|     28|            }
 4583|     28|        }
 4584|      0|        return false;
 4585|     28|    }
 4586|       |
 4587|       |    constexpr bool is_errored() const
 4588|    617|    {
 4589|    617|        return errored;
 4590|    617|    }
 4591|       |
 4592|       |  private:
 4593|       |    /*!
 4594|       |    @invariant If the ref stack is empty, then the passed value will be the new
 4595|       |               root.
 4596|       |    @invariant If the ref stack contains a value, then it is an array or an
 4597|       |               object to which we can add elements
 4598|       |    */
 4599|       |    template<typename Value>
 4600|       |    JSON_HEDLEY_RETURNS_NON_NULL
 4601|       |    BasicJsonType* handle_value(Value&& v)
 4602|   136k|    {
 4603|   136k|        if (ref_stack.empty())
 4604|    617|        {
 4605|    617|            root = BasicJsonType(std::forward<Value>(v));
 4606|    617|            return &root;
 4607|    617|        }
 4608|       |
 4609|   136k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
 4610|       |
 4611|   136k|        if (ref_stack.back()->is_array())
 4612|  6.40k|        {
 4613|  6.40k|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
 4614|  6.40k|            return &(ref_stack.back()->m_value.array->back());
 4615|  6.40k|        }
 4616|       |
 4617|   129k|        assert(ref_stack.back()->is_object());
 4618|      0|        assert(object_element);
 4619|      0|        *object_element = BasicJsonType(std::forward<Value>(v));
 4620|   129k|        return object_element;
 4621|   136k|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueINS0_7value_tEEEPSC_OT_:
  | 4602|  28.6k|    {
  | 4603|  28.6k|        if (ref_stack.empty())
  | 4604|    617|        {
  | 4605|    617|            root = BasicJsonType(std::forward<Value>(v));
  | 4606|    617|            return &root;
  | 4607|    617|        }
  | 4608|       |
  | 4609|  28.0k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4610|       |
  | 4611|  28.0k|        if (ref_stack.back()->is_array())
  | 4612|  4.99k|        {
  | 4613|  4.99k|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4614|  4.99k|            return &(ref_stack.back()->m_value.array->back());
  | 4615|  4.99k|        }
  | 4616|       |
  | 4617|  23.0k|        assert(ref_stack.back()->is_object());
  | 4618|      0|        assert(object_element);
  | 4619|      0|        *object_element = BasicJsonType(std::forward<Value>(v));
  | 4620|  23.0k|        return object_element;
  | 4621|  28.0k|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRdEEPSC_OT_:
  | 4602|  29.4k|    {
  | 4603|  29.4k|        if (ref_stack.empty())
  | 4604|      0|        {
  | 4605|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4606|      0|            return &root;
  | 4607|      0|        }
  | 4608|       |
  | 4609|  29.4k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4610|       |
  | 4611|  29.4k|        if (ref_stack.back()->is_array())
  | 4612|      0|        {
  | 4613|      0|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4614|      0|            return &(ref_stack.back()->m_value.array->back());
  | 4615|      0|        }
  | 4616|       |
  | 4617|  29.4k|        assert(ref_stack.back()->is_object());
  | 4618|      0|        assert(object_element);
  | 4619|      0|        *object_element = BasicJsonType(std::forward<Value>(v));
  | 4620|  29.4k|        return object_element;
  | 4621|  29.4k|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRbEEPSC_OT_:
  | 4602|    344|    {
  | 4603|    344|        if (ref_stack.empty())
  | 4604|      0|        {
  | 4605|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4606|      0|            return &root;
  | 4607|      0|        }
  | 4608|       |
  | 4609|    344|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4610|       |
  | 4611|    344|        if (ref_stack.back()->is_array())
  | 4612|      0|        {
  | 4613|      0|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4614|      0|            return &(ref_stack.back()->m_value.array->back());
  | 4615|      0|        }
  | 4616|       |
  | 4617|    344|        assert(ref_stack.back()->is_object());
  | 4618|      0|        assert(object_element);
  | 4619|      0|        *object_element = BasicJsonType(std::forward<Value>(v));
  | 4620|    344|        return object_element;
  | 4621|    344|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIDnEEPSC_OT_:
  | 4602|    240|    {
  | 4603|    240|        if (ref_stack.empty())
  | 4604|      0|        {
  | 4605|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4606|      0|            return &root;
  | 4607|      0|        }
  | 4608|       |
  | 4609|    240|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4610|       |
  | 4611|    240|        if (ref_stack.back()->is_array())
  | 4612|      0|        {
  | 4613|      0|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4614|      0|            return &(ref_stack.back()->m_value.array->back());
  | 4615|      0|        }
  | 4616|       |
  | 4617|    240|        assert(ref_stack.back()->is_object());
  | 4618|      0|        assert(object_element);
  | 4619|      0|        *object_element = BasicJsonType(std::forward<Value>(v));
  | 4620|    240|        return object_element;
  | 4621|    240|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRlEEPSC_OT_:
  | 4602|  4.69k|    {
  | 4603|  4.69k|        if (ref_stack.empty())
  | 4604|      0|        {
  | 4605|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4606|      0|            return &root;
  | 4607|      0|        }
  | 4608|       |
  | 4609|  4.69k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4610|       |
  | 4611|  4.69k|        if (ref_stack.back()->is_array())
  | 4612|      0|        {
  | 4613|      0|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4614|      0|            return &(ref_stack.back()->m_value.array->back());
  | 4615|      0|        }
  | 4616|       |
  | 4617|  4.69k|        assert(ref_stack.back()->is_object());
  | 4618|      0|        assert(object_element);
  | 4619|      0|        *object_element = BasicJsonType(std::forward<Value>(v));
  | 4620|  4.69k|        return object_element;
  | 4621|  4.69k|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRSA_EEPSC_OT_:
  | 4602|  33.1k|    {
  | 4603|  33.1k|        if (ref_stack.empty())
  | 4604|      0|        {
  | 4605|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4606|      0|            return &root;
  | 4607|      0|        }
  | 4608|       |
  | 4609|  33.1k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4610|       |
  | 4611|  33.1k|        if (ref_stack.back()->is_array())
  | 4612|  1.10k|        {
  | 4613|  1.10k|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4614|  1.10k|            return &(ref_stack.back()->m_value.array->back());
  | 4615|  1.10k|        }
  | 4616|       |
  | 4617|  32.0k|        assert(ref_stack.back()->is_object());
  | 4618|      0|        assert(object_element);
  | 4619|      0|        *object_element = BasicJsonType(std::forward<Value>(v));
  | 4620|  32.0k|        return object_element;
  | 4621|  33.1k|    }
  ------------------
  | _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRmEEPSC_OT_:
  | 4602|  40.3k|    {
  | 4603|  40.3k|        if (ref_stack.empty())
  | 4604|      0|        {
  | 4605|      0|            root = BasicJsonType(std::forward<Value>(v));
  | 4606|      0|            return &root;
  | 4607|      0|        }
  | 4608|       |
  | 4609|  40.3k|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
  | 4610|       |
  | 4611|  40.3k|        if (ref_stack.back()->is_array())
  | 4612|    308|        {
  | 4613|    308|            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
  | 4614|    308|            return &(ref_stack.back()->m_value.array->back());
  | 4615|    308|        }
  | 4616|       |
  | 4617|  39.9k|        assert(ref_stack.back()->is_object());
  | 4618|      0|        assert(object_element);
  | 4619|      0|        *object_element = BasicJsonType(std::forward<Value>(v));
  | 4620|  39.9k|        return object_element;
  | 4621|  40.3k|    }
  ------------------
 4622|       |
 4623|       |    /// the parsed JSON value
 4624|       |    BasicJsonType& root;
 4625|       |    /// stack to model hierarchy of values
 4626|       |    std::vector<BasicJsonType*> ref_stack {};
 4627|       |    /// helper to hold the reference for the next object element
 4628|       |    BasicJsonType* object_element = nullptr;
 4629|       |    /// whether a syntax error occurred
 4630|       |    bool errored = false;
 4631|       |    /// whether to throw exceptions in case of errors
 4632|       |    const bool allow_exceptions = true;
 4633|       |};
 4634|       |
 4635|       |template<typename BasicJsonType>
 4636|       |class json_sax_dom_callback_parser
 4637|       |{
 4638|       |  public:
 4639|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4640|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4641|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4642|       |    using string_t = typename BasicJsonType::string_t;
 4643|       |    using parser_callback_t = typename BasicJsonType::parser_callback_t;
 4644|       |    using parse_event_t = typename BasicJsonType::parse_event_t;
 4645|       |
 4646|       |    json_sax_dom_callback_parser(BasicJsonType& r,
 4647|       |                                 const parser_callback_t cb,
 4648|       |                                 const bool allow_exceptions_ = true)
 4649|       |        : root(r), callback(cb), allow_exceptions(allow_exceptions_)
 4650|      0|    {
 4651|      0|        keep_stack.push_back(true);
 4652|      0|    }
 4653|       |
 4654|       |    // make class move-only
 4655|       |    json_sax_dom_callback_parser(const json_sax_dom_callback_parser&) = delete;
 4656|       |    json_sax_dom_callback_parser(json_sax_dom_callback_parser&&) = default;
 4657|       |    json_sax_dom_callback_parser& operator=(const json_sax_dom_callback_parser&) = delete;
 4658|       |    json_sax_dom_callback_parser& operator=(json_sax_dom_callback_parser&&) = default;
 4659|      0|    ~json_sax_dom_callback_parser() = default;
 4660|       |
 4661|       |    bool null()
 4662|      0|    {
 4663|      0|        handle_value(nullptr);
 4664|      0|        return true;
 4665|      0|    }
 4666|       |
 4667|       |    bool boolean(bool val)
 4668|      0|    {
 4669|      0|        handle_value(val);
 4670|      0|        return true;
 4671|      0|    }
 4672|       |
 4673|       |    bool number_integer(number_integer_t val)
 4674|      0|    {
 4675|      0|        handle_value(val);
 4676|      0|        return true;
 4677|      0|    }
 4678|       |
 4679|       |    bool number_unsigned(number_unsigned_t val)
 4680|      0|    {
 4681|      0|        handle_value(val);
 4682|      0|        return true;
 4683|      0|    }
 4684|       |
 4685|       |    bool number_float(number_float_t val, const string_t& /*unused*/)
 4686|      0|    {
 4687|      0|        handle_value(val);
 4688|      0|        return true;
 4689|      0|    }
 4690|       |
 4691|       |    bool string(string_t& val)
 4692|      0|    {
 4693|      0|        handle_value(val);
 4694|      0|        return true;
 4695|      0|    }
 4696|       |
 4697|       |    bool start_object(std::size_t len)
 4698|      0|    {
 4699|       |        // check callback for object start
 4700|      0|        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::object_start, discarded);
 4701|      0|        keep_stack.push_back(keep);
 4702|       |
 4703|      0|        auto val = handle_value(BasicJsonType::value_t::object, true);
 4704|      0|        ref_stack.push_back(val.second);
 4705|       |
 4706|       |        // check object limit
 4707|      0|        if (ref_stack.back() and JSON_HEDLEY_UNLIKELY(len != std::size_t(-1) and len > ref_stack.back()->max_size()))
 4708|      0|        {
 4709|      0|            JSON_THROW(out_of_range::create(408, "excessive object size: " + std::to_string(len)));
 4710|      0|        }
 4711|       |
 4712|      0|        return true;
 4713|      0|    }
 4714|       |
 4715|       |    bool key(string_t& val)
 4716|      0|    {
 4717|      0|        BasicJsonType k = BasicJsonType(val);
 4718|       |
 4719|       |        // check callback for key
 4720|      0|        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::key, k);
 4721|      0|        key_keep_stack.push_back(keep);
 4722|       |
 4723|       |        // add discarded value at given key and store the reference for later
 4724|      0|        if (keep and ref_stack.back())
 4725|      0|        {
 4726|      0|            object_element = &(ref_stack.back()->m_value.object->operator[](val) = discarded);
 4727|      0|        }
 4728|       |
 4729|      0|        return true;
 4730|      0|    }
 4731|       |
 4732|       |    bool end_object()
 4733|      0|    {
 4734|      0|        if (ref_stack.back() and not callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::object_end, *ref_stack.back()))
 4735|      0|        {
 4736|       |            // discard object
 4737|      0|            *ref_stack.back() = discarded;
 4738|      0|        }
 4739|       |
 4740|      0|        assert(not ref_stack.empty());
 4741|      0|        assert(not keep_stack.empty());
 4742|      0|        ref_stack.pop_back();
 4743|      0|        keep_stack.pop_back();
 4744|       |
 4745|      0|        if (not ref_stack.empty() and ref_stack.back() and ref_stack.back()->is_object())
 4746|      0|        {
 4747|       |            // remove discarded value
 4748|      0|            for (auto it = ref_stack.back()->begin(); it != ref_stack.back()->end(); ++it)
 4749|      0|            {
 4750|      0|                if (it->is_discarded())
 4751|      0|                {
 4752|      0|                    ref_stack.back()->erase(it);
 4753|      0|                    break;
 4754|      0|                }
 4755|      0|            }
 4756|      0|        }
 4757|       |
 4758|      0|        return true;
 4759|      0|    }
 4760|       |
 4761|       |    bool start_array(std::size_t len)
 4762|      0|    {
 4763|      0|        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::array_start, discarded);
 4764|      0|        keep_stack.push_back(keep);
 4765|       |
 4766|      0|        auto val = handle_value(BasicJsonType::value_t::array, true);
 4767|      0|        ref_stack.push_back(val.second);
 4768|       |
 4769|       |        // check array limit
 4770|      0|        if (ref_stack.back() and JSON_HEDLEY_UNLIKELY(len != std::size_t(-1) and len > ref_stack.back()->max_size()))
 4771|      0|        {
 4772|      0|            JSON_THROW(out_of_range::create(408, "excessive array size: " + std::to_string(len)));
 4773|      0|        }
 4774|       |
 4775|      0|        return true;
 4776|      0|    }
 4777|       |
 4778|       |    bool end_array()
 4779|      0|    {
 4780|      0|        bool keep = true;
 4781|       |
 4782|      0|        if (ref_stack.back())
 4783|      0|        {
 4784|      0|            keep = callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::array_end, *ref_stack.back());
 4785|      0|            if (not keep)
 4786|      0|            {
 4787|       |                // discard array
 4788|      0|                *ref_stack.back() = discarded;
 4789|      0|            }
 4790|      0|        }
 4791|       |
 4792|      0|        assert(not ref_stack.empty());
 4793|      0|        assert(not keep_stack.empty());
 4794|      0|        ref_stack.pop_back();
 4795|      0|        keep_stack.pop_back();
 4796|       |
 4797|       |        // remove discarded value
 4798|      0|        if (not keep and not ref_stack.empty() and ref_stack.back()->is_array())
 4799|      0|        {
 4800|      0|            ref_stack.back()->m_value.array->pop_back();
 4801|      0|        }
 4802|       |
 4803|      0|        return true;
 4804|      0|    }
 4805|       |
 4806|       |    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/,
 4807|       |                     const detail::exception& ex)
 4808|      0|    {
 4809|      0|        errored = true;
 4810|      0|        if (allow_exceptions)
 4811|      0|        {
 4812|       |            // determine the proper exception type from the id
 4813|      0|            switch ((ex.id / 100) % 100)
 4814|      0|            {
 4815|      0|                case 1:
 4816|      0|                    JSON_THROW(*static_cast<const detail::parse_error*>(&ex));
 4817|      0|                case 4:
 4818|      0|                    JSON_THROW(*static_cast<const detail::out_of_range*>(&ex));
 4819|       |                // LCOV_EXCL_START
 4820|      0|                case 2:
 4821|      0|                    JSON_THROW(*static_cast<const detail::invalid_iterator*>(&ex));
 4822|      0|                case 3:
 4823|      0|                    JSON_THROW(*static_cast<const detail::type_error*>(&ex));
 4824|      0|                case 5:
 4825|      0|                    JSON_THROW(*static_cast<const detail::other_error*>(&ex));
 4826|      0|                default:
 4827|      0|                    assert(false);
 4828|       |                    // LCOV_EXCL_STOP
 4829|      0|            }
 4830|      0|        }
 4831|      0|        return false;
 4832|      0|    }
 4833|       |
 4834|       |    constexpr bool is_errored() const
 4835|      0|    {
 4836|      0|        return errored;
 4837|      0|    }
 4838|       |
 4839|       |  private:
 4840|       |    /*!
 4841|       |    @param[in] v  value to add to the JSON value we build during parsing
 4842|       |    @param[in] skip_callback  whether we should skip calling the callback
 4843|       |               function; this is required after start_array() and
 4844|       |               start_object() SAX events, because otherwise we would call the
 4845|       |               callback function with an empty array or object, respectively.
 4846|       |
 4847|       |    @invariant If the ref stack is empty, then the passed value will be the new
 4848|       |               root.
 4849|       |    @invariant If the ref stack contains a value, then it is an array or an
 4850|       |               object to which we can add elements
 4851|       |
 4852|       |    @return pair of boolean (whether value should be kept) and pointer (to the
 4853|       |            passed value in the ref_stack hierarchy; nullptr if not kept)
 4854|       |    */
 4855|       |    template<typename Value>
 4856|       |    std::pair<bool, BasicJsonType*> handle_value(Value&& v, const bool skip_callback = false)
 4857|      0|    {
 4858|      0|        assert(not keep_stack.empty());
 4859|       |
 4860|       |        // do not handle this value if we know it would be added to a discarded
 4861|       |        // container
 4862|      0|        if (not keep_stack.back())
 4863|      0|        {
 4864|      0|            return {false, nullptr};
 4865|      0|        }
 4866|       |
 4867|       |        // create value
 4868|      0|        auto value = BasicJsonType(std::forward<Value>(v));
 4869|       |
 4870|       |        // check callback
 4871|      0|        const bool keep = skip_callback or callback(static_cast<int>(ref_stack.size()), parse_event_t::value, value);
 4872|       |
 4873|       |        // do not handle this value if we just learnt it shall be discarded
 4874|      0|        if (not keep)
 4875|      0|        {
 4876|      0|            return {false, nullptr};
 4877|      0|        }
 4878|       |
 4879|      0|        if (ref_stack.empty())
 4880|      0|        {
 4881|      0|            root = std::move(value);
 4882|      0|            return {true, &root};
 4883|      0|        }
 4884|       |
 4885|       |        // skip this value if we already decided to skip the parent
 4886|       |        // (https://github.com/nlohmann/json/issues/971#issuecomment-413678360)
 4887|      0|        if (not ref_stack.back())
 4888|      0|        {
 4889|      0|            return {false, nullptr};
 4890|      0|        }
 4891|       |
 4892|       |        // we now only expect arrays and objects
 4893|      0|        assert(ref_stack.back()->is_array() or ref_stack.back()->is_object());
 4894|       |
 4895|       |        // array
 4896|      0|        if (ref_stack.back()->is_array())
 4897|      0|        {
 4898|      0|            ref_stack.back()->m_value.array->push_back(std::move(value));
 4899|      0|            return {true, &(ref_stack.back()->m_value.array->back())};
 4900|      0|        }
 4901|       |
 4902|       |        // object
 4903|      0|        assert(ref_stack.back()->is_object());
 4904|       |        // check if we should store an element for the current key
 4905|      0|        assert(not key_keep_stack.empty());
 4906|      0|        const bool store_element = key_keep_stack.back();
 4907|      0|        key_keep_stack.pop_back();
 4908|       |
 4909|      0|        if (not store_element)
 4910|      0|        {
 4911|      0|            return {false, nullptr};
 4912|      0|        }
 4913|       |
 4914|      0|        assert(object_element);
 4915|      0|        *object_element = std::move(value);
 4916|      0|        return {true, object_element};
 4917|      0|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueINS0_7value_tEEESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRdEESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRbEESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIDnEESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRlEESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRSA_EESt4pairIbPSC_EOT_b
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12handle_valueIRmEESt4pairIbPSC_EOT_b
  ------------------
 4918|       |
 4919|       |    /// the parsed JSON value
 4920|       |    BasicJsonType& root;
 4921|       |    /// stack to model hierarchy of values
 4922|       |    std::vector<BasicJsonType*> ref_stack {};
 4923|       |    /// stack to manage which values to keep
 4924|       |    std::vector<bool> keep_stack {};
 4925|       |    /// stack to manage which object keys to keep
 4926|       |    std::vector<bool> key_keep_stack {};
 4927|       |    /// helper to hold the reference for the next object element
 4928|       |    BasicJsonType* object_element = nullptr;
 4929|       |    /// whether a syntax error occurred
 4930|       |    bool errored = false;
 4931|       |    /// callback function
 4932|       |    const parser_callback_t callback = nullptr;
 4933|       |    /// whether to throw exceptions in case of errors
 4934|       |    const bool allow_exceptions = true;
 4935|       |    /// a discarded value for the callback
 4936|       |    BasicJsonType discarded = BasicJsonType::value_t::discarded;
 4937|       |};
 4938|       |
 4939|       |template<typename BasicJsonType>
 4940|       |class json_sax_acceptor
 4941|       |{
 4942|       |  public:
 4943|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 4944|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 4945|       |    using number_float_t = typename BasicJsonType::number_float_t;
 4946|       |    using string_t = typename BasicJsonType::string_t;
 4947|       |
 4948|       |    bool null()
 4949|       |    {
 4950|       |        return true;
 4951|       |    }
 4952|       |
 4953|       |    bool boolean(bool /*unused*/)
 4954|       |    {
 4955|       |        return true;
 4956|       |    }
 4957|       |
 4958|       |    bool number_integer(number_integer_t /*unused*/)
 4959|       |    {
 4960|       |        return true;
 4961|       |    }
 4962|       |
 4963|       |    bool number_unsigned(number_unsigned_t /*unused*/)
 4964|       |    {
 4965|       |        return true;
 4966|       |    }
 4967|       |
 4968|       |    bool number_float(number_float_t /*unused*/, const string_t& /*unused*/)
 4969|       |    {
 4970|       |        return true;
 4971|       |    }
 4972|       |
 4973|       |    bool string(string_t& /*unused*/)
 4974|       |    {
 4975|       |        return true;
 4976|       |    }
 4977|       |
 4978|       |    bool start_object(std::size_t  /*unused*/ = std::size_t(-1))
 4979|       |    {
 4980|       |        return true;
 4981|       |    }
 4982|       |
 4983|       |    bool key(string_t& /*unused*/)
 4984|       |    {
 4985|       |        return true;
 4986|       |    }
 4987|       |
 4988|       |    bool end_object()
 4989|       |    {
 4990|       |        return true;
 4991|       |    }
 4992|       |
 4993|       |    bool start_array(std::size_t  /*unused*/ = std::size_t(-1))
 4994|       |    {
 4995|       |        return true;
 4996|       |    }
 4997|       |
 4998|       |    bool end_array()
 4999|       |    {
 5000|       |        return true;
 5001|       |    }
 5002|       |
 5003|       |    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/, const detail::exception& /*unused*/)
 5004|       |    {
 5005|       |        return false;
 5006|       |    }
 5007|       |};
 5008|       |}  // namespace detail
 5009|       |
 5010|       |}  // namespace nlohmann
 5011|       |
 5012|       |// #include <nlohmann/detail/macro_scope.hpp>
 5013|       |
 5014|       |// #include <nlohmann/detail/meta/is_sax.hpp>
 5015|       |
 5016|       |
 5017|       |#include <cstdint> // size_t
 5018|       |#include <utility> // declval
 5019|       |#include <string> // string
 5020|       |
 5021|       |// #include <nlohmann/detail/meta/detected.hpp>
 5022|       |
 5023|       |// #include <nlohmann/detail/meta/type_traits.hpp>
 5024|       |
 5025|       |
 5026|       |namespace nlohmann
 5027|       |{
 5028|       |namespace detail
 5029|       |{
 5030|       |template <typename T>
 5031|       |using null_function_t = decltype(std::declval<T&>().null());
 5032|       |
 5033|       |template <typename T>
 5034|       |using boolean_function_t =
 5035|       |    decltype(std::declval<T&>().boolean(std::declval<bool>()));
 5036|       |
 5037|       |template <typename T, typename Integer>
 5038|       |using number_integer_function_t =
 5039|       |    decltype(std::declval<T&>().number_integer(std::declval<Integer>()));
 5040|       |
 5041|       |template <typename T, typename Unsigned>
 5042|       |using number_unsigned_function_t =
 5043|       |    decltype(std::declval<T&>().number_unsigned(std::declval<Unsigned>()));
 5044|       |
 5045|       |template <typename T, typename Float, typename String>
 5046|       |using number_float_function_t = decltype(std::declval<T&>().number_float(
 5047|       |                                    std::declval<Float>(), std::declval<const String&>()));
 5048|       |
 5049|       |template <typename T, typename String>
 5050|       |using string_function_t =
 5051|       |    decltype(std::declval<T&>().string(std::declval<String&>()));
 5052|       |
 5053|       |template <typename T>
 5054|       |using start_object_function_t =
 5055|       |    decltype(std::declval<T&>().start_object(std::declval<std::size_t>()));
 5056|       |
 5057|       |template <typename T, typename String>
 5058|       |using key_function_t =
 5059|       |    decltype(std::declval<T&>().key(std::declval<String&>()));
 5060|       |
 5061|       |template <typename T>
 5062|       |using end_object_function_t = decltype(std::declval<T&>().end_object());
 5063|       |
 5064|       |template <typename T>
 5065|       |using start_array_function_t =
 5066|       |    decltype(std::declval<T&>().start_array(std::declval<std::size_t>()));
 5067|       |
 5068|       |template <typename T>
 5069|       |using end_array_function_t = decltype(std::declval<T&>().end_array());
 5070|       |
 5071|       |template <typename T, typename Exception>
 5072|       |using parse_error_function_t = decltype(std::declval<T&>().parse_error(
 5073|       |        std::declval<std::size_t>(), std::declval<const std::string&>(),
 5074|       |        std::declval<const Exception&>()));
 5075|       |
 5076|       |template <typename SAX, typename BasicJsonType>
 5077|       |struct is_sax
 5078|       |{
 5079|       |  private:
 5080|       |    static_assert(is_basic_json<BasicJsonType>::value,
 5081|       |                  "BasicJsonType must be of type basic_json<...>");
 5082|       |
 5083|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 5084|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 5085|       |    using number_float_t = typename BasicJsonType::number_float_t;
 5086|       |    using string_t = typename BasicJsonType::string_t;
 5087|       |    using exception_t = typename BasicJsonType::exception;
 5088|       |
 5089|       |  public:
 5090|       |    static constexpr bool value =
 5091|       |        is_detected_exact<bool, null_function_t, SAX>::value &&
 5092|       |        is_detected_exact<bool, boolean_function_t, SAX>::value &&
 5093|       |        is_detected_exact<bool, number_integer_function_t, SAX,
 5094|       |        number_integer_t>::value &&
 5095|       |        is_detected_exact<bool, number_unsigned_function_t, SAX,
 5096|       |        number_unsigned_t>::value &&
 5097|       |        is_detected_exact<bool, number_float_function_t, SAX, number_float_t,
 5098|       |        string_t>::value &&
 5099|       |        is_detected_exact<bool, string_function_t, SAX, string_t>::value &&
 5100|       |        is_detected_exact<bool, start_object_function_t, SAX>::value &&
 5101|       |        is_detected_exact<bool, key_function_t, SAX, string_t>::value &&
 5102|       |        is_detected_exact<bool, end_object_function_t, SAX>::value &&
 5103|       |        is_detected_exact<bool, start_array_function_t, SAX>::value &&
 5104|       |        is_detected_exact<bool, end_array_function_t, SAX>::value &&
 5105|       |        is_detected_exact<bool, parse_error_function_t, SAX, exception_t>::value;
 5106|       |};
 5107|       |
 5108|       |template <typename SAX, typename BasicJsonType>
 5109|       |struct is_sax_static_asserts
 5110|       |{
 5111|       |  private:
 5112|       |    static_assert(is_basic_json<BasicJsonType>::value,
 5113|       |                  "BasicJsonType must be of type basic_json<...>");
 5114|       |
 5115|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 5116|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 5117|       |    using number_float_t = typename BasicJsonType::number_float_t;
 5118|       |    using string_t = typename BasicJsonType::string_t;
 5119|       |    using exception_t = typename BasicJsonType::exception;
 5120|       |
 5121|       |  public:
 5122|       |    static_assert(is_detected_exact<bool, null_function_t, SAX>::value,
 5123|       |                  "Missing/invalid function: bool null()");
 5124|       |    static_assert(is_detected_exact<bool, boolean_function_t, SAX>::value,
 5125|       |                  "Missing/invalid function: bool boolean(bool)");
 5126|       |    static_assert(is_detected_exact<bool, boolean_function_t, SAX>::value,
 5127|       |                  "Missing/invalid function: bool boolean(bool)");
 5128|       |    static_assert(
 5129|       |        is_detected_exact<bool, number_integer_function_t, SAX,
 5130|       |        number_integer_t>::value,
 5131|       |        "Missing/invalid function: bool number_integer(number_integer_t)");
 5132|       |    static_assert(
 5133|       |        is_detected_exact<bool, number_unsigned_function_t, SAX,
 5134|       |        number_unsigned_t>::value,
 5135|       |        "Missing/invalid function: bool number_unsigned(number_unsigned_t)");
 5136|       |    static_assert(is_detected_exact<bool, number_float_function_t, SAX,
 5137|       |                  number_float_t, string_t>::value,
 5138|       |                  "Missing/invalid function: bool number_float(number_float_t, const string_t&)");
 5139|       |    static_assert(
 5140|       |        is_detected_exact<bool, string_function_t, SAX, string_t>::value,
 5141|       |        "Missing/invalid function: bool string(string_t&)");
 5142|       |    static_assert(is_detected_exact<bool, start_object_function_t, SAX>::value,
 5143|       |                  "Missing/invalid function: bool start_object(std::size_t)");
 5144|       |    static_assert(is_detected_exact<bool, key_function_t, SAX, string_t>::value,
 5145|       |                  "Missing/invalid function: bool key(string_t&)");
 5146|       |    static_assert(is_detected_exact<bool, end_object_function_t, SAX>::value,
 5147|       |                  "Missing/invalid function: bool end_object()");
 5148|       |    static_assert(is_detected_exact<bool, start_array_function_t, SAX>::value,
 5149|       |                  "Missing/invalid function: bool start_array(std::size_t)");
 5150|       |    static_assert(is_detected_exact<bool, end_array_function_t, SAX>::value,
 5151|       |                  "Missing/invalid function: bool end_array()");
 5152|       |    static_assert(
 5153|       |        is_detected_exact<bool, parse_error_function_t, SAX, exception_t>::value,
 5154|       |        "Missing/invalid function: bool parse_error(std::size_t, const "
 5155|       |        "std::string&, const exception&)");
 5156|       |};
 5157|       |}  // namespace detail
 5158|       |}  // namespace nlohmann
 5159|       |
 5160|       |// #include <nlohmann/detail/value_t.hpp>
 5161|       |
 5162|       |
 5163|       |namespace nlohmann
 5164|       |{
 5165|       |namespace detail
 5166|       |{
 5167|       |///////////////////
 5168|       |// binary reader //
 5169|       |///////////////////
 5170|       |
 5171|       |/*!
 5172|       |@brief deserialization of CBOR, MessagePack, and UBJSON values
 5173|       |*/
 5174|       |template<typename BasicJsonType, typename SAX = json_sax_dom_parser<BasicJsonType>>
 5175|       |class binary_reader
 5176|       |{
 5177|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 5178|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 5179|       |    using number_float_t = typename BasicJsonType::number_float_t;
 5180|       |    using string_t = typename BasicJsonType::string_t;
 5181|       |    using json_sax_t = SAX;
 5182|       |
 5183|       |  public:
 5184|       |    /*!
 5185|       |    @brief create a binary reader
 5186|       |
 5187|       |    @param[in] adapter  input adapter to read from
 5188|       |    */
 5189|       |    explicit binary_reader(input_adapter_t adapter) : ia(std::move(adapter))
 5190|       |    {
 5191|       |        (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};
 5192|       |        assert(ia);
 5193|       |    }
 5194|       |
 5195|       |    // make class move-only
 5196|       |    binary_reader(const binary_reader&) = delete;
 5197|       |    binary_reader(binary_reader&&) = default;
 5198|       |    binary_reader& operator=(const binary_reader&) = delete;
 5199|       |    binary_reader& operator=(binary_reader&&) = default;
 5200|       |    ~binary_reader() = default;
 5201|       |
 5202|       |    /*!
 5203|       |    @param[in] format  the binary format to parse
 5204|       |    @param[in] sax_    a SAX event processor
 5205|       |    @param[in] strict  whether to expect the input to be consumed completed
 5206|       |
 5207|       |    @return
 5208|       |    */
 5209|       |    JSON_HEDLEY_NON_NULL(3)
 5210|       |    bool sax_parse(const input_format_t format,
 5211|       |                   json_sax_t* sax_,
 5212|       |                   const bool strict = true)
 5213|       |    {
 5214|       |        sax = sax_;
 5215|       |        bool result = false;
 5216|       |
 5217|       |        switch (format)
 5218|       |        {
 5219|       |            case input_format_t::bson:
 5220|       |                result = parse_bson_internal();
 5221|       |                break;
 5222|       |
 5223|       |            case input_format_t::cbor:
 5224|       |                result = parse_cbor_internal();
 5225|       |                break;
 5226|       |
 5227|       |            case input_format_t::msgpack:
 5228|       |                result = parse_msgpack_internal();
 5229|       |                break;
 5230|       |
 5231|       |            case input_format_t::ubjson:
 5232|       |                result = parse_ubjson_internal();
 5233|       |                break;
 5234|       |
 5235|       |            default:            // LCOV_EXCL_LINE
 5236|       |                assert(false);  // LCOV_EXCL_LINE
 5237|       |        }
 5238|       |
 5239|       |        // strict mode: next byte must be EOF
 5240|       |        if (result and strict)
 5241|       |        {
 5242|       |            if (format == input_format_t::ubjson)
 5243|       |            {
 5244|       |                get_ignore_noop();
 5245|       |            }
 5246|       |            else
 5247|       |            {
 5248|       |                get();
 5249|       |            }
 5250|       |
 5251|       |            if (JSON_HEDLEY_UNLIKELY(current != std::char_traits<char>::eof()))
 5252|       |            {
 5253|       |                return sax->parse_error(chars_read, get_token_string(),
 5254|       |                                        parse_error::create(110, chars_read, exception_message(format, "expected end of input; last byte: 0x" + get_token_string(), "value")));
 5255|       |            }
 5256|       |        }
 5257|       |
 5258|       |        return result;
 5259|       |    }
 5260|       |
 5261|       |    /*!
 5262|       |    @brief determine system byte order
 5263|       |
 5264|       |    @return true if and only if system's byte order is little endian
 5265|       |
 5266|       |    @note from https://stackoverflow.com/a/1001328/266378
 5267|       |    */
 5268|       |    static constexpr bool little_endianess(int num = 1) noexcept
 5269|       |    {
 5270|       |        return *reinterpret_cast<char*>(&num) == 1;
 5271|       |    }
 5272|       |
 5273|       |  private:
 5274|       |    //////////
 5275|       |    // BSON //
 5276|       |    //////////
 5277|       |
 5278|       |    /*!
 5279|       |    @brief Reads in a BSON-object and passes it to the SAX-parser.
 5280|       |    @return whether a valid BSON-value was passed to the SAX parser
 5281|       |    */
 5282|       |    bool parse_bson_internal()
 5283|       |    {
 5284|       |        std::int32_t document_size;
 5285|       |        get_number<std::int32_t, true>(input_format_t::bson, document_size);
 5286|       |
 5287|       |        if (JSON_HEDLEY_UNLIKELY(not sax->start_object(std::size_t(-1))))
 5288|       |        {
 5289|       |            return false;
 5290|       |        }
 5291|       |
 5292|       |        if (JSON_HEDLEY_UNLIKELY(not parse_bson_element_list(/*is_array*/false)))
 5293|       |        {
 5294|       |            return false;
 5295|       |        }
 5296|       |
 5297|       |        return sax->end_object();
 5298|       |    }
 5299|       |
 5300|       |    /*!
 5301|       |    @brief Parses a C-style string from the BSON input.
 5302|       |    @param[in, out] result  A reference to the string variable where the read
 5303|       |                            string is to be stored.
 5304|       |    @return `true` if the \x00-byte indicating the end of the string was
 5305|       |             encountered before the EOF; false` indicates an unexpected EOF.
 5306|       |    */
 5307|       |    bool get_bson_cstr(string_t& result)
 5308|       |    {
 5309|       |        auto out = std::back_inserter(result);
 5310|       |        while (true)
 5311|       |        {
 5312|       |            get();
 5313|       |            if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(input_format_t::bson, "cstring")))
 5314|       |            {
 5315|       |                return false;
 5316|       |            }
 5317|       |            if (current == 0x00)
 5318|       |            {
 5319|       |                return true;
 5320|       |            }
 5321|       |            *out++ = static_cast<char>(current);
 5322|       |        }
 5323|       |
 5324|       |        return true;
 5325|       |    }
 5326|       |
 5327|       |    /*!
 5328|       |    @brief Parses a zero-terminated string of length @a len from the BSON
 5329|       |           input.
 5330|       |    @param[in] len  The length (including the zero-byte at the end) of the
 5331|       |                    string to be read.
 5332|       |    @param[in, out] result  A reference to the string variable where the read
 5333|       |                            string is to be stored.
 5334|       |    @tparam NumberType The type of the length @a len
 5335|       |    @pre len >= 1
 5336|       |    @return `true` if the string was successfully parsed
 5337|       |    */
 5338|       |    template<typename NumberType>
 5339|       |    bool get_bson_string(const NumberType len, string_t& result)
 5340|       |    {
 5341|       |        if (JSON_HEDLEY_UNLIKELY(len < 1))
 5342|       |        {
 5343|       |            auto last_token = get_token_string();
 5344|       |            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format_t::bson, "string length must be at least 1, is " + std::to_string(len), "string")));
 5345|       |        }
 5346|       |
 5347|       |        return get_string(input_format_t::bson, len - static_cast<NumberType>(1), result) and get() != std::char_traits<char>::eof();
 5348|       |    }
 5349|       |
 5350|       |    /*!
 5351|       |    @brief Read a BSON document element of the given @a element_type.
 5352|       |    @param[in] element_type The BSON element type, c.f. http://bsonspec.org/spec.html
 5353|       |    @param[in] element_type_parse_position The position in the input stream,
 5354|       |               where the `element_type` was read.
 5355|       |    @warning Not all BSON element types are supported yet. An unsupported
 5356|       |             @a element_type will give rise to a parse_error.114:
 5357|       |             Unsupported BSON record type 0x...
 5358|       |    @return whether a valid BSON-object/array was passed to the SAX parser
 5359|       |    */
 5360|       |    bool parse_bson_element_internal(const int element_type,
 5361|       |                                     const std::size_t element_type_parse_position)
 5362|       |    {
 5363|       |        switch (element_type)
 5364|       |        {
 5365|       |            case 0x01: // double
 5366|       |            {
 5367|       |                double number;
 5368|       |                return get_number<double, true>(input_format_t::bson, number) and sax->number_float(static_cast<number_float_t>(number), "");
 5369|       |            }
 5370|       |
 5371|       |            case 0x02: // string
 5372|       |            {
 5373|       |                std::int32_t len;
 5374|       |                string_t value;
 5375|       |                return get_number<std::int32_t, true>(input_format_t::bson, len) and get_bson_string(len, value) and sax->string(value);
 5376|       |            }
 5377|       |
 5378|       |            case 0x03: // object
 5379|       |            {
 5380|       |                return parse_bson_internal();
 5381|       |            }
 5382|       |
 5383|       |            case 0x04: // array
 5384|       |            {
 5385|       |                return parse_bson_array();
 5386|       |            }
 5387|       |
 5388|       |            case 0x08: // boolean
 5389|       |            {
 5390|       |                return sax->boolean(get() != 0);
 5391|       |            }
 5392|       |
 5393|       |            case 0x0A: // null
 5394|       |            {
 5395|       |                return sax->null();
 5396|       |            }
 5397|       |
 5398|       |            case 0x10: // int32
 5399|       |            {
 5400|       |                std::int32_t value;
 5401|       |                return get_number<std::int32_t, true>(input_format_t::bson, value) and sax->number_integer(value);
 5402|       |            }
 5403|       |
 5404|       |            case 0x12: // int64
 5405|       |            {
 5406|       |                std::int64_t value;
 5407|       |                return get_number<std::int64_t, true>(input_format_t::bson, value) and sax->number_integer(value);
 5408|       |            }
 5409|       |
 5410|       |            default: // anything else not supported (yet)
 5411|       |            {
 5412|       |                std::array<char, 3> cr{{}};
 5413|       |                (std::snprintf)(cr.data(), cr.size(), "%.2hhX", static_cast<unsigned char>(element_type));
 5414|       |                return sax->parse_error(element_type_parse_position, std::string(cr.data()), parse_error::create(114, element_type_parse_position, "Unsupported BSON record type 0x" + std::string(cr.data())));
 5415|       |            }
 5416|       |        }
 5417|       |    }
 5418|       |
 5419|       |    /*!
 5420|       |    @brief Read a BSON element list (as specified in the BSON-spec)
 5421|       |
 5422|       |    The same binary layout is used for objects and arrays, hence it must be
 5423|       |    indicated with the argument @a is_array which one is expected
 5424|       |    (true --> array, false --> object).
 5425|       |
 5426|       |    @param[in] is_array Determines if the element list being read is to be
 5427|       |                        treated as an object (@a is_array == false), or as an
 5428|       |                        array (@a is_array == true).
 5429|       |    @return whether a valid BSON-object/array was passed to the SAX parser
 5430|       |    */
 5431|       |    bool parse_bson_element_list(const bool is_array)
 5432|       |    {
 5433|       |        string_t key;
 5434|       |        while (int element_type = get())
 5435|       |        {
 5436|       |            if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(input_format_t::bson, "element list")))
 5437|       |            {
 5438|       |                return false;
 5439|       |            }
 5440|       |
 5441|       |            const std::size_t element_type_parse_position = chars_read;
 5442|       |            if (JSON_HEDLEY_UNLIKELY(not get_bson_cstr(key)))
 5443|       |            {
 5444|       |                return false;
 5445|       |            }
 5446|       |
 5447|       |            if (not is_array and not sax->key(key))
 5448|       |            {
 5449|       |                return false;
 5450|       |            }
 5451|       |
 5452|       |            if (JSON_HEDLEY_UNLIKELY(not parse_bson_element_internal(element_type, element_type_parse_position)))
 5453|       |            {
 5454|       |                return false;
 5455|       |            }
 5456|       |
 5457|       |            // get_bson_cstr only appends
 5458|       |            key.clear();
 5459|       |        }
 5460|       |
 5461|       |        return true;
 5462|       |    }
 5463|       |
 5464|       |    /*!
 5465|       |    @brief Reads an array from the BSON input and passes it to the SAX-parser.
 5466|       |    @return whether a valid BSON-array was passed to the SAX parser
 5467|       |    */
 5468|       |    bool parse_bson_array()
 5469|       |    {
 5470|       |        std::int32_t document_size;
 5471|       |        get_number<std::int32_t, true>(input_format_t::bson, document_size);
 5472|       |
 5473|       |        if (JSON_HEDLEY_UNLIKELY(not sax->start_array(std::size_t(-1))))
 5474|       |        {
 5475|       |            return false;
 5476|       |        }
 5477|       |
 5478|       |        if (JSON_HEDLEY_UNLIKELY(not parse_bson_element_list(/*is_array*/true)))
 5479|       |        {
 5480|       |            return false;
 5481|       |        }
 5482|       |
 5483|       |        return sax->end_array();
 5484|       |    }
 5485|       |
 5486|       |    //////////
 5487|       |    // CBOR //
 5488|       |    //////////
 5489|       |
 5490|       |    /*!
 5491|       |    @param[in] get_char  whether a new character should be retrieved from the
 5492|       |                         input (true, default) or whether the last read
 5493|       |                         character should be considered instead
 5494|       |
 5495|       |    @return whether a valid CBOR value was passed to the SAX parser
 5496|       |    */
 5497|       |    bool parse_cbor_internal(const bool get_char = true)
 5498|       |    {
 5499|       |        switch (get_char ? get() : current)
 5500|       |        {
 5501|       |            // EOF
 5502|       |            case std::char_traits<char>::eof():
 5503|       |                return unexpect_eof(input_format_t::cbor, "value");
 5504|       |
 5505|       |            // Integer 0x00..0x17 (0..23)
 5506|       |            case 0x00:
 5507|       |            case 0x01:
 5508|       |            case 0x02:
 5509|       |            case 0x03:
 5510|       |            case 0x04:
 5511|       |            case 0x05:
 5512|       |            case 0x06:
 5513|       |            case 0x07:
 5514|       |            case 0x08:
 5515|       |            case 0x09:
 5516|       |            case 0x0A:
 5517|       |            case 0x0B:
 5518|       |            case 0x0C:
 5519|       |            case 0x0D:
 5520|       |            case 0x0E:
 5521|       |            case 0x0F:
 5522|       |            case 0x10:
 5523|       |            case 0x11:
 5524|       |            case 0x12:
 5525|       |            case 0x13:
 5526|       |            case 0x14:
 5527|       |            case 0x15:
 5528|       |            case 0x16:
 5529|       |            case 0x17:
 5530|       |                return sax->number_unsigned(static_cast<number_unsigned_t>(current));
 5531|       |
 5532|       |            case 0x18: // Unsigned integer (one-byte uint8_t follows)
 5533|       |            {
 5534|       |                std::uint8_t number;
 5535|       |                return get_number(input_format_t::cbor, number) and sax->number_unsigned(number);
 5536|       |            }
 5537|       |
 5538|       |            case 0x19: // Unsigned integer (two-byte uint16_t follows)
 5539|       |            {
 5540|       |                std::uint16_t number;
 5541|       |                return get_number(input_format_t::cbor, number) and sax->number_unsigned(number);
 5542|       |            }
 5543|       |
 5544|       |            case 0x1A: // Unsigned integer (four-byte uint32_t follows)
 5545|       |            {
 5546|       |                std::uint32_t number;
 5547|       |                return get_number(input_format_t::cbor, number) and sax->number_unsigned(number);
 5548|       |            }
 5549|       |
 5550|       |            case 0x1B: // Unsigned integer (eight-byte uint64_t follows)
 5551|       |            {
 5552|       |                std::uint64_t number;
 5553|       |                return get_number(input_format_t::cbor, number) and sax->number_unsigned(number);
 5554|       |            }
 5555|       |
 5556|       |            // Negative integer -1-0x00..-1-0x17 (-1..-24)
 5557|       |            case 0x20:
 5558|       |            case 0x21:
 5559|       |            case 0x22:
 5560|       |            case 0x23:
 5561|       |            case 0x24:
 5562|       |            case 0x25:
 5563|       |            case 0x26:
 5564|       |            case 0x27:
 5565|       |            case 0x28:
 5566|       |            case 0x29:
 5567|       |            case 0x2A:
 5568|       |            case 0x2B:
 5569|       |            case 0x2C:
 5570|       |            case 0x2D:
 5571|       |            case 0x2E:
 5572|       |            case 0x2F:
 5573|       |            case 0x30:
 5574|       |            case 0x31:
 5575|       |            case 0x32:
 5576|       |            case 0x33:
 5577|       |            case 0x34:
 5578|       |            case 0x35:
 5579|       |            case 0x36:
 5580|       |            case 0x37:
 5581|       |                return sax->number_integer(static_cast<std::int8_t>(0x20 - 1 - current));
 5582|       |
 5583|       |            case 0x38: // Negative integer (one-byte uint8_t follows)
 5584|       |            {
 5585|       |                std::uint8_t number;
 5586|       |                return get_number(input_format_t::cbor, number) and sax->number_integer(static_cast<number_integer_t>(-1) - number);
 5587|       |            }
 5588|       |
 5589|       |            case 0x39: // Negative integer -1-n (two-byte uint16_t follows)
 5590|       |            {
 5591|       |                std::uint16_t number;
 5592|       |                return get_number(input_format_t::cbor, number) and sax->number_integer(static_cast<number_integer_t>(-1) - number);
 5593|       |            }
 5594|       |
 5595|       |            case 0x3A: // Negative integer -1-n (four-byte uint32_t follows)
 5596|       |            {
 5597|       |                std::uint32_t number;
 5598|       |                return get_number(input_format_t::cbor, number) and sax->number_integer(static_cast<number_integer_t>(-1) - number);
 5599|       |            }
 5600|       |
 5601|       |            case 0x3B: // Negative integer -1-n (eight-byte uint64_t follows)
 5602|       |            {
 5603|       |                std::uint64_t number;
 5604|       |                return get_number(input_format_t::cbor, number) and sax->number_integer(static_cast<number_integer_t>(-1)
 5605|       |                        - static_cast<number_integer_t>(number));
 5606|       |            }
 5607|       |
 5608|       |            // UTF-8 string (0x00..0x17 bytes follow)
 5609|       |            case 0x60:
 5610|       |            case 0x61:
 5611|       |            case 0x62:
 5612|       |            case 0x63:
 5613|       |            case 0x64:
 5614|       |            case 0x65:
 5615|       |            case 0x66:
 5616|       |            case 0x67:
 5617|       |            case 0x68:
 5618|       |            case 0x69:
 5619|       |            case 0x6A:
 5620|       |            case 0x6B:
 5621|       |            case 0x6C:
 5622|       |            case 0x6D:
 5623|       |            case 0x6E:
 5624|       |            case 0x6F:
 5625|       |            case 0x70:
 5626|       |            case 0x71:
 5627|       |            case 0x72:
 5628|       |            case 0x73:
 5629|       |            case 0x74:
 5630|       |            case 0x75:
 5631|       |            case 0x76:
 5632|       |            case 0x77:
 5633|       |            case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
 5634|       |            case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
 5635|       |            case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
 5636|       |            case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
 5637|       |            case 0x7F: // UTF-8 string (indefinite length)
 5638|       |            {
 5639|       |                string_t s;
 5640|       |                return get_cbor_string(s) and sax->string(s);
 5641|       |            }
 5642|       |
 5643|       |            // array (0x00..0x17 data items follow)
 5644|       |            case 0x80:
 5645|       |            case 0x81:
 5646|       |            case 0x82:
 5647|       |            case 0x83:
 5648|       |            case 0x84:
 5649|       |            case 0x85:
 5650|       |            case 0x86:
 5651|       |            case 0x87:
 5652|       |            case 0x88:
 5653|       |            case 0x89:
 5654|       |            case 0x8A:
 5655|       |            case 0x8B:
 5656|       |            case 0x8C:
 5657|       |            case 0x8D:
 5658|       |            case 0x8E:
 5659|       |            case 0x8F:
 5660|       |            case 0x90:
 5661|       |            case 0x91:
 5662|       |            case 0x92:
 5663|       |            case 0x93:
 5664|       |            case 0x94:
 5665|       |            case 0x95:
 5666|       |            case 0x96:
 5667|       |            case 0x97:
 5668|       |                return get_cbor_array(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu));
 5669|       |
 5670|       |            case 0x98: // array (one-byte uint8_t for n follows)
 5671|       |            {
 5672|       |                std::uint8_t len;
 5673|       |                return get_number(input_format_t::cbor, len) and get_cbor_array(static_cast<std::size_t>(len));
 5674|       |            }
 5675|       |
 5676|       |            case 0x99: // array (two-byte uint16_t for n follow)
 5677|       |            {
 5678|       |                std::uint16_t len;
 5679|       |                return get_number(input_format_t::cbor, len) and get_cbor_array(static_cast<std::size_t>(len));
 5680|       |            }
 5681|       |
 5682|       |            case 0x9A: // array (four-byte uint32_t for n follow)
 5683|       |            {
 5684|       |                std::uint32_t len;
 5685|       |                return get_number(input_format_t::cbor, len) and get_cbor_array(static_cast<std::size_t>(len));
 5686|       |            }
 5687|       |
 5688|       |            case 0x9B: // array (eight-byte uint64_t for n follow)
 5689|       |            {
 5690|       |                std::uint64_t len;
 5691|       |                return get_number(input_format_t::cbor, len) and get_cbor_array(static_cast<std::size_t>(len));
 5692|       |            }
 5693|       |
 5694|       |            case 0x9F: // array (indefinite length)
 5695|       |                return get_cbor_array(std::size_t(-1));
 5696|       |
 5697|       |            // map (0x00..0x17 pairs of data items follow)
 5698|       |            case 0xA0:
 5699|       |            case 0xA1:
 5700|       |            case 0xA2:
 5701|       |            case 0xA3:
 5702|       |            case 0xA4:
 5703|       |            case 0xA5:
 5704|       |            case 0xA6:
 5705|       |            case 0xA7:
 5706|       |            case 0xA8:
 5707|       |            case 0xA9:
 5708|       |            case 0xAA:
 5709|       |            case 0xAB:
 5710|       |            case 0xAC:
 5711|       |            case 0xAD:
 5712|       |            case 0xAE:
 5713|       |            case 0xAF:
 5714|       |            case 0xB0:
 5715|       |            case 0xB1:
 5716|       |            case 0xB2:
 5717|       |            case 0xB3:
 5718|       |            case 0xB4:
 5719|       |            case 0xB5:
 5720|       |            case 0xB6:
 5721|       |            case 0xB7:
 5722|       |                return get_cbor_object(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu));
 5723|       |
 5724|       |            case 0xB8: // map (one-byte uint8_t for n follows)
 5725|       |            {
 5726|       |                std::uint8_t len;
 5727|       |                return get_number(input_format_t::cbor, len) and get_cbor_object(static_cast<std::size_t>(len));
 5728|       |            }
 5729|       |
 5730|       |            case 0xB9: // map (two-byte uint16_t for n follow)
 5731|       |            {
 5732|       |                std::uint16_t len;
 5733|       |                return get_number(input_format_t::cbor, len) and get_cbor_object(static_cast<std::size_t>(len));
 5734|       |            }
 5735|       |
 5736|       |            case 0xBA: // map (four-byte uint32_t for n follow)
 5737|       |            {
 5738|       |                std::uint32_t len;
 5739|       |                return get_number(input_format_t::cbor, len) and get_cbor_object(static_cast<std::size_t>(len));
 5740|       |            }
 5741|       |
 5742|       |            case 0xBB: // map (eight-byte uint64_t for n follow)
 5743|       |            {
 5744|       |                std::uint64_t len;
 5745|       |                return get_number(input_format_t::cbor, len) and get_cbor_object(static_cast<std::size_t>(len));
 5746|       |            }
 5747|       |
 5748|       |            case 0xBF: // map (indefinite length)
 5749|       |                return get_cbor_object(std::size_t(-1));
 5750|       |
 5751|       |            case 0xF4: // false
 5752|       |                return sax->boolean(false);
 5753|       |
 5754|       |            case 0xF5: // true
 5755|       |                return sax->boolean(true);
 5756|       |
 5757|       |            case 0xF6: // null
 5758|       |                return sax->null();
 5759|       |
 5760|       |            case 0xF9: // Half-Precision Float (two-byte IEEE 754)
 5761|       |            {
 5762|       |                const int byte1_raw = get();
 5763|       |                if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(input_format_t::cbor, "number")))
 5764|       |                {
 5765|       |                    return false;
 5766|       |                }
 5767|       |                const int byte2_raw = get();
 5768|       |                if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(input_format_t::cbor, "number")))
 5769|       |                {
 5770|       |                    return false;
 5771|       |                }
 5772|       |
 5773|       |                const auto byte1 = static_cast<unsigned char>(byte1_raw);
 5774|       |                const auto byte2 = static_cast<unsigned char>(byte2_raw);
 5775|       |
 5776|       |                // code from RFC 7049, Appendix D, Figure 3:
 5777|       |                // As half-precision floating-point numbers were only added
 5778|       |                // to IEEE 754 in 2008, today's programming platforms often
 5779|       |                // still only have limited support for them. It is very
 5780|       |                // easy to include at least decoding support for them even
 5781|       |                // without such support. An example of a small decoder for
 5782|       |                // half-precision floating-point numbers in the C language
 5783|       |                // is shown in Fig. 3.
 5784|       |                const auto half = static_cast<unsigned int>((byte1 << 8u) + byte2);
 5785|       |                const double val = [&half]
 5786|       |                {
 5787|       |                    const int exp = (half >> 10u) & 0x1Fu;
 5788|       |                    const unsigned int mant = half & 0x3FFu;
 5789|       |                    assert(0 <= exp and exp <= 32);
 5790|       |                    assert(mant <= 1024);
 5791|       |                    switch (exp)
 5792|       |                    {
 5793|       |                        case 0:
 5794|       |                            return std::ldexp(mant, -24);
 5795|       |                        case 31:
 5796|       |                            return (mant == 0)
 5797|       |                            ? std::numeric_limits<double>::infinity()
 5798|       |                            : std::numeric_limits<double>::quiet_NaN();
 5799|       |                        default:
 5800|       |                            return std::ldexp(mant + 1024, exp - 25);
 5801|       |                    }
 5802|       |                }();
 5803|       |                return sax->number_float((half & 0x8000u) != 0
 5804|       |                                         ? static_cast<number_float_t>(-val)
 5805|       |                                         : static_cast<number_float_t>(val), "");
 5806|       |            }
 5807|       |
 5808|       |            case 0xFA: // Single-Precision Float (four-byte IEEE 754)
 5809|       |            {
 5810|       |                float number;
 5811|       |                return get_number(input_format_t::cbor, number) and sax->number_float(static_cast<number_float_t>(number), "");
 5812|       |            }
 5813|       |
 5814|       |            case 0xFB: // Double-Precision Float (eight-byte IEEE 754)
 5815|       |            {
 5816|       |                double number;
 5817|       |                return get_number(input_format_t::cbor, number) and sax->number_float(static_cast<number_float_t>(number), "");
 5818|       |            }
 5819|       |
 5820|       |            default: // anything else (0xFF is handled inside the other types)
 5821|       |            {
 5822|       |                auto last_token = get_token_string();
 5823|       |                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format_t::cbor, "invalid byte: 0x" + last_token, "value")));
 5824|       |            }
 5825|       |        }
 5826|       |    }
 5827|       |
 5828|       |    /*!
 5829|       |    @brief reads a CBOR string
 5830|       |
 5831|       |    This function first reads starting bytes to determine the expected
 5832|       |    string length and then copies this number of bytes into a string.
 5833|       |    Additionally, CBOR's strings with indefinite lengths are supported.
 5834|       |
 5835|       |    @param[out] result  created string
 5836|       |
 5837|       |    @return whether string creation completed
 5838|       |    */
 5839|       |    bool get_cbor_string(string_t& result)
 5840|       |    {
 5841|       |        if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(input_format_t::cbor, "string")))
 5842|       |        {
 5843|       |            return false;
 5844|       |        }
 5845|       |
 5846|       |        switch (current)
 5847|       |        {
 5848|       |            // UTF-8 string (0x00..0x17 bytes follow)
 5849|       |            case 0x60:
 5850|       |            case 0x61:
 5851|       |            case 0x62:
 5852|       |            case 0x63:
 5853|       |            case 0x64:
 5854|       |            case 0x65:
 5855|       |            case 0x66:
 5856|       |            case 0x67:
 5857|       |            case 0x68:
 5858|       |            case 0x69:
 5859|       |            case 0x6A:
 5860|       |            case 0x6B:
 5861|       |            case 0x6C:
 5862|       |            case 0x6D:
 5863|       |            case 0x6E:
 5864|       |            case 0x6F:
 5865|       |            case 0x70:
 5866|       |            case 0x71:
 5867|       |            case 0x72:
 5868|       |            case 0x73:
 5869|       |            case 0x74:
 5870|       |            case 0x75:
 5871|       |            case 0x76:
 5872|       |            case 0x77:
 5873|       |            {
 5874|       |                return get_string(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);
 5875|       |            }
 5876|       |
 5877|       |            case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
 5878|       |            {
 5879|       |                std::uint8_t len;
 5880|       |                return get_number(input_format_t::cbor, len) and get_string(input_format_t::cbor, len, result);
 5881|       |            }
 5882|       |
 5883|       |            case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
 5884|       |            {
 5885|       |                std::uint16_t len;
 5886|       |                return get_number(input_format_t::cbor, len) and get_string(input_format_t::cbor, len, result);
 5887|       |            }
 5888|       |
 5889|       |            case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
 5890|       |            {
 5891|       |                std::uint32_t len;
 5892|       |                return get_number(input_format_t::cbor, len) and get_string(input_format_t::cbor, len, result);
 5893|       |            }
 5894|       |
 5895|       |            case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
 5896|       |            {
 5897|       |                std::uint64_t len;
 5898|       |                return get_number(input_format_t::cbor, len) and get_string(input_format_t::cbor, len, result);
 5899|       |            }
 5900|       |
 5901|       |            case 0x7F: // UTF-8 string (indefinite length)
 5902|       |            {
 5903|       |                while (get() != 0xFF)
 5904|       |                {
 5905|       |                    string_t chunk;
 5906|       |                    if (not get_cbor_string(chunk))
 5907|       |                    {
 5908|       |                        return false;
 5909|       |                    }
 5910|       |                    result.append(chunk);
 5911|       |                }
 5912|       |                return true;
 5913|       |            }
 5914|       |
 5915|       |            default:
 5916|       |            {
 5917|       |                auto last_token = get_token_string();
 5918|       |                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format_t::cbor, "expected length specification (0x60-0x7B) or indefinite string type (0x7F); last byte: 0x" + last_token, "string")));
 5919|       |            }
 5920|       |        }
 5921|       |    }
 5922|       |
 5923|       |    /*!
 5924|       |    @param[in] len  the length of the array or std::size_t(-1) for an
 5925|       |                    array of indefinite size
 5926|       |    @return whether array creation completed
 5927|       |    */
 5928|       |    bool get_cbor_array(const std::size_t len)
 5929|       |    {
 5930|       |        if (JSON_HEDLEY_UNLIKELY(not sax->start_array(len)))
 5931|       |        {
 5932|       |            return false;
 5933|       |        }
 5934|       |
 5935|       |        if (len != std::size_t(-1))
 5936|       |        {
 5937|       |            for (std::size_t i = 0; i < len; ++i)
 5938|       |            {
 5939|       |                if (JSON_HEDLEY_UNLIKELY(not parse_cbor_internal()))
 5940|       |                {
 5941|       |                    return false;
 5942|       |                }
 5943|       |            }
 5944|       |        }
 5945|       |        else
 5946|       |        {
 5947|       |            while (get() != 0xFF)
 5948|       |            {
 5949|       |                if (JSON_HEDLEY_UNLIKELY(not parse_cbor_internal(false)))
 5950|       |                {
 5951|       |                    return false;
 5952|       |                }
 5953|       |            }
 5954|       |        }
 5955|       |
 5956|       |        return sax->end_array();
 5957|       |    }
 5958|       |
 5959|       |    /*!
 5960|       |    @param[in] len  the length of the object or std::size_t(-1) for an
 5961|       |                    object of indefinite size
 5962|       |    @return whether object creation completed
 5963|       |    */
 5964|       |    bool get_cbor_object(const std::size_t len)
 5965|       |    {
 5966|       |        if (JSON_HEDLEY_UNLIKELY(not sax->start_object(len)))
 5967|       |        {
 5968|       |            return false;
 5969|       |        }
 5970|       |
 5971|       |        string_t key;
 5972|       |        if (len != std::size_t(-1))
 5973|       |        {
 5974|       |            for (std::size_t i = 0; i < len; ++i)
 5975|       |            {
 5976|       |                get();
 5977|       |                if (JSON_HEDLEY_UNLIKELY(not get_cbor_string(key) or not sax->key(key)))
 5978|       |                {
 5979|       |                    return false;
 5980|       |                }
 5981|       |
 5982|       |                if (JSON_HEDLEY_UNLIKELY(not parse_cbor_internal()))
 5983|       |                {
 5984|       |                    return false;
 5985|       |                }
 5986|       |                key.clear();
 5987|       |            }
 5988|       |        }
 5989|       |        else
 5990|       |        {
 5991|       |            while (get() != 0xFF)
 5992|       |            {
 5993|       |                if (JSON_HEDLEY_UNLIKELY(not get_cbor_string(key) or not sax->key(key)))
 5994|       |                {
 5995|       |                    return false;
 5996|       |                }
 5997|       |
 5998|       |                if (JSON_HEDLEY_UNLIKELY(not parse_cbor_internal()))
 5999|       |                {
 6000|       |                    return false;
 6001|       |                }
 6002|       |                key.clear();
 6003|       |            }
 6004|       |        }
 6005|       |
 6006|       |        return sax->end_object();
 6007|       |    }
 6008|       |
 6009|       |    /////////////
 6010|       |    // MsgPack //
 6011|       |    /////////////
 6012|       |
 6013|       |    /*!
 6014|       |    @return whether a valid MessagePack value was passed to the SAX parser
 6015|       |    */
 6016|       |    bool parse_msgpack_internal()
 6017|       |    {
 6018|       |        switch (get())
 6019|       |        {
 6020|       |            // EOF
 6021|       |            case std::char_traits<char>::eof():
 6022|       |                return unexpect_eof(input_format_t::msgpack, "value");
 6023|       |
 6024|       |            // positive fixint
 6025|       |            case 0x00:
 6026|       |            case 0x01:
 6027|       |            case 0x02:
 6028|       |            case 0x03:
 6029|       |            case 0x04:
 6030|       |            case 0x05:
 6031|       |            case 0x06:
 6032|       |            case 0x07:
 6033|       |            case 0x08:
 6034|       |            case 0x09:
 6035|       |            case 0x0A:
 6036|       |            case 0x0B:
 6037|       |            case 0x0C:
 6038|       |            case 0x0D:
 6039|       |            case 0x0E:
 6040|       |            case 0x0F:
 6041|       |            case 0x10:
 6042|       |            case 0x11:
 6043|       |            case 0x12:
 6044|       |            case 0x13:
 6045|       |            case 0x14:
 6046|       |            case 0x15:
 6047|       |            case 0x16:
 6048|       |            case 0x17:
 6049|       |            case 0x18:
 6050|       |            case 0x19:
 6051|       |            case 0x1A:
 6052|       |            case 0x1B:
 6053|       |            case 0x1C:
 6054|       |            case 0x1D:
 6055|       |            case 0x1E:
 6056|       |            case 0x1F:
 6057|       |            case 0x20:
 6058|       |            case 0x21:
 6059|       |            case 0x22:
 6060|       |            case 0x23:
 6061|       |            case 0x24:
 6062|       |            case 0x25:
 6063|       |            case 0x26:
 6064|       |            case 0x27:
 6065|       |            case 0x28:
 6066|       |            case 0x29:
 6067|       |            case 0x2A:
 6068|       |            case 0x2B:
 6069|       |            case 0x2C:
 6070|       |            case 0x2D:
 6071|       |            case 0x2E:
 6072|       |            case 0x2F:
 6073|       |            case 0x30:
 6074|       |            case 0x31:
 6075|       |            case 0x32:
 6076|       |            case 0x33:
 6077|       |            case 0x34:
 6078|       |            case 0x35:
 6079|       |            case 0x36:
 6080|       |            case 0x37:
 6081|       |            case 0x38:
 6082|       |            case 0x39:
 6083|       |            case 0x3A:
 6084|       |            case 0x3B:
 6085|       |            case 0x3C:
 6086|       |            case 0x3D:
 6087|       |            case 0x3E:
 6088|       |            case 0x3F:
 6089|       |            case 0x40:
 6090|       |            case 0x41:
 6091|       |            case 0x42:
 6092|       |            case 0x43:
 6093|       |            case 0x44:
 6094|       |            case 0x45:
 6095|       |            case 0x46:
 6096|       |            case 0x47:
 6097|       |            case 0x48:
 6098|       |            case 0x49:
 6099|       |            case 0x4A:
 6100|       |            case 0x4B:
 6101|       |            case 0x4C:
 6102|       |            case 0x4D:
 6103|       |            case 0x4E:
 6104|       |            case 0x4F:
 6105|       |            case 0x50:
 6106|       |            case 0x51:
 6107|       |            case 0x52:
 6108|       |            case 0x53:
 6109|       |            case 0x54:
 6110|       |            case 0x55:
 6111|       |            case 0x56:
 6112|       |            case 0x57:
 6113|       |            case 0x58:
 6114|       |            case 0x59:
 6115|       |            case 0x5A:
 6116|       |            case 0x5B:
 6117|       |            case 0x5C:
 6118|       |            case 0x5D:
 6119|       |            case 0x5E:
 6120|       |            case 0x5F:
 6121|       |            case 0x60:
 6122|       |            case 0x61:
 6123|       |            case 0x62:
 6124|       |            case 0x63:
 6125|       |            case 0x64:
 6126|       |            case 0x65:
 6127|       |            case 0x66:
 6128|       |            case 0x67:
 6129|       |            case 0x68:
 6130|       |            case 0x69:
 6131|       |            case 0x6A:
 6132|       |            case 0x6B:
 6133|       |            case 0x6C:
 6134|       |            case 0x6D:
 6135|       |            case 0x6E:
 6136|       |            case 0x6F:
 6137|       |            case 0x70:
 6138|       |            case 0x71:
 6139|       |            case 0x72:
 6140|       |            case 0x73:
 6141|       |            case 0x74:
 6142|       |            case 0x75:
 6143|       |            case 0x76:
 6144|       |            case 0x77:
 6145|       |            case 0x78:
 6146|       |            case 0x79:
 6147|       |            case 0x7A:
 6148|       |            case 0x7B:
 6149|       |            case 0x7C:
 6150|       |            case 0x7D:
 6151|       |            case 0x7E:
 6152|       |            case 0x7F:
 6153|       |                return sax->number_unsigned(static_cast<number_unsigned_t>(current));
 6154|       |
 6155|       |            // fixmap
 6156|       |            case 0x80:
 6157|       |            case 0x81:
 6158|       |            case 0x82:
 6159|       |            case 0x83:
 6160|       |            case 0x84:
 6161|       |            case 0x85:
 6162|       |            case 0x86:
 6163|       |            case 0x87:
 6164|       |            case 0x88:
 6165|       |            case 0x89:
 6166|       |            case 0x8A:
 6167|       |            case 0x8B:
 6168|       |            case 0x8C:
 6169|       |            case 0x8D:
 6170|       |            case 0x8E:
 6171|       |            case 0x8F:
 6172|       |                return get_msgpack_object(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));
 6173|       |
 6174|       |            // fixarray
 6175|       |            case 0x90:
 6176|       |            case 0x91:
 6177|       |            case 0x92:
 6178|       |            case 0x93:
 6179|       |            case 0x94:
 6180|       |            case 0x95:
 6181|       |            case 0x96:
 6182|       |            case 0x97:
 6183|       |            case 0x98:
 6184|       |            case 0x99:
 6185|       |            case 0x9A:
 6186|       |            case 0x9B:
 6187|       |            case 0x9C:
 6188|       |            case 0x9D:
 6189|       |            case 0x9E:
 6190|       |            case 0x9F:
 6191|       |                return get_msgpack_array(static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));
 6192|       |
 6193|       |            // fixstr
 6194|       |            case 0xA0:
 6195|       |            case 0xA1:
 6196|       |            case 0xA2:
 6197|       |            case 0xA3:
 6198|       |            case 0xA4:
 6199|       |            case 0xA5:
 6200|       |            case 0xA6:
 6201|       |            case 0xA7:
 6202|       |            case 0xA8:
 6203|       |            case 0xA9:
 6204|       |            case 0xAA:
 6205|       |            case 0xAB:
 6206|       |            case 0xAC:
 6207|       |            case 0xAD:
 6208|       |            case 0xAE:
 6209|       |            case 0xAF:
 6210|       |            case 0xB0:
 6211|       |            case 0xB1:
 6212|       |            case 0xB2:
 6213|       |            case 0xB3:
 6214|       |            case 0xB4:
 6215|       |            case 0xB5:
 6216|       |            case 0xB6:
 6217|       |            case 0xB7:
 6218|       |            case 0xB8:
 6219|       |            case 0xB9:
 6220|       |            case 0xBA:
 6221|       |            case 0xBB:
 6222|       |            case 0xBC:
 6223|       |            case 0xBD:
 6224|       |            case 0xBE:
 6225|       |            case 0xBF:
 6226|       |            case 0xD9: // str 8
 6227|       |            case 0xDA: // str 16
 6228|       |            case 0xDB: // str 32
 6229|       |            {
 6230|       |                string_t s;
 6231|       |                return get_msgpack_string(s) and sax->string(s);
 6232|       |            }
 6233|       |
 6234|       |            case 0xC0: // nil
 6235|       |                return sax->null();
 6236|       |
 6237|       |            case 0xC2: // false
 6238|       |                return sax->boolean(false);
 6239|       |
 6240|       |            case 0xC3: // true
 6241|       |                return sax->boolean(true);
 6242|       |
 6243|       |            case 0xCA: // float 32
 6244|       |            {
 6245|       |                float number;
 6246|       |                return get_number(input_format_t::msgpack, number) and sax->number_float(static_cast<number_float_t>(number), "");
 6247|       |            }
 6248|       |
 6249|       |            case 0xCB: // float 64
 6250|       |            {
 6251|       |                double number;
 6252|       |                return get_number(input_format_t::msgpack, number) and sax->number_float(static_cast<number_float_t>(number), "");
 6253|       |            }
 6254|       |
 6255|       |            case 0xCC: // uint 8
 6256|       |            {
 6257|       |                std::uint8_t number;
 6258|       |                return get_number(input_format_t::msgpack, number) and sax->number_unsigned(number);
 6259|       |            }
 6260|       |
 6261|       |            case 0xCD: // uint 16
 6262|       |            {
 6263|       |                std::uint16_t number;
 6264|       |                return get_number(input_format_t::msgpack, number) and sax->number_unsigned(number);
 6265|       |            }
 6266|       |
 6267|       |            case 0xCE: // uint 32
 6268|       |            {
 6269|       |                std::uint32_t number;
 6270|       |                return get_number(input_format_t::msgpack, number) and sax->number_unsigned(number);
 6271|       |            }
 6272|       |
 6273|       |            case 0xCF: // uint 64
 6274|       |            {
 6275|       |                std::uint64_t number;
 6276|       |                return get_number(input_format_t::msgpack, number) and sax->number_unsigned(number);
 6277|       |            }
 6278|       |
 6279|       |            case 0xD0: // int 8
 6280|       |            {
 6281|       |                std::int8_t number;
 6282|       |                return get_number(input_format_t::msgpack, number) and sax->number_integer(number);
 6283|       |            }
 6284|       |
 6285|       |            case 0xD1: // int 16
 6286|       |            {
 6287|       |                std::int16_t number;
 6288|       |                return get_number(input_format_t::msgpack, number) and sax->number_integer(number);
 6289|       |            }
 6290|       |
 6291|       |            case 0xD2: // int 32
 6292|       |            {
 6293|       |                std::int32_t number;
 6294|       |                return get_number(input_format_t::msgpack, number) and sax->number_integer(number);
 6295|       |            }
 6296|       |
 6297|       |            case 0xD3: // int 64
 6298|       |            {
 6299|       |                std::int64_t number;
 6300|       |                return get_number(input_format_t::msgpack, number) and sax->number_integer(number);
 6301|       |            }
 6302|       |
 6303|       |            case 0xDC: // array 16
 6304|       |            {
 6305|       |                std::uint16_t len;
 6306|       |                return get_number(input_format_t::msgpack, len) and get_msgpack_array(static_cast<std::size_t>(len));
 6307|       |            }
 6308|       |
 6309|       |            case 0xDD: // array 32
 6310|       |            {
 6311|       |                std::uint32_t len;
 6312|       |                return get_number(input_format_t::msgpack, len) and get_msgpack_array(static_cast<std::size_t>(len));
 6313|       |            }
 6314|       |
 6315|       |            case 0xDE: // map 16
 6316|       |            {
 6317|       |                std::uint16_t len;
 6318|       |                return get_number(input_format_t::msgpack, len) and get_msgpack_object(static_cast<std::size_t>(len));
 6319|       |            }
 6320|       |
 6321|       |            case 0xDF: // map 32
 6322|       |            {
 6323|       |                std::uint32_t len;
 6324|       |                return get_number(input_format_t::msgpack, len) and get_msgpack_object(static_cast<std::size_t>(len));
 6325|       |            }
 6326|       |
 6327|       |            // negative fixint
 6328|       |            case 0xE0:
 6329|       |            case 0xE1:
 6330|       |            case 0xE2:
 6331|       |            case 0xE3:
 6332|       |            case 0xE4:
 6333|       |            case 0xE5:
 6334|       |            case 0xE6:
 6335|       |            case 0xE7:
 6336|       |            case 0xE8:
 6337|       |            case 0xE9:
 6338|       |            case 0xEA:
 6339|       |            case 0xEB:
 6340|       |            case 0xEC:
 6341|       |            case 0xED:
 6342|       |            case 0xEE:
 6343|       |            case 0xEF:
 6344|       |            case 0xF0:
 6345|       |            case 0xF1:
 6346|       |            case 0xF2:
 6347|       |            case 0xF3:
 6348|       |            case 0xF4:
 6349|       |            case 0xF5:
 6350|       |            case 0xF6:
 6351|       |            case 0xF7:
 6352|       |            case 0xF8:
 6353|       |            case 0xF9:
 6354|       |            case 0xFA:
 6355|       |            case 0xFB:
 6356|       |            case 0xFC:
 6357|       |            case 0xFD:
 6358|       |            case 0xFE:
 6359|       |            case 0xFF:
 6360|       |                return sax->number_integer(static_cast<std::int8_t>(current));
 6361|       |
 6362|       |            default: // anything else
 6363|       |            {
 6364|       |                auto last_token = get_token_string();
 6365|       |                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format_t::msgpack, "invalid byte: 0x" + last_token, "value")));
 6366|       |            }
 6367|       |        }
 6368|       |    }
 6369|       |
 6370|       |    /*!
 6371|       |    @brief reads a MessagePack string
 6372|       |
 6373|       |    This function first reads starting bytes to determine the expected
 6374|       |    string length and then copies this number of bytes into a string.
 6375|       |
 6376|       |    @param[out] result  created string
 6377|       |
 6378|       |    @return whether string creation completed
 6379|       |    */
 6380|       |    bool get_msgpack_string(string_t& result)
 6381|       |    {
 6382|       |        if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(input_format_t::msgpack, "string")))
 6383|       |        {
 6384|       |            return false;
 6385|       |        }
 6386|       |
 6387|       |        switch (current)
 6388|       |        {
 6389|       |            // fixstr
 6390|       |            case 0xA0:
 6391|       |            case 0xA1:
 6392|       |            case 0xA2:
 6393|       |            case 0xA3:
 6394|       |            case 0xA4:
 6395|       |            case 0xA5:
 6396|       |            case 0xA6:
 6397|       |            case 0xA7:
 6398|       |            case 0xA8:
 6399|       |            case 0xA9:
 6400|       |            case 0xAA:
 6401|       |            case 0xAB:
 6402|       |            case 0xAC:
 6403|       |            case 0xAD:
 6404|       |            case 0xAE:
 6405|       |            case 0xAF:
 6406|       |            case 0xB0:
 6407|       |            case 0xB1:
 6408|       |            case 0xB2:
 6409|       |            case 0xB3:
 6410|       |            case 0xB4:
 6411|       |            case 0xB5:
 6412|       |            case 0xB6:
 6413|       |            case 0xB7:
 6414|       |            case 0xB8:
 6415|       |            case 0xB9:
 6416|       |            case 0xBA:
 6417|       |            case 0xBB:
 6418|       |            case 0xBC:
 6419|       |            case 0xBD:
 6420|       |            case 0xBE:
 6421|       |            case 0xBF:
 6422|       |            {
 6423|       |                return get_string(input_format_t::msgpack, static_cast<unsigned int>(current) & 0x1Fu, result);
 6424|       |            }
 6425|       |
 6426|       |            case 0xD9: // str 8
 6427|       |            {
 6428|       |                std::uint8_t len;
 6429|       |                return get_number(input_format_t::msgpack, len) and get_string(input_format_t::msgpack, len, result);
 6430|       |            }
 6431|       |
 6432|       |            case 0xDA: // str 16
 6433|       |            {
 6434|       |                std::uint16_t len;
 6435|       |                return get_number(input_format_t::msgpack, len) and get_string(input_format_t::msgpack, len, result);
 6436|       |            }
 6437|       |
 6438|       |            case 0xDB: // str 32
 6439|       |            {
 6440|       |                std::uint32_t len;
 6441|       |                return get_number(input_format_t::msgpack, len) and get_string(input_format_t::msgpack, len, result);
 6442|       |            }
 6443|       |
 6444|       |            default:
 6445|       |            {
 6446|       |                auto last_token = get_token_string();
 6447|       |                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format_t::msgpack, "expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x" + last_token, "string")));
 6448|       |            }
 6449|       |        }
 6450|       |    }
 6451|       |
 6452|       |    /*!
 6453|       |    @param[in] len  the length of the array
 6454|       |    @return whether array creation completed
 6455|       |    */
 6456|       |    bool get_msgpack_array(const std::size_t len)
 6457|       |    {
 6458|       |        if (JSON_HEDLEY_UNLIKELY(not sax->start_array(len)))
 6459|       |        {
 6460|       |            return false;
 6461|       |        }
 6462|       |
 6463|       |        for (std::size_t i = 0; i < len; ++i)
 6464|       |        {
 6465|       |            if (JSON_HEDLEY_UNLIKELY(not parse_msgpack_internal()))
 6466|       |            {
 6467|       |                return false;
 6468|       |            }
 6469|       |        }
 6470|       |
 6471|       |        return sax->end_array();
 6472|       |    }
 6473|       |
 6474|       |    /*!
 6475|       |    @param[in] len  the length of the object
 6476|       |    @return whether object creation completed
 6477|       |    */
 6478|       |    bool get_msgpack_object(const std::size_t len)
 6479|       |    {
 6480|       |        if (JSON_HEDLEY_UNLIKELY(not sax->start_object(len)))
 6481|       |        {
 6482|       |            return false;
 6483|       |        }
 6484|       |
 6485|       |        string_t key;
 6486|       |        for (std::size_t i = 0; i < len; ++i)
 6487|       |        {
 6488|       |            get();
 6489|       |            if (JSON_HEDLEY_UNLIKELY(not get_msgpack_string(key) or not sax->key(key)))
 6490|       |            {
 6491|       |                return false;
 6492|       |            }
 6493|       |
 6494|       |            if (JSON_HEDLEY_UNLIKELY(not parse_msgpack_internal()))
 6495|       |            {
 6496|       |                return false;
 6497|       |            }
 6498|       |            key.clear();
 6499|       |        }
 6500|       |
 6501|       |        return sax->end_object();
 6502|       |    }
 6503|       |
 6504|       |    ////////////
 6505|       |    // UBJSON //
 6506|       |    ////////////
 6507|       |
 6508|       |    /*!
 6509|       |    @param[in] get_char  whether a new character should be retrieved from the
 6510|       |                         input (true, default) or whether the last read
 6511|       |                         character should be considered instead
 6512|       |
 6513|       |    @return whether a valid UBJSON value was passed to the SAX parser
 6514|       |    */
 6515|       |    bool parse_ubjson_internal(const bool get_char = true)
 6516|       |    {
 6517|       |        return get_ubjson_value(get_char ? get_ignore_noop() : current);
 6518|       |    }
 6519|       |
 6520|       |    /*!
 6521|       |    @brief reads a UBJSON string
 6522|       |
 6523|       |    This function is either called after reading the 'S' byte explicitly
 6524|       |    indicating a string, or in case of an object key where the 'S' byte can be
 6525|       |    left out.
 6526|       |
 6527|       |    @param[out] result   created string
 6528|       |    @param[in] get_char  whether a new character should be retrieved from the
 6529|       |                         input (true, default) or whether the last read
 6530|       |                         character should be considered instead
 6531|       |
 6532|       |    @return whether string creation completed
 6533|       |    */
 6534|       |    bool get_ubjson_string(string_t& result, const bool get_char = true)
 6535|       |    {
 6536|       |        if (get_char)
 6537|       |        {
 6538|       |            get();  // TODO(niels): may we ignore N here?
 6539|       |        }
 6540|       |
 6541|       |        if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(input_format_t::ubjson, "value")))
 6542|       |        {
 6543|       |            return false;
 6544|       |        }
 6545|       |
 6546|       |        switch (current)
 6547|       |        {
 6548|       |            case 'U':
 6549|       |            {
 6550|       |                std::uint8_t len;
 6551|       |                return get_number(input_format_t::ubjson, len) and get_string(input_format_t::ubjson, len, result);
 6552|       |            }
 6553|       |
 6554|       |            case 'i':
 6555|       |            {
 6556|       |                std::int8_t len;
 6557|       |                return get_number(input_format_t::ubjson, len) and get_string(input_format_t::ubjson, len, result);
 6558|       |            }
 6559|       |
 6560|       |            case 'I':
 6561|       |            {
 6562|       |                std::int16_t len;
 6563|       |                return get_number(input_format_t::ubjson, len) and get_string(input_format_t::ubjson, len, result);
 6564|       |            }
 6565|       |
 6566|       |            case 'l':
 6567|       |            {
 6568|       |                std::int32_t len;
 6569|       |                return get_number(input_format_t::ubjson, len) and get_string(input_format_t::ubjson, len, result);
 6570|       |            }
 6571|       |
 6572|       |            case 'L':
 6573|       |            {
 6574|       |                std::int64_t len;
 6575|       |                return get_number(input_format_t::ubjson, len) and get_string(input_format_t::ubjson, len, result);
 6576|       |            }
 6577|       |
 6578|       |            default:
 6579|       |                auto last_token = get_token_string();
 6580|       |                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format_t::ubjson, "expected length type specification (U, i, I, l, L); last byte: 0x" + last_token, "string")));
 6581|       |        }
 6582|       |    }
 6583|       |
 6584|       |    /*!
 6585|       |    @param[out] result  determined size
 6586|       |    @return whether size determination completed
 6587|       |    */
 6588|       |    bool get_ubjson_size_value(std::size_t& result)
 6589|       |    {
 6590|       |        switch (get_ignore_noop())
 6591|       |        {
 6592|       |            case 'U':
 6593|       |            {
 6594|       |                std::uint8_t number;
 6595|       |                if (JSON_HEDLEY_UNLIKELY(not get_number(input_format_t::ubjson, number)))
 6596|       |                {
 6597|       |                    return false;
 6598|       |                }
 6599|       |                result = static_cast<std::size_t>(number);
 6600|       |                return true;
 6601|       |            }
 6602|       |
 6603|       |            case 'i':
 6604|       |            {
 6605|       |                std::int8_t number;
 6606|       |                if (JSON_HEDLEY_UNLIKELY(not get_number(input_format_t::ubjson, number)))
 6607|       |                {
 6608|       |                    return false;
 6609|       |                }
 6610|       |                result = static_cast<std::size_t>(number);
 6611|       |                return true;
 6612|       |            }
 6613|       |
 6614|       |            case 'I':
 6615|       |            {
 6616|       |                std::int16_t number;
 6617|       |                if (JSON_HEDLEY_UNLIKELY(not get_number(input_format_t::ubjson, number)))
 6618|       |                {
 6619|       |                    return false;
 6620|       |                }
 6621|       |                result = static_cast<std::size_t>(number);
 6622|       |                return true;
 6623|       |            }
 6624|       |
 6625|       |            case 'l':
 6626|       |            {
 6627|       |                std::int32_t number;
 6628|       |                if (JSON_HEDLEY_UNLIKELY(not get_number(input_format_t::ubjson, number)))
 6629|       |                {
 6630|       |                    return false;
 6631|       |                }
 6632|       |                result = static_cast<std::size_t>(number);
 6633|       |                return true;
 6634|       |            }
 6635|       |
 6636|       |            case 'L':
 6637|       |            {
 6638|       |                std::int64_t number;
 6639|       |                if (JSON_HEDLEY_UNLIKELY(not get_number(input_format_t::ubjson, number)))
 6640|       |                {
 6641|       |                    return false;
 6642|       |                }
 6643|       |                result = static_cast<std::size_t>(number);
 6644|       |                return true;
 6645|       |            }
 6646|       |
 6647|       |            default:
 6648|       |            {
 6649|       |                auto last_token = get_token_string();
 6650|       |                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format_t::ubjson, "expected length type specification (U, i, I, l, L) after '#'; last byte: 0x" + last_token, "size")));
 6651|       |            }
 6652|       |        }
 6653|       |    }
 6654|       |
 6655|       |    /*!
 6656|       |    @brief determine the type and size for a container
 6657|       |
 6658|       |    In the optimized UBJSON format, a type and a size can be provided to allow
 6659|       |    for a more compact representation.
 6660|       |
 6661|       |    @param[out] result  pair of the size and the type
 6662|       |
 6663|       |    @return whether pair creation completed
 6664|       |    */
 6665|       |    bool get_ubjson_size_type(std::pair<std::size_t, int>& result)
 6666|       |    {
 6667|       |        result.first = string_t::npos; // size
 6668|       |        result.second = 0; // type
 6669|       |
 6670|       |        get_ignore_noop();
 6671|       |
 6672|       |        if (current == '$')
 6673|       |        {
 6674|       |            result.second = get();  // must not ignore 'N', because 'N' maybe the type
 6675|       |            if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(input_format_t::ubjson, "type")))
 6676|       |            {
 6677|       |                return false;
 6678|       |            }
 6679|       |
 6680|       |            get_ignore_noop();
 6681|       |            if (JSON_HEDLEY_UNLIKELY(current != '#'))
 6682|       |            {
 6683|       |                if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(input_format_t::ubjson, "value")))
 6684|       |                {
 6685|       |                    return false;
 6686|       |                }
 6687|       |                auto last_token = get_token_string();
 6688|       |                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format_t::ubjson, "expected '#' after type information; last byte: 0x" + last_token, "size")));
 6689|       |            }
 6690|       |
 6691|       |            return get_ubjson_size_value(result.first);
 6692|       |        }
 6693|       |
 6694|       |        if (current == '#')
 6695|       |        {
 6696|       |            return get_ubjson_size_value(result.first);
 6697|       |        }
 6698|       |
 6699|       |        return true;
 6700|       |    }
 6701|       |
 6702|       |    /*!
 6703|       |    @param prefix  the previously read or set type prefix
 6704|       |    @return whether value creation completed
 6705|       |    */
 6706|       |    bool get_ubjson_value(const int prefix)
 6707|       |    {
 6708|       |        switch (prefix)
 6709|       |        {
 6710|       |            case std::char_traits<char>::eof():  // EOF
 6711|       |                return unexpect_eof(input_format_t::ubjson, "value");
 6712|       |
 6713|       |            case 'T':  // true
 6714|       |                return sax->boolean(true);
 6715|       |            case 'F':  // false
 6716|       |                return sax->boolean(false);
 6717|       |
 6718|       |            case 'Z':  // null
 6719|       |                return sax->null();
 6720|       |
 6721|       |            case 'U':
 6722|       |            {
 6723|       |                std::uint8_t number;
 6724|       |                return get_number(input_format_t::ubjson, number) and sax->number_unsigned(number);
 6725|       |            }
 6726|       |
 6727|       |            case 'i':
 6728|       |            {
 6729|       |                std::int8_t number;
 6730|       |                return get_number(input_format_t::ubjson, number) and sax->number_integer(number);
 6731|       |            }
 6732|       |
 6733|       |            case 'I':
 6734|       |            {
 6735|       |                std::int16_t number;
 6736|       |                return get_number(input_format_t::ubjson, number) and sax->number_integer(number);
 6737|       |            }
 6738|       |
 6739|       |            case 'l':
 6740|       |            {
 6741|       |                std::int32_t number;
 6742|       |                return get_number(input_format_t::ubjson, number) and sax->number_integer(number);
 6743|       |            }
 6744|       |
 6745|       |            case 'L':
 6746|       |            {
 6747|       |                std::int64_t number;
 6748|       |                return get_number(input_format_t::ubjson, number) and sax->number_integer(number);
 6749|       |            }
 6750|       |
 6751|       |            case 'd':
 6752|       |            {
 6753|       |                float number;
 6754|       |                return get_number(input_format_t::ubjson, number) and sax->number_float(static_cast<number_float_t>(number), "");
 6755|       |            }
 6756|       |
 6757|       |            case 'D':
 6758|       |            {
 6759|       |                double number;
 6760|       |                return get_number(input_format_t::ubjson, number) and sax->number_float(static_cast<number_float_t>(number), "");
 6761|       |            }
 6762|       |
 6763|       |            case 'C':  // char
 6764|       |            {
 6765|       |                get();
 6766|       |                if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(input_format_t::ubjson, "char")))
 6767|       |                {
 6768|       |                    return false;
 6769|       |                }
 6770|       |                if (JSON_HEDLEY_UNLIKELY(current > 127))
 6771|       |                {
 6772|       |                    auto last_token = get_token_string();
 6773|       |                    return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format_t::ubjson, "byte after 'C' must be in range 0x00..0x7F; last byte: 0x" + last_token, "char")));
 6774|       |                }
 6775|       |                string_t s(1, static_cast<char>(current));
 6776|       |                return sax->string(s);
 6777|       |            }
 6778|       |
 6779|       |            case 'S':  // string
 6780|       |            {
 6781|       |                string_t s;
 6782|       |                return get_ubjson_string(s) and sax->string(s);
 6783|       |            }
 6784|       |
 6785|       |            case '[':  // array
 6786|       |                return get_ubjson_array();
 6787|       |
 6788|       |            case '{':  // object
 6789|       |                return get_ubjson_object();
 6790|       |
 6791|       |            default: // anything else
 6792|       |            {
 6793|       |                auto last_token = get_token_string();
 6794|       |                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format_t::ubjson, "invalid byte: 0x" + last_token, "value")));
 6795|       |            }
 6796|       |        }
 6797|       |    }
 6798|       |
 6799|       |    /*!
 6800|       |    @return whether array creation completed
 6801|       |    */
 6802|       |    bool get_ubjson_array()
 6803|       |    {
 6804|       |        std::pair<std::size_t, int> size_and_type;
 6805|       |        if (JSON_HEDLEY_UNLIKELY(not get_ubjson_size_type(size_and_type)))
 6806|       |        {
 6807|       |            return false;
 6808|       |        }
 6809|       |
 6810|       |        if (size_and_type.first != string_t::npos)
 6811|       |        {
 6812|       |            if (JSON_HEDLEY_UNLIKELY(not sax->start_array(size_and_type.first)))
 6813|       |            {
 6814|       |                return false;
 6815|       |            }
 6816|       |
 6817|       |            if (size_and_type.second != 0)
 6818|       |            {
 6819|       |                if (size_and_type.second != 'N')
 6820|       |                {
 6821|       |                    for (std::size_t i = 0; i < size_and_type.first; ++i)
 6822|       |                    {
 6823|       |                        if (JSON_HEDLEY_UNLIKELY(not get_ubjson_value(size_and_type.second)))
 6824|       |                        {
 6825|       |                            return false;
 6826|       |                        }
 6827|       |                    }
 6828|       |                }
 6829|       |            }
 6830|       |            else
 6831|       |            {
 6832|       |                for (std::size_t i = 0; i < size_and_type.first; ++i)
 6833|       |                {
 6834|       |                    if (JSON_HEDLEY_UNLIKELY(not parse_ubjson_internal()))
 6835|       |                    {
 6836|       |                        return false;
 6837|       |                    }
 6838|       |                }
 6839|       |            }
 6840|       |        }
 6841|       |        else
 6842|       |        {
 6843|       |            if (JSON_HEDLEY_UNLIKELY(not sax->start_array(std::size_t(-1))))
 6844|       |            {
 6845|       |                return false;
 6846|       |            }
 6847|       |
 6848|       |            while (current != ']')
 6849|       |            {
 6850|       |                if (JSON_HEDLEY_UNLIKELY(not parse_ubjson_internal(false)))
 6851|       |                {
 6852|       |                    return false;
 6853|       |                }
 6854|       |                get_ignore_noop();
 6855|       |            }
 6856|       |        }
 6857|       |
 6858|       |        return sax->end_array();
 6859|       |    }
 6860|       |
 6861|       |    /*!
 6862|       |    @return whether object creation completed
 6863|       |    */
 6864|       |    bool get_ubjson_object()
 6865|       |    {
 6866|       |        std::pair<std::size_t, int> size_and_type;
 6867|       |        if (JSON_HEDLEY_UNLIKELY(not get_ubjson_size_type(size_and_type)))
 6868|       |        {
 6869|       |            return false;
 6870|       |        }
 6871|       |
 6872|       |        string_t key;
 6873|       |        if (size_and_type.first != string_t::npos)
 6874|       |        {
 6875|       |            if (JSON_HEDLEY_UNLIKELY(not sax->start_object(size_and_type.first)))
 6876|       |            {
 6877|       |                return false;
 6878|       |            }
 6879|       |
 6880|       |            if (size_and_type.second != 0)
 6881|       |            {
 6882|       |                for (std::size_t i = 0; i < size_and_type.first; ++i)
 6883|       |                {
 6884|       |                    if (JSON_HEDLEY_UNLIKELY(not get_ubjson_string(key) or not sax->key(key)))
 6885|       |                    {
 6886|       |                        return false;
 6887|       |                    }
 6888|       |                    if (JSON_HEDLEY_UNLIKELY(not get_ubjson_value(size_and_type.second)))
 6889|       |                    {
 6890|       |                        return false;
 6891|       |                    }
 6892|       |                    key.clear();
 6893|       |                }
 6894|       |            }
 6895|       |            else
 6896|       |            {
 6897|       |                for (std::size_t i = 0; i < size_and_type.first; ++i)
 6898|       |                {
 6899|       |                    if (JSON_HEDLEY_UNLIKELY(not get_ubjson_string(key) or not sax->key(key)))
 6900|       |                    {
 6901|       |                        return false;
 6902|       |                    }
 6903|       |                    if (JSON_HEDLEY_UNLIKELY(not parse_ubjson_internal()))
 6904|       |                    {
 6905|       |                        return false;
 6906|       |                    }
 6907|       |                    key.clear();
 6908|       |                }
 6909|       |            }
 6910|       |        }
 6911|       |        else
 6912|       |        {
 6913|       |            if (JSON_HEDLEY_UNLIKELY(not sax->start_object(std::size_t(-1))))
 6914|       |            {
 6915|       |                return false;
 6916|       |            }
 6917|       |
 6918|       |            while (current != '}')
 6919|       |            {
 6920|       |                if (JSON_HEDLEY_UNLIKELY(not get_ubjson_string(key, false) or not sax->key(key)))
 6921|       |                {
 6922|       |                    return false;
 6923|       |                }
 6924|       |                if (JSON_HEDLEY_UNLIKELY(not parse_ubjson_internal()))
 6925|       |                {
 6926|       |                    return false;
 6927|       |                }
 6928|       |                get_ignore_noop();
 6929|       |                key.clear();
 6930|       |            }
 6931|       |        }
 6932|       |
 6933|       |        return sax->end_object();
 6934|       |    }
 6935|       |
 6936|       |    ///////////////////////
 6937|       |    // Utility functions //
 6938|       |    ///////////////////////
 6939|       |
 6940|       |    /*!
 6941|       |    @brief get next character from the input
 6942|       |
 6943|       |    This function provides the interface to the used input adapter. It does
 6944|       |    not throw in case the input reached EOF, but returns a -'ve valued
 6945|       |    `std::char_traits<char>::eof()` in that case.
 6946|       |
 6947|       |    @return character read from the input
 6948|       |    */
 6949|       |    int get()
 6950|       |    {
 6951|       |        ++chars_read;
 6952|       |        return current = ia->get_character();
 6953|       |    }
 6954|       |
 6955|       |    /*!
 6956|       |    @return character read from the input after ignoring all 'N' entries
 6957|       |    */
 6958|       |    int get_ignore_noop()
 6959|       |    {
 6960|       |        do
 6961|       |        {
 6962|       |            get();
 6963|       |        }
 6964|       |        while (current == 'N');
 6965|       |
 6966|       |        return current;
 6967|       |    }
 6968|       |
 6969|       |    /*
 6970|       |    @brief read a number from the input
 6971|       |
 6972|       |    @tparam NumberType the type of the number
 6973|       |    @param[in] format   the current format (for diagnostics)
 6974|       |    @param[out] result  number of type @a NumberType
 6975|       |
 6976|       |    @return whether conversion completed
 6977|       |
 6978|       |    @note This function needs to respect the system's endianess, because
 6979|       |          bytes in CBOR, MessagePack, and UBJSON are stored in network order
 6980|       |          (big endian) and therefore need reordering on little endian systems.
 6981|       |    */
 6982|       |    template<typename NumberType, bool InputIsLittleEndian = false>
 6983|       |    bool get_number(const input_format_t format, NumberType& result)
 6984|       |    {
 6985|       |        // step 1: read input into array with system's byte order
 6986|       |        std::array<std::uint8_t, sizeof(NumberType)> vec;
 6987|       |        for (std::size_t i = 0; i < sizeof(NumberType); ++i)
 6988|       |        {
 6989|       |            get();
 6990|       |            if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(format, "number")))
 6991|       |            {
 6992|       |                return false;
 6993|       |            }
 6994|       |
 6995|       |            // reverse byte order prior to conversion if necessary
 6996|       |            if (is_little_endian != InputIsLittleEndian)
 6997|       |            {
 6998|       |                vec[sizeof(NumberType) - i - 1] = static_cast<std::uint8_t>(current);
 6999|       |            }
 7000|       |            else
 7001|       |            {
 7002|       |                vec[i] = static_cast<std::uint8_t>(current); // LCOV_EXCL_LINE
 7003|       |            }
 7004|       |        }
 7005|       |
 7006|       |        // step 2: convert array into number of type T and return
 7007|       |        std::memcpy(&result, vec.data(), sizeof(NumberType));
 7008|       |        return true;
 7009|       |    }
 7010|       |
 7011|       |    /*!
 7012|       |    @brief create a string by reading characters from the input
 7013|       |
 7014|       |    @tparam NumberType the type of the number
 7015|       |    @param[in] format the current format (for diagnostics)
 7016|       |    @param[in] len number of characters to read
 7017|       |    @param[out] result string created by reading @a len bytes
 7018|       |
 7019|       |    @return whether string creation completed
 7020|       |
 7021|       |    @note We can not reserve @a len bytes for the result, because @a len
 7022|       |          may be too large. Usually, @ref unexpect_eof() detects the end of
 7023|       |          the input before we run out of string memory.
 7024|       |    */
 7025|       |    template<typename NumberType>
 7026|       |    bool get_string(const input_format_t format,
 7027|       |                    const NumberType len,
 7028|       |                    string_t& result)
 7029|       |    {
 7030|       |        bool success = true;
 7031|       |        std::generate_n(std::back_inserter(result), len, [this, &success, &format]()
 7032|       |        {
 7033|       |            get();
 7034|       |            if (JSON_HEDLEY_UNLIKELY(not unexpect_eof(format, "string")))
 7035|       |            {
 7036|       |                success = false;
 7037|       |            }
 7038|       |            return static_cast<char>(current);
 7039|       |        });
 7040|       |        return success;
 7041|       |    }
 7042|       |
 7043|       |    /*!
 7044|       |    @param[in] format   the current format (for diagnostics)
 7045|       |    @param[in] context  further context information (for diagnostics)
 7046|       |    @return whether the last read character is not EOF
 7047|       |    */
 7048|       |    JSON_HEDLEY_NON_NULL(3)
 7049|       |    bool unexpect_eof(const input_format_t format, const char* context) const
 7050|       |    {
 7051|       |        if (JSON_HEDLEY_UNLIKELY(current == std::char_traits<char>::eof()))
 7052|       |        {
 7053|       |            return sax->parse_error(chars_read, "<end of file>",
 7054|       |                                    parse_error::create(110, chars_read, exception_message(format, "unexpected end of input", context)));
 7055|       |        }
 7056|       |        return true;
 7057|       |    }
 7058|       |
 7059|       |    /*!
 7060|       |    @return a string representation of the last read byte
 7061|       |    */
 7062|       |    std::string get_token_string() const
 7063|       |    {
 7064|       |        std::array<char, 3> cr{{}};
 7065|       |        (std::snprintf)(cr.data(), cr.size(), "%.2hhX", static_cast<unsigned char>(current));
 7066|       |        return std::string{cr.data()};
 7067|       |    }
 7068|       |
 7069|       |    /*!
 7070|       |    @param[in] format   the current format
 7071|       |    @param[in] detail   a detailed error message
 7072|       |    @param[in] context  further context information
 7073|       |    @return a message string to use in the parse_error exceptions
 7074|       |    */
 7075|       |    std::string exception_message(const input_format_t format,
 7076|       |                                  const std::string& detail,
 7077|       |                                  const std::string& context) const
 7078|       |    {
 7079|       |        std::string error_msg = "syntax error while parsing ";
 7080|       |
 7081|       |        switch (format)
 7082|       |        {
 7083|       |            case input_format_t::cbor:
 7084|       |                error_msg += "CBOR";
 7085|       |                break;
 7086|       |
 7087|       |            case input_format_t::msgpack:
 7088|       |                error_msg += "MessagePack";
 7089|       |                break;
 7090|       |
 7091|       |            case input_format_t::ubjson:
 7092|       |                error_msg += "UBJSON";
 7093|       |                break;
 7094|       |
 7095|       |            case input_format_t::bson:
 7096|       |                error_msg += "BSON";
 7097|       |                break;
 7098|       |
 7099|       |            default:            // LCOV_EXCL_LINE
 7100|       |                assert(false);  // LCOV_EXCL_LINE
 7101|       |        }
 7102|       |
 7103|       |        return error_msg + " " + context + ": " + detail;
 7104|       |    }
 7105|       |
 7106|       |  private:
 7107|       |    /// input adapter
 7108|       |    input_adapter_t ia = nullptr;
 7109|       |
 7110|       |    /// the current character
 7111|       |    int current = std::char_traits<char>::eof();
 7112|       |
 7113|       |    /// the number of characters read
 7114|       |    std::size_t chars_read = 0;
 7115|       |
 7116|       |    /// whether we can assume little endianess
 7117|       |    const bool is_little_endian = little_endianess();
 7118|       |
 7119|       |    /// the SAX parser
 7120|       |    json_sax_t* sax = nullptr;
 7121|       |};
 7122|       |}  // namespace detail
 7123|       |}  // namespace nlohmann
 7124|       |
 7125|       |// #include <nlohmann/detail/input/input_adapters.hpp>
 7126|       |
 7127|       |// #include <nlohmann/detail/input/lexer.hpp>
 7128|       |
 7129|       |
 7130|       |#include <array> // array
 7131|       |#include <clocale> // localeconv
 7132|       |#include <cstddef> // size_t
 7133|       |#include <cstdio> // snprintf
 7134|       |#include <cstdlib> // strtof, strtod, strtold, strtoll, strtoull
 7135|       |#include <initializer_list> // initializer_list
 7136|       |#include <string> // char_traits, string
 7137|       |#include <utility> // move
 7138|       |#include <vector> // vector
 7139|       |
 7140|       |// #include <nlohmann/detail/input/input_adapters.hpp>
 7141|       |
 7142|       |// #include <nlohmann/detail/input/position_t.hpp>
 7143|       |
 7144|       |// #include <nlohmann/detail/macro_scope.hpp>
 7145|       |
 7146|       |
 7147|       |namespace nlohmann
 7148|       |{
 7149|       |namespace detail
 7150|       |{
 7151|       |///////////
 7152|       |// lexer //
 7153|       |///////////
 7154|       |
 7155|       |/*!
 7156|       |@brief lexical analysis
 7157|       |
 7158|       |This class organizes the lexical analysis during JSON deserialization.
 7159|       |*/
 7160|       |template<typename BasicJsonType>
 7161|       |class lexer
 7162|       |{
 7163|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 7164|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 7165|       |    using number_float_t = typename BasicJsonType::number_float_t;
 7166|       |    using string_t = typename BasicJsonType::string_t;
 7167|       |
 7168|       |  public:
 7169|       |    /// token types for the parser
 7170|       |    enum class token_type
 7171|       |    {
 7172|       |        uninitialized,    ///< indicating the scanner is uninitialized
 7173|       |        literal_true,     ///< the `true` literal
 7174|       |        literal_false,    ///< the `false` literal
 7175|       |        literal_null,     ///< the `null` literal
 7176|       |        value_string,     ///< a string -- use get_string() for actual value
 7177|       |        value_unsigned,   ///< an unsigned integer -- use get_number_unsigned() for actual value
 7178|       |        value_integer,    ///< a signed integer -- use get_number_integer() for actual value
 7179|       |        value_float,      ///< an floating point number -- use get_number_float() for actual value
 7180|       |        begin_array,      ///< the character for array begin `[`
 7181|       |        begin_object,     ///< the character for object begin `{`
 7182|       |        end_array,        ///< the character for array end `]`
 7183|       |        end_object,       ///< the character for object end `}`
 7184|       |        name_separator,   ///< the name separator `:`
 7185|       |        value_separator,  ///< the value separator `,`
 7186|       |        parse_error,      ///< indicating a parse error
 7187|       |        end_of_input,     ///< indicating the end of the input buffer
 7188|       |        literal_or_value  ///< a literal or the begin of a value (only for diagnostics)
 7189|       |    };
 7190|       |
 7191|       |    /// return name of values of type token_type (only used for errors)
 7192|       |    JSON_HEDLEY_RETURNS_NON_NULL
 7193|       |    JSON_HEDLEY_CONST
 7194|       |    static const char* token_type_name(const token_type t) noexcept
 7195|     42|    {
 7196|     42|        switch (t)
 7197|     42|        {
 7198|      0|            case token_type::uninitialized:
 7199|      0|                return "<uninitialized>";
 7200|      0|            case token_type::literal_true:
 7201|      0|                return "true literal";
 7202|      0|            case token_type::literal_false:
 7203|      0|                return "false literal";
 7204|      0|            case token_type::literal_null:
 7205|      0|                return "null literal";
 7206|      0|            case token_type::value_string:
 7207|      0|                return "string literal";
 7208|      0|            case lexer::token_type::value_unsigned:
 7209|      0|            case lexer::token_type::value_integer:
 7210|      0|            case lexer::token_type::value_float:
 7211|      0|                return "number literal";
 7212|      0|            case token_type::begin_array:
 7213|      0|                return "'['";
 7214|      0|            case token_type::begin_object:
 7215|      0|                return "'{'";
 7216|      0|            case token_type::end_array:
 7217|      0|                return "']'";
 7218|      0|            case token_type::end_object:
 7219|      0|                return "'}'";
 7220|      0|            case token_type::name_separator:
 7221|      0|                return "':'";
 7222|      0|            case token_type::value_separator:
 7223|      0|                return "','";
 7224|      0|            case token_type::parse_error:
 7225|      0|                return "<parse error>";
 7226|     21|            case token_type::end_of_input:
 7227|     21|                return "end of input";
 7228|     21|            case token_type::literal_or_value:
 7229|     21|                return "'[', '{', or a literal";
 7230|       |            // LCOV_EXCL_START
 7231|      0|            default: // catch non-enum values
 7232|      0|                return "unknown token";
 7233|       |                // LCOV_EXCL_STOP
 7234|     42|        }
 7235|     42|    }
 7236|       |
 7237|       |    explicit lexer(detail::input_adapter_t&& adapter)
 7238|    645|        : ia(std::move(adapter)), decimal_point_char(get_decimal_point()) {}
 7239|       |
 7240|       |    // delete because of pointer members
 7241|       |    lexer(const lexer&) = delete;
 7242|       |    lexer(lexer&&) = delete;
 7243|       |    lexer& operator=(lexer&) = delete;
 7244|       |    lexer& operator=(lexer&&) = delete;
 7245|    645|    ~lexer() = default;
 7246|       |
 7247|       |  private:
 7248|       |    /////////////////////
 7249|       |    // locales
 7250|       |    /////////////////////
 7251|       |
 7252|       |    /// return the locale-dependent decimal point
 7253|       |    JSON_HEDLEY_PURE
 7254|       |    static char get_decimal_point() noexcept
 7255|    645|    {
 7256|    645|        const auto loc = localeconv();
 7257|    645|        assert(loc != nullptr);
 7258|    645|        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);
 7259|    645|    }
 7260|       |
 7261|       |    /////////////////////
 7262|       |    // scan functions
 7263|       |    /////////////////////
 7264|       |
 7265|       |    /*!
 7266|       |    @brief get codepoint from 4 hex characters following `\u`
 7267|       |
 7268|       |    For input "\u c1 c2 c3 c4" the codepoint is:
 7269|       |      (c1 * 0x1000) + (c2 * 0x0100) + (c3 * 0x0010) + c4
 7270|       |    = (c1 << 12) + (c2 << 8) + (c3 << 4) + (c4 << 0)
 7271|       |
 7272|       |    Furthermore, the possible characters '0'..'9', 'A'..'F', and 'a'..'f'
 7273|       |    must be converted to the integers 0x0..0x9, 0xA..0xF, 0xA..0xF, resp. The
 7274|       |    conversion is done by subtracting the offset (0x30, 0x37, and 0x57)
 7275|       |    between the ASCII value of the character and the desired integer value.
 7276|       |
 7277|       |    @return codepoint (0x0000..0xFFFF) or -1 in case of an error (e.g. EOF or
 7278|       |            non-hex character)
 7279|       |    */
 7280|       |    int get_codepoint()
 7281|      0|    {
 7282|       |        // this function only makes sense after reading `\u`
 7283|      0|        assert(current == 'u');
 7284|      0|        int codepoint = 0;
 7285|       |
 7286|      0|        const auto factors = { 12u, 8u, 4u, 0u };
 7287|      0|        for (const auto factor : factors)
 7288|      0|        {
 7289|      0|            get();
 7290|       |
 7291|      0|            if (current >= '0' and current <= '9')
 7292|      0|            {
 7293|      0|                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x30u) << factor);
 7294|      0|            }
 7295|      0|            else if (current >= 'A' and current <= 'F')
 7296|      0|            {
 7297|      0|                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x37u) << factor);
 7298|      0|            }
 7299|      0|            else if (current >= 'a' and current <= 'f')
 7300|      0|            {
 7301|      0|                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x57u) << factor);
 7302|      0|            }
 7303|      0|            else
 7304|      0|            {
 7305|      0|                return -1;
 7306|      0|            }
 7307|      0|        }
 7308|       |
 7309|      0|        assert(0x0000 <= codepoint and codepoint <= 0xFFFF);
 7310|      0|        return codepoint;
 7311|      0|    }
 7312|       |
 7313|       |    /*!
 7314|       |    @brief check if the next byte(s) are inside a given range
 7315|       |
 7316|       |    Adds the current byte and, for each passed range, reads a new byte and
 7317|       |    checks if it is inside the range. If a violation was detected, set up an
 7318|       |    error message and return false. Otherwise, return true.
 7319|       |
 7320|       |    @param[in] ranges  list of integers; interpreted as list of pairs of
 7321|       |                       inclusive lower and upper bound, respectively
 7322|       |
 7323|       |    @pre The passed list @a ranges must have 2, 4, or 6 elements; that is,
 7324|       |         1, 2, or 3 pairs. This precondition is enforced by an assertion.
 7325|       |
 7326|       |    @return true if and only if no range violation was detected
 7327|       |    */
 7328|       |    bool next_byte_in_range(std::initializer_list<int> ranges)
 7329|      4|    {
 7330|      4|        assert(ranges.size() == 2 or ranges.size() == 4 or ranges.size() == 6);
 7331|      0|        add(current);
 7332|       |
 7333|      8|        for (auto range = ranges.begin(); range != ranges.end(); ++range)
 7334|      4|        {
 7335|      4|            get();
 7336|      4|            if (JSON_HEDLEY_LIKELY(*range <= current and current <= *(++range)))
 7337|      4|            {
 7338|      4|                add(current);
 7339|      4|            }
 7340|      0|            else
 7341|      0|            {
 7342|      0|                error_message = "invalid string: ill-formed UTF-8 byte";
 7343|      0|                return false;
 7344|      0|            }
 7345|      4|        }
 7346|       |
 7347|      4|        return true;
 7348|      4|    }
 7349|       |
 7350|       |    /*!
 7351|       |    @brief scan a string literal
 7352|       |
 7353|       |    This function scans a string according to Sect. 7 of RFC 7159. While
 7354|       |    scanning, bytes are escaped and copied into buffer token_buffer. Then the
 7355|       |    function returns successfully, token_buffer is *not* null-terminated (as it
 7356|       |    may contain \0 bytes), and token_buffer.size() is the number of bytes in the
 7357|       |    string.
 7358|       |
 7359|       |    @return token_type::value_string if string could be successfully scanned,
 7360|       |            token_type::parse_error otherwise
 7361|       |
 7362|       |    @note In case of errors, variable error_message contains a textual
 7363|       |          description.
 7364|       |    */
 7365|       |    token_type scan_string()
 7366|   162k|    {
 7367|       |        // reset token_buffer (ignore opening quote)
 7368|   162k|        reset();
 7369|       |
 7370|       |        // we entered the function by reading an open quote
 7371|   162k|        assert(current == '\"');
 7372|       |
 7373|  1.46M|        while (true)
 7374|  1.46M|        {
 7375|       |            // get next character
 7376|  1.46M|            switch (get())
 7377|  1.46M|            {
 7378|       |                // end of file while parsing string
 7379|      0|                case std::char_traits<char>::eof():
 7380|      0|                {
 7381|      0|                    error_message = "invalid string: missing closing quote";
 7382|      0|                    return token_type::parse_error;
 7383|      0|                }
 7384|       |
 7385|       |                // closing quote
 7386|   162k|                case '\"':
 7387|   162k|                {
 7388|   162k|                    return token_type::value_string;
 7389|      0|                }
 7390|       |
 7391|       |                // escapes
 7392|      0|                case '\\':
 7393|      0|                {
 7394|      0|                    switch (get())
 7395|      0|                    {
 7396|       |                        // quotation mark
 7397|      0|                        case '\"':
 7398|      0|                            add('\"');
 7399|      0|                            break;
 7400|       |                        // reverse solidus
 7401|      0|                        case '\\':
 7402|      0|                            add('\\');
 7403|      0|                            break;
 7404|       |                        // solidus
 7405|      0|                        case '/':
 7406|      0|                            add('/');
 7407|      0|                            break;
 7408|       |                        // backspace
 7409|      0|                        case 'b':
 7410|      0|                            add('\b');
 7411|      0|                            break;
 7412|       |                        // form feed
 7413|      0|                        case 'f':
 7414|      0|                            add('\f');
 7415|      0|                            break;
 7416|       |                        // line feed
 7417|      0|                        case 'n':
 7418|      0|                            add('\n');
 7419|      0|                            break;
 7420|       |                        // carriage return
 7421|      0|                        case 'r':
 7422|      0|                            add('\r');
 7423|      0|                            break;
 7424|       |                        // tab
 7425|      0|                        case 't':
 7426|      0|                            add('\t');
 7427|      0|                            break;
 7428|       |
 7429|       |                        // unicode escapes
 7430|      0|                        case 'u':
 7431|      0|                        {
 7432|      0|                            const int codepoint1 = get_codepoint();
 7433|      0|                            int codepoint = codepoint1; // start with codepoint1
 7434|       |
 7435|      0|                            if (JSON_HEDLEY_UNLIKELY(codepoint1 == -1))
 7436|      0|                            {
 7437|      0|                                error_message = "invalid string: '\\u' must be followed by 4 hex digits";
 7438|      0|                                return token_type::parse_error;
 7439|      0|                            }
 7440|       |
 7441|       |                            // check if code point is a high surrogate
 7442|      0|                            if (0xD800 <= codepoint1 and codepoint1 <= 0xDBFF)
 7443|      0|                            {
 7444|       |                                // expect next \uxxxx entry
 7445|      0|                                if (JSON_HEDLEY_LIKELY(get() == '\\' and get() == 'u'))
 7446|      0|                                {
 7447|      0|                                    const int codepoint2 = get_codepoint();
 7448|       |
 7449|      0|                                    if (JSON_HEDLEY_UNLIKELY(codepoint2 == -1))
 7450|      0|                                    {
 7451|      0|                                        error_message = "invalid string: '\\u' must be followed by 4 hex digits";
 7452|      0|                                        return token_type::parse_error;
 7453|      0|                                    }
 7454|       |
 7455|       |                                    // check if codepoint2 is a low surrogate
 7456|      0|                                    if (JSON_HEDLEY_LIKELY(0xDC00 <= codepoint2 and codepoint2 <= 0xDFFF))
 7457|      0|                                    {
 7458|       |                                        // overwrite codepoint
 7459|      0|                                        codepoint = static_cast<int>(
 7460|       |                                                        // high surrogate occupies the most significant 22 bits
 7461|      0|                                                        (static_cast<unsigned int>(codepoint1) << 10u)
 7462|       |                                                        // low surrogate occupies the least significant 15 bits
 7463|      0|                                                        + static_cast<unsigned int>(codepoint2)
 7464|       |                                                        // there is still the 0xD800, 0xDC00 and 0x10000 noise
 7465|       |                                                        // in the result so we have to subtract with:
 7466|       |                                                        // (0xD800 << 10) + DC00 - 0x10000 = 0x35FDC00
 7467|      0|                                                        - 0x35FDC00u);
 7468|      0|                                    }
 7469|      0|                                    else
 7470|      0|                                    {
 7471|      0|                                        error_message = "invalid string: surrogate U+DC00..U+DFFF must be followed by U+DC00..U+DFFF";
 7472|      0|                                        return token_type::parse_error;
 7473|      0|                                    }
 7474|      0|                                }
 7475|      0|                                else
 7476|      0|                                {
 7477|      0|                                    error_message = "invalid string: surrogate U+DC00..U+DFFF must be followed by U+DC00..U+DFFF";
 7478|      0|                                    return token_type::parse_error;
 7479|      0|                                }
 7480|      0|                            }
 7481|      0|                            else
 7482|      0|                            {
 7483|      0|                                if (JSON_HEDLEY_UNLIKELY(0xDC00 <= codepoint1 and codepoint1 <= 0xDFFF))
 7484|      0|                                {
 7485|      0|                                    error_message = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
 7486|      0|                                    return token_type::parse_error;
 7487|      0|                                }
 7488|      0|                            }
 7489|       |
 7490|       |                            // result of the above calculation yields a proper codepoint
 7491|      0|                            assert(0x00 <= codepoint and codepoint <= 0x10FFFF);
 7492|       |
 7493|       |                            // translate codepoint into bytes
 7494|      0|                            if (codepoint < 0x80)
 7495|      0|                            {
 7496|       |                                // 1-byte characters: 0xxxxxxx (ASCII)
 7497|      0|                                add(codepoint);
 7498|      0|                            }
 7499|      0|                            else if (codepoint <= 0x7FF)
 7500|      0|                            {
 7501|       |                                // 2-byte characters: 110xxxxx 10xxxxxx
 7502|      0|                                add(static_cast<int>(0xC0u | (static_cast<unsigned int>(codepoint) >> 6u)));
 7503|      0|                                add(static_cast<int>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));
 7504|      0|                            }
 7505|      0|                            else if (codepoint <= 0xFFFF)
 7506|      0|                            {
 7507|       |                                // 3-byte characters: 1110xxxx 10xxxxxx 10xxxxxx
 7508|      0|                                add(static_cast<int>(0xE0u | (static_cast<unsigned int>(codepoint) >> 12u)));
 7509|      0|                                add(static_cast<int>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));
 7510|      0|                                add(static_cast<int>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));
 7511|      0|                            }
 7512|      0|                            else
 7513|      0|                            {
 7514|       |                                // 4-byte characters: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
 7515|      0|                                add(static_cast<int>(0xF0u | (static_cast<unsigned int>(codepoint) >> 18u)));
 7516|      0|                                add(static_cast<int>(0x80u | ((static_cast<unsigned int>(codepoint) >> 12u) & 0x3Fu)));
 7517|      0|                                add(static_cast<int>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));
 7518|      0|                                add(static_cast<int>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));
 7519|      0|                            }
 7520|       |
 7521|      0|                            break;
 7522|      0|                        }
 7523|       |
 7524|       |                        // other characters after escape
 7525|      0|                        default:
 7526|      0|                            error_message = "invalid string: forbidden character after backslash";
 7527|      0|                            return token_type::parse_error;
 7528|      0|                    }
 7529|       |
 7530|      0|                    break;
 7531|      0|                }
 7532|       |
 7533|       |                // invalid control characters
 7534|      0|                case 0x00:
 7535|      0|                {
 7536|      0|                    error_message = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
 7537|      0|                    return token_type::parse_error;
 7538|      0|                }
 7539|       |
 7540|      0|                case 0x01:
 7541|      0|                {
 7542|      0|                    error_message = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
 7543|      0|                    return token_type::parse_error;
 7544|      0|                }
 7545|       |
 7546|      0|                case 0x02:
 7547|      0|                {
 7548|      0|                    error_message = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
 7549|      0|                    return token_type::parse_error;
 7550|      0|                }
 7551|       |
 7552|      0|                case 0x03:
 7553|      0|                {
 7554|      0|                    error_message = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
 7555|      0|                    return token_type::parse_error;
 7556|      0|                }
 7557|       |
 7558|      0|                case 0x04:
 7559|      0|                {
 7560|      0|                    error_message = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
 7561|      0|                    return token_type::parse_error;
 7562|      0|                }
 7563|       |
 7564|      0|                case 0x05:
 7565|      0|                {
 7566|      0|                    error_message = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
 7567|      0|                    return token_type::parse_error;
 7568|      0|                }
 7569|       |
 7570|      0|                case 0x06:
 7571|      0|                {
 7572|      0|                    error_message = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
 7573|      0|                    return token_type::parse_error;
 7574|      0|                }
 7575|       |
 7576|      0|                case 0x07:
 7577|      0|                {
 7578|      0|                    error_message = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
 7579|      0|                    return token_type::parse_error;
 7580|      0|                }
 7581|       |
 7582|      0|                case 0x08:
 7583|      0|                {
 7584|      0|                    error_message = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
 7585|      0|                    return token_type::parse_error;
 7586|      0|                }
 7587|       |
 7588|      0|                case 0x09:
 7589|      0|                {
 7590|      0|                    error_message = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
 7591|      0|                    return token_type::parse_error;
 7592|      0|                }
 7593|       |
 7594|      0|                case 0x0A:
 7595|      0|                {
 7596|      0|                    error_message = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
 7597|      0|                    return token_type::parse_error;
 7598|      0|                }
 7599|       |
 7600|      0|                case 0x0B:
 7601|      0|                {
 7602|      0|                    error_message = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
 7603|      0|                    return token_type::parse_error;
 7604|      0|                }
 7605|       |
 7606|      0|                case 0x0C:
 7607|      0|                {
 7608|      0|                    error_message = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
 7609|      0|                    return token_type::parse_error;
 7610|      0|                }
 7611|       |
 7612|      0|                case 0x0D:
 7613|      0|                {
 7614|      0|                    error_message = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
 7615|      0|                    return token_type::parse_error;
 7616|      0|                }
 7617|       |
 7618|      0|                case 0x0E:
 7619|      0|                {
 7620|      0|                    error_message = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
 7621|      0|                    return token_type::parse_error;
 7622|      0|                }
 7623|       |
 7624|      0|                case 0x0F:
 7625|      0|                {
 7626|      0|                    error_message = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
 7627|      0|                    return token_type::parse_error;
 7628|      0|                }
 7629|       |
 7630|      0|                case 0x10:
 7631|      0|                {
 7632|      0|                    error_message = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
 7633|      0|                    return token_type::parse_error;
 7634|      0|                }
 7635|       |
 7636|      0|                case 0x11:
 7637|      0|                {
 7638|      0|                    error_message = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
 7639|      0|                    return token_type::parse_error;
 7640|      0|                }
 7641|       |
 7642|      0|                case 0x12:
 7643|      0|                {
 7644|      0|                    error_message = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
 7645|      0|                    return token_type::parse_error;
 7646|      0|                }
 7647|       |
 7648|      0|                case 0x13:
 7649|      0|                {
 7650|      0|                    error_message = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
 7651|      0|                    return token_type::parse_error;
 7652|      0|                }
 7653|       |
 7654|      0|                case 0x14:
 7655|      0|                {
 7656|      0|                    error_message = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
 7657|      0|                    return token_type::parse_error;
 7658|      0|                }
 7659|       |
 7660|      0|                case 0x15:
 7661|      0|                {
 7662|      0|                    error_message = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
 7663|      0|                    return token_type::parse_error;
 7664|      0|                }
 7665|       |
 7666|      0|                case 0x16:
 7667|      0|                {
 7668|      0|                    error_message = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
 7669|      0|                    return token_type::parse_error;
 7670|      0|                }
 7671|       |
 7672|      0|                case 0x17:
 7673|      0|                {
 7674|      0|                    error_message = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
 7675|      0|                    return token_type::parse_error;
 7676|      0|                }
 7677|       |
 7678|      0|                case 0x18:
 7679|      0|                {
 7680|      0|                    error_message = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
 7681|      0|                    return token_type::parse_error;
 7682|      0|                }
 7683|       |
 7684|      0|                case 0x19:
 7685|      0|                {
 7686|      0|                    error_message = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
 7687|      0|                    return token_type::parse_error;
 7688|      0|                }
 7689|       |
 7690|      0|                case 0x1A:
 7691|      0|                {
 7692|      0|                    error_message = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
 7693|      0|                    return token_type::parse_error;
 7694|      0|                }
 7695|       |
 7696|      0|                case 0x1B:
 7697|      0|                {
 7698|      0|                    error_message = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
 7699|      0|                    return token_type::parse_error;
 7700|      0|                }
 7701|       |
 7702|      0|                case 0x1C:
 7703|      0|                {
 7704|      0|                    error_message = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
 7705|      0|                    return token_type::parse_error;
 7706|      0|                }
 7707|       |
 7708|      0|                case 0x1D:
 7709|      0|                {
 7710|      0|                    error_message = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
 7711|      0|                    return token_type::parse_error;
 7712|      0|                }
 7713|       |
 7714|      0|                case 0x1E:
 7715|      0|                {
 7716|      0|                    error_message = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
 7717|      0|                    return token_type::parse_error;
 7718|      0|                }
 7719|       |
 7720|      0|                case 0x1F:
 7721|      0|                {
 7722|      0|                    error_message = "invalid string: control character U+001F (US) must be escaped to \\u001F";
 7723|      0|                    return token_type::parse_error;
 7724|      0|                }
 7725|       |
 7726|       |                // U+0020..U+007F (except U+0022 (quote) and U+005C (backspace))
 7727|  3.20k|                case 0x20:
 7728|  3.20k|                case 0x21:
 7729|  3.20k|                case 0x23:
 7730|  3.20k|                case 0x24:
 7731|  3.20k|                case 0x25:
 7732|  3.20k|                case 0x26:
 7733|  3.20k|                case 0x27:
 7734|  3.20k|                case 0x28:
 7735|  3.20k|                case 0x29:
 7736|  3.20k|                case 0x2A:
 7737|  13.0k|                case 0x2B:
 7738|  13.0k|                case 0x2C:
 7739|  33.3k|                case 0x2D:
 7740|  33.4k|                case 0x2E:
 7741|  33.5k|                case 0x2F:
 7742|   131k|                case 0x30:
 7743|   156k|                case 0x31:
 7744|   172k|                case 0x32:
 7745|   190k|                case 0x33:
 7746|   215k|                case 0x34:
 7747|   241k|                case 0x35:
 7748|   262k|                case 0x36:
 7749|   276k|                case 0x37:
 7750|   305k|                case 0x38:
 7751|   314k|                case 0x39:
 7752|   343k|                case 0x3A:
 7753|   346k|                case 0x3B:
 7754|   346k|                case 0x3C:
 7755|   346k|                case 0x3D:
 7756|   346k|                case 0x3E:
 7757|   346k|                case 0x3F:
 7758|   346k|                case 0x40:
 7759|   348k|                case 0x41:
 7760|   349k|                case 0x42:
 7761|   350k|                case 0x43:
 7762|   351k|                case 0x44:
 7763|   364k|                case 0x45:
 7764|   373k|                case 0x46:
 7765|   378k|                case 0x47:
 7766|   389k|                case 0x48:
 7767|   405k|                case 0x49:
 7768|   405k|                case 0x4A:
 7769|   410k|                case 0x4B:
 7770|   414k|                case 0x4C:
 7771|   429k|                case 0x4D:
 7772|   442k|                case 0x4E:
 7773|   455k|                case 0x4F:
 7774|   456k|                case 0x50:
 7775|   456k|                case 0x51:
 7776|   457k|                case 0x52:
 7777|   473k|                case 0x53:
 7778|   505k|                case 0x54:
 7779|   507k|                case 0x55:
 7780|   507k|                case 0x56:
 7781|   508k|                case 0x57:
 7782|   508k|                case 0x58:
 7783|   509k|                case 0x59:
 7784|   509k|                case 0x5A:
 7785|   509k|                case 0x5B:
 7786|   509k|                case 0x5D:
 7787|   509k|                case 0x5E:
 7788|   509k|                case 0x5F:
 7789|   509k|                case 0x60:
 7790|   587k|                case 0x61:
 7791|   614k|                case 0x62:
 7792|   660k|                case 0x63:
 7793|   687k|                case 0x64:
 7794|   800k|                case 0x65:
 7795|   808k|                case 0x66:
 7796|   853k|                case 0x67:
 7797|   864k|                case 0x68:
 7798|   932k|                case 0x69:
 7799|   933k|                case 0x6A:
 7800|   941k|                case 0x6B:
 7801|   981k|                case 0x6C:
 7802|  1.02M|                case 0x6D:
 7803|  1.07M|                case 0x6E:
 7804|  1.10M|                case 0x6F:
 7805|  1.13M|                case 0x70:
 7806|  1.13M|                case 0x71:
 7807|  1.17M|                case 0x72:
 7808|  1.21M|                case 0x73:
 7809|  1.27M|                case 0x74:
 7810|  1.29M|                case 0x75:
 7811|  1.29M|                case 0x76:
 7812|  1.29M|                case 0x77:
 7813|  1.29M|                case 0x78:
 7814|  1.30M|                case 0x79:
 7815|  1.30M|                case 0x7A:
 7816|  1.30M|                case 0x7B:
 7817|  1.30M|                case 0x7C:
 7818|  1.30M|                case 0x7D:
 7819|  1.30M|                case 0x7E:
 7820|  1.30M|                case 0x7F:
 7821|  1.30M|                {
 7822|  1.30M|                    add(current);
 7823|  1.30M|                    break;
 7824|  1.30M|                }
 7825|       |
 7826|       |                // U+0080..U+07FF: bytes C2..DF 80..BF
 7827|      0|                case 0xC2:
 7828|      0|                case 0xC3:
 7829|      1|                case 0xC4:
 7830|      4|                case 0xC5:
 7831|      4|                case 0xC6:
 7832|      4|                case 0xC7:
 7833|      4|                case 0xC8:
 7834|      4|                case 0xC9:
 7835|      4|                case 0xCA:
 7836|      4|                case 0xCB:
 7837|      4|                case 0xCC:
 7838|      4|                case 0xCD:
 7839|      4|                case 0xCE:
 7840|      4|                case 0xCF:
 7841|      4|                case 0xD0:
 7842|      4|                case 0xD1:
 7843|      4|                case 0xD2:
 7844|      4|                case 0xD3:
 7845|      4|                case 0xD4:
 7846|      4|                case 0xD5:
 7847|      4|                case 0xD6:
 7848|      4|                case 0xD7:
 7849|      4|                case 0xD8:
 7850|      4|                case 0xD9:
 7851|      4|                case 0xDA:
 7852|      4|                case 0xDB:
 7853|      4|                case 0xDC:
 7854|      4|                case 0xDD:
 7855|      4|                case 0xDE:
 7856|      4|                case 0xDF:
 7857|      4|                {
 7858|      4|                    if (JSON_HEDLEY_UNLIKELY(not next_byte_in_range({0x80, 0xBF})))
 7859|      0|                    {
 7860|      0|                        return token_type::parse_error;
 7861|      0|                    }
 7862|      4|                    break;
 7863|      4|                }
 7864|       |
 7865|       |                // U+0800..U+0FFF: bytes E0 A0..BF 80..BF
 7866|      4|                case 0xE0:
 7867|      0|                {
 7868|      0|                    if (JSON_HEDLEY_UNLIKELY(not (next_byte_in_range({0xA0, 0xBF, 0x80, 0xBF}))))
 7869|      0|                    {
 7870|      0|                        return token_type::parse_error;
 7871|      0|                    }
 7872|      0|                    break;
 7873|      0|                }
 7874|       |
 7875|       |                // U+1000..U+CFFF: bytes E1..EC 80..BF 80..BF
 7876|       |                // U+E000..U+FFFF: bytes EE..EF 80..BF 80..BF
 7877|      0|                case 0xE1:
 7878|      0|                case 0xE2:
 7879|      0|                case 0xE3:
 7880|      0|                case 0xE4:
 7881|      0|                case 0xE5:
 7882|      0|                case 0xE6:
 7883|      0|                case 0xE7:
 7884|      0|                case 0xE8:
 7885|      0|                case 0xE9:
 7886|      0|                case 0xEA:
 7887|      0|                case 0xEB:
 7888|      0|                case 0xEC:
 7889|      0|                case 0xEE:
 7890|      0|                case 0xEF:
 7891|      0|                {
 7892|      0|                    if (JSON_HEDLEY_UNLIKELY(not (next_byte_in_range({0x80, 0xBF, 0x80, 0xBF}))))
 7893|      0|                    {
 7894|      0|                        return token_type::parse_error;
 7895|      0|                    }
 7896|      0|                    break;
 7897|      0|                }
 7898|       |
 7899|       |                // U+D000..U+D7FF: bytes ED 80..9F 80..BF
 7900|      0|                case 0xED:
 7901|      0|                {
 7902|      0|                    if (JSON_HEDLEY_UNLIKELY(not (next_byte_in_range({0x80, 0x9F, 0x80, 0xBF}))))
 7903|      0|                    {
 7904|      0|                        return token_type::parse_error;
 7905|      0|                    }
 7906|      0|                    break;
 7907|      0|                }
 7908|       |
 7909|       |                // U+10000..U+3FFFF F0 90..BF 80..BF 80..BF
 7910|      0|                case 0xF0:
 7911|      0|                {
 7912|      0|                    if (JSON_HEDLEY_UNLIKELY(not (next_byte_in_range({0x90, 0xBF, 0x80, 0xBF, 0x80, 0xBF}))))
 7913|      0|                    {
 7914|      0|                        return token_type::parse_error;
 7915|      0|                    }
 7916|      0|                    break;
 7917|      0|                }
 7918|       |
 7919|       |                // U+40000..U+FFFFF F1..F3 80..BF 80..BF 80..BF
 7920|      0|                case 0xF1:
 7921|      0|                case 0xF2:
 7922|      0|                case 0xF3:
 7923|      0|                {
 7924|      0|                    if (JSON_HEDLEY_UNLIKELY(not (next_byte_in_range({0x80, 0xBF, 0x80, 0xBF, 0x80, 0xBF}))))
 7925|      0|                    {
 7926|      0|                        return token_type::parse_error;
 7927|      0|                    }
 7928|      0|                    break;
 7929|      0|                }
 7930|       |
 7931|       |                // U+100000..U+10FFFF F4 80..8F 80..BF 80..BF
 7932|      0|                case 0xF4:
 7933|      0|                {
 7934|      0|                    if (JSON_HEDLEY_UNLIKELY(not (next_byte_in_range({0x80, 0x8F, 0x80, 0xBF, 0x80, 0xBF}))))
 7935|      0|                    {
 7936|      0|                        return token_type::parse_error;
 7937|      0|                    }
 7938|      0|                    break;
 7939|      0|                }
 7940|       |
 7941|       |                // remaining bytes (80..C1 and F5..FF) are ill-formed
 7942|      0|                default:
 7943|      0|                {
 7944|      0|                    error_message = "invalid string: ill-formed UTF-8 byte";
 7945|      0|                    return token_type::parse_error;
 7946|      0|                }
 7947|  1.46M|            }
 7948|  1.46M|        }
 7949|   162k|    }
 7950|       |
 7951|       |    JSON_HEDLEY_NON_NULL(2)
 7952|       |    static void strtof(float& f, const char* str, char** endptr) noexcept
 7953|       |    {
 7954|       |        f = std::strtof(str, endptr);
 7955|       |    }
 7956|       |
 7957|       |    JSON_HEDLEY_NON_NULL(2)
 7958|       |    static void strtof(double& f, const char* str, char** endptr) noexcept
 7959|  29.4k|    {
 7960|  29.4k|        f = std::strtod(str, endptr);
 7961|  29.4k|    }
 7962|       |
 7963|       |    JSON_HEDLEY_NON_NULL(2)
 7964|       |    static void strtof(long double& f, const char* str, char** endptr) noexcept
 7965|       |    {
 7966|       |        f = std::strtold(str, endptr);
 7967|       |    }
 7968|       |
 7969|       |    /*!
 7970|       |    @brief scan a number literal
 7971|       |
 7972|       |    This function scans a string according to Sect. 6 of RFC 7159.
 7973|       |
 7974|       |    The function is realized with a deterministic finite state machine derived
 7975|       |    from the grammar described in RFC 7159. Starting in state "init", the
 7976|       |    input is read and used to determined the next state. Only state "done"
 7977|       |    accepts the number. State "error" is a trap state to model errors. In the
 7978|       |    table below, "anything" means any character but the ones listed before.
 7979|       |
 7980|       |    state    | 0        | 1-9      | e E      | +       | -       | .        | anything
 7981|       |    ---------|----------|----------|----------|---------|---------|----------|-----------
 7982|       |    init     | zero     | any1     | [error]  | [error] | minus   | [error]  | [error]
 7983|       |    minus    | zero     | any1     | [error]  | [error] | [error] | [error]  | [error]
 7984|       |    zero     | done     | done     | exponent | done    | done    | decimal1 | done
 7985|       |    any1     | any1     | any1     | exponent | done    | done    | decimal1 | done
 7986|       |    decimal1 | decimal2 | decimal2 | [error]  | [error] | [error] | [error]  | [error]
 7987|       |    decimal2 | decimal2 | decimal2 | exponent | done    | done    | done     | done
 7988|       |    exponent | any2     | any2     | [error]  | sign    | sign    | [error]  | [error]
 7989|       |    sign     | any2     | any2     | [error]  | [error] | [error] | [error]  | [error]
 7990|       |    any2     | any2     | any2     | done     | done    | done    | done     | done
 7991|       |
 7992|       |    The state machine is realized with one label per state (prefixed with
 7993|       |    "scan_number_") and `goto` statements between them. The state machine
 7994|       |    contains cycles, but any cycle can be left when EOF is read. Therefore,
 7995|       |    the function is guaranteed to terminate.
 7996|       |
 7997|       |    During scanning, the read bytes are stored in token_buffer. This string is
 7998|       |    then converted to a signed integer, an unsigned integer, or a
 7999|       |    floating-point number.
 8000|       |
 8001|       |    @return token_type::value_unsigned, token_type::value_integer, or
 8002|       |            token_type::value_float if number could be successfully scanned,
 8003|       |            token_type::parse_error otherwise
 8004|       |
 8005|       |    @note The scanner is independent of the current locale. Internally, the
 8006|       |          locale's decimal point is used instead of `.` to work with the
 8007|       |          locale-dependent converters.
 8008|       |    */
 8009|       |    token_type scan_number()  // lgtm [cpp/use-of-goto]
 8010|  74.4k|    {
 8011|       |        // reset token_buffer to store the number's bytes
 8012|  74.4k|        reset();
 8013|       |
 8014|       |        // the type of the parsed number; initially set to unsigned; will be
 8015|       |        // changed if minus sign, decimal point or exponent is read
 8016|  74.4k|        token_type number_type = token_type::value_unsigned;
 8017|       |
 8018|       |        // state (init): we just found out we need to scan a number
 8019|  74.4k|        switch (current)
 8020|  74.4k|        {
 8021|  4.69k|            case '-':
 8022|  4.69k|            {
 8023|  4.69k|                add(current);
 8024|  4.69k|                goto scan_number_minus;
 8025|      0|            }
 8026|       |
 8027|  9.97k|            case '0':
 8028|  9.97k|            {
 8029|  9.97k|                add(current);
 8030|  9.97k|                goto scan_number_zero;
 8031|      0|            }
 8032|       |
 8033|  20.0k|            case '1':
 8034|  30.4k|            case '2':
 8035|  33.4k|            case '3':
 8036|  34.0k|            case '4':
 8037|  45.9k|            case '5':
 8038|  47.6k|            case '6':
 8039|  51.4k|            case '7':
 8040|  54.4k|            case '8':
 8041|  59.8k|            case '9':
 8042|  59.8k|            {
 8043|  59.8k|                add(current);
 8044|  59.8k|                goto scan_number_any1;
 8045|  54.4k|            }
 8046|       |
 8047|       |            // all other characters are rejected outside scan_number()
 8048|      0|            default:            // LCOV_EXCL_LINE
 8049|      0|                assert(false);  // LCOV_EXCL_LINE
 8050|  74.4k|        }
 8051|       |
 8052|  4.69k|scan_number_minus:
 8053|       |        // state: we just parsed a leading minus sign
 8054|  4.69k|        number_type = token_type::value_integer;
 8055|  4.69k|        switch (get())
 8056|  4.69k|        {
 8057|      0|            case '0':
 8058|      0|            {
 8059|      0|                add(current);
 8060|      0|                goto scan_number_zero;
 8061|      0|            }
 8062|       |
 8063|  1.42k|            case '1':
 8064|  3.26k|            case '2':
 8065|  4.08k|            case '3':
 8066|  4.28k|            case '4':
 8067|  4.48k|            case '5':
 8068|  4.69k|            case '6':
 8069|  4.69k|            case '7':
 8070|  4.69k|            case '8':
 8071|  4.69k|            case '9':
 8072|  4.69k|            {
 8073|  4.69k|                add(current);
 8074|  4.69k|                goto scan_number_any1;
 8075|  4.69k|            }
 8076|       |
 8077|      0|            default:
 8078|      0|            {
 8079|      0|                error_message = "invalid number; expected digit after '-'";
 8080|      0|                return token_type::parse_error;
 8081|  4.69k|            }
 8082|  4.69k|        }
 8083|       |
 8084|  9.97k|scan_number_zero:
 8085|       |        // state: we just parse a zero (maybe with a leading minus sign)
 8086|  9.97k|        switch (get())
 8087|  9.97k|        {
 8088|    136|            case '.':
 8089|    136|            {
 8090|    136|                add(decimal_point_char);
 8091|    136|                goto scan_number_decimal1;
 8092|      0|            }
 8093|       |
 8094|      0|            case 'e':
 8095|      0|            case 'E':
 8096|      0|            {
 8097|      0|                add(current);
 8098|      0|                goto scan_number_exponent;
 8099|      0|            }
 8100|       |
 8101|  9.83k|            default:
 8102|  9.83k|                goto scan_number_done;
 8103|  9.97k|        }
 8104|       |
 8105|   218k|scan_number_any1:
 8106|       |        // state: we just parsed a number 0-9 (maybe with a leading minus sign)
 8107|   218k|        switch (get())
 8108|   218k|        {
 8109|  19.1k|            case '0':
 8110|  24.3k|            case '1':
 8111|  58.9k|            case '2':
 8112|  65.5k|            case '3':
 8113|  72.6k|            case '4':
 8114|  85.7k|            case '5':
 8115|   113k|            case '6':
 8116|   136k|            case '7':
 8117|   145k|            case '8':
 8118|   153k|            case '9':
 8119|   153k|            {
 8120|   153k|                add(current);
 8121|   153k|                goto scan_number_any1;
 8122|   145k|            }
 8123|       |
 8124|  29.3k|            case '.':
 8125|  29.3k|            {
 8126|  29.3k|                add(decimal_point_char);
 8127|  29.3k|                goto scan_number_decimal1;
 8128|   145k|            }
 8129|       |
 8130|      0|            case 'e':
 8131|      0|            case 'E':
 8132|      0|            {
 8133|      0|                add(current);
 8134|      0|                goto scan_number_exponent;
 8135|      0|            }
 8136|       |
 8137|  35.1k|            default:
 8138|  35.1k|                goto scan_number_done;
 8139|   218k|        }
 8140|       |
 8141|  29.4k|scan_number_decimal1:
 8142|       |        // state: we just parsed a decimal point
 8143|  29.4k|        number_type = token_type::value_float;
 8144|  29.4k|        switch (get())
 8145|  29.4k|        {
 8146|  1.43k|            case '0':
 8147|  5.78k|            case '1':
 8148|  8.04k|            case '2':
 8149|  9.41k|            case '3':
 8150|  15.7k|            case '4':
 8151|  19.2k|            case '5':
 8152|  25.3k|            case '6':
 8153|  27.4k|            case '7':
 8154|  28.4k|            case '8':
 8155|  29.4k|            case '9':
 8156|  29.4k|            {
 8157|  29.4k|                add(current);
 8158|  29.4k|                goto scan_number_decimal2;
 8159|  28.4k|            }
 8160|       |
 8161|      0|            default:
 8162|      0|            {
 8163|      0|                error_message = "invalid number; expected digit after '.'";
 8164|      0|                return token_type::parse_error;
 8165|  28.4k|            }
 8166|  29.4k|        }
 8167|       |
 8168|   126k|scan_number_decimal2:
 8169|       |        // we just parsed at least one number after a decimal point
 8170|   126k|        switch (get())
 8171|   126k|        {
 8172|  12.6k|            case '0':
 8173|  23.0k|            case '1':
 8174|  31.0k|            case '2':
 8175|  39.0k|            case '3':
 8176|  44.5k|            case '4':
 8177|  55.8k|            case '5':
 8178|  70.7k|            case '6':
 8179|  75.8k|            case '7':
 8180|  91.1k|            case '8':
 8181|  96.5k|            case '9':
 8182|  96.5k|            {
 8183|  96.5k|                add(current);
 8184|  96.5k|                goto scan_number_decimal2;
 8185|  91.1k|            }
 8186|       |
 8187|      0|            case 'e':
 8188|      0|            case 'E':
 8189|      0|            {
 8190|      0|                add(current);
 8191|      0|                goto scan_number_exponent;
 8192|      0|            }
 8193|       |
 8194|  29.4k|            default:
 8195|  29.4k|                goto scan_number_done;
 8196|   126k|        }
 8197|       |
 8198|      0|scan_number_exponent:
 8199|       |        // we just parsed an exponent
 8200|      0|        number_type = token_type::value_float;
 8201|      0|        switch (get())
 8202|      0|        {
 8203|      0|            case '+':
 8204|      0|            case '-':
 8205|      0|            {
 8206|      0|                add(current);
 8207|      0|                goto scan_number_sign;
 8208|      0|            }
 8209|       |
 8210|      0|            case '0':
 8211|      0|            case '1':
 8212|      0|            case '2':
 8213|      0|            case '3':
 8214|      0|            case '4':
 8215|      0|            case '5':
 8216|      0|            case '6':
 8217|      0|            case '7':
 8218|      0|            case '8':
 8219|      0|            case '9':
 8220|      0|            {
 8221|      0|                add(current);
 8222|      0|                goto scan_number_any2;
 8223|      0|            }
 8224|       |
 8225|      0|            default:
 8226|      0|            {
 8227|      0|                error_message =
 8228|      0|                    "invalid number; expected '+', '-', or digit after exponent";
 8229|      0|                return token_type::parse_error;
 8230|      0|            }
 8231|      0|        }
 8232|       |
 8233|      0|scan_number_sign:
 8234|       |        // we just parsed an exponent sign
 8235|      0|        switch (get())
 8236|      0|        {
 8237|      0|            case '0':
 8238|      0|            case '1':
 8239|      0|            case '2':
 8240|      0|            case '3':
 8241|      0|            case '4':
 8242|      0|            case '5':
 8243|      0|            case '6':
 8244|      0|            case '7':
 8245|      0|            case '8':
 8246|      0|            case '9':
 8247|      0|            {
 8248|      0|                add(current);
 8249|      0|                goto scan_number_any2;
 8250|      0|            }
 8251|       |
 8252|      0|            default:
 8253|      0|            {
 8254|      0|                error_message = "invalid number; expected digit after exponent sign";
 8255|      0|                return token_type::parse_error;
 8256|      0|            }
 8257|      0|        }
 8258|       |
 8259|      0|scan_number_any2:
 8260|       |        // we just parsed a number after the exponent or exponent sign
 8261|      0|        switch (get())
 8262|      0|        {
 8263|      0|            case '0':
 8264|      0|            case '1':
 8265|      0|            case '2':
 8266|      0|            case '3':
 8267|      0|            case '4':
 8268|      0|            case '5':
 8269|      0|            case '6':
 8270|      0|            case '7':
 8271|      0|            case '8':
 8272|      0|            case '9':
 8273|      0|            {
 8274|      0|                add(current);
 8275|      0|                goto scan_number_any2;
 8276|      0|            }
 8277|       |
 8278|      0|            default:
 8279|      0|                goto scan_number_done;
 8280|      0|        }
 8281|       |
 8282|  74.4k|scan_number_done:
 8283|       |        // unget the character after the number (we only read it to know that
 8284|       |        // we are done scanning a number)
 8285|  74.4k|        unget();
 8286|       |
 8287|  74.4k|        char* endptr = nullptr;
 8288|  74.4k|        errno = 0;
 8289|       |
 8290|       |        // try to parse integers first and fall back to floats
 8291|  74.4k|        if (number_type == token_type::value_unsigned)
 8292|  40.3k|        {
 8293|  40.3k|            const auto x = std::strtoull(token_buffer.data(), &endptr, 10);
 8294|       |
 8295|       |            // we checked the number format before
 8296|  40.3k|            assert(endptr == token_buffer.data() + token_buffer.size());
 8297|       |
 8298|  40.3k|            if (errno == 0)
 8299|  40.3k|            {
 8300|  40.3k|                value_unsigned = static_cast<number_unsigned_t>(x);
 8301|  40.3k|                if (value_unsigned == x)
 8302|  40.3k|                {
 8303|  40.3k|                    return token_type::value_unsigned;
 8304|  40.3k|                }
 8305|  40.3k|            }
 8306|  40.3k|        }
 8307|  34.1k|        else if (number_type == token_type::value_integer)
 8308|  4.69k|        {
 8309|  4.69k|            const auto x = std::strtoll(token_buffer.data(), &endptr, 10);
 8310|       |
 8311|       |            // we checked the number format before
 8312|  4.69k|            assert(endptr == token_buffer.data() + token_buffer.size());
 8313|       |
 8314|  4.69k|            if (errno == 0)
 8315|  4.69k|            {
 8316|  4.69k|                value_integer = static_cast<number_integer_t>(x);
 8317|  4.69k|                if (value_integer == x)
 8318|  4.69k|                {
 8319|  4.69k|                    return token_type::value_integer;
 8320|  4.69k|                }
 8321|  4.69k|            }
 8322|  4.69k|        }
 8323|       |
 8324|       |        // this code is reached if we parse a floating-point number or if an
 8325|       |        // integer conversion above failed
 8326|  29.4k|        strtof(value_float, token_buffer.data(), &endptr);
 8327|       |
 8328|       |        // we checked the number format before
 8329|  29.4k|        assert(endptr == token_buffer.data() + token_buffer.size());
 8330|       |
 8331|      0|        return token_type::value_float;
 8332|  74.4k|    }
 8333|       |
 8334|       |    /*!
 8335|       |    @param[in] literal_text  the literal text to expect
 8336|       |    @param[in] length        the length of the passed literal text
 8337|       |    @param[in] return_type   the token type to return on success
 8338|       |    */
 8339|       |    JSON_HEDLEY_NON_NULL(2)
 8340|       |    token_type scan_literal(const char* literal_text, const std::size_t length,
 8341|       |                            token_type return_type)
 8342|    587|    {
 8343|    587|        assert(current == literal_text[0]);
 8344|  2.34k|        for (std::size_t i = 1; i < length; ++i)
 8345|  1.76k|        {
 8346|  1.76k|            if (JSON_HEDLEY_UNLIKELY(get() != literal_text[i]))
 8347|      3|            {
 8348|      3|                error_message = "invalid literal";
 8349|      3|                return token_type::parse_error;
 8350|      3|            }
 8351|  1.76k|        }
 8352|    584|        return return_type;
 8353|    587|    }
 8354|       |
 8355|       |    /////////////////////
 8356|       |    // input management
 8357|       |    /////////////////////
 8358|       |
 8359|       |    /// reset token_buffer; current character is beginning of token
 8360|       |    void reset() noexcept
 8361|   237k|    {
 8362|   237k|        token_buffer.clear();
 8363|   237k|        token_string.clear();
 8364|   237k|        token_string.push_back(std::char_traits<char>::to_char_type(current));
 8365|   237k|    }
 8366|       |
 8367|       |    /*
 8368|       |    @brief get next character from the input
 8369|       |
 8370|       |    This function provides the interface to the used input adapter. It does
 8371|       |    not throw in case the input reached EOF, but returns a
 8372|       |    `std::char_traits<char>::eof()` in that case.  Stores the scanned characters
 8373|       |    for use in error messages.
 8374|       |
 8375|       |    @return character read from the input
 8376|       |    */
 8377|       |    std::char_traits<char>::int_type get()
 8378|  2.56M|    {
 8379|  2.56M|        ++position.chars_read_total;
 8380|  2.56M|        ++position.chars_read_current_line;
 8381|       |
 8382|  2.56M|        if (next_unget)
 8383|  75.1k|        {
 8384|       |            // just reset the next_unget variable and work with current
 8385|  75.1k|            next_unget = false;
 8386|  75.1k|        }
 8387|  2.48M|        else
 8388|  2.48M|        {
 8389|  2.48M|            current = ia->get_character();
 8390|  2.48M|        }
 8391|       |
 8392|  2.56M|        if (JSON_HEDLEY_LIKELY(current != std::char_traits<char>::eof()))
 8393|  2.56M|        {
 8394|  2.56M|            token_string.push_back(std::char_traits<char>::to_char_type(current));
 8395|  2.56M|        }
 8396|       |
 8397|  2.56M|        if (current == '\n')
 8398|  14.4k|        {
 8399|  14.4k|            ++position.lines_read;
 8400|  14.4k|            position.chars_read_current_line = 0;
 8401|  14.4k|        }
 8402|       |
 8403|  2.56M|        return current;
 8404|  2.56M|    }
 8405|       |
 8406|       |    /*!
 8407|       |    @brief unget current character (read it again on next get)
 8408|       |
 8409|       |    We implement unget by setting variable next_unget to true. The input is not
 8410|       |    changed - we just simulate ungetting by modifying chars_read_total,
 8411|       |    chars_read_current_line, and token_string. The next call to get() will
 8412|       |    behave as if the unget character is read again.
 8413|       |    */
 8414|       |    void unget()
 8415|  75.1k|    {
 8416|  75.1k|        next_unget = true;
 8417|       |
 8418|  75.1k|        --position.chars_read_total;
 8419|       |
 8420|       |        // in case we "unget" a newline, we have to also decrement the lines_read
 8421|  75.1k|        if (position.chars_read_current_line == 0)
 8422|    474|        {
 8423|    474|            if (position.lines_read > 0)
 8424|    474|            {
 8425|    474|                --position.lines_read;
 8426|    474|            }
 8427|    474|        }
 8428|  74.6k|        else
 8429|  74.6k|        {
 8430|  74.6k|            --position.chars_read_current_line;
 8431|  74.6k|        }
 8432|       |
 8433|  75.1k|        if (JSON_HEDLEY_LIKELY(current != std::char_traits<char>::eof()))
 8434|  75.1k|        {
 8435|  75.1k|            assert(not token_string.empty());
 8436|      0|            token_string.pop_back();
 8437|  75.1k|        }
 8438|  75.1k|    }
 8439|       |
 8440|       |    /// add a character to token_buffer
 8441|       |    void add(int c)
 8442|  1.69M|    {
 8443|  1.69M|        token_buffer.push_back(std::char_traits<char>::to_char_type(c));
 8444|  1.69M|    }
 8445|       |
 8446|       |  public:
 8447|       |    /////////////////////
 8448|       |    // value getters
 8449|       |    /////////////////////
 8450|       |
 8451|       |    /// return integer value
 8452|       |    constexpr number_integer_t get_number_integer() const noexcept
 8453|  4.69k|    {
 8454|  4.69k|        return value_integer;
 8455|  4.69k|    }
 8456|       |
 8457|       |    /// return unsigned integer value
 8458|       |    constexpr number_unsigned_t get_number_unsigned() const noexcept
 8459|  40.3k|    {
 8460|  40.3k|        return value_unsigned;
 8461|  40.3k|    }
 8462|       |
 8463|       |    /// return floating-point value
 8464|       |    constexpr number_float_t get_number_float() const noexcept
 8465|  29.4k|    {
 8466|  29.4k|        return value_float;
 8467|  29.4k|    }
 8468|       |
 8469|       |    /// return current string value (implicitly resets the token; useful only once)
 8470|       |    string_t& get_string()
 8471|   192k|    {
 8472|   192k|        return token_buffer;
 8473|   192k|    }
 8474|       |
 8475|       |    /////////////////////
 8476|       |    // diagnostics
 8477|       |    /////////////////////
 8478|       |
 8479|       |    /// return position of last read token
 8480|       |    constexpr position_t get_position() const noexcept
 8481|     56|    {
 8482|     56|        return position;
 8483|     56|    }
 8484|       |
 8485|       |    /// return the last read token (for errors only).  Will never contain EOF
 8486|       |    /// (an arbitrary value that is not a valid char value, often -1), because
 8487|       |    /// 255 may legitimately occur.  May contain NUL, which should be escaped.
 8488|       |    std::string get_token_string() const
 8489|     35|    {
 8490|       |        // escape control characters
 8491|     35|        std::string result;
 8492|     35|        for (const auto c : token_string)
 8493|     24|        {
 8494|     24|            if ('\x00' <= c and c <= '\x1F')
 8495|      0|            {
 8496|       |                // escape control characters
 8497|      0|                std::array<char, 9> cs{{}};
 8498|      0|                (std::snprintf)(cs.data(), cs.size(), "<U+%.4X>", static_cast<unsigned char>(c));
 8499|      0|                result += cs.data();
 8500|      0|            }
 8501|     24|            else
 8502|     24|            {
 8503|       |                // add character as is
 8504|     24|                result.push_back(c);
 8505|     24|            }
 8506|     24|        }
 8507|       |
 8508|     35|        return result;
 8509|     35|    }
 8510|       |
 8511|       |    /// return syntax error message
 8512|       |    JSON_HEDLEY_RETURNS_NON_NULL
 8513|       |    constexpr const char* get_error_message() const noexcept
 8514|      7|    {
 8515|      7|        return error_message;
 8516|      7|    }
 8517|       |
 8518|       |    /////////////////////
 8519|       |    // actual scanner
 8520|       |    /////////////////////
 8521|       |
 8522|       |    /*!
 8523|       |    @brief skip the UTF-8 byte order mark
 8524|       |    @return true iff there is no BOM or the correct BOM has been skipped
 8525|       |    */
 8526|       |    bool skip_bom()
 8527|    645|    {
 8528|    645|        if (get() == 0xEF)
 8529|      0|        {
 8530|       |            // check if we completely parse the BOM
 8531|      0|            return get() == 0xBB and get() == 0xBF;
 8532|      0|        }
 8533|       |
 8534|       |        // the first character is not the beginning of the BOM; unget it to
 8535|       |        // process is later
 8536|    645|        unget();
 8537|    645|        return true;
 8538|    645|    }
 8539|       |
 8540|       |    token_type scan()
 8541|   533k|    {
 8542|       |        // initially, skip the BOM
 8543|   533k|        if (position.chars_read_total == 0 and not skip_bom())
 8544|      0|        {
 8545|      0|            error_message = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
 8546|      0|            return token_type::parse_error;
 8547|      0|        }
 8548|       |
 8549|       |        // read next character and ignore whitespace
 8550|   533k|        do
 8551|   703k|        {
 8552|   703k|            get();
 8553|   703k|        }
 8554|   703k|        while (current == ' ' or current == '\t' or current == '\n' or current == '\r');
 8555|       |
 8556|   533k|        switch (current)
 8557|   533k|        {
 8558|       |            // structural characters
 8559|  1.48k|            case '[':
 8560|  1.48k|                return token_type::begin_array;
 8561|  1.48k|            case ']':
 8562|  1.48k|                return token_type::end_array;
 8563|  27.1k|            case '{':
 8564|  27.1k|                return token_type::begin_object;
 8565|  27.1k|            case '}':
 8566|  27.1k|                return token_type::end_object;
 8567|   129k|            case ':':
 8568|   129k|                return token_type::name_separator;
 8569|   108k|            case ',':
 8570|   108k|                return token_type::value_separator;
 8571|       |
 8572|       |            // literals
 8573|    339|            case 't':
 8574|    339|                return scan_literal("true", 4, token_type::literal_true);
 8575|      7|            case 'f':
 8576|      7|                return scan_literal("false", 5, token_type::literal_false);
 8577|    241|            case 'n':
 8578|    241|                return scan_literal("null", 4, token_type::literal_null);
 8579|       |
 8580|       |            // string
 8581|   162k|            case '\"':
 8582|   162k|                return scan_string();
 8583|       |
 8584|       |            // number
 8585|  4.69k|            case '-':
 8586|  14.6k|            case '0':
 8587|  34.7k|            case '1':
 8588|  45.1k|            case '2':
 8589|  48.1k|            case '3':
 8590|  48.7k|            case '4':
 8591|  60.6k|            case '5':
 8592|  62.2k|            case '6':
 8593|  66.1k|            case '7':
 8594|  69.1k|            case '8':
 8595|  74.4k|            case '9':
 8596|  74.4k|                return scan_number();
 8597|       |
 8598|       |            // end of input (the null byte is needed when parsing from
 8599|       |            // string literals)
 8600|    359|            case '\0':
 8601|    419|            case std::char_traits<char>::eof():
 8602|    419|                return token_type::end_of_input;
 8603|       |
 8604|       |            // error
 8605|      4|            default:
 8606|      4|                error_message = "invalid literal";
 8607|      4|                return token_type::parse_error;
 8608|   533k|        }
 8609|   533k|    }
 8610|       |
 8611|       |  private:
 8612|       |    /// input adapter
 8613|       |    detail::input_adapter_t ia = nullptr;
 8614|       |
 8615|       |    /// the current character
 8616|       |    std::char_traits<char>::int_type current = std::char_traits<char>::eof();
 8617|       |
 8618|       |    /// whether the next get() call should just return current
 8619|       |    bool next_unget = false;
 8620|       |
 8621|       |    /// the start position of the current token
 8622|       |    position_t position {};
 8623|       |
 8624|       |    /// raw input token string (for error messages)
 8625|       |    std::vector<char> token_string {};
 8626|       |
 8627|       |    /// buffer for variable-length tokens (numbers, strings)
 8628|       |    string_t token_buffer {};
 8629|       |
 8630|       |    /// a description of occurred lexer errors
 8631|       |    const char* error_message = "";
 8632|       |
 8633|       |    // number values
 8634|       |    number_integer_t value_integer = 0;
 8635|       |    number_unsigned_t value_unsigned = 0;
 8636|       |    number_float_t value_float = 0;
 8637|       |
 8638|       |    /// the decimal point
 8639|       |    const char decimal_point_char = '.';
 8640|       |};
 8641|       |}  // namespace detail
 8642|       |}  // namespace nlohmann
 8643|       |
 8644|       |// #include <nlohmann/detail/input/parser.hpp>
 8645|       |
 8646|       |
 8647|       |#include <cassert> // assert
 8648|       |#include <cmath> // isfinite
 8649|       |#include <cstdint> // uint8_t
 8650|       |#include <functional> // function
 8651|       |#include <string> // string
 8652|       |#include <utility> // move
 8653|       |#include <vector> // vector
 8654|       |
 8655|       |// #include <nlohmann/detail/exceptions.hpp>
 8656|       |
 8657|       |// #include <nlohmann/detail/input/input_adapters.hpp>
 8658|       |
 8659|       |// #include <nlohmann/detail/input/json_sax.hpp>
 8660|       |
 8661|       |// #include <nlohmann/detail/input/lexer.hpp>
 8662|       |
 8663|       |// #include <nlohmann/detail/macro_scope.hpp>
 8664|       |
 8665|       |// #include <nlohmann/detail/meta/is_sax.hpp>
 8666|       |
 8667|       |// #include <nlohmann/detail/value_t.hpp>
 8668|       |
 8669|       |
 8670|       |namespace nlohmann
 8671|       |{
 8672|       |namespace detail
 8673|       |{
 8674|       |////////////
 8675|       |// parser //
 8676|       |////////////
 8677|       |
 8678|       |/*!
 8679|       |@brief syntax analysis
 8680|       |
 8681|       |This class implements a recursive descent parser.
 8682|       |*/
 8683|       |template<typename BasicJsonType>
 8684|       |class parser
 8685|       |{
 8686|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
 8687|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
 8688|       |    using number_float_t = typename BasicJsonType::number_float_t;
 8689|       |    using string_t = typename BasicJsonType::string_t;
 8690|       |    using lexer_t = lexer<BasicJsonType>;
 8691|       |    using token_type = typename lexer_t::token_type;
 8692|       |
 8693|       |  public:
 8694|       |    enum class parse_event_t : uint8_t
 8695|       |    {
 8696|       |        /// the parser read `{` and started to process a JSON object
 8697|       |        object_start,
 8698|       |        /// the parser read `}` and finished processing a JSON object
 8699|       |        object_end,
 8700|       |        /// the parser read `[` and started to process a JSON array
 8701|       |        array_start,
 8702|       |        /// the parser read `]` and finished processing a JSON array
 8703|       |        array_end,
 8704|       |        /// the parser read a key of a value in an object
 8705|       |        key,
 8706|       |        /// the parser finished reading a JSON value
 8707|       |        value
 8708|       |    };
 8709|       |
 8710|       |    using parser_callback_t =
 8711|       |        std::function<bool(int depth, parse_event_t event, BasicJsonType& parsed)>;
 8712|       |
 8713|       |    /// a parser reading from an input adapter
 8714|       |    explicit parser(detail::input_adapter_t&& adapter,
 8715|       |                    const parser_callback_t cb = nullptr,
 8716|       |                    const bool allow_exceptions_ = true)
 8717|       |        : callback(cb), m_lexer(std::move(adapter)), allow_exceptions(allow_exceptions_)
 8718|    645|    {
 8719|       |        // read first token
 8720|    645|        get_token();
 8721|    645|    }
 8722|       |
 8723|       |    /*!
 8724|       |    @brief public parser interface
 8725|       |
 8726|       |    @param[in] strict      whether to expect the last token to be EOF
 8727|       |    @param[in,out] result  parsed JSON value
 8728|       |
 8729|       |    @throw parse_error.101 in case of an unexpected token
 8730|       |    @throw parse_error.102 if to_unicode fails or surrogate error
 8731|       |    @throw parse_error.103 if to_unicode fails
 8732|       |    */
 8733|       |    void parse(const bool strict, BasicJsonType& result)
 8734|    645|    {
 8735|    645|        if (callback)
 8736|      0|        {
 8737|      0|            json_sax_dom_callback_parser<BasicJsonType> sdp(result, callback, allow_exceptions);
 8738|      0|            sax_parse_internal(&sdp);
 8739|      0|            result.assert_invariant();
 8740|       |
 8741|       |            // in strict mode, input must be completely read
 8742|      0|            if (strict and (get_token() != token_type::end_of_input))
 8743|      0|            {
 8744|      0|                sdp.parse_error(m_lexer.get_position(),
 8745|      0|                                m_lexer.get_token_string(),
 8746|      0|                                parse_error::create(101, m_lexer.get_position(),
 8747|      0|                                                    exception_message(token_type::end_of_input, "value")));
 8748|      0|            }
 8749|       |
 8750|       |            // in case of an error, return discarded value
 8751|      0|            if (sdp.is_errored())
 8752|      0|            {
 8753|      0|                result = value_t::discarded;
 8754|      0|                return;
 8755|      0|            }
 8756|       |
 8757|       |            // set top-level value to null if it was discarded by the callback
 8758|       |            // function
 8759|      0|            if (result.is_discarded())
 8760|      0|            {
 8761|      0|                result = nullptr;
 8762|      0|            }
 8763|      0|        }
 8764|    645|        else
 8765|    645|        {
 8766|    645|            json_sax_dom_parser<BasicJsonType> sdp(result, allow_exceptions);
 8767|    645|            sax_parse_internal(&sdp);
 8768|    645|            result.assert_invariant();
 8769|       |
 8770|       |            // in strict mode, input must be completely read
 8771|    645|            if (strict and (get_token() != token_type::end_of_input))
 8772|      0|            {
 8773|      0|                sdp.parse_error(m_lexer.get_position(),
 8774|      0|                                m_lexer.get_token_string(),
 8775|      0|                                parse_error::create(101, m_lexer.get_position(),
 8776|      0|                                                    exception_message(token_type::end_of_input, "value")));
 8777|      0|            }
 8778|       |
 8779|       |            // in case of an error, return discarded value
 8780|    645|            if (sdp.is_errored())
 8781|      0|            {
 8782|      0|                result = value_t::discarded;
 8783|      0|                return;
 8784|      0|            }
 8785|    645|        }
 8786|    645|    }
 8787|       |
 8788|       |    /*!
 8789|       |    @brief public accept interface
 8790|       |
 8791|       |    @param[in] strict  whether to expect the last token to be EOF
 8792|       |    @return whether the input is a proper JSON text
 8793|       |    */
 8794|       |    bool accept(const bool strict = true)
 8795|       |    {
 8796|       |        json_sax_acceptor<BasicJsonType> sax_acceptor;
 8797|       |        return sax_parse(&sax_acceptor, strict);
 8798|       |    }
 8799|       |
 8800|       |    template <typename SAX>
 8801|       |    JSON_HEDLEY_NON_NULL(2)
 8802|       |    bool sax_parse(SAX* sax, const bool strict = true)
 8803|       |    {
 8804|       |        (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};
 8805|       |        const bool result = sax_parse_internal(sax);
 8806|       |
 8807|       |        // strict mode: next byte must be EOF
 8808|       |        if (result and strict and (get_token() != token_type::end_of_input))
 8809|       |        {
 8810|       |            return sax->parse_error(m_lexer.get_position(),
 8811|       |                                    m_lexer.get_token_string(),
 8812|       |                                    parse_error::create(101, m_lexer.get_position(),
 8813|       |                                            exception_message(token_type::end_of_input, "value")));
 8814|       |        }
 8815|       |
 8816|       |        return result;
 8817|       |    }
 8818|       |
 8819|       |  private:
 8820|       |    template <typename SAX>
 8821|       |    JSON_HEDLEY_NON_NULL(2)
 8822|       |    bool sax_parse_internal(SAX* sax)
 8823|    645|    {
 8824|       |        // stack to remember the hierarchy of structured values we are parsing
 8825|       |        // true = array; false = object
 8826|    645|        std::vector<bool> states;
 8827|       |        // value to avoid a goto (see comment where set to true)
 8828|    645|        bool skip_to_state_evaluation = false;
 8829|       |
 8830|   165k|        while (true)
 8831|   165k|        {
 8832|   165k|            if (not skip_to_state_evaluation)
 8833|   136k|            {
 8834|       |                // invariant: get_token() was called before each iteration
 8835|   136k|                switch (last_token)
 8836|   136k|                {
 8837|  27.1k|                    case token_type::begin_object:
 8838|  27.1k|                    {
 8839|  27.1k|                        if (JSON_HEDLEY_UNLIKELY(not sax->start_object(std::size_t(-1))))
 8840|      0|                        {
 8841|      0|                            return false;
 8842|      0|                        }
 8843|       |
 8844|       |                        // closing } -> we are done
 8845|  27.1k|                        if (get_token() == token_type::end_object)
 8846|     50|                        {
 8847|     50|                            if (JSON_HEDLEY_UNLIKELY(not sax->end_object()))
 8848|      0|                            {
 8849|      0|                                return false;
 8850|      0|                            }
 8851|     50|                            break;
 8852|     50|                        }
 8853|       |
 8854|       |                        // parse key
 8855|  27.1k|                        if (JSON_HEDLEY_UNLIKELY(last_token != token_type::value_string))
 8856|      0|                        {
 8857|      0|                            return sax->parse_error(m_lexer.get_position(),
 8858|      0|                                                    m_lexer.get_token_string(),
 8859|      0|                                                    parse_error::create(101, m_lexer.get_position(),
 8860|      0|                                                            exception_message(token_type::value_string, "object key")));
 8861|      0|                        }
 8862|  27.1k|                        if (JSON_HEDLEY_UNLIKELY(not sax->key(m_lexer.get_string())))
 8863|      0|                        {
 8864|      0|                            return false;
 8865|      0|                        }
 8866|       |
 8867|       |                        // parse separator (:)
 8868|  27.1k|                        if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::name_separator))
 8869|      0|                        {
 8870|      0|                            return sax->parse_error(m_lexer.get_position(),
 8871|      0|                                                    m_lexer.get_token_string(),
 8872|      0|                                                    parse_error::create(101, m_lexer.get_position(),
 8873|      0|                                                            exception_message(token_type::name_separator, "object separator")));
 8874|      0|                        }
 8875|       |
 8876|       |                        // remember we are now inside an object
 8877|  27.1k|                        states.push_back(false);
 8878|       |
 8879|       |                        // parse values
 8880|  27.1k|                        get_token();
 8881|  27.1k|                        continue;
 8882|  27.1k|                    }
 8883|       |
 8884|  1.48k|                    case token_type::begin_array:
 8885|  1.48k|                    {
 8886|  1.48k|                        if (JSON_HEDLEY_UNLIKELY(not sax->start_array(std::size_t(-1))))
 8887|      0|                        {
 8888|      0|                            return false;
 8889|      0|                        }
 8890|       |
 8891|       |                        // closing ] -> we are done
 8892|  1.48k|                        if (get_token() == token_type::end_array)
 8893|    465|                        {
 8894|    465|                            if (JSON_HEDLEY_UNLIKELY(not sax->end_array()))
 8895|      0|                            {
 8896|      0|                                return false;
 8897|      0|                            }
 8898|    465|                            break;
 8899|    465|                        }
 8900|       |
 8901|       |                        // remember we are now inside an array
 8902|  1.02k|                        states.push_back(true);
 8903|       |
 8904|       |                        // parse values (no need to call get_token)
 8905|  1.02k|                        continue;
 8906|  1.48k|                    }
 8907|       |
 8908|  29.4k|                    case token_type::value_float:
 8909|  29.4k|                    {
 8910|  29.4k|                        const auto res = m_lexer.get_number_float();
 8911|       |
 8912|  29.4k|                        if (JSON_HEDLEY_UNLIKELY(not std::isfinite(res)))
 8913|      0|                        {
 8914|      0|                            return sax->parse_error(m_lexer.get_position(),
 8915|      0|                                                    m_lexer.get_token_string(),
 8916|      0|                                                    out_of_range::create(406, "number overflow parsing '" + m_lexer.get_token_string() + "'"));
 8917|      0|                        }
 8918|       |
 8919|  29.4k|                        if (JSON_HEDLEY_UNLIKELY(not sax->number_float(res, m_lexer.get_string())))
 8920|      0|                        {
 8921|      0|                            return false;
 8922|      0|                        }
 8923|       |
 8924|  29.4k|                        break;
 8925|  29.4k|                    }
 8926|       |
 8927|  29.4k|                    case token_type::literal_false:
 8928|      5|                    {
 8929|      5|                        if (JSON_HEDLEY_UNLIKELY(not sax->boolean(false)))
 8930|      0|                        {
 8931|      0|                            return false;
 8932|      0|                        }
 8933|      5|                        break;
 8934|      5|                    }
 8935|       |
 8936|    240|                    case token_type::literal_null:
 8937|    240|                    {
 8938|    240|                        if (JSON_HEDLEY_UNLIKELY(not sax->null()))
 8939|      0|                        {
 8940|      0|                            return false;
 8941|      0|                        }
 8942|    240|                        break;
 8943|    240|                    }
 8944|       |
 8945|    339|                    case token_type::literal_true:
 8946|    339|                    {
 8947|    339|                        if (JSON_HEDLEY_UNLIKELY(not sax->boolean(true)))
 8948|      0|                        {
 8949|      0|                            return false;
 8950|      0|                        }
 8951|    339|                        break;
 8952|    339|                    }
 8953|       |
 8954|  4.69k|                    case token_type::value_integer:
 8955|  4.69k|                    {
 8956|  4.69k|                        if (JSON_HEDLEY_UNLIKELY(not sax->number_integer(m_lexer.get_number_integer())))
 8957|      0|                        {
 8958|      0|                            return false;
 8959|      0|                        }
 8960|  4.69k|                        break;
 8961|  4.69k|                    }
 8962|       |
 8963|  33.1k|                    case token_type::value_string:
 8964|  33.1k|                    {
 8965|  33.1k|                        if (JSON_HEDLEY_UNLIKELY(not sax->string(m_lexer.get_string())))
 8966|      0|                        {
 8967|      0|                            return false;
 8968|      0|                        }
 8969|  33.1k|                        break;
 8970|  33.1k|                    }
 8971|       |
 8972|  40.3k|                    case token_type::value_unsigned:
 8973|  40.3k|                    {
 8974|  40.3k|                        if (JSON_HEDLEY_UNLIKELY(not sax->number_unsigned(m_lexer.get_number_unsigned())))
 8975|      0|                        {
 8976|      0|                            return false;
 8977|      0|                        }
 8978|  40.3k|                        break;
 8979|  40.3k|                    }
 8980|       |
 8981|  40.3k|                    case token_type::parse_error:
 8982|      7|                    {
 8983|       |                        // using "uninitialized" to avoid "expected" message
 8984|      7|                        return sax->parse_error(m_lexer.get_position(),
 8985|      7|                                                m_lexer.get_token_string(),
 8986|      7|                                                parse_error::create(101, m_lexer.get_position(),
 8987|      7|                                                        exception_message(token_type::uninitialized, "value")));
 8988|  40.3k|                    }
 8989|       |
 8990|     21|                    default: // the last token was unexpected
 8991|     21|                    {
 8992|     21|                        return sax->parse_error(m_lexer.get_position(),
 8993|     21|                                                m_lexer.get_token_string(),
 8994|     21|                                                parse_error::create(101, m_lexer.get_position(),
 8995|     21|                                                        exception_message(token_type::literal_or_value, "value")));
 8996|  40.3k|                    }
 8997|   136k|                }
 8998|   136k|            }
 8999|  28.1k|            else
 9000|  28.1k|            {
 9001|  28.1k|                skip_to_state_evaluation = false;
 9002|  28.1k|            }
 9003|       |
 9004|       |            // we reached this line after we successfully parsed a value
 9005|   136k|            if (states.empty())
 9006|    617|            {
 9007|       |                // empty stack: we reached the end of the hierarchy: done
 9008|    617|                return true;
 9009|    617|            }
 9010|       |
 9011|   136k|            if (states.back())  // array
 9012|  6.40k|            {
 9013|       |                // comma -> next value
 9014|  6.40k|                if (get_token() == token_type::value_separator)
 9015|  5.38k|                {
 9016|       |                    // parse a new value
 9017|  5.38k|                    get_token();
 9018|  5.38k|                    continue;
 9019|  5.38k|                }
 9020|       |
 9021|       |                // closing ]
 9022|  1.02k|                if (JSON_HEDLEY_LIKELY(last_token == token_type::end_array))
 9023|  1.02k|                {
 9024|  1.02k|                    if (JSON_HEDLEY_UNLIKELY(not sax->end_array()))
 9025|      0|                    {
 9026|      0|                        return false;
 9027|      0|                    }
 9028|       |
 9029|       |                    // We are done with this array. Before we can parse a
 9030|       |                    // new value, we need to evaluate the new state first.
 9031|       |                    // By setting skip_to_state_evaluation to false, we
 9032|       |                    // are effectively jumping to the beginning of this if.
 9033|  1.02k|                    assert(not states.empty());
 9034|      0|                    states.pop_back();
 9035|  1.02k|                    skip_to_state_evaluation = true;
 9036|  1.02k|                    continue;
 9037|  1.02k|                }
 9038|       |
 9039|      0|                return sax->parse_error(m_lexer.get_position(),
 9040|      0|                                        m_lexer.get_token_string(),
 9041|      0|                                        parse_error::create(101, m_lexer.get_position(),
 9042|      0|                                                exception_message(token_type::end_array, "array")));
 9043|  1.02k|            }
 9044|   129k|            else  // object
 9045|   129k|            {
 9046|       |                // comma -> next value
 9047|   129k|                if (get_token() == token_type::value_separator)
 9048|   102k|                {
 9049|       |                    // parse key
 9050|   102k|                    if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::value_string))
 9051|      0|                    {
 9052|      0|                        return sax->parse_error(m_lexer.get_position(),
 9053|      0|                                                m_lexer.get_token_string(),
 9054|      0|                                                parse_error::create(101, m_lexer.get_position(),
 9055|      0|                                                        exception_message(token_type::value_string, "object key")));
 9056|      0|                    }
 9057|       |
 9058|   102k|                    if (JSON_HEDLEY_UNLIKELY(not sax->key(m_lexer.get_string())))
 9059|      0|                    {
 9060|      0|                        return false;
 9061|      0|                    }
 9062|       |
 9063|       |                    // parse separator (:)
 9064|   102k|                    if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::name_separator))
 9065|      0|                    {
 9066|      0|                        return sax->parse_error(m_lexer.get_position(),
 9067|      0|                                                m_lexer.get_token_string(),
 9068|      0|                                                parse_error::create(101, m_lexer.get_position(),
 9069|      0|                                                        exception_message(token_type::name_separator, "object separator")));
 9070|      0|                    }
 9071|       |
 9072|       |                    // parse values
 9073|   102k|                    get_token();
 9074|   102k|                    continue;
 9075|   102k|                }
 9076|       |
 9077|       |                // closing }
 9078|  27.1k|                if (JSON_HEDLEY_LIKELY(last_token == token_type::end_object))
 9079|  27.1k|                {
 9080|  27.1k|                    if (JSON_HEDLEY_UNLIKELY(not sax->end_object()))
 9081|      0|                    {
 9082|      0|                        return false;
 9083|      0|                    }
 9084|       |
 9085|       |                    // We are done with this object. Before we can parse a
 9086|       |                    // new value, we need to evaluate the new state first.
 9087|       |                    // By setting skip_to_state_evaluation to false, we
 9088|       |                    // are effectively jumping to the beginning of this if.
 9089|  27.1k|                    assert(not states.empty());
 9090|      0|                    states.pop_back();
 9091|  27.1k|                    skip_to_state_evaluation = true;
 9092|  27.1k|                    continue;
 9093|  27.1k|                }
 9094|       |
 9095|      0|                return sax->parse_error(m_lexer.get_position(),
 9096|      0|                                        m_lexer.get_token_string(),
 9097|      0|                                        parse_error::create(101, m_lexer.get_position(),
 9098|      0|                                                exception_message(token_type::end_object, "object")));
 9099|  27.1k|            }
 9100|   136k|        }
 9101|    645|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann6detail6parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE18sax_parse_internalINS0_28json_sax_dom_callback_parserISC_EEEEbPT_
  ------------------
  | _ZN8nlohmann6detail6parserINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE18sax_parse_internalINS0_19json_sax_dom_parserISC_EEEEbPT_:
  | 8823|    645|    {
  | 8824|       |        // stack to remember the hierarchy of structured values we are parsing
  | 8825|       |        // true = array; false = object
  | 8826|    645|        std::vector<bool> states;
  | 8827|       |        // value to avoid a goto (see comment where set to true)
  | 8828|    645|        bool skip_to_state_evaluation = false;
  | 8829|       |
  | 8830|   165k|        while (true)
  | 8831|   165k|        {
  | 8832|   165k|            if (not skip_to_state_evaluation)
  | 8833|   136k|            {
  | 8834|       |                // invariant: get_token() was called before each iteration
  | 8835|   136k|                switch (last_token)
  | 8836|   136k|                {
  | 8837|  27.1k|                    case token_type::begin_object:
  | 8838|  27.1k|                    {
  | 8839|  27.1k|                        if (JSON_HEDLEY_UNLIKELY(not sax->start_object(std::size_t(-1))))
  | 8840|      0|                        {
  | 8841|      0|                            return false;
  | 8842|      0|                        }
  | 8843|       |
  | 8844|       |                        // closing } -> we are done
  | 8845|  27.1k|                        if (get_token() == token_type::end_object)
  | 8846|     50|                        {
  | 8847|     50|                            if (JSON_HEDLEY_UNLIKELY(not sax->end_object()))
  | 8848|      0|                            {
  | 8849|      0|                                return false;
  | 8850|      0|                            }
  | 8851|     50|                            break;
  | 8852|     50|                        }
  | 8853|       |
  | 8854|       |                        // parse key
  | 8855|  27.1k|                        if (JSON_HEDLEY_UNLIKELY(last_token != token_type::value_string))
  | 8856|      0|                        {
  | 8857|      0|                            return sax->parse_error(m_lexer.get_position(),
  | 8858|      0|                                                    m_lexer.get_token_string(),
  | 8859|      0|                                                    parse_error::create(101, m_lexer.get_position(),
  | 8860|      0|                                                            exception_message(token_type::value_string, "object key")));
  | 8861|      0|                        }
  | 8862|  27.1k|                        if (JSON_HEDLEY_UNLIKELY(not sax->key(m_lexer.get_string())))
  | 8863|      0|                        {
  | 8864|      0|                            return false;
  | 8865|      0|                        }
  | 8866|       |
  | 8867|       |                        // parse separator (:)
  | 8868|  27.1k|                        if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::name_separator))
  | 8869|      0|                        {
  | 8870|      0|                            return sax->parse_error(m_lexer.get_position(),
  | 8871|      0|                                                    m_lexer.get_token_string(),
  | 8872|      0|                                                    parse_error::create(101, m_lexer.get_position(),
  | 8873|      0|                                                            exception_message(token_type::name_separator, "object separator")));
  | 8874|      0|                        }
  | 8875|       |
  | 8876|       |                        // remember we are now inside an object
  | 8877|  27.1k|                        states.push_back(false);
  | 8878|       |
  | 8879|       |                        // parse values
  | 8880|  27.1k|                        get_token();
  | 8881|  27.1k|                        continue;
  | 8882|  27.1k|                    }
  | 8883|       |
  | 8884|  1.48k|                    case token_type::begin_array:
  | 8885|  1.48k|                    {
  | 8886|  1.48k|                        if (JSON_HEDLEY_UNLIKELY(not sax->start_array(std::size_t(-1))))
  | 8887|      0|                        {
  | 8888|      0|                            return false;
  | 8889|      0|                        }
  | 8890|       |
  | 8891|       |                        // closing ] -> we are done
  | 8892|  1.48k|                        if (get_token() == token_type::end_array)
  | 8893|    465|                        {
  | 8894|    465|                            if (JSON_HEDLEY_UNLIKELY(not sax->end_array()))
  | 8895|      0|                            {
  | 8896|      0|                                return false;
  | 8897|      0|                            }
  | 8898|    465|                            break;
  | 8899|    465|                        }
  | 8900|       |
  | 8901|       |                        // remember we are now inside an array
  | 8902|  1.02k|                        states.push_back(true);
  | 8903|       |
  | 8904|       |                        // parse values (no need to call get_token)
  | 8905|  1.02k|                        continue;
  | 8906|  1.48k|                    }
  | 8907|       |
  | 8908|  29.4k|                    case token_type::value_float:
  | 8909|  29.4k|                    {
  | 8910|  29.4k|                        const auto res = m_lexer.get_number_float();
  | 8911|       |
  | 8912|  29.4k|                        if (JSON_HEDLEY_UNLIKELY(not std::isfinite(res)))
  | 8913|      0|                        {
  | 8914|      0|                            return sax->parse_error(m_lexer.get_position(),
  | 8915|      0|                                                    m_lexer.get_token_string(),
  | 8916|      0|                                                    out_of_range::create(406, "number overflow parsing '" + m_lexer.get_token_string() + "'"));
  | 8917|      0|                        }
  | 8918|       |
  | 8919|  29.4k|                        if (JSON_HEDLEY_UNLIKELY(not sax->number_float(res, m_lexer.get_string())))
  | 8920|      0|                        {
  | 8921|      0|                            return false;
  | 8922|      0|                        }
  | 8923|       |
  | 8924|  29.4k|                        break;
  | 8925|  29.4k|                    }
  | 8926|       |
  | 8927|  29.4k|                    case token_type::literal_false:
  | 8928|      5|                    {
  | 8929|      5|                        if (JSON_HEDLEY_UNLIKELY(not sax->boolean(false)))
  | 8930|      0|                        {
  | 8931|      0|                            return false;
  | 8932|      0|                        }
  | 8933|      5|                        break;
  | 8934|      5|                    }
  | 8935|       |
  | 8936|    240|                    case token_type::literal_null:
  | 8937|    240|                    {
  | 8938|    240|                        if (JSON_HEDLEY_UNLIKELY(not sax->null()))
  | 8939|      0|                        {
  | 8940|      0|                            return false;
  | 8941|      0|                        }
  | 8942|    240|                        break;
  | 8943|    240|                    }
  | 8944|       |
  | 8945|    339|                    case token_type::literal_true:
  | 8946|    339|                    {
  | 8947|    339|                        if (JSON_HEDLEY_UNLIKELY(not sax->boolean(true)))
  | 8948|      0|                        {
  | 8949|      0|                            return false;
  | 8950|      0|                        }
  | 8951|    339|                        break;
  | 8952|    339|                    }
  | 8953|       |
  | 8954|  4.69k|                    case token_type::value_integer:
  | 8955|  4.69k|                    {
  | 8956|  4.69k|                        if (JSON_HEDLEY_UNLIKELY(not sax->number_integer(m_lexer.get_number_integer())))
  | 8957|      0|                        {
  | 8958|      0|                            return false;
  | 8959|      0|                        }
  | 8960|  4.69k|                        break;
  | 8961|  4.69k|                    }
  | 8962|       |
  | 8963|  33.1k|                    case token_type::value_string:
  | 8964|  33.1k|                    {
  | 8965|  33.1k|                        if (JSON_HEDLEY_UNLIKELY(not sax->string(m_lexer.get_string())))
  | 8966|      0|                        {
  | 8967|      0|                            return false;
  | 8968|      0|                        }
  | 8969|  33.1k|                        break;
  | 8970|  33.1k|                    }
  | 8971|       |
  | 8972|  40.3k|                    case token_type::value_unsigned:
  | 8973|  40.3k|                    {
  | 8974|  40.3k|                        if (JSON_HEDLEY_UNLIKELY(not sax->number_unsigned(m_lexer.get_number_unsigned())))
  | 8975|      0|                        {
  | 8976|      0|                            return false;
  | 8977|      0|                        }
  | 8978|  40.3k|                        break;
  | 8979|  40.3k|                    }
  | 8980|       |
  | 8981|  40.3k|                    case token_type::parse_error:
  | 8982|      7|                    {
  | 8983|       |                        // using "uninitialized" to avoid "expected" message
  | 8984|      7|                        return sax->parse_error(m_lexer.get_position(),
  | 8985|      7|                                                m_lexer.get_token_string(),
  | 8986|      7|                                                parse_error::create(101, m_lexer.get_position(),
  | 8987|      7|                                                        exception_message(token_type::uninitialized, "value")));
  | 8988|  40.3k|                    }
  | 8989|       |
  | 8990|     21|                    default: // the last token was unexpected
  | 8991|     21|                    {
  | 8992|     21|                        return sax->parse_error(m_lexer.get_position(),
  | 8993|     21|                                                m_lexer.get_token_string(),
  | 8994|     21|                                                parse_error::create(101, m_lexer.get_position(),
  | 8995|     21|                                                        exception_message(token_type::literal_or_value, "value")));
  | 8996|  40.3k|                    }
  | 8997|   136k|                }
  | 8998|   136k|            }
  | 8999|  28.1k|            else
  | 9000|  28.1k|            {
  | 9001|  28.1k|                skip_to_state_evaluation = false;
  | 9002|  28.1k|            }
  | 9003|       |
  | 9004|       |            // we reached this line after we successfully parsed a value
  | 9005|   136k|            if (states.empty())
  | 9006|    617|            {
  | 9007|       |                // empty stack: we reached the end of the hierarchy: done
  | 9008|    617|                return true;
  | 9009|    617|            }
  | 9010|       |
  | 9011|   136k|            if (states.back())  // array
  | 9012|  6.40k|            {
  | 9013|       |                // comma -> next value
  | 9014|  6.40k|                if (get_token() == token_type::value_separator)
  | 9015|  5.38k|                {
  | 9016|       |                    // parse a new value
  | 9017|  5.38k|                    get_token();
  | 9018|  5.38k|                    continue;
  | 9019|  5.38k|                }
  | 9020|       |
  | 9021|       |                // closing ]
  | 9022|  1.02k|                if (JSON_HEDLEY_LIKELY(last_token == token_type::end_array))
  | 9023|  1.02k|                {
  | 9024|  1.02k|                    if (JSON_HEDLEY_UNLIKELY(not sax->end_array()))
  | 9025|      0|                    {
  | 9026|      0|                        return false;
  | 9027|      0|                    }
  | 9028|       |
  | 9029|       |                    // We are done with this array. Before we can parse a
  | 9030|       |                    // new value, we need to evaluate the new state first.
  | 9031|       |                    // By setting skip_to_state_evaluation to false, we
  | 9032|       |                    // are effectively jumping to the beginning of this if.
  | 9033|  1.02k|                    assert(not states.empty());
  | 9034|      0|                    states.pop_back();
  | 9035|  1.02k|                    skip_to_state_evaluation = true;
  | 9036|  1.02k|                    continue;
  | 9037|  1.02k|                }
  | 9038|       |
  | 9039|      0|                return sax->parse_error(m_lexer.get_position(),
  | 9040|      0|                                        m_lexer.get_token_string(),
  | 9041|      0|                                        parse_error::create(101, m_lexer.get_position(),
  | 9042|      0|                                                exception_message(token_type::end_array, "array")));
  | 9043|  1.02k|            }
  | 9044|   129k|            else  // object
  | 9045|   129k|            {
  | 9046|       |                // comma -> next value
  | 9047|   129k|                if (get_token() == token_type::value_separator)
  | 9048|   102k|                {
  | 9049|       |                    // parse key
  | 9050|   102k|                    if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::value_string))
  | 9051|      0|                    {
  | 9052|      0|                        return sax->parse_error(m_lexer.get_position(),
  | 9053|      0|                                                m_lexer.get_token_string(),
  | 9054|      0|                                                parse_error::create(101, m_lexer.get_position(),
  | 9055|      0|                                                        exception_message(token_type::value_string, "object key")));
  | 9056|      0|                    }
  | 9057|       |
  | 9058|   102k|                    if (JSON_HEDLEY_UNLIKELY(not sax->key(m_lexer.get_string())))
  | 9059|      0|                    {
  | 9060|      0|                        return false;
  | 9061|      0|                    }
  | 9062|       |
  | 9063|       |                    // parse separator (:)
  | 9064|   102k|                    if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::name_separator))
  | 9065|      0|                    {
  | 9066|      0|                        return sax->parse_error(m_lexer.get_position(),
  | 9067|      0|                                                m_lexer.get_token_string(),
  | 9068|      0|                                                parse_error::create(101, m_lexer.get_position(),
  | 9069|      0|                                                        exception_message(token_type::name_separator, "object separator")));
  | 9070|      0|                    }
  | 9071|       |
  | 9072|       |                    // parse values
  | 9073|   102k|                    get_token();
  | 9074|   102k|                    continue;
  | 9075|   102k|                }
  | 9076|       |
  | 9077|       |                // closing }
  | 9078|  27.1k|                if (JSON_HEDLEY_LIKELY(last_token == token_type::end_object))
  | 9079|  27.1k|                {
  | 9080|  27.1k|                    if (JSON_HEDLEY_UNLIKELY(not sax->end_object()))
  | 9081|      0|                    {
  | 9082|      0|                        return false;
  | 9083|      0|                    }
  | 9084|       |
  | 9085|       |                    // We are done with this object. Before we can parse a
  | 9086|       |                    // new value, we need to evaluate the new state first.
  | 9087|       |                    // By setting skip_to_state_evaluation to false, we
  | 9088|       |                    // are effectively jumping to the beginning of this if.
  | 9089|  27.1k|                    assert(not states.empty());
  | 9090|      0|                    states.pop_back();
  | 9091|  27.1k|                    skip_to_state_evaluation = true;
  | 9092|  27.1k|                    continue;
  | 9093|  27.1k|                }
  | 9094|       |
  | 9095|      0|                return sax->parse_error(m_lexer.get_position(),
  | 9096|      0|                                        m_lexer.get_token_string(),
  | 9097|      0|                                        parse_error::create(101, m_lexer.get_position(),
  | 9098|      0|                                                exception_message(token_type::end_object, "object")));
  | 9099|  27.1k|            }
  | 9100|   136k|        }
  | 9101|    645|    }
  ------------------
 9102|       |
 9103|       |    /// get next token from lexer
 9104|       |    token_type get_token()
 9105|   533k|    {
 9106|   533k|        return last_token = m_lexer.scan();
 9107|   533k|    }
 9108|       |
 9109|       |    std::string exception_message(const token_type expected, const std::string& context)
 9110|     28|    {
 9111|     28|        std::string error_msg = "syntax error ";
 9112|       |
 9113|     28|        if (not context.empty())
 9114|     28|        {
 9115|     28|            error_msg += "while parsing " + context + " ";
 9116|     28|        }
 9117|       |
 9118|     28|        error_msg += "- ";
 9119|       |
 9120|     28|        if (last_token == token_type::parse_error)
 9121|      7|        {
 9122|      7|            error_msg += std::string(m_lexer.get_error_message()) + "; last read: '" +
 9123|      7|                         m_lexer.get_token_string() + "'";
 9124|      7|        }
 9125|     21|        else
 9126|     21|        {
 9127|     21|            error_msg += "unexpected " + std::string(lexer_t::token_type_name(last_token));
 9128|     21|        }
 9129|       |
 9130|     28|        if (expected != token_type::uninitialized)
 9131|     21|        {
 9132|     21|            error_msg += "; expected " + std::string(lexer_t::token_type_name(expected));
 9133|     21|        }
 9134|       |
 9135|     28|        return error_msg;
 9136|     28|    }
 9137|       |
 9138|       |  private:
 9139|       |    /// callback function
 9140|       |    const parser_callback_t callback = nullptr;
 9141|       |    /// the type of the last read token
 9142|       |    token_type last_token = token_type::uninitialized;
 9143|       |    /// the lexer
 9144|       |    lexer_t m_lexer;
 9145|       |    /// whether to throw exceptions in case of errors
 9146|       |    const bool allow_exceptions = true;
 9147|       |};
 9148|       |}  // namespace detail
 9149|       |}  // namespace nlohmann
 9150|       |
 9151|       |// #include <nlohmann/detail/iterators/internal_iterator.hpp>
 9152|       |
 9153|       |
 9154|       |// #include <nlohmann/detail/iterators/primitive_iterator.hpp>
 9155|       |
 9156|       |
 9157|       |#include <cstddef> // ptrdiff_t
 9158|       |#include <limits>  // numeric_limits
 9159|       |
 9160|       |namespace nlohmann
 9161|       |{
 9162|       |namespace detail
 9163|       |{
 9164|       |/*
 9165|       |@brief an iterator for primitive JSON types
 9166|       |
 9167|       |This class models an iterator for primitive JSON types (boolean, number,
 9168|       |string). It's only purpose is to allow the iterator/const_iterator classes
 9169|       |to "iterate" over primitive values. Internally, the iterator is modeled by
 9170|       |a `difference_type` variable. Value begin_value (`0`) models the begin,
 9171|       |end_value (`1`) models past the end.
 9172|       |*/
 9173|       |class primitive_iterator_t
 9174|       |{
 9175|       |  private:
 9176|       |    using difference_type = std::ptrdiff_t;
 9177|       |    static constexpr difference_type begin_value = 0;
 9178|       |    static constexpr difference_type end_value = begin_value + 1;
 9179|       |
 9180|       |    /// iterator as signed integer type
 9181|       |    difference_type m_it = (std::numeric_limits<std::ptrdiff_t>::min)();
 9182|       |
 9183|       |  public:
 9184|       |    constexpr difference_type get_value() const noexcept
 9185|      0|    {
 9186|      0|        return m_it;
 9187|      0|    }
 9188|       |
 9189|       |    /// set iterator to a defined beginning
 9190|       |    void set_begin() noexcept
 9191|      0|    {
 9192|      0|        m_it = begin_value;
 9193|      0|    }
 9194|       |
 9195|       |    /// set iterator to a defined past the end
 9196|       |    void set_end() noexcept
 9197|      0|    {
 9198|      0|        m_it = end_value;
 9199|      0|    }
 9200|       |
 9201|       |    /// return whether the iterator can be dereferenced
 9202|       |    constexpr bool is_begin() const noexcept
 9203|      0|    {
 9204|      0|        return m_it == begin_value;
 9205|      0|    }
 9206|       |
 9207|       |    /// return whether the iterator is at end
 9208|       |    constexpr bool is_end() const noexcept
 9209|      0|    {
 9210|      0|        return m_it == end_value;
 9211|      0|    }
 9212|       |
 9213|       |    friend constexpr bool operator==(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
 9214|      0|    {
 9215|      0|        return lhs.m_it == rhs.m_it;
 9216|      0|    }
 9217|       |
 9218|       |    friend constexpr bool operator<(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
 9219|      0|    {
 9220|      0|        return lhs.m_it < rhs.m_it;
 9221|      0|    }
 9222|       |
 9223|       |    primitive_iterator_t operator+(difference_type n) noexcept
 9224|      0|    {
 9225|      0|        auto result = *this;
 9226|      0|        result += n;
 9227|      0|        return result;
 9228|      0|    }
 9229|       |
 9230|       |    friend constexpr difference_type operator-(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
 9231|      0|    {
 9232|      0|        return lhs.m_it - rhs.m_it;
 9233|      0|    }
 9234|       |
 9235|       |    primitive_iterator_t& operator++() noexcept
 9236|      0|    {
 9237|      0|        ++m_it;
 9238|      0|        return *this;
 9239|      0|    }
 9240|       |
 9241|       |    primitive_iterator_t const operator++(int) noexcept
 9242|      0|    {
 9243|      0|        auto result = *this;
 9244|      0|        ++m_it;
 9245|      0|        return result;
 9246|      0|    }
 9247|       |
 9248|       |    primitive_iterator_t& operator--() noexcept
 9249|      0|    {
 9250|      0|        --m_it;
 9251|      0|        return *this;
 9252|      0|    }
 9253|       |
 9254|       |    primitive_iterator_t const operator--(int) noexcept
 9255|      0|    {
 9256|      0|        auto result = *this;
 9257|      0|        --m_it;
 9258|      0|        return result;
 9259|      0|    }
 9260|       |
 9261|       |    primitive_iterator_t& operator+=(difference_type n) noexcept
 9262|      0|    {
 9263|      0|        m_it += n;
 9264|      0|        return *this;
 9265|      0|    }
 9266|       |
 9267|       |    primitive_iterator_t& operator-=(difference_type n) noexcept
 9268|      0|    {
 9269|      0|        m_it -= n;
 9270|      0|        return *this;
 9271|      0|    }
 9272|       |};
 9273|       |}  // namespace detail
 9274|       |}  // namespace nlohmann
 9275|       |
 9276|       |
 9277|       |namespace nlohmann
 9278|       |{
 9279|       |namespace detail
 9280|       |{
 9281|       |/*!
 9282|       |@brief an iterator value
 9283|       |
 9284|       |@note This structure could easily be a union, but MSVC currently does not allow
 9285|       |unions members with complex constructors, see https://github.com/nlohmann/json/pull/105.
 9286|       |*/
 9287|       |template<typename BasicJsonType> struct internal_iterator
 9288|       |{
 9289|       |    /// iterator for JSON objects
 9290|       |    typename BasicJsonType::object_t::iterator object_iterator {};
 9291|       |    /// iterator for JSON arrays
 9292|       |    typename BasicJsonType::array_t::iterator array_iterator {};
 9293|       |    /// generic iterator for all other types
 9294|       |    primitive_iterator_t primitive_iterator {};
 9295|       |};
 9296|       |}  // namespace detail
 9297|       |}  // namespace nlohmann
 9298|       |
 9299|       |// #include <nlohmann/detail/iterators/iter_impl.hpp>
 9300|       |
 9301|       |
 9302|       |#include <ciso646> // not
 9303|       |#include <iterator> // iterator, random_access_iterator_tag, bidirectional_iterator_tag, advance, next
 9304|       |#include <type_traits> // conditional, is_const, remove_const
 9305|       |
 9306|       |// #include <nlohmann/detail/exceptions.hpp>
 9307|       |
 9308|       |// #include <nlohmann/detail/iterators/internal_iterator.hpp>
 9309|       |
 9310|       |// #include <nlohmann/detail/iterators/primitive_iterator.hpp>
 9311|       |
 9312|       |// #include <nlohmann/detail/macro_scope.hpp>
 9313|       |
 9314|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
 9315|       |
 9316|       |// #include <nlohmann/detail/meta/type_traits.hpp>
 9317|       |
 9318|       |// #include <nlohmann/detail/value_t.hpp>
 9319|       |
 9320|       |
 9321|       |namespace nlohmann
 9322|       |{
 9323|       |namespace detail
 9324|       |{
 9325|       |// forward declare, to be able to friend it later on
 9326|       |template<typename IteratorType> class iteration_proxy;
 9327|       |template<typename IteratorType> class iteration_proxy_value;
 9328|       |
 9329|       |/*!
 9330|       |@brief a template for a bidirectional iterator for the @ref basic_json class
 9331|       |This class implements a both iterators (iterator and const_iterator) for the
 9332|       |@ref basic_json class.
 9333|       |@note An iterator is called *initialized* when a pointer to a JSON value has
 9334|       |      been set (e.g., by a constructor or a copy assignment). If the iterator is
 9335|       |      default-constructed, it is *uninitialized* and most methods are undefined.
 9336|       |      **The library uses assertions to detect calls on uninitialized iterators.**
 9337|       |@requirement The class satisfies the following concept requirements:
 9338|       |-
 9339|       |[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
 9340|       |  The iterator that can be moved can be moved in both directions (i.e.
 9341|       |  incremented and decremented).
 9342|       |@since version 1.0.0, simplified in version 2.0.9, change to bidirectional
 9343|       |       iterators in version 3.0.0 (see https://github.com/nlohmann/json/issues/593)
 9344|       |*/
 9345|       |template<typename BasicJsonType>
 9346|       |class iter_impl
 9347|       |{
 9348|       |    /// allow basic_json to access private members
 9349|       |    friend iter_impl<typename std::conditional<std::is_const<BasicJsonType>::value, typename std::remove_const<BasicJsonType>::type, const BasicJsonType>::type>;
 9350|       |    friend BasicJsonType;
 9351|       |    friend iteration_proxy<iter_impl>;
 9352|       |    friend iteration_proxy_value<iter_impl>;
 9353|       |
 9354|       |    using object_t = typename BasicJsonType::object_t;
 9355|       |    using array_t = typename BasicJsonType::array_t;
 9356|       |    // make sure BasicJsonType is basic_json or const basic_json
 9357|       |    static_assert(is_basic_json<typename std::remove_const<BasicJsonType>::type>::value,
 9358|       |                  "iter_impl only accepts (const) basic_json");
 9359|       |
 9360|       |  public:
 9361|       |
 9362|       |    /// The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17.
 9363|       |    /// The C++ Standard has never required user-defined iterators to derive from std::iterator.
 9364|       |    /// A user-defined iterator should provide publicly accessible typedefs named
 9365|       |    /// iterator_category, value_type, difference_type, pointer, and reference.
 9366|       |    /// Note that value_type is required to be non-const, even for constant iterators.
 9367|       |    using iterator_category = std::bidirectional_iterator_tag;
 9368|       |
 9369|       |    /// the type of the values when the iterator is dereferenced
 9370|       |    using value_type = typename BasicJsonType::value_type;
 9371|       |    /// a type to represent differences between iterators
 9372|       |    using difference_type = typename BasicJsonType::difference_type;
 9373|       |    /// defines a pointer to the type iterated over (value_type)
 9374|       |    using pointer = typename std::conditional<std::is_const<BasicJsonType>::value,
 9375|       |          typename BasicJsonType::const_pointer,
 9376|       |          typename BasicJsonType::pointer>::type;
 9377|       |    /// defines a reference to the type iterated over (value_type)
 9378|       |    using reference =
 9379|       |        typename std::conditional<std::is_const<BasicJsonType>::value,
 9380|       |        typename BasicJsonType::const_reference,
 9381|       |        typename BasicJsonType::reference>::type;
 9382|       |
 9383|       |    /// default constructor
 9384|       |    iter_impl() = default;
 9385|       |
 9386|       |    /*!
 9387|       |    @brief constructor for a given JSON instance
 9388|       |    @param[in] object  pointer to a JSON object for this iterator
 9389|       |    @pre object != nullptr
 9390|       |    @post The iterator is initialized; i.e. `m_object != nullptr`.
 9391|       |    */
 9392|       |    explicit iter_impl(pointer object) noexcept : m_object(object)
 9393|  2.32k|    {
 9394|  2.32k|        assert(m_object != nullptr);
 9395|       |
 9396|      0|        switch (m_object->m_type)
 9397|  2.32k|        {
 9398|  1.72k|            case value_t::object:
 9399|  1.72k|            {
 9400|  1.72k|                m_it.object_iterator = typename object_t::iterator();
 9401|  1.72k|                break;
 9402|      0|            }
 9403|       |
 9404|    600|            case value_t::array:
 9405|    600|            {
 9406|    600|                m_it.array_iterator = typename array_t::iterator();
 9407|    600|                break;
 9408|      0|            }
 9409|       |
 9410|      0|            default:
 9411|      0|            {
 9412|      0|                m_it.primitive_iterator = primitive_iterator_t();
 9413|      0|                break;
 9414|      0|            }
 9415|  2.32k|        }
 9416|  2.32k|    }
  ------------------
  | _ZN8nlohmann6detail9iter_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEC2EPSC_:
  | 9393|  1.56k|    {
  | 9394|  1.56k|        assert(m_object != nullptr);
  | 9395|       |
  | 9396|      0|        switch (m_object->m_type)
  | 9397|  1.56k|        {
  | 9398|  1.55k|            case value_t::object:
  | 9399|  1.55k|            {
  | 9400|  1.55k|                m_it.object_iterator = typename object_t::iterator();
  | 9401|  1.55k|                break;
  | 9402|      0|            }
  | 9403|       |
  | 9404|      6|            case value_t::array:
  | 9405|      6|            {
  | 9406|      6|                m_it.array_iterator = typename array_t::iterator();
  | 9407|      6|                break;
  | 9408|      0|            }
  | 9409|       |
  | 9410|      0|            default:
  | 9411|      0|            {
  | 9412|      0|                m_it.primitive_iterator = primitive_iterator_t();
  | 9413|      0|                break;
  | 9414|      0|            }
  | 9415|  1.56k|        }
  | 9416|  1.56k|    }
  ------------------
  | _ZN8nlohmann6detail9iter_implIKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEC2EPSD_:
  | 9393|    762|    {
  | 9394|    762|        assert(m_object != nullptr);
  | 9395|       |
  | 9396|      0|        switch (m_object->m_type)
  | 9397|    762|        {
  | 9398|    168|            case value_t::object:
  | 9399|    168|            {
  | 9400|    168|                m_it.object_iterator = typename object_t::iterator();
  | 9401|    168|                break;
  | 9402|      0|            }
  | 9403|       |
  | 9404|    594|            case value_t::array:
  | 9405|    594|            {
  | 9406|    594|                m_it.array_iterator = typename array_t::iterator();
  | 9407|    594|                break;
  | 9408|      0|            }
  | 9409|       |
  | 9410|      0|            default:
  | 9411|      0|            {
  | 9412|      0|                m_it.primitive_iterator = primitive_iterator_t();
  | 9413|      0|                break;
  | 9414|      0|            }
  | 9415|    762|        }
  | 9416|    762|    }
  ------------------
 9417|       |
 9418|       |    /*!
 9419|       |    @note The conventional copy constructor and copy assignment are implicitly
 9420|       |          defined. Combined with the following converting constructor and
 9421|       |          assignment, they support: (1) copy from iterator to iterator, (2)
 9422|       |          copy from const iterator to const iterator, and (3) conversion from
 9423|       |          iterator to const iterator. However conversion from const iterator
 9424|       |          to iterator is not defined.
 9425|       |    */
 9426|       |
 9427|       |    /*!
 9428|       |    @brief const copy constructor
 9429|       |    @param[in] other const iterator to copy from
 9430|       |    @note This copy constructor had to be defined explicitly to circumvent a bug
 9431|       |          occurring on msvc v19.0 compiler (VS 2015) debug build. For more
 9432|       |          information refer to: https://github.com/nlohmann/json/issues/1608
 9433|       |    */
 9434|       |    iter_impl(const iter_impl<const BasicJsonType>& other) noexcept
 9435|       |        : m_object(other.m_object), m_it(other.m_it)
 9436|       |    {}
 9437|       |
 9438|       |    /*!
 9439|       |    @brief converting assignment
 9440|       |    @param[in] other const iterator to copy from
 9441|       |    @return const/non-const iterator
 9442|       |    @note It is not checked whether @a other is initialized.
 9443|       |    */
 9444|       |    iter_impl& operator=(const iter_impl<const BasicJsonType>& other) noexcept
 9445|       |    {
 9446|       |        m_object = other.m_object;
 9447|       |        m_it = other.m_it;
 9448|       |        return *this;
 9449|       |    }
 9450|       |
 9451|       |    /*!
 9452|       |    @brief converting constructor
 9453|       |    @param[in] other  non-const iterator to copy from
 9454|       |    @note It is not checked whether @a other is initialized.
 9455|       |    */
 9456|       |    iter_impl(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept
 9457|       |        : m_object(other.m_object), m_it(other.m_it)
 9458|      0|    {}
 9459|       |
 9460|       |    /*!
 9461|       |    @brief converting assignment
 9462|       |    @param[in] other  non-const iterator to copy from
 9463|       |    @return const/non-const iterator
 9464|       |    @note It is not checked whether @a other is initialized.
 9465|       |    */
 9466|       |    iter_impl& operator=(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept
 9467|       |    {
 9468|       |        m_object = other.m_object;
 9469|       |        m_it = other.m_it;
 9470|       |        return *this;
 9471|       |    }
 9472|       |
 9473|       |  private:
 9474|       |    /*!
 9475|       |    @brief set the iterator to the first value
 9476|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9477|       |    */
 9478|       |    void set_begin() noexcept
 9479|    714|    {
 9480|    714|        assert(m_object != nullptr);
 9481|       |
 9482|      0|        switch (m_object->m_type)
 9483|    714|        {
 9484|    414|            case value_t::object:
 9485|    414|            {
 9486|    414|                m_it.object_iterator = m_object->m_value.object->begin();
 9487|    414|                break;
 9488|      0|            }
 9489|       |
 9490|    300|            case value_t::array:
 9491|    300|            {
 9492|    300|                m_it.array_iterator = m_object->m_value.array->begin();
 9493|    300|                break;
 9494|      0|            }
 9495|       |
 9496|      0|            case value_t::null:
 9497|      0|            {
 9498|       |                // set to end so begin()==end() is true: null is empty
 9499|      0|                m_it.primitive_iterator.set_end();
 9500|      0|                break;
 9501|      0|            }
 9502|       |
 9503|      0|            default:
 9504|      0|            {
 9505|      0|                m_it.primitive_iterator.set_begin();
 9506|      0|                break;
 9507|      0|            }
 9508|    714|        }
 9509|    714|    }
  ------------------
  | _ZN8nlohmann6detail9iter_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE9set_beginEv:
  | 9479|    333|    {
  | 9480|    333|        assert(m_object != nullptr);
  | 9481|       |
  | 9482|      0|        switch (m_object->m_type)
  | 9483|    333|        {
  | 9484|    330|            case value_t::object:
  | 9485|    330|            {
  | 9486|    330|                m_it.object_iterator = m_object->m_value.object->begin();
  | 9487|    330|                break;
  | 9488|      0|            }
  | 9489|       |
  | 9490|      3|            case value_t::array:
  | 9491|      3|            {
  | 9492|      3|                m_it.array_iterator = m_object->m_value.array->begin();
  | 9493|      3|                break;
  | 9494|      0|            }
  | 9495|       |
  | 9496|      0|            case value_t::null:
  | 9497|      0|            {
  | 9498|       |                // set to end so begin()==end() is true: null is empty
  | 9499|      0|                m_it.primitive_iterator.set_end();
  | 9500|      0|                break;
  | 9501|      0|            }
  | 9502|       |
  | 9503|      0|            default:
  | 9504|      0|            {
  | 9505|      0|                m_it.primitive_iterator.set_begin();
  | 9506|      0|                break;
  | 9507|      0|            }
  | 9508|    333|        }
  | 9509|    333|    }
  ------------------
  | _ZN8nlohmann6detail9iter_implIKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE9set_beginEv:
  | 9479|    381|    {
  | 9480|    381|        assert(m_object != nullptr);
  | 9481|       |
  | 9482|      0|        switch (m_object->m_type)
  | 9483|    381|        {
  | 9484|     84|            case value_t::object:
  | 9485|     84|            {
  | 9486|     84|                m_it.object_iterator = m_object->m_value.object->begin();
  | 9487|     84|                break;
  | 9488|      0|            }
  | 9489|       |
  | 9490|    297|            case value_t::array:
  | 9491|    297|            {
  | 9492|    297|                m_it.array_iterator = m_object->m_value.array->begin();
  | 9493|    297|                break;
  | 9494|      0|            }
  | 9495|       |
  | 9496|      0|            case value_t::null:
  | 9497|      0|            {
  | 9498|       |                // set to end so begin()==end() is true: null is empty
  | 9499|      0|                m_it.primitive_iterator.set_end();
  | 9500|      0|                break;
  | 9501|      0|            }
  | 9502|       |
  | 9503|      0|            default:
  | 9504|      0|            {
  | 9505|      0|                m_it.primitive_iterator.set_begin();
  | 9506|      0|                break;
  | 9507|      0|            }
  | 9508|    381|        }
  | 9509|    381|    }
  ------------------
 9510|       |
 9511|       |    /*!
 9512|       |    @brief set the iterator past the last value
 9513|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9514|       |    */
 9515|       |    void set_end() noexcept
 9516|  1.61k|    {
 9517|  1.61k|        assert(m_object != nullptr);
 9518|       |
 9519|      0|        switch (m_object->m_type)
 9520|  1.61k|        {
 9521|  1.31k|            case value_t::object:
 9522|  1.31k|            {
 9523|  1.31k|                m_it.object_iterator = m_object->m_value.object->end();
 9524|  1.31k|                break;
 9525|      0|            }
 9526|       |
 9527|    300|            case value_t::array:
 9528|    300|            {
 9529|    300|                m_it.array_iterator = m_object->m_value.array->end();
 9530|    300|                break;
 9531|      0|            }
 9532|       |
 9533|      0|            default:
 9534|      0|            {
 9535|      0|                m_it.primitive_iterator.set_end();
 9536|      0|                break;
 9537|      0|            }
 9538|  1.61k|        }
 9539|  1.61k|    }
  ------------------
  | _ZN8nlohmann6detail9iter_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE7set_endEv:
  | 9516|  1.23k|    {
  | 9517|  1.23k|        assert(m_object != nullptr);
  | 9518|       |
  | 9519|      0|        switch (m_object->m_type)
  | 9520|  1.23k|        {
  | 9521|  1.22k|            case value_t::object:
  | 9522|  1.22k|            {
  | 9523|  1.22k|                m_it.object_iterator = m_object->m_value.object->end();
  | 9524|  1.22k|                break;
  | 9525|      0|            }
  | 9526|       |
  | 9527|      3|            case value_t::array:
  | 9528|      3|            {
  | 9529|      3|                m_it.array_iterator = m_object->m_value.array->end();
  | 9530|      3|                break;
  | 9531|      0|            }
  | 9532|       |
  | 9533|      0|            default:
  | 9534|      0|            {
  | 9535|      0|                m_it.primitive_iterator.set_end();
  | 9536|      0|                break;
  | 9537|      0|            }
  | 9538|  1.23k|        }
  | 9539|  1.23k|    }
  ------------------
  | _ZN8nlohmann6detail9iter_implIKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE7set_endEv:
  | 9516|    381|    {
  | 9517|    381|        assert(m_object != nullptr);
  | 9518|       |
  | 9519|      0|        switch (m_object->m_type)
  | 9520|    381|        {
  | 9521|     84|            case value_t::object:
  | 9522|     84|            {
  | 9523|     84|                m_it.object_iterator = m_object->m_value.object->end();
  | 9524|     84|                break;
  | 9525|      0|            }
  | 9526|       |
  | 9527|    297|            case value_t::array:
  | 9528|    297|            {
  | 9529|    297|                m_it.array_iterator = m_object->m_value.array->end();
  | 9530|    297|                break;
  | 9531|      0|            }
  | 9532|       |
  | 9533|      0|            default:
  | 9534|      0|            {
  | 9535|      0|                m_it.primitive_iterator.set_end();
  | 9536|      0|                break;
  | 9537|      0|            }
  | 9538|    381|        }
  | 9539|    381|    }
  ------------------
 9540|       |
 9541|       |  public:
 9542|       |    /*!
 9543|       |    @brief return a reference to the value pointed to by the iterator
 9544|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9545|       |    */
 9546|       |    reference operator*() const
 9547|  1.55k|    {
 9548|  1.55k|        assert(m_object != nullptr);
 9549|       |
 9550|      0|        switch (m_object->m_type)
 9551|  1.55k|        {
 9552|  1.19k|            case value_t::object:
 9553|  1.19k|            {
 9554|  1.19k|                assert(m_it.object_iterator != m_object->m_value.object->end());
 9555|      0|                return m_it.object_iterator->second;
 9556|      0|            }
 9557|       |
 9558|    356|            case value_t::array:
 9559|    356|            {
 9560|    356|                assert(m_it.array_iterator != m_object->m_value.array->end());
 9561|      0|                return *m_it.array_iterator;
 9562|      0|            }
 9563|       |
 9564|      0|            case value_t::null:
 9565|      0|                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
 9566|       |
 9567|      0|            default:
 9568|      0|            {
 9569|      0|                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.is_begin()))
 9570|      0|                {
 9571|      0|                    return *m_object;
 9572|      0|                }
 9573|       |
 9574|      0|                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
 9575|      0|            }
 9576|  1.55k|        }
 9577|  1.55k|    }
  ------------------
  | _ZNK8nlohmann6detail9iter_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEdeEv:
  | 9547|  1.01k|    {
  | 9548|  1.01k|        assert(m_object != nullptr);
  | 9549|       |
  | 9550|      0|        switch (m_object->m_type)
  | 9551|  1.01k|        {
  | 9552|    999|            case value_t::object:
  | 9553|    999|            {
  | 9554|    999|                assert(m_it.object_iterator != m_object->m_value.object->end());
  | 9555|      0|                return m_it.object_iterator->second;
  | 9556|      0|            }
  | 9557|       |
  | 9558|     11|            case value_t::array:
  | 9559|     11|            {
  | 9560|     11|                assert(m_it.array_iterator != m_object->m_value.array->end());
  | 9561|      0|                return *m_it.array_iterator;
  | 9562|      0|            }
  | 9563|       |
  | 9564|      0|            case value_t::null:
  | 9565|      0|                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
  | 9566|       |
  | 9567|      0|            default:
  | 9568|      0|            {
  | 9569|      0|                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.is_begin()))
  | 9570|      0|                {
  | 9571|      0|                    return *m_object;
  | 9572|      0|                }
  | 9573|       |
  | 9574|      0|                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
  | 9575|      0|            }
  | 9576|  1.01k|        }
  | 9577|  1.01k|    }
  ------------------
  | _ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEdeEv:
  | 9547|    541|    {
  | 9548|    541|        assert(m_object != nullptr);
  | 9549|       |
  | 9550|      0|        switch (m_object->m_type)
  | 9551|    541|        {
  | 9552|    196|            case value_t::object:
  | 9553|    196|            {
  | 9554|    196|                assert(m_it.object_iterator != m_object->m_value.object->end());
  | 9555|      0|                return m_it.object_iterator->second;
  | 9556|      0|            }
  | 9557|       |
  | 9558|    345|            case value_t::array:
  | 9559|    345|            {
  | 9560|    345|                assert(m_it.array_iterator != m_object->m_value.array->end());
  | 9561|      0|                return *m_it.array_iterator;
  | 9562|      0|            }
  | 9563|       |
  | 9564|      0|            case value_t::null:
  | 9565|      0|                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
  | 9566|       |
  | 9567|      0|            default:
  | 9568|      0|            {
  | 9569|      0|                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.is_begin()))
  | 9570|      0|                {
  | 9571|      0|                    return *m_object;
  | 9572|      0|                }
  | 9573|       |
  | 9574|      0|                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
  | 9575|      0|            }
  | 9576|    541|        }
  | 9577|    541|    }
  ------------------
 9578|       |
 9579|       |    /*!
 9580|       |    @brief dereference the iterator
 9581|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9582|       |    */
 9583|       |    pointer operator->() const
 9584|      0|    {
 9585|      0|        assert(m_object != nullptr);
 9586|       |
 9587|      0|        switch (m_object->m_type)
 9588|      0|        {
 9589|      0|            case value_t::object:
 9590|      0|            {
 9591|      0|                assert(m_it.object_iterator != m_object->m_value.object->end());
 9592|      0|                return &(m_it.object_iterator->second);
 9593|      0|            }
 9594|       |
 9595|      0|            case value_t::array:
 9596|      0|            {
 9597|      0|                assert(m_it.array_iterator != m_object->m_value.array->end());
 9598|      0|                return &*m_it.array_iterator;
 9599|      0|            }
 9600|       |
 9601|      0|            default:
 9602|      0|            {
 9603|      0|                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.is_begin()))
 9604|      0|                {
 9605|      0|                    return m_object;
 9606|      0|                }
 9607|       |
 9608|      0|                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
 9609|      0|            }
 9610|      0|        }
 9611|      0|    }
 9612|       |
 9613|       |    /*!
 9614|       |    @brief post-increment (it++)
 9615|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9616|       |    */
 9617|       |    iter_impl const operator++(int)
 9618|       |    {
 9619|       |        auto result = *this;
 9620|       |        ++(*this);
 9621|       |        return result;
 9622|       |    }
 9623|       |
 9624|       |    /*!
 9625|       |    @brief pre-increment (++it)
 9626|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9627|       |    */
 9628|       |    iter_impl& operator++()
 9629|  1.54k|    {
 9630|  1.54k|        assert(m_object != nullptr);
 9631|       |
 9632|      0|        switch (m_object->m_type)
 9633|  1.54k|        {
 9634|  1.18k|            case value_t::object:
 9635|  1.18k|            {
 9636|  1.18k|                std::advance(m_it.object_iterator, 1);
 9637|  1.18k|                break;
 9638|      0|            }
 9639|       |
 9640|    356|            case value_t::array:
 9641|    356|            {
 9642|    356|                std::advance(m_it.array_iterator, 1);
 9643|    356|                break;
 9644|      0|            }
 9645|       |
 9646|      0|            default:
 9647|      0|            {
 9648|      0|                ++m_it.primitive_iterator;
 9649|      0|                break;
 9650|      0|            }
 9651|  1.54k|        }
 9652|       |
 9653|  1.54k|        return *this;
 9654|  1.54k|    }
  ------------------
  | _ZN8nlohmann6detail9iter_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEppEv:
  | 9629|  1.00k|    {
  | 9630|  1.00k|        assert(m_object != nullptr);
  | 9631|       |
  | 9632|      0|        switch (m_object->m_type)
  | 9633|  1.00k|        {
  | 9634|    989|            case value_t::object:
  | 9635|    989|            {
  | 9636|    989|                std::advance(m_it.object_iterator, 1);
  | 9637|    989|                break;
  | 9638|      0|            }
  | 9639|       |
  | 9640|     11|            case value_t::array:
  | 9641|     11|            {
  | 9642|     11|                std::advance(m_it.array_iterator, 1);
  | 9643|     11|                break;
  | 9644|      0|            }
  | 9645|       |
  | 9646|      0|            default:
  | 9647|      0|            {
  | 9648|      0|                ++m_it.primitive_iterator;
  | 9649|      0|                break;
  | 9650|      0|            }
  | 9651|  1.00k|        }
  | 9652|       |
  | 9653|  1.00k|        return *this;
  | 9654|  1.00k|    }
  ------------------
  | _ZN8nlohmann6detail9iter_implIKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEppEv:
  | 9629|    541|    {
  | 9630|    541|        assert(m_object != nullptr);
  | 9631|       |
  | 9632|      0|        switch (m_object->m_type)
  | 9633|    541|        {
  | 9634|    196|            case value_t::object:
  | 9635|    196|            {
  | 9636|    196|                std::advance(m_it.object_iterator, 1);
  | 9637|    196|                break;
  | 9638|      0|            }
  | 9639|       |
  | 9640|    345|            case value_t::array:
  | 9641|    345|            {
  | 9642|    345|                std::advance(m_it.array_iterator, 1);
  | 9643|    345|                break;
  | 9644|      0|            }
  | 9645|       |
  | 9646|      0|            default:
  | 9647|      0|            {
  | 9648|      0|                ++m_it.primitive_iterator;
  | 9649|      0|                break;
  | 9650|      0|            }
  | 9651|    541|        }
  | 9652|       |
  | 9653|    541|        return *this;
  | 9654|    541|    }
  ------------------
 9655|       |
 9656|       |    /*!
 9657|       |    @brief post-decrement (it--)
 9658|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9659|       |    */
 9660|       |    iter_impl const operator--(int)
 9661|       |    {
 9662|       |        auto result = *this;
 9663|       |        --(*this);
 9664|       |        return result;
 9665|       |    }
 9666|       |
 9667|       |    /*!
 9668|       |    @brief pre-decrement (--it)
 9669|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9670|       |    */
 9671|       |    iter_impl& operator--()
 9672|       |    {
 9673|       |        assert(m_object != nullptr);
 9674|       |
 9675|       |        switch (m_object->m_type)
 9676|       |        {
 9677|       |            case value_t::object:
 9678|       |            {
 9679|       |                std::advance(m_it.object_iterator, -1);
 9680|       |                break;
 9681|       |            }
 9682|       |
 9683|       |            case value_t::array:
 9684|       |            {
 9685|       |                std::advance(m_it.array_iterator, -1);
 9686|       |                break;
 9687|       |            }
 9688|       |
 9689|       |            default:
 9690|       |            {
 9691|       |                --m_it.primitive_iterator;
 9692|       |                break;
 9693|       |            }
 9694|       |        }
 9695|       |
 9696|       |        return *this;
 9697|       |    }
 9698|       |
 9699|       |    /*!
 9700|       |    @brief  comparison: equal
 9701|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9702|       |    */
 9703|       |    bool operator==(const iter_impl& other) const
 9704|  2.25k|    {
 9705|       |        // if objects are not the same, the comparison is undefined
 9706|  2.25k|        if (JSON_HEDLEY_UNLIKELY(m_object != other.m_object))
 9707|      0|        {
 9708|      0|            JSON_THROW(invalid_iterator::create(212, "cannot compare iterators of different containers"));
 9709|      0|        }
 9710|       |
 9711|  2.25k|        assert(m_object != nullptr);
 9712|       |
 9713|      0|        switch (m_object->m_type)
 9714|  2.25k|        {
 9715|  1.59k|            case value_t::object:
 9716|  1.59k|                return (m_it.object_iterator == other.m_it.object_iterator);
 9717|       |
 9718|    656|            case value_t::array:
 9719|    656|                return (m_it.array_iterator == other.m_it.array_iterator);
 9720|       |
 9721|      0|            default:
 9722|      0|                return (m_it.primitive_iterator == other.m_it.primitive_iterator);
 9723|  2.25k|        }
 9724|  2.25k|    }
  ------------------
  | _ZNK8nlohmann6detail9iter_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEeqERKSD_:
  | 9704|  1.33k|    {
  | 9705|       |        // if objects are not the same, the comparison is undefined
  | 9706|  1.33k|        if (JSON_HEDLEY_UNLIKELY(m_object != other.m_object))
  | 9707|      0|        {
  | 9708|      0|            JSON_THROW(invalid_iterator::create(212, "cannot compare iterators of different containers"));
  | 9709|      0|        }
  | 9710|       |
  | 9711|  1.33k|        assert(m_object != nullptr);
  | 9712|       |
  | 9713|      0|        switch (m_object->m_type)
  | 9714|  1.33k|        {
  | 9715|  1.31k|            case value_t::object:
  | 9716|  1.31k|                return (m_it.object_iterator == other.m_it.object_iterator);
  | 9717|       |
  | 9718|     14|            case value_t::array:
  | 9719|     14|                return (m_it.array_iterator == other.m_it.array_iterator);
  | 9720|       |
  | 9721|      0|            default:
  | 9722|      0|                return (m_it.primitive_iterator == other.m_it.primitive_iterator);
  | 9723|  1.33k|        }
  | 9724|  1.33k|    }
  ------------------
  | _ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEeqERKSE_:
  | 9704|    922|    {
  | 9705|       |        // if objects are not the same, the comparison is undefined
  | 9706|    922|        if (JSON_HEDLEY_UNLIKELY(m_object != other.m_object))
  | 9707|      0|        {
  | 9708|      0|            JSON_THROW(invalid_iterator::create(212, "cannot compare iterators of different containers"));
  | 9709|      0|        }
  | 9710|       |
  | 9711|    922|        assert(m_object != nullptr);
  | 9712|       |
  | 9713|      0|        switch (m_object->m_type)
  | 9714|    922|        {
  | 9715|    280|            case value_t::object:
  | 9716|    280|                return (m_it.object_iterator == other.m_it.object_iterator);
  | 9717|       |
  | 9718|    642|            case value_t::array:
  | 9719|    642|                return (m_it.array_iterator == other.m_it.array_iterator);
  | 9720|       |
  | 9721|      0|            default:
  | 9722|      0|                return (m_it.primitive_iterator == other.m_it.primitive_iterator);
  | 9723|    922|        }
  | 9724|    922|    }
  ------------------
 9725|       |
 9726|       |    /*!
 9727|       |    @brief  comparison: not equal
 9728|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9729|       |    */
 9730|       |    bool operator!=(const iter_impl& other) const
 9731|  2.25k|    {
 9732|  2.25k|        return not operator==(other);
 9733|  2.25k|    }
  ------------------
  | _ZNK8nlohmann6detail9iter_implINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEneERKSD_:
  | 9731|  1.33k|    {
  | 9732|  1.33k|        return not operator==(other);
  | 9733|  1.33k|    }
  ------------------
  | _ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEEneERKSE_:
  | 9731|    922|    {
  | 9732|    922|        return not operator==(other);
  | 9733|    922|    }
  ------------------
 9734|       |
 9735|       |    /*!
 9736|       |    @brief  comparison: smaller
 9737|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9738|       |    */
 9739|       |    bool operator<(const iter_impl& other) const
 9740|       |    {
 9741|       |        // if objects are not the same, the comparison is undefined
 9742|       |        if (JSON_HEDLEY_UNLIKELY(m_object != other.m_object))
 9743|       |        {
 9744|       |            JSON_THROW(invalid_iterator::create(212, "cannot compare iterators of different containers"));
 9745|       |        }
 9746|       |
 9747|       |        assert(m_object != nullptr);
 9748|       |
 9749|       |        switch (m_object->m_type)
 9750|       |        {
 9751|       |            case value_t::object:
 9752|       |                JSON_THROW(invalid_iterator::create(213, "cannot compare order of object iterators"));
 9753|       |
 9754|       |            case value_t::array:
 9755|       |                return (m_it.array_iterator < other.m_it.array_iterator);
 9756|       |
 9757|       |            default:
 9758|       |                return (m_it.primitive_iterator < other.m_it.primitive_iterator);
 9759|       |        }
 9760|       |    }
 9761|       |
 9762|       |    /*!
 9763|       |    @brief  comparison: less than or equal
 9764|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9765|       |    */
 9766|       |    bool operator<=(const iter_impl& other) const
 9767|       |    {
 9768|       |        return not other.operator < (*this);
 9769|       |    }
 9770|       |
 9771|       |    /*!
 9772|       |    @brief  comparison: greater than
 9773|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9774|       |    */
 9775|       |    bool operator>(const iter_impl& other) const
 9776|       |    {
 9777|       |        return not operator<=(other);
 9778|       |    }
 9779|       |
 9780|       |    /*!
 9781|       |    @brief  comparison: greater than or equal
 9782|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9783|       |    */
 9784|       |    bool operator>=(const iter_impl& other) const
 9785|       |    {
 9786|       |        return not operator<(other);
 9787|       |    }
 9788|       |
 9789|       |    /*!
 9790|       |    @brief  add to iterator
 9791|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9792|       |    */
 9793|       |    iter_impl& operator+=(difference_type i)
 9794|       |    {
 9795|       |        assert(m_object != nullptr);
 9796|       |
 9797|       |        switch (m_object->m_type)
 9798|       |        {
 9799|       |            case value_t::object:
 9800|       |                JSON_THROW(invalid_iterator::create(209, "cannot use offsets with object iterators"));
 9801|       |
 9802|       |            case value_t::array:
 9803|       |            {
 9804|       |                std::advance(m_it.array_iterator, i);
 9805|       |                break;
 9806|       |            }
 9807|       |
 9808|       |            default:
 9809|       |            {
 9810|       |                m_it.primitive_iterator += i;
 9811|       |                break;
 9812|       |            }
 9813|       |        }
 9814|       |
 9815|       |        return *this;
 9816|       |    }
 9817|       |
 9818|       |    /*!
 9819|       |    @brief  subtract from iterator
 9820|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9821|       |    */
 9822|       |    iter_impl& operator-=(difference_type i)
 9823|       |    {
 9824|       |        return operator+=(-i);
 9825|       |    }
 9826|       |
 9827|       |    /*!
 9828|       |    @brief  add to iterator
 9829|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9830|       |    */
 9831|       |    iter_impl operator+(difference_type i) const
 9832|       |    {
 9833|       |        auto result = *this;
 9834|       |        result += i;
 9835|       |        return result;
 9836|       |    }
 9837|       |
 9838|       |    /*!
 9839|       |    @brief  addition of distance and iterator
 9840|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9841|       |    */
 9842|       |    friend iter_impl operator+(difference_type i, const iter_impl& it)
 9843|       |    {
 9844|       |        auto result = it;
 9845|       |        result += i;
 9846|       |        return result;
 9847|       |    }
 9848|       |
 9849|       |    /*!
 9850|       |    @brief  subtract from iterator
 9851|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9852|       |    */
 9853|       |    iter_impl operator-(difference_type i) const
 9854|       |    {
 9855|       |        auto result = *this;
 9856|       |        result -= i;
 9857|       |        return result;
 9858|       |    }
 9859|       |
 9860|       |    /*!
 9861|       |    @brief  return difference
 9862|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9863|       |    */
 9864|       |    difference_type operator-(const iter_impl& other) const
 9865|       |    {
 9866|       |        assert(m_object != nullptr);
 9867|       |
 9868|       |        switch (m_object->m_type)
 9869|       |        {
 9870|       |            case value_t::object:
 9871|       |                JSON_THROW(invalid_iterator::create(209, "cannot use offsets with object iterators"));
 9872|       |
 9873|       |            case value_t::array:
 9874|       |                return m_it.array_iterator - other.m_it.array_iterator;
 9875|       |
 9876|       |            default:
 9877|       |                return m_it.primitive_iterator - other.m_it.primitive_iterator;
 9878|       |        }
 9879|       |    }
 9880|       |
 9881|       |    /*!
 9882|       |    @brief  access to successor
 9883|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9884|       |    */
 9885|       |    reference operator[](difference_type n) const
 9886|       |    {
 9887|       |        assert(m_object != nullptr);
 9888|       |
 9889|       |        switch (m_object->m_type)
 9890|       |        {
 9891|       |            case value_t::object:
 9892|       |                JSON_THROW(invalid_iterator::create(208, "cannot use operator[] for object iterators"));
 9893|       |
 9894|       |            case value_t::array:
 9895|       |                return *std::next(m_it.array_iterator, n);
 9896|       |
 9897|       |            case value_t::null:
 9898|       |                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
 9899|       |
 9900|       |            default:
 9901|       |            {
 9902|       |                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.get_value() == -n))
 9903|       |                {
 9904|       |                    return *m_object;
 9905|       |                }
 9906|       |
 9907|       |                JSON_THROW(invalid_iterator::create(214, "cannot get value"));
 9908|       |            }
 9909|       |        }
 9910|       |    }
 9911|       |
 9912|       |    /*!
 9913|       |    @brief  return the key of an object iterator
 9914|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9915|       |    */
 9916|       |    const typename object_t::key_type& key() const
 9917|      0|    {
 9918|      0|        assert(m_object != nullptr);
 9919|       |
 9920|      0|        if (JSON_HEDLEY_LIKELY(m_object->is_object()))
 9921|      0|        {
 9922|      0|            return m_it.object_iterator->first;
 9923|      0|        }
 9924|       |
 9925|      0|        JSON_THROW(invalid_iterator::create(207, "cannot use key() for non-object iterators"));
 9926|      0|    }
 9927|       |
 9928|       |    /*!
 9929|       |    @brief  return the value of an iterator
 9930|       |    @pre The iterator is initialized; i.e. `m_object != nullptr`.
 9931|       |    */
 9932|       |    reference value() const
 9933|    908|    {
 9934|    908|        return operator*();
 9935|    908|    }
 9936|       |
 9937|       |  private:
 9938|       |    /// associated JSON instance
 9939|       |    pointer m_object = nullptr;
 9940|       |    /// the actual iterator of the associated instance
 9941|       |    internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it {};
 9942|       |};
 9943|       |} // namespace detail
 9944|       |} // namespace nlohmann
 9945|       |
 9946|       |// #include <nlohmann/detail/iterators/iteration_proxy.hpp>
 9947|       |
 9948|       |// #include <nlohmann/detail/iterators/json_reverse_iterator.hpp>
 9949|       |
 9950|       |
 9951|       |#include <cstddef> // ptrdiff_t
 9952|       |#include <iterator> // reverse_iterator
 9953|       |#include <utility> // declval
 9954|       |
 9955|       |namespace nlohmann
 9956|       |{
 9957|       |namespace detail
 9958|       |{
 9959|       |//////////////////////
 9960|       |// reverse_iterator //
 9961|       |//////////////////////
 9962|       |
 9963|       |/*!
 9964|       |@brief a template for a reverse iterator class
 9965|       |
 9966|       |@tparam Base the base iterator type to reverse. Valid types are @ref
 9967|       |iterator (to create @ref reverse_iterator) and @ref const_iterator (to
 9968|       |create @ref const_reverse_iterator).
 9969|       |
 9970|       |@requirement The class satisfies the following concept requirements:
 9971|       |-
 9972|       |[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
 9973|       |  The iterator that can be moved can be moved in both directions (i.e.
 9974|       |  incremented and decremented).
 9975|       |- [OutputIterator](https://en.cppreference.com/w/cpp/named_req/OutputIterator):
 9976|       |  It is possible to write to the pointed-to element (only if @a Base is
 9977|       |  @ref iterator).
 9978|       |
 9979|       |@since version 1.0.0
 9980|       |*/
 9981|       |template<typename Base>
 9982|       |class json_reverse_iterator : public std::reverse_iterator<Base>
 9983|       |{
 9984|       |  public:
 9985|       |    using difference_type = std::ptrdiff_t;
 9986|       |    /// shortcut to the reverse iterator adapter
 9987|       |    using base_iterator = std::reverse_iterator<Base>;
 9988|       |    /// the reference type for the pointed-to element
 9989|       |    using reference = typename Base::reference;
 9990|       |
 9991|       |    /// create reverse iterator from iterator
 9992|       |    explicit json_reverse_iterator(const typename base_iterator::iterator_type& it) noexcept
 9993|       |        : base_iterator(it) {}
 9994|       |
 9995|       |    /// create reverse iterator from base class
 9996|       |    explicit json_reverse_iterator(const base_iterator& it) noexcept : base_iterator(it) {}
 9997|       |
 9998|       |    /// post-increment (it++)
 9999|       |    json_reverse_iterator const operator++(int)
10000|       |    {
10001|       |        return static_cast<json_reverse_iterator>(base_iterator::operator++(1));
10002|       |    }
10003|       |
10004|       |    /// pre-increment (++it)
10005|       |    json_reverse_iterator& operator++()
10006|       |    {
10007|       |        return static_cast<json_reverse_iterator&>(base_iterator::operator++());
10008|       |    }
10009|       |
10010|       |    /// post-decrement (it--)
10011|       |    json_reverse_iterator const operator--(int)
10012|       |    {
10013|       |        return static_cast<json_reverse_iterator>(base_iterator::operator--(1));
10014|       |    }
10015|       |
10016|       |    /// pre-decrement (--it)
10017|       |    json_reverse_iterator& operator--()
10018|       |    {
10019|       |        return static_cast<json_reverse_iterator&>(base_iterator::operator--());
10020|       |    }
10021|       |
10022|       |    /// add to iterator
10023|       |    json_reverse_iterator& operator+=(difference_type i)
10024|       |    {
10025|       |        return static_cast<json_reverse_iterator&>(base_iterator::operator+=(i));
10026|       |    }
10027|       |
10028|       |    /// add to iterator
10029|       |    json_reverse_iterator operator+(difference_type i) const
10030|       |    {
10031|       |        return static_cast<json_reverse_iterator>(base_iterator::operator+(i));
10032|       |    }
10033|       |
10034|       |    /// subtract from iterator
10035|       |    json_reverse_iterator operator-(difference_type i) const
10036|       |    {
10037|       |        return static_cast<json_reverse_iterator>(base_iterator::operator-(i));
10038|       |    }
10039|       |
10040|       |    /// return difference
10041|       |    difference_type operator-(const json_reverse_iterator& other) const
10042|       |    {
10043|       |        return base_iterator(*this) - base_iterator(other);
10044|       |    }
10045|       |
10046|       |    /// access to successor
10047|       |    reference operator[](difference_type n) const
10048|       |    {
10049|       |        return *(this->operator+(n));
10050|       |    }
10051|       |
10052|       |    /// return the key of an object iterator
10053|       |    auto key() const -> decltype(std::declval<Base>().key())
10054|       |    {
10055|       |        auto it = --this->base();
10056|       |        return it.key();
10057|       |    }
10058|       |
10059|       |    /// return the value of an iterator
10060|       |    reference value() const
10061|       |    {
10062|       |        auto it = --this->base();
10063|       |        return it.operator * ();
10064|       |    }
10065|       |};
10066|       |}  // namespace detail
10067|       |}  // namespace nlohmann
10068|       |
10069|       |// #include <nlohmann/detail/iterators/primitive_iterator.hpp>
10070|       |
10071|       |// #include <nlohmann/detail/json_pointer.hpp>
10072|       |
10073|       |
10074|       |#include <algorithm> // all_of
10075|       |#include <cassert> // assert
10076|       |#include <cctype> // isdigit
10077|       |#include <numeric> // accumulate
10078|       |#include <string> // string
10079|       |#include <utility> // move
10080|       |#include <vector> // vector
10081|       |
10082|       |// #include <nlohmann/detail/exceptions.hpp>
10083|       |
10084|       |// #include <nlohmann/detail/macro_scope.hpp>
10085|       |
10086|       |// #include <nlohmann/detail/value_t.hpp>
10087|       |
10088|       |
10089|       |namespace nlohmann
10090|       |{
10091|       |template<typename BasicJsonType>
10092|       |class json_pointer
10093|       |{
10094|       |    // allow basic_json to access private members
10095|       |    NLOHMANN_BASIC_JSON_TPL_DECLARATION
10096|       |    friend class basic_json;
10097|       |
10098|       |  public:
10099|       |    /*!
10100|       |    @brief create JSON pointer
10101|       |
10102|       |    Create a JSON pointer according to the syntax described in
10103|       |    [Section 3 of RFC6901](https://tools.ietf.org/html/rfc6901#section-3).
10104|       |
10105|       |    @param[in] s  string representing the JSON pointer; if omitted, the empty
10106|       |                  string is assumed which references the whole JSON value
10107|       |
10108|       |    @throw parse_error.107 if the given JSON pointer @a s is nonempty and does
10109|       |                           not begin with a slash (`/`); see example below
10110|       |
10111|       |    @throw parse_error.108 if a tilde (`~`) in the given JSON pointer @a s is
10112|       |    not followed by `0` (representing `~`) or `1` (representing `/`); see
10113|       |    example below
10114|       |
10115|       |    @liveexample{The example shows the construction several valid JSON pointers
10116|       |    as well as the exceptional behavior.,json_pointer}
10117|       |
10118|       |    @since version 2.0.0
10119|       |    */
10120|       |    explicit json_pointer(const std::string& s = "")
10121|       |        : reference_tokens(split(s))
10122|       |    {}
10123|       |
10124|       |    /*!
10125|       |    @brief return a string representation of the JSON pointer
10126|       |
10127|       |    @invariant For each JSON pointer `ptr`, it holds:
10128|       |    @code {.cpp}
10129|       |    ptr == json_pointer(ptr.to_string());
10130|       |    @endcode
10131|       |
10132|       |    @return a string representation of the JSON pointer
10133|       |
10134|       |    @liveexample{The example shows the result of `to_string`.,json_pointer__to_string}
10135|       |
10136|       |    @since version 2.0.0
10137|       |    */
10138|       |    std::string to_string() const
10139|       |    {
10140|       |        return std::accumulate(reference_tokens.begin(), reference_tokens.end(),
10141|       |                               std::string{},
10142|       |                               [](const std::string & a, const std::string & b)
10143|       |        {
10144|       |            return a + "/" + escape(b);
10145|       |        });
10146|       |    }
10147|       |
10148|       |    /// @copydoc to_string()
10149|       |    operator std::string() const
10150|       |    {
10151|       |        return to_string();
10152|       |    }
10153|       |
10154|       |    /*!
10155|       |    @brief append another JSON pointer at the end of this JSON pointer
10156|       |
10157|       |    @param[in] ptr  JSON pointer to append
10158|       |    @return JSON pointer with @a ptr appended
10159|       |
10160|       |    @liveexample{The example shows the usage of `operator/=`.,json_pointer__operator_add}
10161|       |
10162|       |    @complexity Linear in the length of @a ptr.
10163|       |
10164|       |    @sa @ref operator/=(std::string) to append a reference token
10165|       |    @sa @ref operator/=(std::size_t) to append an array index
10166|       |    @sa @ref operator/(const json_pointer&, const json_pointer&) for a binary operator
10167|       |
10168|       |    @since version 3.6.0
10169|       |    */
10170|       |    json_pointer& operator/=(const json_pointer& ptr)
10171|       |    {
10172|       |        reference_tokens.insert(reference_tokens.end(),
10173|       |                                ptr.reference_tokens.begin(),
10174|       |                                ptr.reference_tokens.end());
10175|       |        return *this;
10176|       |    }
10177|       |
10178|       |    /*!
10179|       |    @brief append an unescaped reference token at the end of this JSON pointer
10180|       |
10181|       |    @param[in] token  reference token to append
10182|       |    @return JSON pointer with @a token appended without escaping @a token
10183|       |
10184|       |    @liveexample{The example shows the usage of `operator/=`.,json_pointer__operator_add}
10185|       |
10186|       |    @complexity Amortized constant.
10187|       |
10188|       |    @sa @ref operator/=(const json_pointer&) to append a JSON pointer
10189|       |    @sa @ref operator/=(std::size_t) to append an array index
10190|       |    @sa @ref operator/(const json_pointer&, std::size_t) for a binary operator
10191|       |
10192|       |    @since version 3.6.0
10193|       |    */
10194|       |    json_pointer& operator/=(std::string token)
10195|       |    {
10196|       |        push_back(std::move(token));
10197|       |        return *this;
10198|       |    }
10199|       |
10200|       |    /*!
10201|       |    @brief append an array index at the end of this JSON pointer
10202|       |
10203|       |    @param[in] array_index  array index to append
10204|       |    @return JSON pointer with @a array_index appended
10205|       |
10206|       |    @liveexample{The example shows the usage of `operator/=`.,json_pointer__operator_add}
10207|       |
10208|       |    @complexity Amortized constant.
10209|       |
10210|       |    @sa @ref operator/=(const json_pointer&) to append a JSON pointer
10211|       |    @sa @ref operator/=(std::string) to append a reference token
10212|       |    @sa @ref operator/(const json_pointer&, std::string) for a binary operator
10213|       |
10214|       |    @since version 3.6.0
10215|       |    */
10216|       |    json_pointer& operator/=(std::size_t array_index)
10217|       |    {
10218|       |        return *this /= std::to_string(array_index);
10219|       |    }
10220|       |
10221|       |    /*!
10222|       |    @brief create a new JSON pointer by appending the right JSON pointer at the end of the left JSON pointer
10223|       |
10224|       |    @param[in] lhs  JSON pointer
10225|       |    @param[in] rhs  JSON pointer
10226|       |    @return a new JSON pointer with @a rhs appended to @a lhs
10227|       |
10228|       |    @liveexample{The example shows the usage of `operator/`.,json_pointer__operator_add_binary}
10229|       |
10230|       |    @complexity Linear in the length of @a lhs and @a rhs.
10231|       |
10232|       |    @sa @ref operator/=(const json_pointer&) to append a JSON pointer
10233|       |
10234|       |    @since version 3.6.0
10235|       |    */
10236|       |    friend json_pointer operator/(const json_pointer& lhs,
10237|       |                                  const json_pointer& rhs)
10238|       |    {
10239|       |        return json_pointer(lhs) /= rhs;
10240|       |    }
10241|       |
10242|       |    /*!
10243|       |    @brief create a new JSON pointer by appending the unescaped token at the end of the JSON pointer
10244|       |
10245|       |    @param[in] ptr  JSON pointer
10246|       |    @param[in] token  reference token
10247|       |    @return a new JSON pointer with unescaped @a token appended to @a ptr
10248|       |
10249|       |    @liveexample{The example shows the usage of `operator/`.,json_pointer__operator_add_binary}
10250|       |
10251|       |    @complexity Linear in the length of @a ptr.
10252|       |
10253|       |    @sa @ref operator/=(std::string) to append a reference token
10254|       |
10255|       |    @since version 3.6.0
10256|       |    */
10257|       |    friend json_pointer operator/(const json_pointer& ptr, std::string token)
10258|       |    {
10259|       |        return json_pointer(ptr) /= std::move(token);
10260|       |    }
10261|       |
10262|       |    /*!
10263|       |    @brief create a new JSON pointer by appending the array-index-token at the end of the JSON pointer
10264|       |
10265|       |    @param[in] ptr  JSON pointer
10266|       |    @param[in] array_index  array index
10267|       |    @return a new JSON pointer with @a array_index appended to @a ptr
10268|       |
10269|       |    @liveexample{The example shows the usage of `operator/`.,json_pointer__operator_add_binary}
10270|       |
10271|       |    @complexity Linear in the length of @a ptr.
10272|       |
10273|       |    @sa @ref operator/=(std::size_t) to append an array index
10274|       |
10275|       |    @since version 3.6.0
10276|       |    */
10277|       |    friend json_pointer operator/(const json_pointer& ptr, std::size_t array_index)
10278|       |    {
10279|       |        return json_pointer(ptr) /= array_index;
10280|       |    }
10281|       |
10282|       |    /*!
10283|       |    @brief returns the parent of this JSON pointer
10284|       |
10285|       |    @return parent of this JSON pointer; in case this JSON pointer is the root,
10286|       |            the root itself is returned
10287|       |
10288|       |    @complexity Linear in the length of the JSON pointer.
10289|       |
10290|       |    @liveexample{The example shows the result of `parent_pointer` for different
10291|       |    JSON Pointers.,json_pointer__parent_pointer}
10292|       |
10293|       |    @since version 3.6.0
10294|       |    */
10295|       |    json_pointer parent_pointer() const
10296|       |    {
10297|       |        if (empty())
10298|       |        {
10299|       |            return *this;
10300|       |        }
10301|       |
10302|       |        json_pointer res = *this;
10303|       |        res.pop_back();
10304|       |        return res;
10305|       |    }
10306|       |
10307|       |    /*!
10308|       |    @brief remove last reference token
10309|       |
10310|       |    @pre not `empty()`
10311|       |
10312|       |    @liveexample{The example shows the usage of `pop_back`.,json_pointer__pop_back}
10313|       |
10314|       |    @complexity Constant.
10315|       |
10316|       |    @throw out_of_range.405 if JSON pointer has no parent
10317|       |
10318|       |    @since version 3.6.0
10319|       |    */
10320|       |    void pop_back()
10321|       |    {
10322|       |        if (JSON_HEDLEY_UNLIKELY(empty()))
10323|       |        {
10324|       |            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent"));
10325|       |        }
10326|       |
10327|       |        reference_tokens.pop_back();
10328|       |    }
10329|       |
10330|       |    /*!
10331|       |    @brief return last reference token
10332|       |
10333|       |    @pre not `empty()`
10334|       |    @return last reference token
10335|       |
10336|       |    @liveexample{The example shows the usage of `back`.,json_pointer__back}
10337|       |
10338|       |    @complexity Constant.
10339|       |
10340|       |    @throw out_of_range.405 if JSON pointer has no parent
10341|       |
10342|       |    @since version 3.6.0
10343|       |    */
10344|       |    const std::string& back() const
10345|       |    {
10346|       |        if (JSON_HEDLEY_UNLIKELY(empty()))
10347|       |        {
10348|       |            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent"));
10349|       |        }
10350|       |
10351|       |        return reference_tokens.back();
10352|       |    }
10353|       |
10354|       |    /*!
10355|       |    @brief append an unescaped token at the end of the reference pointer
10356|       |
10357|       |    @param[in] token  token to add
10358|       |
10359|       |    @complexity Amortized constant.
10360|       |
10361|       |    @liveexample{The example shows the result of `push_back` for different
10362|       |    JSON Pointers.,json_pointer__push_back}
10363|       |
10364|       |    @since version 3.6.0
10365|       |    */
10366|       |    void push_back(const std::string& token)
10367|       |    {
10368|       |        reference_tokens.push_back(token);
10369|       |    }
10370|       |
10371|       |    /// @copydoc push_back(const std::string&)
10372|       |    void push_back(std::string&& token)
10373|       |    {
10374|       |        reference_tokens.push_back(std::move(token));
10375|       |    }
10376|       |
10377|       |    /*!
10378|       |    @brief return whether pointer points to the root document
10379|       |
10380|       |    @return true iff the JSON pointer points to the root document
10381|       |
10382|       |    @complexity Constant.
10383|       |
10384|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
10385|       |
10386|       |    @liveexample{The example shows the result of `empty` for different JSON
10387|       |    Pointers.,json_pointer__empty}
10388|       |
10389|       |    @since version 3.6.0
10390|       |    */
10391|       |    bool empty() const noexcept
10392|       |    {
10393|       |        return reference_tokens.empty();
10394|       |    }
10395|       |
10396|       |  private:
10397|       |    /*!
10398|       |    @param[in] s  reference token to be converted into an array index
10399|       |
10400|       |    @return integer representation of @a s
10401|       |
10402|       |    @throw out_of_range.404 if string @a s could not be converted to an integer
10403|       |    */
10404|       |    static int array_index(const std::string& s)
10405|       |    {
10406|       |        std::size_t processed_chars = 0;
10407|       |        const int res = std::stoi(s, &processed_chars);
10408|       |
10409|       |        // check if the string was completely read
10410|       |        if (JSON_HEDLEY_UNLIKELY(processed_chars != s.size()))
10411|       |        {
10412|       |            JSON_THROW(detail::out_of_range::create(404, "unresolved reference token '" + s + "'"));
10413|       |        }
10414|       |
10415|       |        return res;
10416|       |    }
10417|       |
10418|       |    json_pointer top() const
10419|       |    {
10420|       |        if (JSON_HEDLEY_UNLIKELY(empty()))
10421|       |        {
10422|       |            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent"));
10423|       |        }
10424|       |
10425|       |        json_pointer result = *this;
10426|       |        result.reference_tokens = {reference_tokens[0]};
10427|       |        return result;
10428|       |    }
10429|       |
10430|       |    /*!
10431|       |    @brief create and return a reference to the pointed to value
10432|       |
10433|       |    @complexity Linear in the number of reference tokens.
10434|       |
10435|       |    @throw parse_error.109 if array index is not a number
10436|       |    @throw type_error.313 if value cannot be unflattened
10437|       |    */
10438|       |    BasicJsonType& get_and_create(BasicJsonType& j) const
10439|       |    {
10440|       |        using size_type = typename BasicJsonType::size_type;
10441|       |        auto result = &j;
10442|       |
10443|       |        // in case no reference tokens exist, return a reference to the JSON value
10444|       |        // j which will be overwritten by a primitive value
10445|       |        for (const auto& reference_token : reference_tokens)
10446|       |        {
10447|       |            switch (result->type())
10448|       |            {
10449|       |                case detail::value_t::null:
10450|       |                {
10451|       |                    if (reference_token == "0")
10452|       |                    {
10453|       |                        // start a new array if reference token is 0
10454|       |                        result = &result->operator[](0);
10455|       |                    }
10456|       |                    else
10457|       |                    {
10458|       |                        // start a new object otherwise
10459|       |                        result = &result->operator[](reference_token);
10460|       |                    }
10461|       |                    break;
10462|       |                }
10463|       |
10464|       |                case detail::value_t::object:
10465|       |                {
10466|       |                    // create an entry in the object
10467|       |                    result = &result->operator[](reference_token);
10468|       |                    break;
10469|       |                }
10470|       |
10471|       |                case detail::value_t::array:
10472|       |                {
10473|       |                    // create an entry in the array
10474|       |                    JSON_TRY
10475|       |                    {
10476|       |                        result = &result->operator[](static_cast<size_type>(array_index(reference_token)));
10477|       |                    }
10478|       |                    JSON_CATCH(std::invalid_argument&)
10479|       |                    {
10480|       |                        JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
10481|       |                    }
10482|       |                    break;
10483|       |                }
10484|       |
10485|       |                /*
10486|       |                The following code is only reached if there exists a reference
10487|       |                token _and_ the current value is primitive. In this case, we have
10488|       |                an error situation, because primitive values may only occur as
10489|       |                single value; that is, with an empty list of reference tokens.
10490|       |                */
10491|       |                default:
10492|       |                    JSON_THROW(detail::type_error::create(313, "invalid value to unflatten"));
10493|       |            }
10494|       |        }
10495|       |
10496|       |        return *result;
10497|       |    }
10498|       |
10499|       |    /*!
10500|       |    @brief return a reference to the pointed to value
10501|       |
10502|       |    @note This version does not throw if a value is not present, but tries to
10503|       |          create nested values instead. For instance, calling this function
10504|       |          with pointer `"/this/that"` on a null value is equivalent to calling
10505|       |          `operator[]("this").operator[]("that")` on that value, effectively
10506|       |          changing the null value to an object.
10507|       |
10508|       |    @param[in] ptr  a JSON value
10509|       |
10510|       |    @return reference to the JSON value pointed to by the JSON pointer
10511|       |
10512|       |    @complexity Linear in the length of the JSON pointer.
10513|       |
10514|       |    @throw parse_error.106   if an array index begins with '0'
10515|       |    @throw parse_error.109   if an array index was not a number
10516|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
10517|       |    */
10518|       |    BasicJsonType& get_unchecked(BasicJsonType* ptr) const
10519|       |    {
10520|       |        using size_type = typename BasicJsonType::size_type;
10521|       |        for (const auto& reference_token : reference_tokens)
10522|       |        {
10523|       |            // convert null values to arrays or objects before continuing
10524|       |            if (ptr->is_null())
10525|       |            {
10526|       |                // check if reference token is a number
10527|       |                const bool nums =
10528|       |                    std::all_of(reference_token.begin(), reference_token.end(),
10529|       |                                [](const unsigned char x)
10530|       |                {
10531|       |                    return std::isdigit(x);
10532|       |                });
10533|       |
10534|       |                // change value to array for numbers or "-" or to object otherwise
10535|       |                *ptr = (nums or reference_token == "-")
10536|       |                       ? detail::value_t::array
10537|       |                       : detail::value_t::object;
10538|       |            }
10539|       |
10540|       |            switch (ptr->type())
10541|       |            {
10542|       |                case detail::value_t::object:
10543|       |                {
10544|       |                    // use unchecked object access
10545|       |                    ptr = &ptr->operator[](reference_token);
10546|       |                    break;
10547|       |                }
10548|       |
10549|       |                case detail::value_t::array:
10550|       |                {
10551|       |                    // error condition (cf. RFC 6901, Sect. 4)
10552|       |                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() > 1 and reference_token[0] == '0'))
10553|       |                    {
10554|       |                        JSON_THROW(detail::parse_error::create(106, 0,
10555|       |                                                               "array index '" + reference_token +
10556|       |                                                               "' must not begin with '0'"));
10557|       |                    }
10558|       |
10559|       |                    if (reference_token == "-")
10560|       |                    {
10561|       |                        // explicitly treat "-" as index beyond the end
10562|       |                        ptr = &ptr->operator[](ptr->m_value.array->size());
10563|       |                    }
10564|       |                    else
10565|       |                    {
10566|       |                        // convert array index to number; unchecked access
10567|       |                        JSON_TRY
10568|       |                        {
10569|       |                            ptr = &ptr->operator[](
10570|       |                                static_cast<size_type>(array_index(reference_token)));
10571|       |                        }
10572|       |                        JSON_CATCH(std::invalid_argument&)
10573|       |                        {
10574|       |                            JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
10575|       |                        }
10576|       |                    }
10577|       |                    break;
10578|       |                }
10579|       |
10580|       |                default:
10581|       |                    JSON_THROW(detail::out_of_range::create(404, "unresolved reference token '" + reference_token + "'"));
10582|       |            }
10583|       |        }
10584|       |
10585|       |        return *ptr;
10586|       |    }
10587|       |
10588|       |    /*!
10589|       |    @throw parse_error.106   if an array index begins with '0'
10590|       |    @throw parse_error.109   if an array index was not a number
10591|       |    @throw out_of_range.402  if the array index '-' is used
10592|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
10593|       |    */
10594|       |    BasicJsonType& get_checked(BasicJsonType* ptr) const
10595|       |    {
10596|       |        using size_type = typename BasicJsonType::size_type;
10597|       |        for (const auto& reference_token : reference_tokens)
10598|       |        {
10599|       |            switch (ptr->type())
10600|       |            {
10601|       |                case detail::value_t::object:
10602|       |                {
10603|       |                    // note: at performs range check
10604|       |                    ptr = &ptr->at(reference_token);
10605|       |                    break;
10606|       |                }
10607|       |
10608|       |                case detail::value_t::array:
10609|       |                {
10610|       |                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
10611|       |                    {
10612|       |                        // "-" always fails the range check
10613|       |                        JSON_THROW(detail::out_of_range::create(402,
10614|       |                                                                "array index '-' (" + std::to_string(ptr->m_value.array->size()) +
10615|       |                                                                ") is out of range"));
10616|       |                    }
10617|       |
10618|       |                    // error condition (cf. RFC 6901, Sect. 4)
10619|       |                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() > 1 and reference_token[0] == '0'))
10620|       |                    {
10621|       |                        JSON_THROW(detail::parse_error::create(106, 0,
10622|       |                                                               "array index '" + reference_token +
10623|       |                                                               "' must not begin with '0'"));
10624|       |                    }
10625|       |
10626|       |                    // note: at performs range check
10627|       |                    JSON_TRY
10628|       |                    {
10629|       |                        ptr = &ptr->at(static_cast<size_type>(array_index(reference_token)));
10630|       |                    }
10631|       |                    JSON_CATCH(std::invalid_argument&)
10632|       |                    {
10633|       |                        JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
10634|       |                    }
10635|       |                    break;
10636|       |                }
10637|       |
10638|       |                default:
10639|       |                    JSON_THROW(detail::out_of_range::create(404, "unresolved reference token '" + reference_token + "'"));
10640|       |            }
10641|       |        }
10642|       |
10643|       |        return *ptr;
10644|       |    }
10645|       |
10646|       |    /*!
10647|       |    @brief return a const reference to the pointed to value
10648|       |
10649|       |    @param[in] ptr  a JSON value
10650|       |
10651|       |    @return const reference to the JSON value pointed to by the JSON
10652|       |    pointer
10653|       |
10654|       |    @throw parse_error.106   if an array index begins with '0'
10655|       |    @throw parse_error.109   if an array index was not a number
10656|       |    @throw out_of_range.402  if the array index '-' is used
10657|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
10658|       |    */
10659|       |    const BasicJsonType& get_unchecked(const BasicJsonType* ptr) const
10660|       |    {
10661|       |        using size_type = typename BasicJsonType::size_type;
10662|       |        for (const auto& reference_token : reference_tokens)
10663|       |        {
10664|       |            switch (ptr->type())
10665|       |            {
10666|       |                case detail::value_t::object:
10667|       |                {
10668|       |                    // use unchecked object access
10669|       |                    ptr = &ptr->operator[](reference_token);
10670|       |                    break;
10671|       |                }
10672|       |
10673|       |                case detail::value_t::array:
10674|       |                {
10675|       |                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
10676|       |                    {
10677|       |                        // "-" cannot be used for const access
10678|       |                        JSON_THROW(detail::out_of_range::create(402,
10679|       |                                                                "array index '-' (" + std::to_string(ptr->m_value.array->size()) +
10680|       |                                                                ") is out of range"));
10681|       |                    }
10682|       |
10683|       |                    // error condition (cf. RFC 6901, Sect. 4)
10684|       |                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() > 1 and reference_token[0] == '0'))
10685|       |                    {
10686|       |                        JSON_THROW(detail::parse_error::create(106, 0,
10687|       |                                                               "array index '" + reference_token +
10688|       |                                                               "' must not begin with '0'"));
10689|       |                    }
10690|       |
10691|       |                    // use unchecked array access
10692|       |                    JSON_TRY
10693|       |                    {
10694|       |                        ptr = &ptr->operator[](
10695|       |                            static_cast<size_type>(array_index(reference_token)));
10696|       |                    }
10697|       |                    JSON_CATCH(std::invalid_argument&)
10698|       |                    {
10699|       |                        JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
10700|       |                    }
10701|       |                    break;
10702|       |                }
10703|       |
10704|       |                default:
10705|       |                    JSON_THROW(detail::out_of_range::create(404, "unresolved reference token '" + reference_token + "'"));
10706|       |            }
10707|       |        }
10708|       |
10709|       |        return *ptr;
10710|       |    }
10711|       |
10712|       |    /*!
10713|       |    @throw parse_error.106   if an array index begins with '0'
10714|       |    @throw parse_error.109   if an array index was not a number
10715|       |    @throw out_of_range.402  if the array index '-' is used
10716|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
10717|       |    */
10718|       |    const BasicJsonType& get_checked(const BasicJsonType* ptr) const
10719|       |    {
10720|       |        using size_type = typename BasicJsonType::size_type;
10721|       |        for (const auto& reference_token : reference_tokens)
10722|       |        {
10723|       |            switch (ptr->type())
10724|       |            {
10725|       |                case detail::value_t::object:
10726|       |                {
10727|       |                    // note: at performs range check
10728|       |                    ptr = &ptr->at(reference_token);
10729|       |                    break;
10730|       |                }
10731|       |
10732|       |                case detail::value_t::array:
10733|       |                {
10734|       |                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
10735|       |                    {
10736|       |                        // "-" always fails the range check
10737|       |                        JSON_THROW(detail::out_of_range::create(402,
10738|       |                                                                "array index '-' (" + std::to_string(ptr->m_value.array->size()) +
10739|       |                                                                ") is out of range"));
10740|       |                    }
10741|       |
10742|       |                    // error condition (cf. RFC 6901, Sect. 4)
10743|       |                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() > 1 and reference_token[0] == '0'))
10744|       |                    {
10745|       |                        JSON_THROW(detail::parse_error::create(106, 0,
10746|       |                                                               "array index '" + reference_token +
10747|       |                                                               "' must not begin with '0'"));
10748|       |                    }
10749|       |
10750|       |                    // note: at performs range check
10751|       |                    JSON_TRY
10752|       |                    {
10753|       |                        ptr = &ptr->at(static_cast<size_type>(array_index(reference_token)));
10754|       |                    }
10755|       |                    JSON_CATCH(std::invalid_argument&)
10756|       |                    {
10757|       |                        JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
10758|       |                    }
10759|       |                    break;
10760|       |                }
10761|       |
10762|       |                default:
10763|       |                    JSON_THROW(detail::out_of_range::create(404, "unresolved reference token '" + reference_token + "'"));
10764|       |            }
10765|       |        }
10766|       |
10767|       |        return *ptr;
10768|       |    }
10769|       |
10770|       |    /*!
10771|       |    @throw parse_error.106   if an array index begins with '0'
10772|       |    @throw parse_error.109   if an array index was not a number
10773|       |    */
10774|       |    bool contains(const BasicJsonType* ptr) const
10775|       |    {
10776|       |        using size_type = typename BasicJsonType::size_type;
10777|       |        for (const auto& reference_token : reference_tokens)
10778|       |        {
10779|       |            switch (ptr->type())
10780|       |            {
10781|       |                case detail::value_t::object:
10782|       |                {
10783|       |                    if (not ptr->contains(reference_token))
10784|       |                    {
10785|       |                        // we did not find the key in the object
10786|       |                        return false;
10787|       |                    }
10788|       |
10789|       |                    ptr = &ptr->operator[](reference_token);
10790|       |                    break;
10791|       |                }
10792|       |
10793|       |                case detail::value_t::array:
10794|       |                {
10795|       |                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
10796|       |                    {
10797|       |                        // "-" always fails the range check
10798|       |                        return false;
10799|       |                    }
10800|       |
10801|       |                    // error condition (cf. RFC 6901, Sect. 4)
10802|       |                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() > 1 and reference_token[0] == '0'))
10803|       |                    {
10804|       |                        JSON_THROW(detail::parse_error::create(106, 0,
10805|       |                                                               "array index '" + reference_token +
10806|       |                                                               "' must not begin with '0'"));
10807|       |                    }
10808|       |
10809|       |                    JSON_TRY
10810|       |                    {
10811|       |                        const auto idx = static_cast<size_type>(array_index(reference_token));
10812|       |                        if (idx >= ptr->size())
10813|       |                        {
10814|       |                            // index out of range
10815|       |                            return false;
10816|       |                        }
10817|       |
10818|       |                        ptr = &ptr->operator[](idx);
10819|       |                        break;
10820|       |                    }
10821|       |                    JSON_CATCH(std::invalid_argument&)
10822|       |                    {
10823|       |                        JSON_THROW(detail::parse_error::create(109, 0, "array index '" + reference_token + "' is not a number"));
10824|       |                    }
10825|       |                    break;
10826|       |                }
10827|       |
10828|       |                default:
10829|       |                {
10830|       |                    // we do not expect primitive values if there is still a
10831|       |                    // reference token to process
10832|       |                    return false;
10833|       |                }
10834|       |            }
10835|       |        }
10836|       |
10837|       |        // no reference token left means we found a primitive value
10838|       |        return true;
10839|       |    }
10840|       |
10841|       |    /*!
10842|       |    @brief split the string input to reference tokens
10843|       |
10844|       |    @note This function is only called by the json_pointer constructor.
10845|       |          All exceptions below are documented there.
10846|       |
10847|       |    @throw parse_error.107  if the pointer is not empty or begins with '/'
10848|       |    @throw parse_error.108  if character '~' is not followed by '0' or '1'
10849|       |    */
10850|       |    static std::vector<std::string> split(const std::string& reference_string)
10851|      0|    {
10852|      0|        std::vector<std::string> result;
10853|      0|
10854|      0|        // special case: empty reference string -> no reference tokens
10855|      0|        if (reference_string.empty())
10856|      0|        {
10857|      0|            return result;
10858|      0|        }
10859|      0|
10860|      0|        // check if nonempty reference string begins with slash
10861|      0|        if (JSON_HEDLEY_UNLIKELY(reference_string[0] != '/'))
10862|      0|        {
10863|      0|            JSON_THROW(detail::parse_error::create(107, 1,
10864|      0|                                                   "JSON pointer must be empty or begin with '/' - was: '" +
10865|      0|                                                   reference_string + "'"));
10866|      0|        }
10867|      0|
10868|      0|        // extract the reference tokens:
10869|      0|        // - slash: position of the last read slash (or end of string)
10870|      0|        // - start: position after the previous slash
10871|      0|        for (
10872|      0|            // search for the first slash after the first character
10873|      0|            std::size_t slash = reference_string.find_first_of('/', 1),
10874|      0|            // set the beginning of the first reference token
10875|      0|            start = 1;
10876|      0|            // we can stop if start == 0 (if slash == std::string::npos)
10877|      0|            start != 0;
10878|      0|            // set the beginning of the next reference token
10879|      0|            // (will eventually be 0 if slash == std::string::npos)
10880|      0|            start = (slash == std::string::npos) ? 0 : slash + 1,
10881|      0|            // find next slash
10882|      0|            slash = reference_string.find_first_of('/', start))
10883|      0|        {
10884|      0|            // use the text between the beginning of the reference token
10885|      0|            // (start) and the last slash (slash).
10886|      0|            auto reference_token = reference_string.substr(start, slash - start);
10887|      0|
10888|      0|            // check reference tokens are properly escaped
10889|      0|            for (std::size_t pos = reference_token.find_first_of('~');
10890|      0|                    pos != std::string::npos;
10891|      0|                    pos = reference_token.find_first_of('~', pos + 1))
10892|      0|            {
10893|      0|                assert(reference_token[pos] == '~');
10894|      0|
10895|      0|                // ~ must be followed by 0 or 1
10896|      0|                if (JSON_HEDLEY_UNLIKELY(pos == reference_token.size() - 1 or
10897|      0|                                         (reference_token[pos + 1] != '0' and
10898|      0|                                          reference_token[pos + 1] != '1')))
10899|      0|                {
10900|      0|                    JSON_THROW(detail::parse_error::create(108, 0, "escape character '~' must be followed with '0' or '1'"));
10901|      0|                }
10902|      0|            }
10903|      0|
10904|      0|            // finally, store the reference token
10905|      0|            unescape(reference_token);
10906|      0|            result.push_back(reference_token);
10907|      0|        }
10908|      0|
10909|      0|        return result;
10910|      0|    }
10911|       |
10912|       |    /*!
10913|       |    @brief replace all occurrences of a substring by another string
10914|       |
10915|       |    @param[in,out] s  the string to manipulate; changed so that all
10916|       |                   occurrences of @a f are replaced with @a t
10917|       |    @param[in]     f  the substring to replace with @a t
10918|       |    @param[in]     t  the string to replace @a f
10919|       |
10920|       |    @pre The search string @a f must not be empty. **This precondition is
10921|       |    enforced with an assertion.**
10922|       |
10923|       |    @since version 2.0.0
10924|       |    */
10925|       |    static void replace_substring(std::string& s, const std::string& f,
10926|       |                                  const std::string& t)
10927|      0|    {
10928|      0|        assert(not f.empty());
10929|      0|        for (auto pos = s.find(f);                // find first occurrence of f
10930|      0|                pos != std::string::npos;         // make sure f was found
10931|      0|                s.replace(pos, f.size(), t),      // replace with t, and
10932|      0|                pos = s.find(f, pos + t.size()))  // find next occurrence of f
10933|      0|        {}
10934|      0|    }
10935|       |
10936|       |    /// escape "~" to "~0" and "/" to "~1"
10937|       |    static std::string escape(std::string s)
10938|       |    {
10939|       |        replace_substring(s, "~", "~0");
10940|       |        replace_substring(s, "/", "~1");
10941|       |        return s;
10942|       |    }
10943|       |
10944|       |    /// unescape "~1" to tilde and "~0" to slash (order is important!)
10945|       |    static void unescape(std::string& s)
10946|      0|    {
10947|      0|        replace_substring(s, "~1", "/");
10948|      0|        replace_substring(s, "~0", "~");
10949|      0|    }
10950|       |
10951|       |    /*!
10952|       |    @param[in] reference_string  the reference string to the current value
10953|       |    @param[in] value             the value to consider
10954|       |    @param[in,out] result        the result object to insert values to
10955|       |
10956|       |    @note Empty objects or arrays are flattened to `null`.
10957|       |    */
10958|       |    static void flatten(const std::string& reference_string,
10959|       |                        const BasicJsonType& value,
10960|       |                        BasicJsonType& result)
10961|       |    {
10962|       |        switch (value.type())
10963|       |        {
10964|       |            case detail::value_t::array:
10965|       |            {
10966|       |                if (value.m_value.array->empty())
10967|       |                {
10968|       |                    // flatten empty array as null
10969|       |                    result[reference_string] = nullptr;
10970|       |                }
10971|       |                else
10972|       |                {
10973|       |                    // iterate array and use index as reference string
10974|       |                    for (std::size_t i = 0; i < value.m_value.array->size(); ++i)
10975|       |                    {
10976|       |                        flatten(reference_string + "/" + std::to_string(i),
10977|       |                                value.m_value.array->operator[](i), result);
10978|       |                    }
10979|       |                }
10980|       |                break;
10981|       |            }
10982|       |
10983|       |            case detail::value_t::object:
10984|       |            {
10985|       |                if (value.m_value.object->empty())
10986|       |                {
10987|       |                    // flatten empty object as null
10988|       |                    result[reference_string] = nullptr;
10989|       |                }
10990|       |                else
10991|       |                {
10992|       |                    // iterate object and use keys as reference string
10993|       |                    for (const auto& element : *value.m_value.object)
10994|       |                    {
10995|       |                        flatten(reference_string + "/" + escape(element.first), element.second, result);
10996|       |                    }
10997|       |                }
10998|       |                break;
10999|       |            }
11000|       |
11001|       |            default:
11002|       |            {
11003|       |                // add primitive value with its reference string
11004|       |                result[reference_string] = value;
11005|       |                break;
11006|       |            }
11007|       |        }
11008|       |    }
11009|       |
11010|       |    /*!
11011|       |    @param[in] value  flattened JSON
11012|       |
11013|       |    @return unflattened JSON
11014|       |
11015|       |    @throw parse_error.109 if array index is not a number
11016|       |    @throw type_error.314  if value is not an object
11017|       |    @throw type_error.315  if object values are not primitive
11018|       |    @throw type_error.313  if value cannot be unflattened
11019|       |    */
11020|       |    static BasicJsonType
11021|       |    unflatten(const BasicJsonType& value)
11022|       |    {
11023|       |        if (JSON_HEDLEY_UNLIKELY(not value.is_object()))
11024|       |        {
11025|       |            JSON_THROW(detail::type_error::create(314, "only objects can be unflattened"));
11026|       |        }
11027|       |
11028|       |        BasicJsonType result;
11029|       |
11030|       |        // iterate the JSON object values
11031|       |        for (const auto& element : *value.m_value.object)
11032|       |        {
11033|       |            if (JSON_HEDLEY_UNLIKELY(not element.second.is_primitive()))
11034|       |            {
11035|       |                JSON_THROW(detail::type_error::create(315, "values in object must be primitive"));
11036|       |            }
11037|       |
11038|       |            // assign value to reference pointed to by JSON pointer; Note that if
11039|       |            // the JSON pointer is "" (i.e., points to the whole value), function
11040|       |            // get_and_create returns a reference to result itself. An assignment
11041|       |            // will then create a primitive value.
11042|       |            json_pointer(element.first).get_and_create(result) = element.second;
11043|       |        }
11044|       |
11045|       |        return result;
11046|       |    }
11047|       |
11048|       |    /*!
11049|       |    @brief compares two JSON pointers for equality
11050|       |
11051|       |    @param[in] lhs  JSON pointer to compare
11052|       |    @param[in] rhs  JSON pointer to compare
11053|       |    @return whether @a lhs is equal to @a rhs
11054|       |
11055|       |    @complexity Linear in the length of the JSON pointer
11056|       |
11057|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
11058|       |    */
11059|       |    friend bool operator==(json_pointer const& lhs,
11060|       |                           json_pointer const& rhs) noexcept
11061|       |    {
11062|       |        return lhs.reference_tokens == rhs.reference_tokens;
11063|       |    }
11064|       |
11065|       |    /*!
11066|       |    @brief compares two JSON pointers for inequality
11067|       |
11068|       |    @param[in] lhs  JSON pointer to compare
11069|       |    @param[in] rhs  JSON pointer to compare
11070|       |    @return whether @a lhs is not equal @a rhs
11071|       |
11072|       |    @complexity Linear in the length of the JSON pointer
11073|       |
11074|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
11075|       |    */
11076|       |    friend bool operator!=(json_pointer const& lhs,
11077|       |                           json_pointer const& rhs) noexcept
11078|       |    {
11079|       |        return not (lhs == rhs);
11080|       |    }
11081|       |
11082|       |    /// the reference tokens
11083|       |    std::vector<std::string> reference_tokens;
11084|       |};
11085|       |}  // namespace nlohmann
11086|       |
11087|       |// #include <nlohmann/detail/json_ref.hpp>
11088|       |
11089|       |
11090|       |#include <initializer_list>
11091|       |#include <utility>
11092|       |
11093|       |// #include <nlohmann/detail/meta/type_traits.hpp>
11094|       |
11095|       |
11096|       |namespace nlohmann
11097|       |{
11098|       |namespace detail
11099|       |{
11100|       |template<typename BasicJsonType>
11101|       |class json_ref
11102|       |{
11103|       |  public:
11104|       |    using value_type = BasicJsonType;
11105|       |
11106|       |    json_ref(value_type&& value)
11107|       |        : owned_value(std::move(value)), value_ref(&owned_value), is_rvalue(true)
11108|       |    {}
11109|       |
11110|       |    json_ref(const value_type& value)
11111|       |        : value_ref(const_cast<value_type*>(&value)), is_rvalue(false)
11112|       |    {}
11113|       |
11114|       |    json_ref(std::initializer_list<json_ref> init)
11115|       |        : owned_value(init), value_ref(&owned_value), is_rvalue(true)
11116|       |    {}
11117|       |
11118|       |    template <
11119|       |        class... Args,
11120|       |        enable_if_t<std::is_constructible<value_type, Args...>::value, int> = 0 >
11121|       |    json_ref(Args && ... args)
11122|       |        : owned_value(std::forward<Args>(args)...), value_ref(&owned_value),
11123|       |          is_rvalue(true) {}
11124|       |
11125|       |    // class should be movable only
11126|       |    json_ref(json_ref&&) = default;
11127|       |    json_ref(const json_ref&) = delete;
11128|       |    json_ref& operator=(const json_ref&) = delete;
11129|       |    json_ref& operator=(json_ref&&) = delete;
11130|       |    ~json_ref() = default;
11131|       |
11132|       |    value_type moved_or_copied() const
11133|       |    {
11134|       |        if (is_rvalue)
11135|       |        {
11136|       |            return std::move(*value_ref);
11137|       |        }
11138|       |        return *value_ref;
11139|       |    }
11140|       |
11141|       |    value_type const& operator*() const
11142|       |    {
11143|       |        return *static_cast<value_type const*>(value_ref);
11144|       |    }
11145|       |
11146|       |    value_type const* operator->() const
11147|       |    {
11148|       |        return static_cast<value_type const*>(value_ref);
11149|       |    }
11150|       |
11151|       |  private:
11152|       |    mutable value_type owned_value = nullptr;
11153|       |    value_type* value_ref = nullptr;
11154|       |    const bool is_rvalue;
11155|       |};
11156|       |}  // namespace detail
11157|       |}  // namespace nlohmann
11158|       |
11159|       |// #include <nlohmann/detail/macro_scope.hpp>
11160|       |
11161|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
11162|       |
11163|       |// #include <nlohmann/detail/meta/type_traits.hpp>
11164|       |
11165|       |// #include <nlohmann/detail/output/binary_writer.hpp>
11166|       |
11167|       |
11168|       |#include <algorithm> // reverse
11169|       |#include <array> // array
11170|       |#include <cstdint> // uint8_t, uint16_t, uint32_t, uint64_t
11171|       |#include <cstring> // memcpy
11172|       |#include <limits> // numeric_limits
11173|       |#include <string> // string
11174|       |
11175|       |// #include <nlohmann/detail/input/binary_reader.hpp>
11176|       |
11177|       |// #include <nlohmann/detail/macro_scope.hpp>
11178|       |
11179|       |// #include <nlohmann/detail/output/output_adapters.hpp>
11180|       |
11181|       |
11182|       |#include <algorithm> // copy
11183|       |#include <cstddef> // size_t
11184|       |#include <ios> // streamsize
11185|       |#include <iterator> // back_inserter
11186|       |#include <memory> // shared_ptr, make_shared
11187|       |#include <ostream> // basic_ostream
11188|       |#include <string> // basic_string
11189|       |#include <vector> // vector
11190|       |// #include <nlohmann/detail/macro_scope.hpp>
11191|       |
11192|       |
11193|       |namespace nlohmann
11194|       |{
11195|       |namespace detail
11196|       |{
11197|       |/// abstract output adapter interface
11198|       |template<typename CharType> struct output_adapter_protocol
11199|       |{
11200|       |    virtual void write_character(CharType c) = 0;
11201|       |    virtual void write_characters(const CharType* s, std::size_t length) = 0;
11202|     88|    virtual ~output_adapter_protocol() = default;
11203|       |};
11204|       |
11205|       |/// a type to simplify interfaces
11206|       |template<typename CharType>
11207|       |using output_adapter_t = std::shared_ptr<output_adapter_protocol<CharType>>;
11208|       |
11209|       |/// output adapter for byte vectors
11210|       |template<typename CharType>
11211|       |class output_vector_adapter : public output_adapter_protocol<CharType>
11212|       |{
11213|       |  public:
11214|       |    explicit output_vector_adapter(std::vector<CharType>& vec) noexcept
11215|       |        : v(vec)
11216|       |    {}
11217|       |
11218|       |    void write_character(CharType c) override
11219|       |    {
11220|       |        v.push_back(c);
11221|       |    }
11222|       |
11223|       |    JSON_HEDLEY_NON_NULL(2)
11224|       |    void write_characters(const CharType* s, std::size_t length) override
11225|       |    {
11226|       |        std::copy(s, s + length, std::back_inserter(v));
11227|       |    }
11228|       |
11229|       |  private:
11230|       |    std::vector<CharType>& v;
11231|       |};
11232|       |
11233|       |/// output adapter for output streams
11234|       |template<typename CharType>
11235|       |class output_stream_adapter : public output_adapter_protocol<CharType>
11236|       |{
11237|       |  public:
11238|       |    explicit output_stream_adapter(std::basic_ostream<CharType>& s) noexcept
11239|       |        : stream(s)
11240|     25|    {}
11241|       |
11242|       |    void write_character(CharType c) override
11243|  1.62k|    {
11244|  1.62k|        stream.put(c);
11245|  1.62k|    }
11246|       |
11247|       |    JSON_HEDLEY_NON_NULL(2)
11248|       |    void write_characters(const CharType* s, std::size_t length) override
11249|  2.43k|    {
11250|  2.43k|        stream.write(s, static_cast<std::streamsize>(length));
11251|  2.43k|    }
11252|       |
11253|       |  private:
11254|       |    std::basic_ostream<CharType>& stream;
11255|       |};
11256|       |
11257|       |/// output adapter for basic_string
11258|       |template<typename CharType, typename StringType = std::basic_string<CharType>>
11259|       |class output_string_adapter : public output_adapter_protocol<CharType>
11260|       |{
11261|       |  public:
11262|       |    explicit output_string_adapter(StringType& s) noexcept
11263|       |        : str(s)
11264|     63|    {}
11265|       |
11266|       |    void write_character(CharType c) override
11267|  4.52k|    {
11268|  4.52k|        str.push_back(c);
11269|  4.52k|    }
11270|       |
11271|       |    JSON_HEDLEY_NON_NULL(2)
11272|       |    void write_characters(const CharType* s, std::size_t length) override
11273|  8.73k|    {
11274|  8.73k|        str.append(s, length);
11275|  8.73k|    }
11276|       |
11277|       |  private:
11278|       |    StringType& str;
11279|       |};
11280|       |
11281|       |template<typename CharType, typename StringType = std::basic_string<CharType>>
11282|       |class output_adapter
11283|       |{
11284|       |  public:
11285|       |    output_adapter(std::vector<CharType>& vec)
11286|       |        : oa(std::make_shared<output_vector_adapter<CharType>>(vec)) {}
11287|       |
11288|       |    output_adapter(std::basic_ostream<CharType>& s)
11289|     25|        : oa(std::make_shared<output_stream_adapter<CharType>>(s)) {}
11290|       |
11291|       |    output_adapter(StringType& s)
11292|     63|        : oa(std::make_shared<output_string_adapter<CharType, StringType>>(s)) {}
11293|       |
11294|       |    operator output_adapter_t<CharType>()
11295|     88|    {
11296|     88|        return oa;
11297|     88|    }
11298|       |
11299|       |  private:
11300|       |    output_adapter_t<CharType> oa = nullptr;
11301|       |};
11302|       |}  // namespace detail
11303|       |}  // namespace nlohmann
11304|       |
11305|       |
11306|       |namespace nlohmann
11307|       |{
11308|       |namespace detail
11309|       |{
11310|       |///////////////////
11311|       |// binary writer //
11312|       |///////////////////
11313|       |
11314|       |/*!
11315|       |@brief serialization to CBOR and MessagePack values
11316|       |*/
11317|       |template<typename BasicJsonType, typename CharType>
11318|       |class binary_writer
11319|       |{
11320|       |    using string_t = typename BasicJsonType::string_t;
11321|       |
11322|       |  public:
11323|       |    /*!
11324|       |    @brief create a binary writer
11325|       |
11326|       |    @param[in] adapter  output adapter to write to
11327|       |    */
11328|       |    explicit binary_writer(output_adapter_t<CharType> adapter) : oa(adapter)
11329|       |    {
11330|       |        assert(oa);
11331|       |    }
11332|       |
11333|       |    /*!
11334|       |    @param[in] j  JSON value to serialize
11335|       |    @pre       j.type() == value_t::object
11336|       |    */
11337|       |    void write_bson(const BasicJsonType& j)
11338|       |    {
11339|       |        switch (j.type())
11340|       |        {
11341|       |            case value_t::object:
11342|       |            {
11343|       |                write_bson_object(*j.m_value.object);
11344|       |                break;
11345|       |            }
11346|       |
11347|       |            default:
11348|       |            {
11349|       |                JSON_THROW(type_error::create(317, "to serialize to BSON, top-level type must be object, but is " + std::string(j.type_name())));
11350|       |            }
11351|       |        }
11352|       |    }
11353|       |
11354|       |    /*!
11355|       |    @param[in] j  JSON value to serialize
11356|       |    */
11357|       |    void write_cbor(const BasicJsonType& j)
11358|       |    {
11359|       |        switch (j.type())
11360|       |        {
11361|       |            case value_t::null:
11362|       |            {
11363|       |                oa->write_character(to_char_type(0xF6));
11364|       |                break;
11365|       |            }
11366|       |
11367|       |            case value_t::boolean:
11368|       |            {
11369|       |                oa->write_character(j.m_value.boolean
11370|       |                                    ? to_char_type(0xF5)
11371|       |                                    : to_char_type(0xF4));
11372|       |                break;
11373|       |            }
11374|       |
11375|       |            case value_t::number_integer:
11376|       |            {
11377|       |                if (j.m_value.number_integer >= 0)
11378|       |                {
11379|       |                    // CBOR does not differentiate between positive signed
11380|       |                    // integers and unsigned integers. Therefore, we used the
11381|       |                    // code from the value_t::number_unsigned case here.
11382|       |                    if (j.m_value.number_integer <= 0x17)
11383|       |                    {
11384|       |                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
11385|       |                    }
11386|       |                    else if (j.m_value.number_integer <= (std::numeric_limits<std::uint8_t>::max)())
11387|       |                    {
11388|       |                        oa->write_character(to_char_type(0x18));
11389|       |                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
11390|       |                    }
11391|       |                    else if (j.m_value.number_integer <= (std::numeric_limits<std::uint16_t>::max)())
11392|       |                    {
11393|       |                        oa->write_character(to_char_type(0x19));
11394|       |                        write_number(static_cast<std::uint16_t>(j.m_value.number_integer));
11395|       |                    }
11396|       |                    else if (j.m_value.number_integer <= (std::numeric_limits<std::uint32_t>::max)())
11397|       |                    {
11398|       |                        oa->write_character(to_char_type(0x1A));
11399|       |                        write_number(static_cast<std::uint32_t>(j.m_value.number_integer));
11400|       |                    }
11401|       |                    else
11402|       |                    {
11403|       |                        oa->write_character(to_char_type(0x1B));
11404|       |                        write_number(static_cast<std::uint64_t>(j.m_value.number_integer));
11405|       |                    }
11406|       |                }
11407|       |                else
11408|       |                {
11409|       |                    // The conversions below encode the sign in the first
11410|       |                    // byte, and the value is converted to a positive number.
11411|       |                    const auto positive_number = -1 - j.m_value.number_integer;
11412|       |                    if (j.m_value.number_integer >= -24)
11413|       |                    {
11414|       |                        write_number(static_cast<std::uint8_t>(0x20 + positive_number));
11415|       |                    }
11416|       |                    else if (positive_number <= (std::numeric_limits<std::uint8_t>::max)())
11417|       |                    {
11418|       |                        oa->write_character(to_char_type(0x38));
11419|       |                        write_number(static_cast<std::uint8_t>(positive_number));
11420|       |                    }
11421|       |                    else if (positive_number <= (std::numeric_limits<std::uint16_t>::max)())
11422|       |                    {
11423|       |                        oa->write_character(to_char_type(0x39));
11424|       |                        write_number(static_cast<std::uint16_t>(positive_number));
11425|       |                    }
11426|       |                    else if (positive_number <= (std::numeric_limits<std::uint32_t>::max)())
11427|       |                    {
11428|       |                        oa->write_character(to_char_type(0x3A));
11429|       |                        write_number(static_cast<std::uint32_t>(positive_number));
11430|       |                    }
11431|       |                    else
11432|       |                    {
11433|       |                        oa->write_character(to_char_type(0x3B));
11434|       |                        write_number(static_cast<std::uint64_t>(positive_number));
11435|       |                    }
11436|       |                }
11437|       |                break;
11438|       |            }
11439|       |
11440|       |            case value_t::number_unsigned:
11441|       |            {
11442|       |                if (j.m_value.number_unsigned <= 0x17)
11443|       |                {
11444|       |                    write_number(static_cast<std::uint8_t>(j.m_value.number_unsigned));
11445|       |                }
11446|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())
11447|       |                {
11448|       |                    oa->write_character(to_char_type(0x18));
11449|       |                    write_number(static_cast<std::uint8_t>(j.m_value.number_unsigned));
11450|       |                }
11451|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())
11452|       |                {
11453|       |                    oa->write_character(to_char_type(0x19));
11454|       |                    write_number(static_cast<std::uint16_t>(j.m_value.number_unsigned));
11455|       |                }
11456|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())
11457|       |                {
11458|       |                    oa->write_character(to_char_type(0x1A));
11459|       |                    write_number(static_cast<std::uint32_t>(j.m_value.number_unsigned));
11460|       |                }
11461|       |                else
11462|       |                {
11463|       |                    oa->write_character(to_char_type(0x1B));
11464|       |                    write_number(static_cast<std::uint64_t>(j.m_value.number_unsigned));
11465|       |                }
11466|       |                break;
11467|       |            }
11468|       |
11469|       |            case value_t::number_float:
11470|       |            {
11471|       |                oa->write_character(get_cbor_float_prefix(j.m_value.number_float));
11472|       |                write_number(j.m_value.number_float);
11473|       |                break;
11474|       |            }
11475|       |
11476|       |            case value_t::string:
11477|       |            {
11478|       |                // step 1: write control byte and the string length
11479|       |                const auto N = j.m_value.string->size();
11480|       |                if (N <= 0x17)
11481|       |                {
11482|       |                    write_number(static_cast<std::uint8_t>(0x60 + N));
11483|       |                }
11484|       |                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
11485|       |                {
11486|       |                    oa->write_character(to_char_type(0x78));
11487|       |                    write_number(static_cast<std::uint8_t>(N));
11488|       |                }
11489|       |                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
11490|       |                {
11491|       |                    oa->write_character(to_char_type(0x79));
11492|       |                    write_number(static_cast<std::uint16_t>(N));
11493|       |                }
11494|       |                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
11495|       |                {
11496|       |                    oa->write_character(to_char_type(0x7A));
11497|       |                    write_number(static_cast<std::uint32_t>(N));
11498|       |                }
11499|       |                // LCOV_EXCL_START
11500|       |                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
11501|       |                {
11502|       |                    oa->write_character(to_char_type(0x7B));
11503|       |                    write_number(static_cast<std::uint64_t>(N));
11504|       |                }
11505|       |                // LCOV_EXCL_STOP
11506|       |
11507|       |                // step 2: write the string
11508|       |                oa->write_characters(
11509|       |                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
11510|       |                    j.m_value.string->size());
11511|       |                break;
11512|       |            }
11513|       |
11514|       |            case value_t::array:
11515|       |            {
11516|       |                // step 1: write control byte and the array size
11517|       |                const auto N = j.m_value.array->size();
11518|       |                if (N <= 0x17)
11519|       |                {
11520|       |                    write_number(static_cast<std::uint8_t>(0x80 + N));
11521|       |                }
11522|       |                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
11523|       |                {
11524|       |                    oa->write_character(to_char_type(0x98));
11525|       |                    write_number(static_cast<std::uint8_t>(N));
11526|       |                }
11527|       |                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
11528|       |                {
11529|       |                    oa->write_character(to_char_type(0x99));
11530|       |                    write_number(static_cast<std::uint16_t>(N));
11531|       |                }
11532|       |                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
11533|       |                {
11534|       |                    oa->write_character(to_char_type(0x9A));
11535|       |                    write_number(static_cast<std::uint32_t>(N));
11536|       |                }
11537|       |                // LCOV_EXCL_START
11538|       |                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
11539|       |                {
11540|       |                    oa->write_character(to_char_type(0x9B));
11541|       |                    write_number(static_cast<std::uint64_t>(N));
11542|       |                }
11543|       |                // LCOV_EXCL_STOP
11544|       |
11545|       |                // step 2: write each element
11546|       |                for (const auto& el : *j.m_value.array)
11547|       |                {
11548|       |                    write_cbor(el);
11549|       |                }
11550|       |                break;
11551|       |            }
11552|       |
11553|       |            case value_t::object:
11554|       |            {
11555|       |                // step 1: write control byte and the object size
11556|       |                const auto N = j.m_value.object->size();
11557|       |                if (N <= 0x17)
11558|       |                {
11559|       |                    write_number(static_cast<std::uint8_t>(0xA0 + N));
11560|       |                }
11561|       |                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
11562|       |                {
11563|       |                    oa->write_character(to_char_type(0xB8));
11564|       |                    write_number(static_cast<std::uint8_t>(N));
11565|       |                }
11566|       |                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
11567|       |                {
11568|       |                    oa->write_character(to_char_type(0xB9));
11569|       |                    write_number(static_cast<std::uint16_t>(N));
11570|       |                }
11571|       |                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
11572|       |                {
11573|       |                    oa->write_character(to_char_type(0xBA));
11574|       |                    write_number(static_cast<std::uint32_t>(N));
11575|       |                }
11576|       |                // LCOV_EXCL_START
11577|       |                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
11578|       |                {
11579|       |                    oa->write_character(to_char_type(0xBB));
11580|       |                    write_number(static_cast<std::uint64_t>(N));
11581|       |                }
11582|       |                // LCOV_EXCL_STOP
11583|       |
11584|       |                // step 2: write each element
11585|       |                for (const auto& el : *j.m_value.object)
11586|       |                {
11587|       |                    write_cbor(el.first);
11588|       |                    write_cbor(el.second);
11589|       |                }
11590|       |                break;
11591|       |            }
11592|       |
11593|       |            default:
11594|       |                break;
11595|       |        }
11596|       |    }
11597|       |
11598|       |    /*!
11599|       |    @param[in] j  JSON value to serialize
11600|       |    */
11601|       |    void write_msgpack(const BasicJsonType& j)
11602|       |    {
11603|       |        switch (j.type())
11604|       |        {
11605|       |            case value_t::null: // nil
11606|       |            {
11607|       |                oa->write_character(to_char_type(0xC0));
11608|       |                break;
11609|       |            }
11610|       |
11611|       |            case value_t::boolean: // true and false
11612|       |            {
11613|       |                oa->write_character(j.m_value.boolean
11614|       |                                    ? to_char_type(0xC3)
11615|       |                                    : to_char_type(0xC2));
11616|       |                break;
11617|       |            }
11618|       |
11619|       |            case value_t::number_integer:
11620|       |            {
11621|       |                if (j.m_value.number_integer >= 0)
11622|       |                {
11623|       |                    // MessagePack does not differentiate between positive
11624|       |                    // signed integers and unsigned integers. Therefore, we used
11625|       |                    // the code from the value_t::number_unsigned case here.
11626|       |                    if (j.m_value.number_unsigned < 128)
11627|       |                    {
11628|       |                        // positive fixnum
11629|       |                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
11630|       |                    }
11631|       |                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())
11632|       |                    {
11633|       |                        // uint 8
11634|       |                        oa->write_character(to_char_type(0xCC));
11635|       |                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
11636|       |                    }
11637|       |                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())
11638|       |                    {
11639|       |                        // uint 16
11640|       |                        oa->write_character(to_char_type(0xCD));
11641|       |                        write_number(static_cast<std::uint16_t>(j.m_value.number_integer));
11642|       |                    }
11643|       |                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())
11644|       |                    {
11645|       |                        // uint 32
11646|       |                        oa->write_character(to_char_type(0xCE));
11647|       |                        write_number(static_cast<std::uint32_t>(j.m_value.number_integer));
11648|       |                    }
11649|       |                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())
11650|       |                    {
11651|       |                        // uint 64
11652|       |                        oa->write_character(to_char_type(0xCF));
11653|       |                        write_number(static_cast<std::uint64_t>(j.m_value.number_integer));
11654|       |                    }
11655|       |                }
11656|       |                else
11657|       |                {
11658|       |                    if (j.m_value.number_integer >= -32)
11659|       |                    {
11660|       |                        // negative fixnum
11661|       |                        write_number(static_cast<std::int8_t>(j.m_value.number_integer));
11662|       |                    }
11663|       |                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int8_t>::min)() and
11664|       |                             j.m_value.number_integer <= (std::numeric_limits<std::int8_t>::max)())
11665|       |                    {
11666|       |                        // int 8
11667|       |                        oa->write_character(to_char_type(0xD0));
11668|       |                        write_number(static_cast<std::int8_t>(j.m_value.number_integer));
11669|       |                    }
11670|       |                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int16_t>::min)() and
11671|       |                             j.m_value.number_integer <= (std::numeric_limits<std::int16_t>::max)())
11672|       |                    {
11673|       |                        // int 16
11674|       |                        oa->write_character(to_char_type(0xD1));
11675|       |                        write_number(static_cast<std::int16_t>(j.m_value.number_integer));
11676|       |                    }
11677|       |                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int32_t>::min)() and
11678|       |                             j.m_value.number_integer <= (std::numeric_limits<std::int32_t>::max)())
11679|       |                    {
11680|       |                        // int 32
11681|       |                        oa->write_character(to_char_type(0xD2));
11682|       |                        write_number(static_cast<std::int32_t>(j.m_value.number_integer));
11683|       |                    }
11684|       |                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int64_t>::min)() and
11685|       |                             j.m_value.number_integer <= (std::numeric_limits<std::int64_t>::max)())
11686|       |                    {
11687|       |                        // int 64
11688|       |                        oa->write_character(to_char_type(0xD3));
11689|       |                        write_number(static_cast<std::int64_t>(j.m_value.number_integer));
11690|       |                    }
11691|       |                }
11692|       |                break;
11693|       |            }
11694|       |
11695|       |            case value_t::number_unsigned:
11696|       |            {
11697|       |                if (j.m_value.number_unsigned < 128)
11698|       |                {
11699|       |                    // positive fixnum
11700|       |                    write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
11701|       |                }
11702|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())
11703|       |                {
11704|       |                    // uint 8
11705|       |                    oa->write_character(to_char_type(0xCC));
11706|       |                    write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
11707|       |                }
11708|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())
11709|       |                {
11710|       |                    // uint 16
11711|       |                    oa->write_character(to_char_type(0xCD));
11712|       |                    write_number(static_cast<std::uint16_t>(j.m_value.number_integer));
11713|       |                }
11714|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())
11715|       |                {
11716|       |                    // uint 32
11717|       |                    oa->write_character(to_char_type(0xCE));
11718|       |                    write_number(static_cast<std::uint32_t>(j.m_value.number_integer));
11719|       |                }
11720|       |                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())
11721|       |                {
11722|       |                    // uint 64
11723|       |                    oa->write_character(to_char_type(0xCF));
11724|       |                    write_number(static_cast<std::uint64_t>(j.m_value.number_integer));
11725|       |                }
11726|       |                break;
11727|       |            }
11728|       |
11729|       |            case value_t::number_float:
11730|       |            {
11731|       |                oa->write_character(get_msgpack_float_prefix(j.m_value.number_float));
11732|       |                write_number(j.m_value.number_float);
11733|       |                break;
11734|       |            }
11735|       |
11736|       |            case value_t::string:
11737|       |            {
11738|       |                // step 1: write control byte and the string length
11739|       |                const auto N = j.m_value.string->size();
11740|       |                if (N <= 31)
11741|       |                {
11742|       |                    // fixstr
11743|       |                    write_number(static_cast<std::uint8_t>(0xA0 | N));
11744|       |                }
11745|       |                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
11746|       |                {
11747|       |                    // str 8
11748|       |                    oa->write_character(to_char_type(0xD9));
11749|       |                    write_number(static_cast<std::uint8_t>(N));
11750|       |                }
11751|       |                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
11752|       |                {
11753|       |                    // str 16
11754|       |                    oa->write_character(to_char_type(0xDA));
11755|       |                    write_number(static_cast<std::uint16_t>(N));
11756|       |                }
11757|       |                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
11758|       |                {
11759|       |                    // str 32
11760|       |                    oa->write_character(to_char_type(0xDB));
11761|       |                    write_number(static_cast<std::uint32_t>(N));
11762|       |                }
11763|       |
11764|       |                // step 2: write the string
11765|       |                oa->write_characters(
11766|       |                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
11767|       |                    j.m_value.string->size());
11768|       |                break;
11769|       |            }
11770|       |
11771|       |            case value_t::array:
11772|       |            {
11773|       |                // step 1: write control byte and the array size
11774|       |                const auto N = j.m_value.array->size();
11775|       |                if (N <= 15)
11776|       |                {
11777|       |                    // fixarray
11778|       |                    write_number(static_cast<std::uint8_t>(0x90 | N));
11779|       |                }
11780|       |                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
11781|       |                {
11782|       |                    // array 16
11783|       |                    oa->write_character(to_char_type(0xDC));
11784|       |                    write_number(static_cast<std::uint16_t>(N));
11785|       |                }
11786|       |                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
11787|       |                {
11788|       |                    // array 32
11789|       |                    oa->write_character(to_char_type(0xDD));
11790|       |                    write_number(static_cast<std::uint32_t>(N));
11791|       |                }
11792|       |
11793|       |                // step 2: write each element
11794|       |                for (const auto& el : *j.m_value.array)
11795|       |                {
11796|       |                    write_msgpack(el);
11797|       |                }
11798|       |                break;
11799|       |            }
11800|       |
11801|       |            case value_t::object:
11802|       |            {
11803|       |                // step 1: write control byte and the object size
11804|       |                const auto N = j.m_value.object->size();
11805|       |                if (N <= 15)
11806|       |                {
11807|       |                    // fixmap
11808|       |                    write_number(static_cast<std::uint8_t>(0x80 | (N & 0xF)));
11809|       |                }
11810|       |                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
11811|       |                {
11812|       |                    // map 16
11813|       |                    oa->write_character(to_char_type(0xDE));
11814|       |                    write_number(static_cast<std::uint16_t>(N));
11815|       |                }
11816|       |                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
11817|       |                {
11818|       |                    // map 32
11819|       |                    oa->write_character(to_char_type(0xDF));
11820|       |                    write_number(static_cast<std::uint32_t>(N));
11821|       |                }
11822|       |
11823|       |                // step 2: write each element
11824|       |                for (const auto& el : *j.m_value.object)
11825|       |                {
11826|       |                    write_msgpack(el.first);
11827|       |                    write_msgpack(el.second);
11828|       |                }
11829|       |                break;
11830|       |            }
11831|       |
11832|       |            default:
11833|       |                break;
11834|       |        }
11835|       |    }
11836|       |
11837|       |    /*!
11838|       |    @param[in] j  JSON value to serialize
11839|       |    @param[in] use_count   whether to use '#' prefixes (optimized format)
11840|       |    @param[in] use_type    whether to use '$' prefixes (optimized format)
11841|       |    @param[in] add_prefix  whether prefixes need to be used for this value
11842|       |    */
11843|       |    void write_ubjson(const BasicJsonType& j, const bool use_count,
11844|       |                      const bool use_type, const bool add_prefix = true)
11845|       |    {
11846|       |        switch (j.type())
11847|       |        {
11848|       |            case value_t::null:
11849|       |            {
11850|       |                if (add_prefix)
11851|       |                {
11852|       |                    oa->write_character(to_char_type('Z'));
11853|       |                }
11854|       |                break;
11855|       |            }
11856|       |
11857|       |            case value_t::boolean:
11858|       |            {
11859|       |                if (add_prefix)
11860|       |                {
11861|       |                    oa->write_character(j.m_value.boolean
11862|       |                                        ? to_char_type('T')
11863|       |                                        : to_char_type('F'));
11864|       |                }
11865|       |                break;
11866|       |            }
11867|       |
11868|       |            case value_t::number_integer:
11869|       |            {
11870|       |                write_number_with_ubjson_prefix(j.m_value.number_integer, add_prefix);
11871|       |                break;
11872|       |            }
11873|       |
11874|       |            case value_t::number_unsigned:
11875|       |            {
11876|       |                write_number_with_ubjson_prefix(j.m_value.number_unsigned, add_prefix);
11877|       |                break;
11878|       |            }
11879|       |
11880|       |            case value_t::number_float:
11881|       |            {
11882|       |                write_number_with_ubjson_prefix(j.m_value.number_float, add_prefix);
11883|       |                break;
11884|       |            }
11885|       |
11886|       |            case value_t::string:
11887|       |            {
11888|       |                if (add_prefix)
11889|       |                {
11890|       |                    oa->write_character(to_char_type('S'));
11891|       |                }
11892|       |                write_number_with_ubjson_prefix(j.m_value.string->size(), true);
11893|       |                oa->write_characters(
11894|       |                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
11895|       |                    j.m_value.string->size());
11896|       |                break;
11897|       |            }
11898|       |
11899|       |            case value_t::array:
11900|       |            {
11901|       |                if (add_prefix)
11902|       |                {
11903|       |                    oa->write_character(to_char_type('['));
11904|       |                }
11905|       |
11906|       |                bool prefix_required = true;
11907|       |                if (use_type and not j.m_value.array->empty())
11908|       |                {
11909|       |                    assert(use_count);
11910|       |                    const CharType first_prefix = ubjson_prefix(j.front());
11911|       |                    const bool same_prefix = std::all_of(j.begin() + 1, j.end(),
11912|       |                                                         [this, first_prefix](const BasicJsonType & v)
11913|       |                    {
11914|       |                        return ubjson_prefix(v) == first_prefix;
11915|       |                    });
11916|       |
11917|       |                    if (same_prefix)
11918|       |                    {
11919|       |                        prefix_required = false;
11920|       |                        oa->write_character(to_char_type('$'));
11921|       |                        oa->write_character(first_prefix);
11922|       |                    }
11923|       |                }
11924|       |
11925|       |                if (use_count)
11926|       |                {
11927|       |                    oa->write_character(to_char_type('#'));
11928|       |                    write_number_with_ubjson_prefix(j.m_value.array->size(), true);
11929|       |                }
11930|       |
11931|       |                for (const auto& el : *j.m_value.array)
11932|       |                {
11933|       |                    write_ubjson(el, use_count, use_type, prefix_required);
11934|       |                }
11935|       |
11936|       |                if (not use_count)
11937|       |                {
11938|       |                    oa->write_character(to_char_type(']'));
11939|       |                }
11940|       |
11941|       |                break;
11942|       |            }
11943|       |
11944|       |            case value_t::object:
11945|       |            {
11946|       |                if (add_prefix)
11947|       |                {
11948|       |                    oa->write_character(to_char_type('{'));
11949|       |                }
11950|       |
11951|       |                bool prefix_required = true;
11952|       |                if (use_type and not j.m_value.object->empty())
11953|       |                {
11954|       |                    assert(use_count);
11955|       |                    const CharType first_prefix = ubjson_prefix(j.front());
11956|       |                    const bool same_prefix = std::all_of(j.begin(), j.end(),
11957|       |                                                         [this, first_prefix](const BasicJsonType & v)
11958|       |                    {
11959|       |                        return ubjson_prefix(v) == first_prefix;
11960|       |                    });
11961|       |
11962|       |                    if (same_prefix)
11963|       |                    {
11964|       |                        prefix_required = false;
11965|       |                        oa->write_character(to_char_type('$'));
11966|       |                        oa->write_character(first_prefix);
11967|       |                    }
11968|       |                }
11969|       |
11970|       |                if (use_count)
11971|       |                {
11972|       |                    oa->write_character(to_char_type('#'));
11973|       |                    write_number_with_ubjson_prefix(j.m_value.object->size(), true);
11974|       |                }
11975|       |
11976|       |                for (const auto& el : *j.m_value.object)
11977|       |                {
11978|       |                    write_number_with_ubjson_prefix(el.first.size(), true);
11979|       |                    oa->write_characters(
11980|       |                        reinterpret_cast<const CharType*>(el.first.c_str()),
11981|       |                        el.first.size());
11982|       |                    write_ubjson(el.second, use_count, use_type, prefix_required);
11983|       |                }
11984|       |
11985|       |                if (not use_count)
11986|       |                {
11987|       |                    oa->write_character(to_char_type('}'));
11988|       |                }
11989|       |
11990|       |                break;
11991|       |            }
11992|       |
11993|       |            default:
11994|       |                break;
11995|       |        }
11996|       |    }
11997|       |
11998|       |  private:
11999|       |    //////////
12000|       |    // BSON //
12001|       |    //////////
12002|       |
12003|       |    /*!
12004|       |    @return The size of a BSON document entry header, including the id marker
12005|       |            and the entry name size (and its null-terminator).
12006|       |    */
12007|       |    static std::size_t calc_bson_entry_header_size(const string_t& name)
12008|       |    {
12009|       |        const auto it = name.find(static_cast<typename string_t::value_type>(0));
12010|       |        if (JSON_HEDLEY_UNLIKELY(it != BasicJsonType::string_t::npos))
12011|       |        {
12012|       |            JSON_THROW(out_of_range::create(409,
12013|       |                                            "BSON key cannot contain code point U+0000 (at byte " + std::to_string(it) + ")"));
12014|       |        }
12015|       |
12016|       |        return /*id*/ 1ul + name.size() + /*zero-terminator*/1u;
12017|       |    }
12018|       |
12019|       |    /*!
12020|       |    @brief Writes the given @a element_type and @a name to the output adapter
12021|       |    */
12022|       |    void write_bson_entry_header(const string_t& name,
12023|       |                                 const std::uint8_t element_type)
12024|       |    {
12025|       |        oa->write_character(to_char_type(element_type)); // boolean
12026|       |        oa->write_characters(
12027|       |            reinterpret_cast<const CharType*>(name.c_str()),
12028|       |            name.size() + 1u);
12029|       |    }
12030|       |
12031|       |    /*!
12032|       |    @brief Writes a BSON element with key @a name and boolean value @a value
12033|       |    */
12034|       |    void write_bson_boolean(const string_t& name,
12035|       |                            const bool value)
12036|       |    {
12037|       |        write_bson_entry_header(name, 0x08);
12038|       |        oa->write_character(value ? to_char_type(0x01) : to_char_type(0x00));
12039|       |    }
12040|       |
12041|       |    /*!
12042|       |    @brief Writes a BSON element with key @a name and double value @a value
12043|       |    */
12044|       |    void write_bson_double(const string_t& name,
12045|       |                           const double value)
12046|       |    {
12047|       |        write_bson_entry_header(name, 0x01);
12048|       |        write_number<double, true>(value);
12049|       |    }
12050|       |
12051|       |    /*!
12052|       |    @return The size of the BSON-encoded string in @a value
12053|       |    */
12054|       |    static std::size_t calc_bson_string_size(const string_t& value)
12055|       |    {
12056|       |        return sizeof(std::int32_t) + value.size() + 1ul;
12057|       |    }
12058|       |
12059|       |    /*!
12060|       |    @brief Writes a BSON element with key @a name and string value @a value
12061|       |    */
12062|       |    void write_bson_string(const string_t& name,
12063|       |                           const string_t& value)
12064|       |    {
12065|       |        write_bson_entry_header(name, 0x02);
12066|       |
12067|       |        write_number<std::int32_t, true>(static_cast<std::int32_t>(value.size() + 1ul));
12068|       |        oa->write_characters(
12069|       |            reinterpret_cast<const CharType*>(value.c_str()),
12070|       |            value.size() + 1);
12071|       |    }
12072|       |
12073|       |    /*!
12074|       |    @brief Writes a BSON element with key @a name and null value
12075|       |    */
12076|       |    void write_bson_null(const string_t& name)
12077|       |    {
12078|       |        write_bson_entry_header(name, 0x0A);
12079|       |    }
12080|       |
12081|       |    /*!
12082|       |    @return The size of the BSON-encoded integer @a value
12083|       |    */
12084|       |    static std::size_t calc_bson_integer_size(const std::int64_t value)
12085|       |    {
12086|       |        return (std::numeric_limits<std::int32_t>::min)() <= value and value <= (std::numeric_limits<std::int32_t>::max)()
12087|       |               ? sizeof(std::int32_t)
12088|       |               : sizeof(std::int64_t);
12089|       |    }
12090|       |
12091|       |    /*!
12092|       |    @brief Writes a BSON element with key @a name and integer @a value
12093|       |    */
12094|       |    void write_bson_integer(const string_t& name,
12095|       |                            const std::int64_t value)
12096|       |    {
12097|       |        if ((std::numeric_limits<std::int32_t>::min)() <= value and value <= (std::numeric_limits<std::int32_t>::max)())
12098|       |        {
12099|       |            write_bson_entry_header(name, 0x10); // int32
12100|       |            write_number<std::int32_t, true>(static_cast<std::int32_t>(value));
12101|       |        }
12102|       |        else
12103|       |        {
12104|       |            write_bson_entry_header(name, 0x12); // int64
12105|       |            write_number<std::int64_t, true>(static_cast<std::int64_t>(value));
12106|       |        }
12107|       |    }
12108|       |
12109|       |    /*!
12110|       |    @return The size of the BSON-encoded unsigned integer in @a j
12111|       |    */
12112|       |    static constexpr std::size_t calc_bson_unsigned_size(const std::uint64_t value) noexcept
12113|       |    {
12114|       |        return (value <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
12115|       |               ? sizeof(std::int32_t)
12116|       |               : sizeof(std::int64_t);
12117|       |    }
12118|       |
12119|       |    /*!
12120|       |    @brief Writes a BSON element with key @a name and unsigned @a value
12121|       |    */
12122|       |    void write_bson_unsigned(const string_t& name,
12123|       |                             const std::uint64_t value)
12124|       |    {
12125|       |        if (value <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
12126|       |        {
12127|       |            write_bson_entry_header(name, 0x10 /* int32 */);
12128|       |            write_number<std::int32_t, true>(static_cast<std::int32_t>(value));
12129|       |        }
12130|       |        else if (value <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))
12131|       |        {
12132|       |            write_bson_entry_header(name, 0x12 /* int64 */);
12133|       |            write_number<std::int64_t, true>(static_cast<std::int64_t>(value));
12134|       |        }
12135|       |        else
12136|       |        {
12137|       |            JSON_THROW(out_of_range::create(407, "integer number " + std::to_string(value) + " cannot be represented by BSON as it does not fit int64"));
12138|       |        }
12139|       |    }
12140|       |
12141|       |    /*!
12142|       |    @brief Writes a BSON element with key @a name and object @a value
12143|       |    */
12144|       |    void write_bson_object_entry(const string_t& name,
12145|       |                                 const typename BasicJsonType::object_t& value)
12146|       |    {
12147|       |        write_bson_entry_header(name, 0x03); // object
12148|       |        write_bson_object(value);
12149|       |    }
12150|       |
12151|       |    /*!
12152|       |    @return The size of the BSON-encoded array @a value
12153|       |    */
12154|       |    static std::size_t calc_bson_array_size(const typename BasicJsonType::array_t& value)
12155|       |    {
12156|       |        std::size_t array_index = 0ul;
12157|       |
12158|       |        const std::size_t embedded_document_size = std::accumulate(std::begin(value), std::end(value), std::size_t(0), [&array_index](std::size_t result, const typename BasicJsonType::array_t::value_type & el)
12159|       |        {
12160|       |            return result + calc_bson_element_size(std::to_string(array_index++), el);
12161|       |        });
12162|       |
12163|       |        return sizeof(std::int32_t) + embedded_document_size + 1ul;
12164|       |    }
12165|       |
12166|       |    /*!
12167|       |    @brief Writes a BSON element with key @a name and array @a value
12168|       |    */
12169|       |    void write_bson_array(const string_t& name,
12170|       |                          const typename BasicJsonType::array_t& value)
12171|       |    {
12172|       |        write_bson_entry_header(name, 0x04); // array
12173|       |        write_number<std::int32_t, true>(static_cast<std::int32_t>(calc_bson_array_size(value)));
12174|       |
12175|       |        std::size_t array_index = 0ul;
12176|       |
12177|       |        for (const auto& el : value)
12178|       |        {
12179|       |            write_bson_element(std::to_string(array_index++), el);
12180|       |        }
12181|       |
12182|       |        oa->write_character(to_char_type(0x00));
12183|       |    }
12184|       |
12185|       |    /*!
12186|       |    @brief Calculates the size necessary to serialize the JSON value @a j with its @a name
12187|       |    @return The calculated size for the BSON document entry for @a j with the given @a name.
12188|       |    */
12189|       |    static std::size_t calc_bson_element_size(const string_t& name,
12190|       |            const BasicJsonType& j)
12191|       |    {
12192|       |        const auto header_size = calc_bson_entry_header_size(name);
12193|       |        switch (j.type())
12194|       |        {
12195|       |            case value_t::object:
12196|       |                return header_size + calc_bson_object_size(*j.m_value.object);
12197|       |
12198|       |            case value_t::array:
12199|       |                return header_size + calc_bson_array_size(*j.m_value.array);
12200|       |
12201|       |            case value_t::boolean:
12202|       |                return header_size + 1ul;
12203|       |
12204|       |            case value_t::number_float:
12205|       |                return header_size + 8ul;
12206|       |
12207|       |            case value_t::number_integer:
12208|       |                return header_size + calc_bson_integer_size(j.m_value.number_integer);
12209|       |
12210|       |            case value_t::number_unsigned:
12211|       |                return header_size + calc_bson_unsigned_size(j.m_value.number_unsigned);
12212|       |
12213|       |            case value_t::string:
12214|       |                return header_size + calc_bson_string_size(*j.m_value.string);
12215|       |
12216|       |            case value_t::null:
12217|       |                return header_size + 0ul;
12218|       |
12219|       |            // LCOV_EXCL_START
12220|       |            default:
12221|       |                assert(false);
12222|       |                return 0ul;
12223|       |                // LCOV_EXCL_STOP
12224|       |        }
12225|       |    }
12226|       |
12227|       |    /*!
12228|       |    @brief Serializes the JSON value @a j to BSON and associates it with the
12229|       |           key @a name.
12230|       |    @param name The name to associate with the JSON entity @a j within the
12231|       |                current BSON document
12232|       |    @return The size of the BSON entry
12233|       |    */
12234|       |    void write_bson_element(const string_t& name,
12235|       |                            const BasicJsonType& j)
12236|       |    {
12237|       |        switch (j.type())
12238|       |        {
12239|       |            case value_t::object:
12240|       |                return write_bson_object_entry(name, *j.m_value.object);
12241|       |
12242|       |            case value_t::array:
12243|       |                return write_bson_array(name, *j.m_value.array);
12244|       |
12245|       |            case value_t::boolean:
12246|       |                return write_bson_boolean(name, j.m_value.boolean);
12247|       |
12248|       |            case value_t::number_float:
12249|       |                return write_bson_double(name, j.m_value.number_float);
12250|       |
12251|       |            case value_t::number_integer:
12252|       |                return write_bson_integer(name, j.m_value.number_integer);
12253|       |
12254|       |            case value_t::number_unsigned:
12255|       |                return write_bson_unsigned(name, j.m_value.number_unsigned);
12256|       |
12257|       |            case value_t::string:
12258|       |                return write_bson_string(name, *j.m_value.string);
12259|       |
12260|       |            case value_t::null:
12261|       |                return write_bson_null(name);
12262|       |
12263|       |            // LCOV_EXCL_START
12264|       |            default:
12265|       |                assert(false);
12266|       |                return;
12267|       |                // LCOV_EXCL_STOP
12268|       |        }
12269|       |    }
12270|       |
12271|       |    /*!
12272|       |    @brief Calculates the size of the BSON serialization of the given
12273|       |           JSON-object @a j.
12274|       |    @param[in] j  JSON value to serialize
12275|       |    @pre       j.type() == value_t::object
12276|       |    */
12277|       |    static std::size_t calc_bson_object_size(const typename BasicJsonType::object_t& value)
12278|       |    {
12279|       |        std::size_t document_size = std::accumulate(value.begin(), value.end(), std::size_t(0),
12280|       |                                    [](size_t result, const typename BasicJsonType::object_t::value_type & el)
12281|       |        {
12282|       |            return result += calc_bson_element_size(el.first, el.second);
12283|       |        });
12284|       |
12285|       |        return sizeof(std::int32_t) + document_size + 1ul;
12286|       |    }
12287|       |
12288|       |    /*!
12289|       |    @param[in] j  JSON value to serialize
12290|       |    @pre       j.type() == value_t::object
12291|       |    */
12292|       |    void write_bson_object(const typename BasicJsonType::object_t& value)
12293|       |    {
12294|       |        write_number<std::int32_t, true>(static_cast<std::int32_t>(calc_bson_object_size(value)));
12295|       |
12296|       |        for (const auto& el : value)
12297|       |        {
12298|       |            write_bson_element(el.first, el.second);
12299|       |        }
12300|       |
12301|       |        oa->write_character(to_char_type(0x00));
12302|       |    }
12303|       |
12304|       |    //////////
12305|       |    // CBOR //
12306|       |    //////////
12307|       |
12308|       |    static constexpr CharType get_cbor_float_prefix(float /*unused*/)
12309|       |    {
12310|       |        return to_char_type(0xFA);  // Single-Precision Float
12311|       |    }
12312|       |
12313|       |    static constexpr CharType get_cbor_float_prefix(double /*unused*/)
12314|       |    {
12315|       |        return to_char_type(0xFB);  // Double-Precision Float
12316|       |    }
12317|       |
12318|       |    /////////////
12319|       |    // MsgPack //
12320|       |    /////////////
12321|       |
12322|       |    static constexpr CharType get_msgpack_float_prefix(float /*unused*/)
12323|       |    {
12324|       |        return to_char_type(0xCA);  // float 32
12325|       |    }
12326|       |
12327|       |    static constexpr CharType get_msgpack_float_prefix(double /*unused*/)
12328|       |    {
12329|       |        return to_char_type(0xCB);  // float 64
12330|       |    }
12331|       |
12332|       |    ////////////
12333|       |    // UBJSON //
12334|       |    ////////////
12335|       |
12336|       |    // UBJSON: write number (floating point)
12337|       |    template<typename NumberType, typename std::enable_if<
12338|       |                 std::is_floating_point<NumberType>::value, int>::type = 0>
12339|       |    void write_number_with_ubjson_prefix(const NumberType n,
12340|       |                                         const bool add_prefix)
12341|       |    {
12342|       |        if (add_prefix)
12343|       |        {
12344|       |            oa->write_character(get_ubjson_float_prefix(n));
12345|       |        }
12346|       |        write_number(n);
12347|       |    }
12348|       |
12349|       |    // UBJSON: write number (unsigned integer)
12350|       |    template<typename NumberType, typename std::enable_if<
12351|       |                 std::is_unsigned<NumberType>::value, int>::type = 0>
12352|       |    void write_number_with_ubjson_prefix(const NumberType n,
12353|       |                                         const bool add_prefix)
12354|       |    {
12355|       |        if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int8_t>::max)()))
12356|       |        {
12357|       |            if (add_prefix)
12358|       |            {
12359|       |                oa->write_character(to_char_type('i'));  // int8
12360|       |            }
12361|       |            write_number(static_cast<std::uint8_t>(n));
12362|       |        }
12363|       |        else if (n <= (std::numeric_limits<std::uint8_t>::max)())
12364|       |        {
12365|       |            if (add_prefix)
12366|       |            {
12367|       |                oa->write_character(to_char_type('U'));  // uint8
12368|       |            }
12369|       |            write_number(static_cast<std::uint8_t>(n));
12370|       |        }
12371|       |        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int16_t>::max)()))
12372|       |        {
12373|       |            if (add_prefix)
12374|       |            {
12375|       |                oa->write_character(to_char_type('I'));  // int16
12376|       |            }
12377|       |            write_number(static_cast<std::int16_t>(n));
12378|       |        }
12379|       |        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
12380|       |        {
12381|       |            if (add_prefix)
12382|       |            {
12383|       |                oa->write_character(to_char_type('l'));  // int32
12384|       |            }
12385|       |            write_number(static_cast<std::int32_t>(n));
12386|       |        }
12387|       |        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))
12388|       |        {
12389|       |            if (add_prefix)
12390|       |            {
12391|       |                oa->write_character(to_char_type('L'));  // int64
12392|       |            }
12393|       |            write_number(static_cast<std::int64_t>(n));
12394|       |        }
12395|       |        else
12396|       |        {
12397|       |            JSON_THROW(out_of_range::create(407, "integer number " + std::to_string(n) + " cannot be represented by UBJSON as it does not fit int64"));
12398|       |        }
12399|       |    }
12400|       |
12401|       |    // UBJSON: write number (signed integer)
12402|       |    template<typename NumberType, typename std::enable_if<
12403|       |                 std::is_signed<NumberType>::value and
12404|       |                 not std::is_floating_point<NumberType>::value, int>::type = 0>
12405|       |    void write_number_with_ubjson_prefix(const NumberType n,
12406|       |                                         const bool add_prefix)
12407|       |    {
12408|       |        if ((std::numeric_limits<std::int8_t>::min)() <= n and n <= (std::numeric_limits<std::int8_t>::max)())
12409|       |        {
12410|       |            if (add_prefix)
12411|       |            {
12412|       |                oa->write_character(to_char_type('i'));  // int8
12413|       |            }
12414|       |            write_number(static_cast<std::int8_t>(n));
12415|       |        }
12416|       |        else if (static_cast<std::int64_t>((std::numeric_limits<std::uint8_t>::min)()) <= n and n <= static_cast<std::int64_t>((std::numeric_limits<std::uint8_t>::max)()))
12417|       |        {
12418|       |            if (add_prefix)
12419|       |            {
12420|       |                oa->write_character(to_char_type('U'));  // uint8
12421|       |            }
12422|       |            write_number(static_cast<std::uint8_t>(n));
12423|       |        }
12424|       |        else if ((std::numeric_limits<std::int16_t>::min)() <= n and n <= (std::numeric_limits<std::int16_t>::max)())
12425|       |        {
12426|       |            if (add_prefix)
12427|       |            {
12428|       |                oa->write_character(to_char_type('I'));  // int16
12429|       |            }
12430|       |            write_number(static_cast<std::int16_t>(n));
12431|       |        }
12432|       |        else if ((std::numeric_limits<std::int32_t>::min)() <= n and n <= (std::numeric_limits<std::int32_t>::max)())
12433|       |        {
12434|       |            if (add_prefix)
12435|       |            {
12436|       |                oa->write_character(to_char_type('l'));  // int32
12437|       |            }
12438|       |            write_number(static_cast<std::int32_t>(n));
12439|       |        }
12440|       |        else if ((std::numeric_limits<std::int64_t>::min)() <= n and n <= (std::numeric_limits<std::int64_t>::max)())
12441|       |        {
12442|       |            if (add_prefix)
12443|       |            {
12444|       |                oa->write_character(to_char_type('L'));  // int64
12445|       |            }
12446|       |            write_number(static_cast<std::int64_t>(n));
12447|       |        }
12448|       |        // LCOV_EXCL_START
12449|       |        else
12450|       |        {
12451|       |            JSON_THROW(out_of_range::create(407, "integer number " + std::to_string(n) + " cannot be represented by UBJSON as it does not fit int64"));
12452|       |        }
12453|       |        // LCOV_EXCL_STOP
12454|       |    }
12455|       |
12456|       |    /*!
12457|       |    @brief determine the type prefix of container values
12458|       |
12459|       |    @note This function does not need to be 100% accurate when it comes to
12460|       |          integer limits. In case a number exceeds the limits of int64_t,
12461|       |          this will be detected by a later call to function
12462|       |          write_number_with_ubjson_prefix. Therefore, we return 'L' for any
12463|       |          value that does not fit the previous limits.
12464|       |    */
12465|       |    CharType ubjson_prefix(const BasicJsonType& j) const noexcept
12466|       |    {
12467|       |        switch (j.type())
12468|       |        {
12469|       |            case value_t::null:
12470|       |                return 'Z';
12471|       |
12472|       |            case value_t::boolean:
12473|       |                return j.m_value.boolean ? 'T' : 'F';
12474|       |
12475|       |            case value_t::number_integer:
12476|       |            {
12477|       |                if ((std::numeric_limits<std::int8_t>::min)() <= j.m_value.number_integer and j.m_value.number_integer <= (std::numeric_limits<std::int8_t>::max)())
12478|       |                {
12479|       |                    return 'i';
12480|       |                }
12481|       |                if ((std::numeric_limits<std::uint8_t>::min)() <= j.m_value.number_integer and j.m_value.number_integer <= (std::numeric_limits<std::uint8_t>::max)())
12482|       |                {
12483|       |                    return 'U';
12484|       |                }
12485|       |                if ((std::numeric_limits<std::int16_t>::min)() <= j.m_value.number_integer and j.m_value.number_integer <= (std::numeric_limits<std::int16_t>::max)())
12486|       |                {
12487|       |                    return 'I';
12488|       |                }
12489|       |                if ((std::numeric_limits<std::int32_t>::min)() <= j.m_value.number_integer and j.m_value.number_integer <= (std::numeric_limits<std::int32_t>::max)())
12490|       |                {
12491|       |                    return 'l';
12492|       |                }
12493|       |                // no check and assume int64_t (see note above)
12494|       |                return 'L';
12495|       |            }
12496|       |
12497|       |            case value_t::number_unsigned:
12498|       |            {
12499|       |                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int8_t>::max)()))
12500|       |                {
12501|       |                    return 'i';
12502|       |                }
12503|       |                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::uint8_t>::max)()))
12504|       |                {
12505|       |                    return 'U';
12506|       |                }
12507|       |                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int16_t>::max)()))
12508|       |                {
12509|       |                    return 'I';
12510|       |                }
12511|       |                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
12512|       |                {
12513|       |                    return 'l';
12514|       |                }
12515|       |                // no check and assume int64_t (see note above)
12516|       |                return 'L';
12517|       |            }
12518|       |
12519|       |            case value_t::number_float:
12520|       |                return get_ubjson_float_prefix(j.m_value.number_float);
12521|       |
12522|       |            case value_t::string:
12523|       |                return 'S';
12524|       |
12525|       |            case value_t::array:
12526|       |                return '[';
12527|       |
12528|       |            case value_t::object:
12529|       |                return '{';
12530|       |
12531|       |            default:  // discarded values
12532|       |                return 'N';
12533|       |        }
12534|       |    }
12535|       |
12536|       |    static constexpr CharType get_ubjson_float_prefix(float /*unused*/)
12537|       |    {
12538|       |        return 'd';  // float 32
12539|       |    }
12540|       |
12541|       |    static constexpr CharType get_ubjson_float_prefix(double /*unused*/)
12542|       |    {
12543|       |        return 'D';  // float 64
12544|       |    }
12545|       |
12546|       |    ///////////////////////
12547|       |    // Utility functions //
12548|       |    ///////////////////////
12549|       |
12550|       |    /*
12551|       |    @brief write a number to output input
12552|       |    @param[in] n number of type @a NumberType
12553|       |    @tparam NumberType the type of the number
12554|       |    @tparam OutputIsLittleEndian Set to true if output data is
12555|       |                                 required to be little endian
12556|       |
12557|       |    @note This function needs to respect the system's endianess, because bytes
12558|       |          in CBOR, MessagePack, and UBJSON are stored in network order (big
12559|       |          endian) and therefore need reordering on little endian systems.
12560|       |    */
12561|       |    template<typename NumberType, bool OutputIsLittleEndian = false>
12562|       |    void write_number(const NumberType n)
12563|       |    {
12564|       |        // step 1: write number to array of length NumberType
12565|       |        std::array<CharType, sizeof(NumberType)> vec;
12566|       |        std::memcpy(vec.data(), &n, sizeof(NumberType));
12567|       |
12568|       |        // step 2: write array to output (with possible reordering)
12569|       |        if (is_little_endian != OutputIsLittleEndian)
12570|       |        {
12571|       |            // reverse byte order prior to conversion if necessary
12572|       |            std::reverse(vec.begin(), vec.end());
12573|       |        }
12574|       |
12575|       |        oa->write_characters(vec.data(), sizeof(NumberType));
12576|       |    }
12577|       |
12578|       |  public:
12579|       |    // The following to_char_type functions are implement the conversion
12580|       |    // between uint8_t and CharType. In case CharType is not unsigned,
12581|       |    // such a conversion is required to allow values greater than 128.
12582|       |    // See <https://github.com/nlohmann/json/issues/1286> for a discussion.
12583|       |    template < typename C = CharType,
12584|       |               enable_if_t < std::is_signed<C>::value and std::is_signed<char>::value > * = nullptr >
12585|       |    static constexpr CharType to_char_type(std::uint8_t x) noexcept
12586|       |    {
12587|       |        return *reinterpret_cast<char*>(&x);
12588|       |    }
12589|       |
12590|       |    template < typename C = CharType,
12591|       |               enable_if_t < std::is_signed<C>::value and std::is_unsigned<char>::value > * = nullptr >
12592|       |    static CharType to_char_type(std::uint8_t x) noexcept
12593|       |    {
12594|       |        static_assert(sizeof(std::uint8_t) == sizeof(CharType), "size of CharType must be equal to std::uint8_t");
12595|       |        static_assert(std::is_pod<CharType>::value, "CharType must be POD");
12596|       |        CharType result;
12597|       |        std::memcpy(&result, &x, sizeof(x));
12598|       |        return result;
12599|       |    }
12600|       |
12601|       |    template<typename C = CharType,
12602|       |             enable_if_t<std::is_unsigned<C>::value>* = nullptr>
12603|       |    static constexpr CharType to_char_type(std::uint8_t x) noexcept
12604|       |    {
12605|       |        return x;
12606|       |    }
12607|       |
12608|       |    template < typename InputCharType, typename C = CharType,
12609|       |               enable_if_t <
12610|       |                   std::is_signed<C>::value and
12611|       |                   std::is_signed<char>::value and
12612|       |                   std::is_same<char, typename std::remove_cv<InputCharType>::type>::value
12613|       |                   > * = nullptr >
12614|       |    static constexpr CharType to_char_type(InputCharType x) noexcept
12615|      0|    {
12616|      0|        return x;
12617|      0|    }
12618|       |
12619|       |  private:
12620|       |    /// whether we can assume little endianess
12621|       |    const bool is_little_endian = binary_reader<BasicJsonType>::little_endianess();
12622|       |
12623|       |    /// the output
12624|       |    output_adapter_t<CharType> oa = nullptr;
12625|       |};
12626|       |}  // namespace detail
12627|       |}  // namespace nlohmann
12628|       |
12629|       |// #include <nlohmann/detail/output/output_adapters.hpp>
12630|       |
12631|       |// #include <nlohmann/detail/output/serializer.hpp>
12632|       |
12633|       |
12634|       |#include <algorithm> // reverse, remove, fill, find, none_of
12635|       |#include <array> // array
12636|       |#include <cassert> // assert
12637|       |#include <ciso646> // and, or
12638|       |#include <clocale> // localeconv, lconv
12639|       |#include <cmath> // labs, isfinite, isnan, signbit
12640|       |#include <cstddef> // size_t, ptrdiff_t
12641|       |#include <cstdint> // uint8_t
12642|       |#include <cstdio> // snprintf
12643|       |#include <limits> // numeric_limits
12644|       |#include <string> // string
12645|       |#include <type_traits> // is_same
12646|       |#include <utility> // move
12647|       |
12648|       |// #include <nlohmann/detail/conversions/to_chars.hpp>
12649|       |
12650|       |
12651|       |#include <array> // array
12652|       |#include <cassert> // assert
12653|       |#include <ciso646> // or, and, not
12654|       |#include <cmath>   // signbit, isfinite
12655|       |#include <cstdint> // intN_t, uintN_t
12656|       |#include <cstring> // memcpy, memmove
12657|       |#include <limits> // numeric_limits
12658|       |#include <type_traits> // conditional
12659|       |// #include <nlohmann/detail/macro_scope.hpp>
12660|       |
12661|       |
12662|       |namespace nlohmann
12663|       |{
12664|       |namespace detail
12665|       |{
12666|       |
12667|       |/*!
12668|       |@brief implements the Grisu2 algorithm for binary to decimal floating-point
12669|       |conversion.
12670|       |
12671|       |This implementation is a slightly modified version of the reference
12672|       |implementation which may be obtained from
12673|       |http://florian.loitsch.com/publications (bench.tar.gz).
12674|       |
12675|       |The code is distributed under the MIT license, Copyright (c) 2009 Florian Loitsch.
12676|       |
12677|       |For a detailed description of the algorithm see:
12678|       |
12679|       |[1] Loitsch, "Printing Floating-Point Numbers Quickly and Accurately with
12680|       |    Integers", Proceedings of the ACM SIGPLAN 2010 Conference on Programming
12681|       |    Language Design and Implementation, PLDI 2010
12682|       |[2] Burger, Dybvig, "Printing Floating-Point Numbers Quickly and Accurately",
12683|       |    Proceedings of the ACM SIGPLAN 1996 Conference on Programming Language
12684|       |    Design and Implementation, PLDI 1996
12685|       |*/
12686|       |namespace dtoa_impl
12687|       |{
12688|       |
12689|       |template <typename Target, typename Source>
12690|       |Target reinterpret_bits(const Source source)
12691|     32|{
12692|     32|    static_assert(sizeof(Target) == sizeof(Source), "size mismatch");
12693|       |
12694|     32|    Target target;
12695|     32|    std::memcpy(&target, &source, sizeof(Source));
12696|     32|    return target;
12697|     32|}
12698|       |
12699|       |struct diyfp // f * 2^e
12700|       |{
12701|       |    static constexpr int kPrecision = 64; // = q
12702|       |
12703|       |    std::uint64_t f = 0;
12704|       |    int e = 0;
12705|       |
12706|    416|    constexpr diyfp(std::uint64_t f_, int e_) noexcept : f(f_), e(e_) {}
12707|       |
12708|       |    /*!
12709|       |    @brief returns x - y
12710|       |    @pre x.e == y.e and x.f >= y.f
12711|       |    */
12712|       |    static diyfp sub(const diyfp& x, const diyfp& y) noexcept
12713|     64|    {
12714|     64|        assert(x.e == y.e);
12715|      0|        assert(x.f >= y.f);
12716|       |
12717|      0|        return {x.f - y.f, x.e};
12718|     64|    }
12719|       |
12720|       |    /*!
12721|       |    @brief returns x * y
12722|       |    @note The result is rounded. (Only the upper q bits are returned.)
12723|       |    */
12724|       |    static diyfp mul(const diyfp& x, const diyfp& y) noexcept
12725|     96|    {
12726|     96|        static_assert(kPrecision == 64, "internal error");
12727|       |
12728|       |        // Computes:
12729|       |        //  f = round((x.f * y.f) / 2^q)
12730|       |        //  e = x.e + y.e + q
12731|       |
12732|       |        // Emulate the 64-bit * 64-bit multiplication:
12733|       |        //
12734|       |        // p = u * v
12735|       |        //   = (u_lo + 2^32 u_hi) (v_lo + 2^32 v_hi)
12736|       |        //   = (u_lo v_lo         ) + 2^32 ((u_lo v_hi         ) + (u_hi v_lo         )) + 2^64 (u_hi v_hi         )
12737|       |        //   = (p0                ) + 2^32 ((p1                ) + (p2                )) + 2^64 (p3                )
12738|       |        //   = (p0_lo + 2^32 p0_hi) + 2^32 ((p1_lo + 2^32 p1_hi) + (p2_lo + 2^32 p2_hi)) + 2^64 (p3                )
12739|       |        //   = (p0_lo             ) + 2^32 (p0_hi + p1_lo + p2_lo                      ) + 2^64 (p1_hi + p2_hi + p3)
12740|       |        //   = (p0_lo             ) + 2^32 (Q                                          ) + 2^64 (H                 )
12741|       |        //   = (p0_lo             ) + 2^32 (Q_lo + 2^32 Q_hi                           ) + 2^64 (H                 )
12742|       |        //
12743|       |        // (Since Q might be larger than 2^32 - 1)
12744|       |        //
12745|       |        //   = (p0_lo + 2^32 Q_lo) + 2^64 (Q_hi + H)
12746|       |        //
12747|       |        // (Q_hi + H does not overflow a 64-bit int)
12748|       |        //
12749|       |        //   = p_lo + 2^64 p_hi
12750|       |
12751|     96|        const std::uint64_t u_lo = x.f & 0xFFFFFFFFu;
12752|     96|        const std::uint64_t u_hi = x.f >> 32u;
12753|     96|        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;
12754|     96|        const std::uint64_t v_hi = y.f >> 32u;
12755|       |
12756|     96|        const std::uint64_t p0 = u_lo * v_lo;
12757|     96|        const std::uint64_t p1 = u_lo * v_hi;
12758|     96|        const std::uint64_t p2 = u_hi * v_lo;
12759|     96|        const std::uint64_t p3 = u_hi * v_hi;
12760|       |
12761|     96|        const std::uint64_t p0_hi = p0 >> 32u;
12762|     96|        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;
12763|     96|        const std::uint64_t p1_hi = p1 >> 32u;
12764|     96|        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;
12765|     96|        const std::uint64_t p2_hi = p2 >> 32u;
12766|       |
12767|     96|        std::uint64_t Q = p0_hi + p1_lo + p2_lo;
12768|       |
12769|       |        // The full product might now be computed as
12770|       |        //
12771|       |        // p_hi = p3 + p2_hi + p1_hi + (Q >> 32)
12772|       |        // p_lo = p0_lo + (Q << 32)
12773|       |        //
12774|       |        // But in this particular case here, the full p_lo is not required.
12775|       |        // Effectively we only need to add the highest bit in p_lo to p_hi (and
12776|       |        // Q_hi + 1 does not overflow).
12777|       |
12778|     96|        Q += std::uint64_t{1} << (64u - 32u - 1u); // round, ties up
12779|       |
12780|     96|        const std::uint64_t h = p3 + p2_hi + p1_hi + (Q >> 32u);
12781|       |
12782|     96|        return {h, x.e + y.e + 64};
12783|     96|    }
12784|       |
12785|       |    /*!
12786|       |    @brief normalize x such that the significand is >= 2^(q-1)
12787|       |    @pre x.f != 0
12788|       |    */
12789|       |    static diyfp normalize(diyfp x) noexcept
12790|     64|    {
12791|     64|        assert(x.f != 0);
12792|       |
12793|    736|        while ((x.f >> 63u) == 0)
12794|    672|        {
12795|    672|            x.f <<= 1u;
12796|    672|            x.e--;
12797|    672|        }
12798|       |
12799|     64|        return x;
12800|     64|    }
12801|       |
12802|       |    /*!
12803|       |    @brief normalize x such that the result has the exponent E
12804|       |    @pre e >= x.e and the upper e - x.e bits of x.f must be zero.
12805|       |    */
12806|       |    static diyfp normalize_to(const diyfp& x, const int target_exponent) noexcept
12807|     32|    {
12808|     32|        const int delta = x.e - target_exponent;
12809|       |
12810|     32|        assert(delta >= 0);
12811|      0|        assert(((x.f << delta) >> delta) == x.f);
12812|       |
12813|      0|        return {x.f << delta, target_exponent};
12814|     32|    }
12815|       |};
12816|       |
12817|       |struct boundaries
12818|       |{
12819|       |    diyfp w;
12820|       |    diyfp minus;
12821|       |    diyfp plus;
12822|       |};
12823|       |
12824|       |/*!
12825|       |Compute the (normalized) diyfp representing the input number 'value' and its
12826|       |boundaries.
12827|       |
12828|       |@pre value must be finite and positive
12829|       |*/
12830|       |template <typename FloatType>
12831|       |boundaries compute_boundaries(FloatType value)
12832|     32|{
12833|     32|    assert(std::isfinite(value));
12834|      0|    assert(value > 0);
12835|       |
12836|       |    // Convert the IEEE representation into a diyfp.
12837|       |    //
12838|       |    // If v is denormal:
12839|       |    //      value = 0.F * 2^(1 - bias) = (          F) * 2^(1 - bias - (p-1))
12840|       |    // If v is normalized:
12841|       |    //      value = 1.F * 2^(E - bias) = (2^(p-1) + F) * 2^(E - bias - (p-1))
12842|       |
12843|      0|    static_assert(std::numeric_limits<FloatType>::is_iec559,
12844|     32|                  "internal error: dtoa_short requires an IEEE-754 floating-point implementation");
12845|       |
12846|     32|    constexpr int      kPrecision = std::numeric_limits<FloatType>::digits; // = p (includes the hidden bit)
12847|     32|    constexpr int      kBias      = std::numeric_limits<FloatType>::max_exponent - 1 + (kPrecision - 1);
12848|     32|    constexpr int      kMinExp    = 1 - kBias;
12849|     32|    constexpr std::uint64_t kHiddenBit = std::uint64_t{1} << (kPrecision - 1); // = 2^(p-1)
12850|       |
12851|     32|    using bits_type = typename std::conditional<kPrecision == 24, std::uint32_t, std::uint64_t >::type;
12852|       |
12853|     32|    const std::uint64_t bits = reinterpret_bits<bits_type>(value);
12854|     32|    const std::uint64_t E = bits >> (kPrecision - 1);
12855|     32|    const std::uint64_t F = bits & (kHiddenBit - 1);
12856|       |
12857|     32|    const bool is_denormal = E == 0;
12858|     32|    const diyfp v = is_denormal
12859|     32|                    ? diyfp(F, kMinExp)
12860|     32|                    : diyfp(F + kHiddenBit, static_cast<int>(E) - kBias);
12861|       |
12862|       |    // Compute the boundaries m- and m+ of the floating-point value
12863|       |    // v = f * 2^e.
12864|       |    //
12865|       |    // Determine v- and v+, the floating-point predecessor and successor if v,
12866|       |    // respectively.
12867|       |    //
12868|       |    //      v- = v - 2^e        if f != 2^(p-1) or e == e_min                (A)
12869|       |    //         = v - 2^(e-1)    if f == 2^(p-1) and e > e_min                (B)
12870|       |    //
12871|       |    //      v+ = v + 2^e
12872|       |    //
12873|       |    // Let m- = (v- + v) / 2 and m+ = (v + v+) / 2. All real numbers _strictly_
12874|       |    // between m- and m+ round to v, regardless of how the input rounding
12875|       |    // algorithm breaks ties.
12876|       |    //
12877|       |    //      ---+-------------+-------------+-------------+-------------+---  (A)
12878|       |    //         v-            m-            v             m+            v+
12879|       |    //
12880|       |    //      -----------------+------+------+-------------+-------------+---  (B)
12881|       |    //                       v-     m-     v             m+            v+
12882|       |
12883|     32|    const bool lower_boundary_is_closer = F == 0 and E > 1;
12884|     32|    const diyfp m_plus = diyfp(2 * v.f + 1, v.e - 1);
12885|     32|    const diyfp m_minus = lower_boundary_is_closer
12886|     32|                          ? diyfp(4 * v.f - 1, v.e - 2)  // (B)
12887|     32|                          : diyfp(2 * v.f - 1, v.e - 1); // (A)
12888|       |
12889|       |    // Determine the normalized w+ = m+.
12890|     32|    const diyfp w_plus = diyfp::normalize(m_plus);
12891|       |
12892|       |    // Determine w- = m- such that e_(w-) = e_(w+).
12893|     32|    const diyfp w_minus = diyfp::normalize_to(m_minus, w_plus.e);
12894|       |
12895|     32|    return {diyfp::normalize(v), w_minus, w_plus};
12896|     32|}
12897|       |
12898|       |// Given normalized diyfp w, Grisu needs to find a (normalized) cached
12899|       |// power-of-ten c, such that the exponent of the product c * w = f * 2^e lies
12900|       |// within a certain range [alpha, gamma] (Definition 3.2 from [1])
12901|       |//
12902|       |//      alpha <= e = e_c + e_w + q <= gamma
12903|       |//
12904|       |// or
12905|       |//
12906|       |//      f_c * f_w * 2^alpha <= f_c 2^(e_c) * f_w 2^(e_w) * 2^q
12907|       |//                          <= f_c * f_w * 2^gamma
12908|       |//
12909|       |// Since c and w are normalized, i.e. 2^(q-1) <= f < 2^q, this implies
12910|       |//
12911|       |//      2^(q-1) * 2^(q-1) * 2^alpha <= c * w * 2^q < 2^q * 2^q * 2^gamma
12912|       |//
12913|       |// or
12914|       |//
12915|       |//      2^(q - 2 + alpha) <= c * w < 2^(q + gamma)
12916|       |//
12917|       |// The choice of (alpha,gamma) determines the size of the table and the form of
12918|       |// the digit generation procedure. Using (alpha,gamma)=(-60,-32) works out well
12919|       |// in practice:
12920|       |//
12921|       |// The idea is to cut the number c * w = f * 2^e into two parts, which can be
12922|       |// processed independently: An integral part p1, and a fractional part p2:
12923|       |//
12924|       |//      f * 2^e = ( (f div 2^-e) * 2^-e + (f mod 2^-e) ) * 2^e
12925|       |//              = (f div 2^-e) + (f mod 2^-e) * 2^e
12926|       |//              = p1 + p2 * 2^e
12927|       |//
12928|       |// The conversion of p1 into decimal form requires a series of divisions and
12929|       |// modulos by (a power of) 10. These operations are faster for 32-bit than for
12930|       |// 64-bit integers, so p1 should ideally fit into a 32-bit integer. This can be
12931|       |// achieved by choosing
12932|       |//
12933|       |//      -e >= 32   or   e <= -32 := gamma
12934|       |//
12935|       |// In order to convert the fractional part
12936|       |//
12937|       |//      p2 * 2^e = p2 / 2^-e = d[-1] / 10^1 + d[-2] / 10^2 + ...
12938|       |//
12939|       |// into decimal form, the fraction is repeatedly multiplied by 10 and the digits
12940|       |// d[-i] are extracted in order:
12941|       |//
12942|       |//      (10 * p2) div 2^-e = d[-1]
12943|       |//      (10 * p2) mod 2^-e = d[-2] / 10^1 + ...
12944|       |//
12945|       |// The multiplication by 10 must not overflow. It is sufficient to choose
12946|       |//
12947|       |//      10 * p2 < 16 * p2 = 2^4 * p2 <= 2^64.
12948|       |//
12949|       |// Since p2 = f mod 2^-e < 2^-e,
12950|       |//
12951|       |//      -e <= 60   or   e >= -60 := alpha
12952|       |
12953|       |constexpr int kAlpha = -60;
12954|       |constexpr int kGamma = -32;
12955|       |
12956|       |struct cached_power // c = f * 2^e ~= 10^k
12957|       |{
12958|       |    std::uint64_t f;
12959|       |    int e;
12960|       |    int k;
12961|       |};
12962|       |
12963|       |/*!
12964|       |For a normalized diyfp w = f * 2^e, this function returns a (normalized) cached
12965|       |power-of-ten c = f_c * 2^e_c, such that the exponent of the product w * c
12966|       |satisfies (Definition 3.2 from [1])
12967|       |
12968|       |     alpha <= e_c + e + q <= gamma.
12969|       |*/
12970|       |inline cached_power get_cached_power_for_binary_exponent(int e)
12971|     32|{
12972|       |    // Now
12973|       |    //
12974|       |    //      alpha <= e_c + e + q <= gamma                                    (1)
12975|       |    //      ==> f_c * 2^alpha <= c * 2^e * 2^q
12976|       |    //
12977|       |    // and since the c's are normalized, 2^(q-1) <= f_c,
12978|       |    //
12979|       |    //      ==> 2^(q - 1 + alpha) <= c * 2^(e + q)
12980|       |    //      ==> 2^(alpha - e - 1) <= c
12981|       |    //
12982|       |    // If c were an exact power of ten, i.e. c = 10^k, one may determine k as
12983|       |    //
12984|       |    //      k = ceil( log_10( 2^(alpha - e - 1) ) )
12985|       |    //        = ceil( (alpha - e - 1) * log_10(2) )
12986|       |    //
12987|       |    // From the paper:
12988|       |    // "In theory the result of the procedure could be wrong since c is rounded,
12989|       |    //  and the computation itself is approximated [...]. In practice, however,
12990|       |    //  this simple function is sufficient."
12991|       |    //
12992|       |    // For IEEE double precision floating-point numbers converted into
12993|       |    // normalized diyfp's w = f * 2^e, with q = 64,
12994|       |    //
12995|       |    //      e >= -1022      (min IEEE exponent)
12996|       |    //           -52        (p - 1)
12997|       |    //           -52        (p - 1, possibly normalize denormal IEEE numbers)
12998|       |    //           -11        (normalize the diyfp)
12999|       |    //         = -1137
13000|       |    //
13001|       |    // and
13002|       |    //
13003|       |    //      e <= +1023      (max IEEE exponent)
13004|       |    //           -52        (p - 1)
13005|       |    //           -11        (normalize the diyfp)
13006|       |    //         = 960
13007|       |    //
13008|       |    // This binary exponent range [-1137,960] results in a decimal exponent
13009|       |    // range [-307,324]. One does not need to store a cached power for each
13010|       |    // k in this range. For each such k it suffices to find a cached power
13011|       |    // such that the exponent of the product lies in [alpha,gamma].
13012|       |    // This implies that the difference of the decimal exponents of adjacent
13013|       |    // table entries must be less than or equal to
13014|       |    //
13015|       |    //      floor( (gamma - alpha) * log_10(2) ) = 8.
13016|       |    //
13017|       |    // (A smaller distance gamma-alpha would require a larger table.)
13018|       |
13019|       |    // NB:
13020|       |    // Actually this function returns c, such that -60 <= e_c + e + 64 <= -34.
13021|       |
13022|     32|    constexpr int kCachedPowersMinDecExp = -300;
13023|     32|    constexpr int kCachedPowersDecStep = 8;
13024|       |
13025|     32|    static constexpr std::array<cached_power, 79> kCachedPowers =
13026|     32|    {
13027|     32|        {
13028|     32|            { 0xAB70FE17C79AC6CA, -1060, -300 },
13029|     32|            { 0xFF77B1FCBEBCDC4F, -1034, -292 },
13030|     32|            { 0xBE5691EF416BD60C, -1007, -284 },
13031|     32|            { 0x8DD01FAD907FFC3C,  -980, -276 },
13032|     32|            { 0xD3515C2831559A83,  -954, -268 },
13033|     32|            { 0x9D71AC8FADA6C9B5,  -927, -260 },
13034|     32|            { 0xEA9C227723EE8BCB,  -901, -252 },
13035|     32|            { 0xAECC49914078536D,  -874, -244 },
13036|     32|            { 0x823C12795DB6CE57,  -847, -236 },
13037|     32|            { 0xC21094364DFB5637,  -821, -228 },
13038|     32|            { 0x9096EA6F3848984F,  -794, -220 },
13039|     32|            { 0xD77485CB25823AC7,  -768, -212 },
13040|     32|            { 0xA086CFCD97BF97F4,  -741, -204 },
13041|     32|            { 0xEF340A98172AACE5,  -715, -196 },
13042|     32|            { 0xB23867FB2A35B28E,  -688, -188 },
13043|     32|            { 0x84C8D4DFD2C63F3B,  -661, -180 },
13044|     32|            { 0xC5DD44271AD3CDBA,  -635, -172 },
13045|     32|            { 0x936B9FCEBB25C996,  -608, -164 },
13046|     32|            { 0xDBAC6C247D62A584,  -582, -156 },
13047|     32|            { 0xA3AB66580D5FDAF6,  -555, -148 },
13048|     32|            { 0xF3E2F893DEC3F126,  -529, -140 },
13049|     32|            { 0xB5B5ADA8AAFF80B8,  -502, -132 },
13050|     32|            { 0x87625F056C7C4A8B,  -475, -124 },
13051|     32|            { 0xC9BCFF6034C13053,  -449, -116 },
13052|     32|            { 0x964E858C91BA2655,  -422, -108 },
13053|     32|            { 0xDFF9772470297EBD,  -396, -100 },
13054|     32|            { 0xA6DFBD9FB8E5B88F,  -369,  -92 },
13055|     32|            { 0xF8A95FCF88747D94,  -343,  -84 },
13056|     32|            { 0xB94470938FA89BCF,  -316,  -76 },
13057|     32|            { 0x8A08F0F8BF0F156B,  -289,  -68 },
13058|     32|            { 0xCDB02555653131B6,  -263,  -60 },
13059|     32|            { 0x993FE2C6D07B7FAC,  -236,  -52 },
13060|     32|            { 0xE45C10C42A2B3B06,  -210,  -44 },
13061|     32|            { 0xAA242499697392D3,  -183,  -36 },
13062|     32|            { 0xFD87B5F28300CA0E,  -157,  -28 },
13063|     32|            { 0xBCE5086492111AEB,  -130,  -20 },
13064|     32|            { 0x8CBCCC096F5088CC,  -103,  -12 },
13065|     32|            { 0xD1B71758E219652C,   -77,   -4 },
13066|     32|            { 0x9C40000000000000,   -50,    4 },
13067|     32|            { 0xE8D4A51000000000,   -24,   12 },
13068|     32|            { 0xAD78EBC5AC620000,     3,   20 },
13069|     32|            { 0x813F3978F8940984,    30,   28 },
13070|     32|            { 0xC097CE7BC90715B3,    56,   36 },
13071|     32|            { 0x8F7E32CE7BEA5C70,    83,   44 },
13072|     32|            { 0xD5D238A4ABE98068,   109,   52 },
13073|     32|            { 0x9F4F2726179A2245,   136,   60 },
13074|     32|            { 0xED63A231D4C4FB27,   162,   68 },
13075|     32|            { 0xB0DE65388CC8ADA8,   189,   76 },
13076|     32|            { 0x83C7088E1AAB65DB,   216,   84 },
13077|     32|            { 0xC45D1DF942711D9A,   242,   92 },
13078|     32|            { 0x924D692CA61BE758,   269,  100 },
13079|     32|            { 0xDA01EE641A708DEA,   295,  108 },
13080|     32|            { 0xA26DA3999AEF774A,   322,  116 },
13081|     32|            { 0xF209787BB47D6B85,   348,  124 },
13082|     32|            { 0xB454E4A179DD1877,   375,  132 },
13083|     32|            { 0x865B86925B9BC5C2,   402,  140 },
13084|     32|            { 0xC83553C5C8965D3D,   428,  148 },
13085|     32|            { 0x952AB45CFA97A0B3,   455,  156 },
13086|     32|            { 0xDE469FBD99A05FE3,   481,  164 },
13087|     32|            { 0xA59BC234DB398C25,   508,  172 },
13088|     32|            { 0xF6C69A72A3989F5C,   534,  180 },
13089|     32|            { 0xB7DCBF5354E9BECE,   561,  188 },
13090|     32|            { 0x88FCF317F22241E2,   588,  196 },
13091|     32|            { 0xCC20CE9BD35C78A5,   614,  204 },
13092|     32|            { 0x98165AF37B2153DF,   641,  212 },
13093|     32|            { 0xE2A0B5DC971F303A,   667,  220 },
13094|     32|            { 0xA8D9D1535CE3B396,   694,  228 },
13095|     32|            { 0xFB9B7CD9A4A7443C,   720,  236 },
13096|     32|            { 0xBB764C4CA7A44410,   747,  244 },
13097|     32|            { 0x8BAB8EEFB6409C1A,   774,  252 },
13098|     32|            { 0xD01FEF10A657842C,   800,  260 },
13099|     32|            { 0x9B10A4E5E9913129,   827,  268 },
13100|     32|            { 0xE7109BFBA19C0C9D,   853,  276 },
13101|     32|            { 0xAC2820D9623BF429,   880,  284 },
13102|     32|            { 0x80444B5E7AA7CF85,   907,  292 },
13103|     32|            { 0xBF21E44003ACDD2D,   933,  300 },
13104|     32|            { 0x8E679C2F5E44FF8F,   960,  308 },
13105|     32|            { 0xD433179D9C8CB841,   986,  316 },
13106|     32|            { 0x9E19DB92B4E31BA9,  1013,  324 },
13107|     32|        }
13108|     32|    };
13109|       |
13110|       |    // This computation gives exactly the same results for k as
13111|       |    //      k = ceil((kAlpha - e - 1) * 0.30102999566398114)
13112|       |    // for |e| <= 1500, but doesn't require floating-point operations.
13113|       |    // NB: log_10(2) ~= 78913 / 2^18
13114|     32|    assert(e >= -1500);
13115|      0|    assert(e <=  1500);
13116|      0|    const int f = kAlpha - e - 1;
13117|     32|    const int k = (f * 78913) / (1 << 18) + static_cast<int>(f > 0);
13118|       |
13119|     32|    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;
13120|     32|    assert(index >= 0);
13121|      0|    assert(static_cast<std::size_t>(index) < kCachedPowers.size());
13122|       |
13123|      0|    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];
13124|     32|    assert(kAlpha <= cached.e + e + 64);
13125|      0|    assert(kGamma >= cached.e + e + 64);
13126|       |
13127|      0|    return cached;
13128|     32|}
13129|       |
13130|       |/*!
13131|       |For n != 0, returns k, such that pow10 := 10^(k-1) <= n < 10^k.
13132|       |For n == 0, returns 1 and sets pow10 := 1.
13133|       |*/
13134|       |inline int find_largest_pow10(const std::uint32_t n, std::uint32_t& pow10)
13135|     32|{
13136|       |    // LCOV_EXCL_START
13137|     32|    if (n >= 1000000000)
13138|      0|    {
13139|      0|        pow10 = 1000000000;
13140|      0|        return 10;
13141|      0|    }
13142|       |    // LCOV_EXCL_STOP
13143|     32|    else if (n >= 100000000)
13144|      0|    {
13145|      0|        pow10 = 100000000;
13146|      0|        return  9;
13147|      0|    }
13148|     32|    else if (n >= 10000000)
13149|      0|    {
13150|      0|        pow10 = 10000000;
13151|      0|        return  8;
13152|      0|    }
13153|     32|    else if (n >= 1000000)
13154|      1|    {
13155|      1|        pow10 = 1000000;
13156|      1|        return  7;
13157|      1|    }
13158|     31|    else if (n >= 100000)
13159|     24|    {
13160|     24|        pow10 = 100000;
13161|     24|        return  6;
13162|     24|    }
13163|      7|    else if (n >= 10000)
13164|      6|    {
13165|      6|        pow10 = 10000;
13166|      6|        return  5;
13167|      6|    }
13168|      1|    else if (n >= 1000)
13169|      1|    {
13170|      1|        pow10 = 1000;
13171|      1|        return  4;
13172|      1|    }
13173|      0|    else if (n >= 100)
13174|      0|    {
13175|      0|        pow10 = 100;
13176|      0|        return  3;
13177|      0|    }
13178|      0|    else if (n >= 10)
13179|      0|    {
13180|      0|        pow10 = 10;
13181|      0|        return  2;
13182|      0|    }
13183|      0|    else
13184|      0|    {
13185|      0|        pow10 = 1;
13186|      0|        return 1;
13187|      0|    }
13188|     32|}
13189|       |
13190|       |inline void grisu2_round(char* buf, int len, std::uint64_t dist, std::uint64_t delta,
13191|       |                         std::uint64_t rest, std::uint64_t ten_k)
13192|     32|{
13193|     32|    assert(len >= 1);
13194|      0|    assert(dist <= delta);
13195|      0|    assert(rest <= delta);
13196|      0|    assert(ten_k > 0);
13197|       |
13198|       |    //               <--------------------------- delta ---->
13199|       |    //                                  <---- dist --------->
13200|       |    // --------------[------------------+-------------------]--------------
13201|       |    //               M-                 w                   M+
13202|       |    //
13203|       |    //                                  ten_k
13204|       |    //                                <------>
13205|       |    //                                       <---- rest ---->
13206|       |    // --------------[------------------+----+--------------]--------------
13207|       |    //                                  w    V
13208|       |    //                                       = buf * 10^k
13209|       |    //
13210|       |    // ten_k represents a unit-in-the-last-place in the decimal representation
13211|       |    // stored in buf.
13212|       |    // Decrement buf by ten_k while this takes buf closer to w.
13213|       |
13214|       |    // The tests are written in this order to avoid overflow in unsigned
13215|       |    // integer arithmetic.
13216|       |
13217|     32|    while (rest < dist
13218|     32|            and delta - rest >= ten_k
13219|     32|            and (rest + ten_k < dist or dist - rest > rest + ten_k - dist))
13220|      0|    {
13221|      0|        assert(buf[len - 1] != '0');
13222|      0|        buf[len - 1]--;
13223|      0|        rest += ten_k;
13224|      0|    }
13225|     32|}
13226|       |
13227|       |/*!
13228|       |Generates V = buffer * 10^decimal_exponent, such that M- <= V <= M+.
13229|       |M- and M+ must be normalized and share the same exponent -60 <= e <= -32.
13230|       |*/
13231|       |inline void grisu2_digit_gen(char* buffer, int& length, int& decimal_exponent,
13232|       |                             diyfp M_minus, diyfp w, diyfp M_plus)
13233|     32|{
13234|     32|    static_assert(kAlpha >= -60, "internal error");
13235|     32|    static_assert(kGamma <= -32, "internal error");
13236|       |
13237|       |    // Generates the digits (and the exponent) of a decimal floating-point
13238|       |    // number V = buffer * 10^decimal_exponent in the range [M-, M+]. The diyfp's
13239|       |    // w, M- and M+ share the same exponent e, which satisfies alpha <= e <= gamma.
13240|       |    //
13241|       |    //               <--------------------------- delta ---->
13242|       |    //                                  <---- dist --------->
13243|       |    // --------------[------------------+-------------------]--------------
13244|       |    //               M-                 w                   M+
13245|       |    //
13246|       |    // Grisu2 generates the digits of M+ from left to right and stops as soon as
13247|       |    // V is in [M-,M+].
13248|       |
13249|     32|    assert(M_plus.e >= kAlpha);
13250|      0|    assert(M_plus.e <= kGamma);
13251|       |
13252|      0|    std::uint64_t delta = diyfp::sub(M_plus, M_minus).f; // (significand of (M+ - M-), implicit exponent is e)
13253|     32|    std::uint64_t dist  = diyfp::sub(M_plus, w      ).f; // (significand of (M+ - w ), implicit exponent is e)
13254|       |
13255|       |    // Split M+ = f * 2^e into two parts p1 and p2 (note: e < 0):
13256|       |    //
13257|       |    //      M+ = f * 2^e
13258|       |    //         = ((f div 2^-e) * 2^-e + (f mod 2^-e)) * 2^e
13259|       |    //         = ((p1        ) * 2^-e + (p2        )) * 2^e
13260|       |    //         = p1 + p2 * 2^e
13261|       |
13262|     32|    const diyfp one(std::uint64_t{1} << -M_plus.e, M_plus.e);
13263|       |
13264|     32|    auto p1 = static_cast<std::uint32_t>(M_plus.f >> -one.e); // p1 = f div 2^-e (Since -e >= 32, p1 fits into a 32-bit int.)
13265|     32|    std::uint64_t p2 = M_plus.f & (one.f - 1);                    // p2 = f mod 2^-e
13266|       |
13267|       |    // 1)
13268|       |    //
13269|       |    // Generate the digits of the integral part p1 = d[n-1]...d[1]d[0]
13270|       |
13271|     32|    assert(p1 > 0);
13272|       |
13273|      0|    std::uint32_t pow10;
13274|     32|    const int k = find_largest_pow10(p1, pow10);
13275|       |
13276|       |    //      10^(k-1) <= p1 < 10^k, pow10 = 10^(k-1)
13277|       |    //
13278|       |    //      p1 = (p1 div 10^(k-1)) * 10^(k-1) + (p1 mod 10^(k-1))
13279|       |    //         = (d[k-1]         ) * 10^(k-1) + (p1 mod 10^(k-1))
13280|       |    //
13281|       |    //      M+ = p1                                             + p2 * 2^e
13282|       |    //         = d[k-1] * 10^(k-1) + (p1 mod 10^(k-1))          + p2 * 2^e
13283|       |    //         = d[k-1] * 10^(k-1) + ((p1 mod 10^(k-1)) * 2^-e + p2) * 2^e
13284|       |    //         = d[k-1] * 10^(k-1) + (                         rest) * 2^e
13285|       |    //
13286|       |    // Now generate the digits d[n] of p1 from left to right (n = k-1,...,0)
13287|       |    //
13288|       |    //      p1 = d[k-1]...d[n] * 10^n + d[n-1]...d[0]
13289|       |    //
13290|       |    // but stop as soon as
13291|       |    //
13292|       |    //      rest * 2^e = (d[n-1]...d[0] * 2^-e + p2) * 2^e <= delta * 2^e
13293|       |
13294|     32|    int n = k;
13295|    108|    while (n > 0)
13296|    103|    {
13297|       |        // Invariants:
13298|       |        //      M+ = buffer * 10^n + (p1 + p2 * 2^e)    (buffer = 0 for n = k)
13299|       |        //      pow10 = 10^(n-1) <= p1 < 10^n
13300|       |        //
13301|    103|        const std::uint32_t d = p1 / pow10;  // d = p1 div 10^(n-1)
13302|    103|        const std::uint32_t r = p1 % pow10;  // r = p1 mod 10^(n-1)
13303|       |        //
13304|       |        //      M+ = buffer * 10^n + (d * 10^(n-1) + r) + p2 * 2^e
13305|       |        //         = (buffer * 10 + d) * 10^(n-1) + (r + p2 * 2^e)
13306|       |        //
13307|    103|        assert(d <= 9);
13308|      0|        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d
13309|       |        //
13310|       |        //      M+ = buffer * 10^(n-1) + (r + p2 * 2^e)
13311|       |        //
13312|    103|        p1 = r;
13313|    103|        n--;
13314|       |        //
13315|       |        //      M+ = buffer * 10^n + (p1 + p2 * 2^e)
13316|       |        //      pow10 = 10^n
13317|       |        //
13318|       |
13319|       |        // Now check if enough digits have been generated.
13320|       |        // Compute
13321|       |        //
13322|       |        //      p1 + p2 * 2^e = (p1 * 2^-e + p2) * 2^e = rest * 2^e
13323|       |        //
13324|       |        // Note:
13325|       |        // Since rest and delta share the same exponent e, it suffices to
13326|       |        // compare the significands.
13327|    103|        const std::uint64_t rest = (std::uint64_t{p1} << -one.e) + p2;
13328|    103|        if (rest <= delta)
13329|     27|        {
13330|       |            // V = buffer * 10^n, with M- <= V <= M+.
13331|       |
13332|     27|            decimal_exponent += n;
13333|       |
13334|       |            // We may now just stop. But instead look if the buffer could be
13335|       |            // decremented to bring V closer to w.
13336|       |            //
13337|       |            // pow10 = 10^n is now 1 ulp in the decimal representation V.
13338|       |            // The rounding procedure works with diyfp's with an implicit
13339|       |            // exponent of e.
13340|       |            //
13341|       |            //      10^n = (10^n * 2^-e) * 2^e = ulp * 2^e
13342|       |            //
13343|     27|            const std::uint64_t ten_n = std::uint64_t{pow10} << -one.e;
13344|     27|            grisu2_round(buffer, length, dist, delta, rest, ten_n);
13345|       |
13346|     27|            return;
13347|     27|        }
13348|       |
13349|     76|        pow10 /= 10;
13350|       |        //
13351|       |        //      pow10 = 10^(n-1) <= p1 < 10^n
13352|       |        // Invariants restored.
13353|     76|    }
13354|       |
13355|       |    // 2)
13356|       |    //
13357|       |    // The digits of the integral part have been generated:
13358|       |    //
13359|       |    //      M+ = d[k-1]...d[1]d[0] + p2 * 2^e
13360|       |    //         = buffer            + p2 * 2^e
13361|       |    //
13362|       |    // Now generate the digits of the fractional part p2 * 2^e.
13363|       |    //
13364|       |    // Note:
13365|       |    // No decimal point is generated: the exponent is adjusted instead.
13366|       |    //
13367|       |    // p2 actually represents the fraction
13368|       |    //
13369|       |    //      p2 * 2^e
13370|       |    //          = p2 / 2^-e
13371|       |    //          = d[-1] / 10^1 + d[-2] / 10^2 + ...
13372|       |    //
13373|       |    // Now generate the digits d[-m] of p1 from left to right (m = 1,2,...)
13374|       |    //
13375|       |    //      p2 * 2^e = d[-1]d[-2]...d[-m] * 10^-m
13376|       |    //                      + 10^-m * (d[-m-1] / 10^1 + d[-m-2] / 10^2 + ...)
13377|       |    //
13378|       |    // using
13379|       |    //
13380|       |    //      10^m * p2 = ((10^m * p2) div 2^-e) * 2^-e + ((10^m * p2) mod 2^-e)
13381|       |    //                = (                   d) * 2^-e + (                   r)
13382|       |    //
13383|       |    // or
13384|       |    //      10^m * p2 * 2^e = d + r * 2^e
13385|       |    //
13386|       |    // i.e.
13387|       |    //
13388|       |    //      M+ = buffer + p2 * 2^e
13389|       |    //         = buffer + 10^-m * (d + r * 2^e)
13390|       |    //         = (buffer * 10^m + d) * 10^-m + 10^-m * r * 2^e
13391|       |    //
13392|       |    // and stop as soon as 10^-m * r * 2^e <= delta * 2^e
13393|       |
13394|      5|    assert(p2 > delta);
13395|       |
13396|      0|    int m = 0;
13397|      5|    for (;;)
13398|     16|    {
13399|       |        // Invariant:
13400|       |        //      M+ = buffer * 10^-m + 10^-m * (d[-m-1] / 10 + d[-m-2] / 10^2 + ...) * 2^e
13401|       |        //         = buffer * 10^-m + 10^-m * (p2                                 ) * 2^e
13402|       |        //         = buffer * 10^-m + 10^-m * (1/10 * (10 * p2)                   ) * 2^e
13403|       |        //         = buffer * 10^-m + 10^-m * (1/10 * ((10*p2 div 2^-e) * 2^-e + (10*p2 mod 2^-e)) * 2^e
13404|       |        //
13405|     16|        assert(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);
13406|      0|        p2 *= 10;
13407|     16|        const std::uint64_t d = p2 >> -one.e;     // d = (10 * p2) div 2^-e
13408|     16|        const std::uint64_t r = p2 & (one.f - 1); // r = (10 * p2) mod 2^-e
13409|       |        //
13410|       |        //      M+ = buffer * 10^-m + 10^-m * (1/10 * (d * 2^-e + r) * 2^e
13411|       |        //         = buffer * 10^-m + 10^-m * (1/10 * (d + r * 2^e))
13412|       |        //         = (buffer * 10 + d) * 10^(-m-1) + 10^(-m-1) * r * 2^e
13413|       |        //
13414|     16|        assert(d <= 9);
13415|      0|        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d
13416|       |        //
13417|       |        //      M+ = buffer * 10^(-m-1) + 10^(-m-1) * r * 2^e
13418|       |        //
13419|     16|        p2 = r;
13420|     16|        m++;
13421|       |        //
13422|       |        //      M+ = buffer * 10^-m + 10^-m * p2 * 2^e
13423|       |        // Invariant restored.
13424|       |
13425|       |        // Check if enough digits have been generated.
13426|       |        //
13427|       |        //      10^-m * p2 * 2^e <= delta * 2^e
13428|       |        //              p2 * 2^e <= 10^m * delta * 2^e
13429|       |        //                    p2 <= 10^m * delta
13430|     16|        delta *= 10;
13431|     16|        dist  *= 10;
13432|     16|        if (p2 <= delta)
13433|      5|        {
13434|      5|            break;
13435|      5|        }
13436|     16|    }
13437|       |
13438|       |    // V = buffer * 10^-m, with M- <= V <= M+.
13439|       |
13440|      5|    decimal_exponent -= m;
13441|       |
13442|       |    // 1 ulp in the decimal representation is now 10^-m.
13443|       |    // Since delta and dist are now scaled by 10^m, we need to do the
13444|       |    // same with ulp in order to keep the units in sync.
13445|       |    //
13446|       |    //      10^m * 10^-m = 1 = 2^-e * 2^e = ten_m * 2^e
13447|       |    //
13448|      5|    const std::uint64_t ten_m = one.f;
13449|      5|    grisu2_round(buffer, length, dist, delta, p2, ten_m);
13450|       |
13451|       |    // By construction this algorithm generates the shortest possible decimal
13452|       |    // number (Loitsch, Theorem 6.2) which rounds back to w.
13453|       |    // For an input number of precision p, at least
13454|       |    //
13455|       |    //      N = 1 + ceil(p * log_10(2))
13456|       |    //
13457|       |    // decimal digits are sufficient to identify all binary floating-point
13458|       |    // numbers (Matula, "In-and-Out conversions").
13459|       |    // This implies that the algorithm does not produce more than N decimal
13460|       |    // digits.
13461|       |    //
13462|       |    //      N = 17 for p = 53 (IEEE double precision)
13463|       |    //      N = 9  for p = 24 (IEEE single precision)
13464|      5|}
13465|       |
13466|       |/*!
13467|       |v = buf * 10^decimal_exponent
13468|       |len is the length of the buffer (number of decimal digits)
13469|       |The buffer must be large enough, i.e. >= max_digits10.
13470|       |*/
13471|       |JSON_HEDLEY_NON_NULL(1)
13472|       |inline void grisu2(char* buf, int& len, int& decimal_exponent,
13473|       |                   diyfp m_minus, diyfp v, diyfp m_plus)
13474|     32|{
13475|     32|    assert(m_plus.e == m_minus.e);
13476|      0|    assert(m_plus.e == v.e);
13477|       |
13478|       |    //  --------(-----------------------+-----------------------)--------    (A)
13479|       |    //          m-                      v                       m+
13480|       |    //
13481|       |    //  --------------------(-----------+-----------------------)--------    (B)
13482|       |    //                      m-          v                       m+
13483|       |    //
13484|       |    // First scale v (and m- and m+) such that the exponent is in the range
13485|       |    // [alpha, gamma].
13486|       |
13487|      0|    const cached_power cached = get_cached_power_for_binary_exponent(m_plus.e);
13488|       |
13489|     32|    const diyfp c_minus_k(cached.f, cached.e); // = c ~= 10^-k
13490|       |
13491|       |    // The exponent of the products is = v.e + c_minus_k.e + q and is in the range [alpha,gamma]
13492|     32|    const diyfp w       = diyfp::mul(v,       c_minus_k);
13493|     32|    const diyfp w_minus = diyfp::mul(m_minus, c_minus_k);
13494|     32|    const diyfp w_plus  = diyfp::mul(m_plus,  c_minus_k);
13495|       |
13496|       |    //  ----(---+---)---------------(---+---)---------------(---+---)----
13497|       |    //          w-                      w                       w+
13498|       |    //          = c*m-                  = c*v                   = c*m+
13499|       |    //
13500|       |    // diyfp::mul rounds its result and c_minus_k is approximated too. w, w- and
13501|       |    // w+ are now off by a small amount.
13502|       |    // In fact:
13503|       |    //
13504|       |    //      w - v * 10^k < 1 ulp
13505|       |    //
13506|       |    // To account for this inaccuracy, add resp. subtract 1 ulp.
13507|       |    //
13508|       |    //  --------+---[---------------(---+---)---------------]---+--------
13509|       |    //          w-  M-                  w                   M+  w+
13510|       |    //
13511|       |    // Now any number in [M-, M+] (bounds included) will round to w when input,
13512|       |    // regardless of how the input rounding algorithm breaks ties.
13513|       |    //
13514|       |    // And digit_gen generates the shortest possible such number in [M-, M+].
13515|       |    // Note that this does not mean that Grisu2 always generates the shortest
13516|       |    // possible number in the interval (m-, m+).
13517|     32|    const diyfp M_minus(w_minus.f + 1, w_minus.e);
13518|     32|    const diyfp M_plus (w_plus.f  - 1, w_plus.e );
13519|       |
13520|     32|    decimal_exponent = -cached.k; // = -(-k) = k
13521|       |
13522|     32|    grisu2_digit_gen(buf, len, decimal_exponent, M_minus, w, M_plus);
13523|     32|}
13524|       |
13525|       |/*!
13526|       |v = buf * 10^decimal_exponent
13527|       |len is the length of the buffer (number of decimal digits)
13528|       |The buffer must be large enough, i.e. >= max_digits10.
13529|       |*/
13530|       |template <typename FloatType>
13531|       |JSON_HEDLEY_NON_NULL(1)
13532|       |void grisu2(char* buf, int& len, int& decimal_exponent, FloatType value)
13533|     32|{
13534|     32|    static_assert(diyfp::kPrecision >= std::numeric_limits<FloatType>::digits + 3,
13535|     32|                  "internal error: not enough precision");
13536|       |
13537|     32|    assert(std::isfinite(value));
13538|      0|    assert(value > 0);
13539|       |
13540|       |    // If the neighbors (and boundaries) of 'value' are always computed for double-precision
13541|       |    // numbers, all float's can be recovered using strtod (and strtof). However, the resulting
13542|       |    // decimal representations are not exactly "short".
13543|       |    //
13544|       |    // The documentation for 'std::to_chars' (https://en.cppreference.com/w/cpp/utility/to_chars)
13545|       |    // says "value is converted to a string as if by std::sprintf in the default ("C") locale"
13546|       |    // and since sprintf promotes float's to double's, I think this is exactly what 'std::to_chars'
13547|       |    // does.
13548|       |    // On the other hand, the documentation for 'std::to_chars' requires that "parsing the
13549|       |    // representation using the corresponding std::from_chars function recovers value exactly". That
13550|       |    // indicates that single precision floating-point numbers should be recovered using
13551|       |    // 'std::strtof'.
13552|       |    //
13553|       |    // NB: If the neighbors are computed for single-precision numbers, there is a single float
13554|       |    //     (7.0385307e-26f) which can't be recovered using strtod. The resulting double precision
13555|       |    //     value is off by 1 ulp.
13556|       |#if 0
13557|       |    const boundaries w = compute_boundaries(static_cast<double>(value));
13558|       |#else
13559|      0|    const boundaries w = compute_boundaries(value);
13560|     32|#endif
13561|       |
13562|     32|    grisu2(buf, len, decimal_exponent, w.minus, w.w, w.plus);
13563|     32|}
13564|       |
13565|       |/*!
13566|       |@brief appends a decimal representation of e to buf
13567|       |@return a pointer to the element following the exponent.
13568|       |@pre -1000 < e < 1000
13569|       |*/
13570|       |JSON_HEDLEY_NON_NULL(1)
13571|       |JSON_HEDLEY_RETURNS_NON_NULL
13572|       |inline char* append_exponent(char* buf, int e)
13573|      0|{
13574|      0|    assert(e > -1000);
13575|      0|    assert(e <  1000);
13576|       |
13577|      0|    if (e < 0)
13578|      0|    {
13579|      0|        e = -e;
13580|      0|        *buf++ = '-';
13581|      0|    }
13582|      0|    else
13583|      0|    {
13584|      0|        *buf++ = '+';
13585|      0|    }
13586|       |
13587|      0|    auto k = static_cast<std::uint32_t>(e);
13588|      0|    if (k < 10)
13589|      0|    {
13590|       |        // Always print at least two digits in the exponent.
13591|       |        // This is for compatibility with printf("%g").
13592|      0|        *buf++ = '0';
13593|      0|        *buf++ = static_cast<char>('0' + k);
13594|      0|    }
13595|      0|    else if (k < 100)
13596|      0|    {
13597|      0|        *buf++ = static_cast<char>('0' + k / 10);
13598|      0|        k %= 10;
13599|      0|        *buf++ = static_cast<char>('0' + k);
13600|      0|    }
13601|      0|    else
13602|      0|    {
13603|      0|        *buf++ = static_cast<char>('0' + k / 100);
13604|      0|        k %= 100;
13605|      0|        *buf++ = static_cast<char>('0' + k / 10);
13606|      0|        k %= 10;
13607|      0|        *buf++ = static_cast<char>('0' + k);
13608|      0|    }
13609|       |
13610|      0|    return buf;
13611|      0|}
13612|       |
13613|       |/*!
13614|       |@brief prettify v = buf * 10^decimal_exponent
13615|       |
13616|       |If v is in the range [10^min_exp, 10^max_exp) it will be printed in fixed-point
13617|       |notation. Otherwise it will be printed in exponential notation.
13618|       |
13619|       |@pre min_exp < 0
13620|       |@pre max_exp > 0
13621|       |*/
13622|       |JSON_HEDLEY_NON_NULL(1)
13623|       |JSON_HEDLEY_RETURNS_NON_NULL
13624|       |inline char* format_buffer(char* buf, int len, int decimal_exponent,
13625|       |                           int min_exp, int max_exp)
13626|     32|{
13627|     32|    assert(min_exp < 0);
13628|      0|    assert(max_exp > 0);
13629|       |
13630|      0|    const int k = len;
13631|     32|    const int n = len + decimal_exponent;
13632|       |
13633|       |    // v = buf * 10^(n-k)
13634|       |    // k is the length of the buffer (number of decimal digits)
13635|       |    // n is the position of the decimal point relative to the start of the buffer.
13636|       |
13637|     32|    if (k <= n and n <= max_exp)
13638|      4|    {
13639|       |        // digits[000]
13640|       |        // len <= max_exp + 2
13641|       |
13642|      4|        std::memset(buf + k, '0', static_cast<size_t>(n - k));
13643|       |        // Make it look like a floating-point number (#362, #378)
13644|      4|        buf[n + 0] = '.';
13645|      4|        buf[n + 1] = '0';
13646|      4|        return buf + (n + 2);
13647|      4|    }
13648|       |
13649|     28|    if (0 < n and n <= max_exp)
13650|     27|    {
13651|       |        // dig.its
13652|       |        // len <= max_digits10 + 1
13653|       |
13654|     27|        assert(k > n);
13655|       |
13656|      0|        std::memmove(buf + (n + 1), buf + n, static_cast<size_t>(k - n));
13657|     27|        buf[n] = '.';
13658|     27|        return buf + (k + 1);
13659|     27|    }
13660|       |
13661|      1|    if (min_exp < n and n <= 0)
13662|      1|    {
13663|       |        // 0.[000]digits
13664|       |        // len <= 2 + (-min_exp - 1) + max_digits10
13665|       |
13666|      1|        std::memmove(buf + (2 + -n), buf, static_cast<size_t>(k));
13667|      1|        buf[0] = '0';
13668|      1|        buf[1] = '.';
13669|      1|        std::memset(buf + 2, '0', static_cast<size_t>(-n));
13670|      1|        return buf + (2 + (-n) + k);
13671|      1|    }
13672|       |
13673|      0|    if (k == 1)
13674|      0|    {
13675|       |        // dE+123
13676|       |        // len <= 1 + 5
13677|       |
13678|      0|        buf += 1;
13679|      0|    }
13680|      0|    else
13681|      0|    {
13682|       |        // d.igitsE+123
13683|       |        // len <= max_digits10 + 1 + 5
13684|       |
13685|      0|        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k - 1));
13686|      0|        buf[1] = '.';
13687|      0|        buf += 1 + k;
13688|      0|    }
13689|       |
13690|      0|    *buf++ = 'e';
13691|      0|    return append_exponent(buf, n - 1);
13692|      1|}
13693|       |
13694|       |} // namespace dtoa_impl
13695|       |
13696|       |/*!
13697|       |@brief generates a decimal representation of the floating-point number value in [first, last).
13698|       |
13699|       |The format of the resulting decimal representation is similar to printf's %g
13700|       |format. Returns an iterator pointing past-the-end of the decimal representation.
13701|       |
13702|       |@note The input number must be finite, i.e. NaN's and Inf's are not supported.
13703|       |@note The buffer must be large enough.
13704|       |@note The result is NOT null-terminated.
13705|       |*/
13706|       |template <typename FloatType>
13707|       |JSON_HEDLEY_NON_NULL(1, 2)
13708|       |JSON_HEDLEY_RETURNS_NON_NULL
13709|       |char* to_chars(char* first, const char* last, FloatType value)
13710|     33|{
13711|     33|    static_cast<void>(last); // maybe unused - fix warning
13712|     33|    assert(std::isfinite(value));
13713|       |
13714|       |    // Use signbit(value) instead of (value < 0) since signbit works for -0.
13715|     33|    if (std::signbit(value))
13716|      2|    {
13717|      2|        value = -value;
13718|      2|        *first++ = '-';
13719|      2|    }
13720|       |
13721|     33|    if (value == 0) // +-0
13722|      1|    {
13723|      1|        *first++ = '0';
13724|       |        // Make it look like a floating-point number (#362, #378)
13725|      1|        *first++ = '.';
13726|      1|        *first++ = '0';
13727|      1|        return first;
13728|      1|    }
13729|       |
13730|     32|    assert(last - first >= std::numeric_limits<FloatType>::max_digits10);
13731|       |
13732|       |    // Compute v = buffer * 10^decimal_exponent.
13733|       |    // The decimal digits are stored in the buffer, which needs to be interpreted
13734|       |    // as an unsigned decimal integer.
13735|       |    // len is the length of the buffer, i.e. the number of decimal digits.
13736|      0|    int len = 0;
13737|     32|    int decimal_exponent = 0;
13738|     32|    dtoa_impl::grisu2(first, len, decimal_exponent, value);
13739|       |
13740|     32|    assert(len <= std::numeric_limits<FloatType>::max_digits10);
13741|       |
13742|       |    // Format the buffer like printf("%.*g", prec, value)
13743|      0|    constexpr int kMinExp = -4;
13744|       |    // Use digits10 here to increase compatibility with version 2.
13745|     32|    constexpr int kMaxExp = std::numeric_limits<FloatType>::digits10;
13746|       |
13747|     32|    assert(last - first >= kMaxExp + 2);
13748|      0|    assert(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);
13749|      0|    assert(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);
13750|       |
13751|      0|    return dtoa_impl::format_buffer(first, len, decimal_exponent, kMinExp, kMaxExp);
13752|     33|}
13753|       |
13754|       |} // namespace detail
13755|       |} // namespace nlohmann
13756|       |
13757|       |// #include <nlohmann/detail/exceptions.hpp>
13758|       |
13759|       |// #include <nlohmann/detail/macro_scope.hpp>
13760|       |
13761|       |// #include <nlohmann/detail/meta/cpp_future.hpp>
13762|       |
13763|       |// #include <nlohmann/detail/output/binary_writer.hpp>
13764|       |
13765|       |// #include <nlohmann/detail/output/output_adapters.hpp>
13766|       |
13767|       |// #include <nlohmann/detail/value_t.hpp>
13768|       |
13769|       |
13770|       |namespace nlohmann
13771|       |{
13772|       |namespace detail
13773|       |{
13774|       |///////////////////
13775|       |// serialization //
13776|       |///////////////////
13777|       |
13778|       |/// how to treat decoding errors
13779|       |enum class error_handler_t
13780|       |{
13781|       |    strict,  ///< throw a type_error exception in case of invalid UTF-8
13782|       |    replace, ///< replace invalid UTF-8 sequences with U+FFFD
13783|       |    ignore   ///< ignore invalid UTF-8 sequences
13784|       |};
13785|       |
13786|       |template<typename BasicJsonType>
13787|       |class serializer
13788|       |{
13789|       |    using string_t = typename BasicJsonType::string_t;
13790|       |    using number_float_t = typename BasicJsonType::number_float_t;
13791|       |    using number_integer_t = typename BasicJsonType::number_integer_t;
13792|       |    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
13793|       |    static constexpr std::uint8_t UTF8_ACCEPT = 0;
13794|       |    static constexpr std::uint8_t UTF8_REJECT = 1;
13795|       |
13796|       |  public:
13797|       |    /*!
13798|       |    @param[in] s  output stream to serialize to
13799|       |    @param[in] ichar  indentation character to use
13800|       |    @param[in] error_handler_  how to react on decoding errors
13801|       |    */
13802|       |    serializer(output_adapter_t<char> s, const char ichar,
13803|       |               error_handler_t error_handler_ = error_handler_t::strict)
13804|       |        : o(std::move(s))
13805|       |        , loc(std::localeconv())
13806|       |        , thousands_sep(loc->thousands_sep == nullptr ? '\0' : * (loc->thousands_sep))
13807|       |        , decimal_point(loc->decimal_point == nullptr ? '\0' : * (loc->decimal_point))
13808|       |        , indent_char(ichar)
13809|       |        , indent_string(512, indent_char)
13810|       |        , error_handler(error_handler_)
13811|     88|    {}
13812|       |
13813|       |    // delete because of pointer members
13814|       |    serializer(const serializer&) = delete;
13815|       |    serializer& operator=(const serializer&) = delete;
13816|       |    serializer(serializer&&) = delete;
13817|       |    serializer& operator=(serializer&&) = delete;
13818|     88|    ~serializer() = default;
13819|       |
13820|       |    /*!
13821|       |    @brief internal implementation of the serialization function
13822|       |
13823|       |    This function is called by the public member function dump and organizes
13824|       |    the serialization internally. The indentation level is propagated as
13825|       |    additional parameter. In case of arrays and objects, the function is
13826|       |    called recursively.
13827|       |
13828|       |    - strings and object keys are escaped using `escape_string()`
13829|       |    - integer numbers are converted implicitly via `operator<<`
13830|       |    - floating-point numbers are converted to a string using `"%g"` format
13831|       |
13832|       |    @param[in] val             value to serialize
13833|       |    @param[in] pretty_print    whether the output shall be pretty-printed
13834|       |    @param[in] indent_step     the indent level
13835|       |    @param[in] current_indent  the current indent level (only used internally)
13836|       |    */
13837|       |    void dump(const BasicJsonType& val, const bool pretty_print,
13838|       |              const bool ensure_ascii,
13839|       |              const unsigned int indent_step,
13840|       |              const unsigned int current_indent = 0)
13841|  2.46k|    {
13842|  2.46k|        switch (val.m_type)
13843|  2.46k|        {
13844|    330|            case value_t::object:
13845|    330|            {
13846|    330|                if (val.m_value.object->empty())
13847|      6|                {
13848|      6|                    o->write_characters("{}", 2);
13849|      6|                    return;
13850|      6|                }
13851|       |
13852|    324|                if (pretty_print)
13853|    296|                {
13854|    296|                    o->write_characters("{\n", 2);
13855|       |
13856|       |                    // variable to hold indentation for recursive calls
13857|    296|                    const auto new_indent = current_indent + indent_step;
13858|    296|                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))
13859|      0|                    {
13860|      0|                        indent_string.resize(indent_string.size() * 2, ' ');
13861|      0|                    }
13862|       |
13863|       |                    // first n-1 elements
13864|    296|                    auto i = val.m_value.object->cbegin();
13865|  2.12k|                    for (std::size_t cnt = 0; cnt < val.m_value.object->size() - 1; ++cnt, ++i)
13866|  1.83k|                    {
13867|  1.83k|                        o->write_characters(indent_string.c_str(), new_indent);
13868|  1.83k|                        o->write_character('\"');
13869|  1.83k|                        dump_escaped(i->first, ensure_ascii);
13870|  1.83k|                        o->write_characters("\": ", 3);
13871|  1.83k|                        dump(i->second, true, ensure_ascii, indent_step, new_indent);
13872|  1.83k|                        o->write_characters(",\n", 2);
13873|  1.83k|                    }
13874|       |
13875|       |                    // last element
13876|    296|                    assert(i != val.m_value.object->cend());
13877|      0|                    assert(std::next(i) == val.m_value.object->cend());
13878|      0|                    o->write_characters(indent_string.c_str(), new_indent);
13879|    296|                    o->write_character('\"');
13880|    296|                    dump_escaped(i->first, ensure_ascii);
13881|    296|                    o->write_characters("\": ", 3);
13882|    296|                    dump(i->second, true, ensure_ascii, indent_step, new_indent);
13883|       |
13884|    296|                    o->write_character('\n');
13885|    296|                    o->write_characters(indent_string.c_str(), current_indent);
13886|    296|                    o->write_character('}');
13887|    296|                }
13888|     28|                else
13889|     28|                {
13890|     28|                    o->write_character('{');
13891|       |
13892|       |                    // first n-1 elements
13893|     28|                    auto i = val.m_value.object->cbegin();
13894|    104|                    for (std::size_t cnt = 0; cnt < val.m_value.object->size() - 1; ++cnt, ++i)
13895|     76|                    {
13896|     76|                        o->write_character('\"');
13897|     76|                        dump_escaped(i->first, ensure_ascii);
13898|     76|                        o->write_characters("\":", 2);
13899|     76|                        dump(i->second, false, ensure_ascii, indent_step, current_indent);
13900|     76|                        o->write_character(',');
13901|     76|                    }
13902|       |
13903|       |                    // last element
13904|     28|                    assert(i != val.m_value.object->cend());
13905|      0|                    assert(std::next(i) == val.m_value.object->cend());
13906|      0|                    o->write_character('\"');
13907|     28|                    dump_escaped(i->first, ensure_ascii);
13908|     28|                    o->write_characters("\":", 2);
13909|     28|                    dump(i->second, false, ensure_ascii, indent_step, current_indent);
13910|       |
13911|     28|                    o->write_character('}');
13912|     28|                }
13913|       |
13914|      0|                return;
13915|    330|            }
13916|       |
13917|     43|            case value_t::array:
13918|     43|            {
13919|     43|                if (val.m_value.array->empty())
13920|      8|                {
13921|      8|                    o->write_characters("[]", 2);
13922|      8|                    return;
13923|      8|                }
13924|       |
13925|     35|                if (pretty_print)
13926|     31|                {
13927|     31|                    o->write_characters("[\n", 2);
13928|       |
13929|       |                    // variable to hold indentation for recursive calls
13930|     31|                    const auto new_indent = current_indent + indent_step;
13931|     31|                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))
13932|      0|                    {
13933|      0|                        indent_string.resize(indent_string.size() * 2, ' ');
13934|      0|                    }
13935|       |
13936|       |                    // first n-1 elements
13937|     31|                    for (auto i = val.m_value.array->cbegin();
13938|    133|                            i != val.m_value.array->cend() - 1; ++i)
13939|    102|                    {
13940|    102|                        o->write_characters(indent_string.c_str(), new_indent);
13941|    102|                        dump(*i, true, ensure_ascii, indent_step, new_indent);
13942|    102|                        o->write_characters(",\n", 2);
13943|    102|                    }
13944|       |
13945|       |                    // last element
13946|     31|                    assert(not val.m_value.array->empty());
13947|      0|                    o->write_characters(indent_string.c_str(), new_indent);
13948|     31|                    dump(val.m_value.array->back(), true, ensure_ascii, indent_step, new_indent);
13949|       |
13950|     31|                    o->write_character('\n');
13951|     31|                    o->write_characters(indent_string.c_str(), current_indent);
13952|     31|                    o->write_character(']');
13953|     31|                }
13954|      4|                else
13955|      4|                {
13956|      4|                    o->write_character('[');
13957|       |
13958|       |                    // first n-1 elements
13959|      4|                    for (auto i = val.m_value.array->cbegin();
13960|     10|                            i != val.m_value.array->cend() - 1; ++i)
13961|      6|                    {
13962|      6|                        dump(*i, false, ensure_ascii, indent_step, current_indent);
13963|      6|                        o->write_character(',');
13964|      6|                    }
13965|       |
13966|       |                    // last element
13967|      4|                    assert(not val.m_value.array->empty());
13968|      0|                    dump(val.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);
13969|       |
13970|      4|                    o->write_character(']');
13971|      4|                }
13972|       |
13973|      0|                return;
13974|     43|            }
13975|       |
13976|  1.43k|            case value_t::string:
13977|  1.43k|            {
13978|  1.43k|                o->write_character('\"');
13979|  1.43k|                dump_escaped(*val.m_value.string, ensure_ascii);
13980|  1.43k|                o->write_character('\"');
13981|  1.43k|                return;
13982|     43|            }
13983|       |
13984|     23|            case value_t::boolean:
13985|     23|            {
13986|     23|                if (val.m_value.boolean)
13987|     16|                {
13988|     16|                    o->write_characters("true", 4);
13989|     16|                }
13990|      7|                else
13991|      7|                {
13992|      7|                    o->write_characters("false", 5);
13993|      7|                }
13994|     23|                return;
13995|     43|            }
13996|       |
13997|    191|            case value_t::number_integer:
13998|    191|            {
13999|    191|                dump_integer(val.m_value.number_integer);
14000|    191|                return;
14001|     43|            }
14002|       |
14003|    385|            case value_t::number_unsigned:
14004|    385|            {
14005|    385|                dump_integer(val.m_value.number_unsigned);
14006|    385|                return;
14007|     43|            }
14008|       |
14009|     33|            case value_t::number_float:
14010|     33|            {
14011|     33|                dump_float(val.m_value.number_float);
14012|     33|                return;
14013|     43|            }
14014|       |
14015|      0|            case value_t::discarded:
14016|      0|            {
14017|      0|                o->write_characters("<discarded>", 11);
14018|      0|                return;
14019|     43|            }
14020|       |
14021|     17|            case value_t::null:
14022|     17|            {
14023|     17|                o->write_characters("null", 4);
14024|     17|                return;
14025|     43|            }
14026|       |
14027|      0|            default:            // LCOV_EXCL_LINE
14028|      0|                assert(false);  // LCOV_EXCL_LINE
14029|  2.46k|        }
14030|  2.46k|    }
14031|       |
14032|       |  private:
14033|       |    /*!
14034|       |    @brief dump escaped string
14035|       |
14036|       |    Escape a string by replacing certain special characters by a sequence of an
14037|       |    escape character (backslash) and another character and other control
14038|       |    characters by a sequence of "\u" followed by a four-digit hex
14039|       |    representation. The escaped string is written to output stream @a o.
14040|       |
14041|       |    @param[in] s  the string to escape
14042|       |    @param[in] ensure_ascii  whether to escape non-ASCII characters with
14043|       |                             \uXXXX sequences
14044|       |
14045|       |    @complexity Linear in the length of string @a s.
14046|       |    */
14047|       |    void dump_escaped(const string_t& s, const bool ensure_ascii)
14048|  3.66k|    {
14049|  3.66k|        std::uint32_t codepoint;
14050|  3.66k|        std::uint8_t state = UTF8_ACCEPT;
14051|  3.66k|        std::size_t bytes = 0;  // number of bytes written to string_buffer
14052|       |
14053|       |        // number of bytes written at the point of the last valid byte
14054|  3.66k|        std::size_t bytes_after_last_accept = 0;
14055|  3.66k|        std::size_t undumped_chars = 0;
14056|       |
14057|  33.2k|        for (std::size_t i = 0; i < s.size(); ++i)
14058|  29.5k|        {
14059|  29.5k|            const auto byte = static_cast<uint8_t>(s[i]);
14060|       |
14061|  29.5k|            switch (decode(state, codepoint, byte))
14062|  29.5k|            {
14063|  29.5k|                case UTF8_ACCEPT:  // decode found a new code point
14064|  29.5k|                {
14065|  29.5k|                    switch (codepoint)
14066|  29.5k|                    {
14067|      0|                        case 0x08: // backspace
14068|      0|                        {
14069|      0|                            string_buffer[bytes++] = '\\';
14070|      0|                            string_buffer[bytes++] = 'b';
14071|      0|                            break;
14072|      0|                        }
14073|       |
14074|      0|                        case 0x09: // horizontal tab
14075|      0|                        {
14076|      0|                            string_buffer[bytes++] = '\\';
14077|      0|                            string_buffer[bytes++] = 't';
14078|      0|                            break;
14079|      0|                        }
14080|       |
14081|     93|                        case 0x0A: // newline
14082|     93|                        {
14083|     93|                            string_buffer[bytes++] = '\\';
14084|     93|                            string_buffer[bytes++] = 'n';
14085|     93|                            break;
14086|      0|                        }
14087|       |
14088|      0|                        case 0x0C: // formfeed
14089|      0|                        {
14090|      0|                            string_buffer[bytes++] = '\\';
14091|      0|                            string_buffer[bytes++] = 'f';
14092|      0|                            break;
14093|      0|                        }
14094|       |
14095|      0|                        case 0x0D: // carriage return
14096|      0|                        {
14097|      0|                            string_buffer[bytes++] = '\\';
14098|      0|                            string_buffer[bytes++] = 'r';
14099|      0|                            break;
14100|      0|                        }
14101|       |
14102|      0|                        case 0x22: // quotation mark
14103|      0|                        {
14104|      0|                            string_buffer[bytes++] = '\\';
14105|      0|                            string_buffer[bytes++] = '\"';
14106|      0|                            break;
14107|      0|                        }
14108|       |
14109|      0|                        case 0x5C: // reverse solidus
14110|      0|                        {
14111|      0|                            string_buffer[bytes++] = '\\';
14112|      0|                            string_buffer[bytes++] = '\\';
14113|      0|                            break;
14114|      0|                        }
14115|       |
14116|  29.4k|                        default:
14117|  29.4k|                        {
14118|       |                            // escape control characters (0x00..0x1F) or, if
14119|       |                            // ensure_ascii parameter is used, non-ASCII characters
14120|  29.4k|                            if ((codepoint <= 0x1F) or (ensure_ascii and (codepoint >= 0x7F)))
14121|      0|                            {
14122|      0|                                if (codepoint <= 0xFFFF)
14123|      0|                                {
14124|      0|                                    (std::snprintf)(string_buffer.data() + bytes, 7, "\\u%04x",
14125|      0|                                                    static_cast<std::uint16_t>(codepoint));
14126|      0|                                    bytes += 6;
14127|      0|                                }
14128|      0|                                else
14129|      0|                                {
14130|      0|                                    (std::snprintf)(string_buffer.data() + bytes, 13, "\\u%04x\\u%04x",
14131|      0|                                                    static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),
14132|      0|                                                    static_cast<std::uint16_t>(0xDC00u + (codepoint & 0x3FFu)));
14133|      0|                                    bytes += 12;
14134|      0|                                }
14135|      0|                            }
14136|  29.4k|                            else
14137|  29.4k|                            {
14138|       |                                // copy byte to buffer (all previous bytes
14139|       |                                // been copied have in default case above)
14140|  29.4k|                                string_buffer[bytes++] = s[i];
14141|  29.4k|                            }
14142|  29.4k|                            break;
14143|      0|                        }
14144|  29.5k|                    }
14145|       |
14146|       |                    // write buffer and reset index; there must be 13 bytes
14147|       |                    // left, as this is the maximal number of bytes to be
14148|       |                    // written ("\uxxxx\uxxxx\0") for one code point
14149|  29.5k|                    if (string_buffer.size() - bytes < 13)
14150|      0|                    {
14151|      0|                        o->write_characters(string_buffer.data(), bytes);
14152|      0|                        bytes = 0;
14153|      0|                    }
14154|       |
14155|       |                    // remember the byte position of this accept
14156|  29.5k|                    bytes_after_last_accept = bytes;
14157|  29.5k|                    undumped_chars = 0;
14158|  29.5k|                    break;
14159|  29.5k|                }
14160|       |
14161|      0|                case UTF8_REJECT:  // decode found invalid UTF-8 byte
14162|      0|                {
14163|      0|                    switch (error_handler)
14164|      0|                    {
14165|      0|                        case error_handler_t::strict:
14166|      0|                        {
14167|      0|                            std::string sn(3, '\0');
14168|      0|                            (std::snprintf)(&sn[0], sn.size(), "%.2X", byte);
14169|      0|                            JSON_THROW(type_error::create(316, "invalid UTF-8 byte at index " + std::to_string(i) + ": 0x" + sn));
14170|      0|                        }
14171|       |
14172|      0|                        case error_handler_t::ignore:
14173|      0|                        case error_handler_t::replace:
14174|      0|                        {
14175|       |                            // in case we saw this character the first time, we
14176|       |                            // would like to read it again, because the byte
14177|       |                            // may be OK for itself, but just not OK for the
14178|       |                            // previous sequence
14179|      0|                            if (undumped_chars > 0)
14180|      0|                            {
14181|      0|                                --i;
14182|      0|                            }
14183|       |
14184|       |                            // reset length buffer to the last accepted index;
14185|       |                            // thus removing/ignoring the invalid characters
14186|      0|                            bytes = bytes_after_last_accept;
14187|       |
14188|      0|                            if (error_handler == error_handler_t::replace)
14189|      0|                            {
14190|       |                                // add a replacement character
14191|      0|                                if (ensure_ascii)
14192|      0|                                {
14193|      0|                                    string_buffer[bytes++] = '\\';
14194|      0|                                    string_buffer[bytes++] = 'u';
14195|      0|                                    string_buffer[bytes++] = 'f';
14196|      0|                                    string_buffer[bytes++] = 'f';
14197|      0|                                    string_buffer[bytes++] = 'f';
14198|      0|                                    string_buffer[bytes++] = 'd';
14199|      0|                                }
14200|      0|                                else
14201|      0|                                {
14202|      0|                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xEF');
14203|      0|                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xBF');
14204|      0|                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xBD');
14205|      0|                                }
14206|       |
14207|       |                                // write buffer and reset index; there must be 13 bytes
14208|       |                                // left, as this is the maximal number of bytes to be
14209|       |                                // written ("\uxxxx\uxxxx\0") for one code point
14210|      0|                                if (string_buffer.size() - bytes < 13)
14211|      0|                                {
14212|      0|                                    o->write_characters(string_buffer.data(), bytes);
14213|      0|                                    bytes = 0;
14214|      0|                                }
14215|       |
14216|      0|                                bytes_after_last_accept = bytes;
14217|      0|                            }
14218|       |
14219|      0|                            undumped_chars = 0;
14220|       |
14221|       |                            // continue processing the string
14222|      0|                            state = UTF8_ACCEPT;
14223|      0|                            break;
14224|      0|                        }
14225|       |
14226|      0|                        default:            // LCOV_EXCL_LINE
14227|      0|                            assert(false);  // LCOV_EXCL_LINE
14228|      0|                    }
14229|      0|                    break;
14230|      0|                }
14231|       |
14232|      4|                default:  // decode found yet incomplete multi-byte code point
14233|      4|                {
14234|      4|                    if (not ensure_ascii)
14235|      4|                    {
14236|       |                        // code point will not be escaped - copy byte to buffer
14237|      4|                        string_buffer[bytes++] = s[i];
14238|      4|                    }
14239|      4|                    ++undumped_chars;
14240|      4|                    break;
14241|      0|                }
14242|  29.5k|            }
14243|  29.5k|        }
14244|       |
14245|       |        // we finished processing the string
14246|  3.66k|        if (JSON_HEDLEY_LIKELY(state == UTF8_ACCEPT))
14247|  3.66k|        {
14248|       |            // write buffer
14249|  3.66k|            if (bytes > 0)
14250|  3.66k|            {
14251|  3.66k|                o->write_characters(string_buffer.data(), bytes);
14252|  3.66k|            }
14253|  3.66k|        }
14254|      0|        else
14255|      0|        {
14256|       |            // we finish reading, but do not accept: string was incomplete
14257|      0|            switch (error_handler)
14258|      0|            {
14259|      0|                case error_handler_t::strict:
14260|      0|                {
14261|      0|                    std::string sn(3, '\0');
14262|      0|                    (std::snprintf)(&sn[0], sn.size(), "%.2X", static_cast<std::uint8_t>(s.back()));
14263|      0|                    JSON_THROW(type_error::create(316, "incomplete UTF-8 string; last byte: 0x" + sn));
14264|      0|                }
14265|       |
14266|      0|                case error_handler_t::ignore:
14267|      0|                {
14268|       |                    // write all accepted bytes
14269|      0|                    o->write_characters(string_buffer.data(), bytes_after_last_accept);
14270|      0|                    break;
14271|      0|                }
14272|       |
14273|      0|                case error_handler_t::replace:
14274|      0|                {
14275|       |                    // write all accepted bytes
14276|      0|                    o->write_characters(string_buffer.data(), bytes_after_last_accept);
14277|       |                    // add a replacement character
14278|      0|                    if (ensure_ascii)
14279|      0|                    {
14280|      0|                        o->write_characters("\\ufffd", 6);
14281|      0|                    }
14282|      0|                    else
14283|      0|                    {
14284|      0|                        o->write_characters("\xEF\xBF\xBD", 3);
14285|      0|                    }
14286|      0|                    break;
14287|      0|                }
14288|       |
14289|      0|                default:            // LCOV_EXCL_LINE
14290|      0|                    assert(false);  // LCOV_EXCL_LINE
14291|      0|            }
14292|      0|        }
14293|  3.66k|    }
14294|       |
14295|       |    /*!
14296|       |    @brief count digits
14297|       |
14298|       |    Count the number of decimal (base 10) digits for an input unsigned integer.
14299|       |
14300|       |    @param[in] x  unsigned integer number to count its digits
14301|       |    @return    number of decimal digits
14302|       |    */
14303|       |    inline unsigned int count_digits(number_unsigned_t x) noexcept
14304|    333|    {
14305|    333|        unsigned int n_digits = 1;
14306|    333|        for (;;)
14307|    364|        {
14308|    364|            if (x < 10)
14309|     31|            {
14310|     31|                return n_digits;
14311|     31|            }
14312|    333|            if (x < 100)
14313|    163|            {
14314|    163|                return n_digits + 1;
14315|    163|            }
14316|    170|            if (x < 1000)
14317|    128|            {
14318|    128|                return n_digits + 2;
14319|    128|            }
14320|     42|            if (x < 10000)
14321|     11|            {
14322|     11|                return n_digits + 3;
14323|     11|            }
14324|     31|            x = x / 10000u;
14325|     31|            n_digits += 4;
14326|     31|        }
14327|    333|    }
14328|       |
14329|       |    /*!
14330|       |    @brief dump an integer
14331|       |
14332|       |    Dump a given integer to output stream @a o. Works internally with
14333|       |    @a number_buffer.
14334|       |
14335|       |    @param[in] x  integer number (signed or unsigned) to dump
14336|       |    @tparam NumberType either @a number_integer_t or @a number_unsigned_t
14337|       |    */
14338|       |    template<typename NumberType, detail::enable_if_t<
14339|       |                 std::is_same<NumberType, number_unsigned_t>::value or
14340|       |                 std::is_same<NumberType, number_integer_t>::value,
14341|       |                 int> = 0>
14342|       |    void dump_integer(NumberType x)
14343|    576|    {
14344|    576|        static constexpr std::array<std::array<char, 2>, 100> digits_to_99
14345|    576|        {
14346|    576|            {
14347|    576|                {{'0', '0'}}, {{'0', '1'}}, {{'0', '2'}}, {{'0', '3'}}, {{'0', '4'}}, {{'0', '5'}}, {{'0', '6'}}, {{'0', '7'}}, {{'0', '8'}}, {{'0', '9'}},
14348|    576|                {{'1', '0'}}, {{'1', '1'}}, {{'1', '2'}}, {{'1', '3'}}, {{'1', '4'}}, {{'1', '5'}}, {{'1', '6'}}, {{'1', '7'}}, {{'1', '8'}}, {{'1', '9'}},
14349|    576|                {{'2', '0'}}, {{'2', '1'}}, {{'2', '2'}}, {{'2', '3'}}, {{'2', '4'}}, {{'2', '5'}}, {{'2', '6'}}, {{'2', '7'}}, {{'2', '8'}}, {{'2', '9'}},
14350|    576|                {{'3', '0'}}, {{'3', '1'}}, {{'3', '2'}}, {{'3', '3'}}, {{'3', '4'}}, {{'3', '5'}}, {{'3', '6'}}, {{'3', '7'}}, {{'3', '8'}}, {{'3', '9'}},
14351|    576|                {{'4', '0'}}, {{'4', '1'}}, {{'4', '2'}}, {{'4', '3'}}, {{'4', '4'}}, {{'4', '5'}}, {{'4', '6'}}, {{'4', '7'}}, {{'4', '8'}}, {{'4', '9'}},
14352|    576|                {{'5', '0'}}, {{'5', '1'}}, {{'5', '2'}}, {{'5', '3'}}, {{'5', '4'}}, {{'5', '5'}}, {{'5', '6'}}, {{'5', '7'}}, {{'5', '8'}}, {{'5', '9'}},
14353|    576|                {{'6', '0'}}, {{'6', '1'}}, {{'6', '2'}}, {{'6', '3'}}, {{'6', '4'}}, {{'6', '5'}}, {{'6', '6'}}, {{'6', '7'}}, {{'6', '8'}}, {{'6', '9'}},
14354|    576|                {{'7', '0'}}, {{'7', '1'}}, {{'7', '2'}}, {{'7', '3'}}, {{'7', '4'}}, {{'7', '5'}}, {{'7', '6'}}, {{'7', '7'}}, {{'7', '8'}}, {{'7', '9'}},
14355|    576|                {{'8', '0'}}, {{'8', '1'}}, {{'8', '2'}}, {{'8', '3'}}, {{'8', '4'}}, {{'8', '5'}}, {{'8', '6'}}, {{'8', '7'}}, {{'8', '8'}}, {{'8', '9'}},
14356|    576|                {{'9', '0'}}, {{'9', '1'}}, {{'9', '2'}}, {{'9', '3'}}, {{'9', '4'}}, {{'9', '5'}}, {{'9', '6'}}, {{'9', '7'}}, {{'9', '8'}}, {{'9', '9'}},
14357|    576|            }
14358|    576|        };
14359|       |
14360|       |        // special case for "0"
14361|    576|        if (x == 0)
14362|    243|        {
14363|    243|            o->write_character('0');
14364|    243|            return;
14365|    243|        }
14366|       |
14367|       |        // use a pointer to fill the buffer
14368|    333|        auto buffer_ptr = number_buffer.begin();
14369|       |
14370|    333|        const bool is_negative = std::is_same<NumberType, number_integer_t>::value and not(x >= 0); // see issue #755
14371|    333|        number_unsigned_t abs_value;
14372|       |
14373|    333|        unsigned int n_chars;
14374|       |
14375|    333|        if (is_negative)
14376|      5|        {
14377|      5|            *buffer_ptr = '-';
14378|      5|            abs_value = remove_sign(x);
14379|       |
14380|       |            // account one more byte for the minus sign
14381|      5|            n_chars = 1 + count_digits(abs_value);
14382|      5|        }
14383|    328|        else
14384|    328|        {
14385|    328|            abs_value = static_cast<number_unsigned_t>(x);
14386|    328|            n_chars = count_digits(abs_value);
14387|    328|        }
14388|       |
14389|       |        // spare 1 byte for '\0'
14390|    333|        assert(n_chars < number_buffer.size() - 1);
14391|       |
14392|       |        // jump to the end to generate the string from backward
14393|       |        // so we later avoid reversing the result
14394|      0|        buffer_ptr += n_chars;
14395|       |
14396|       |        // Fast int2ascii implementation inspired by "Fastware" talk by Andrei Alexandrescu
14397|       |        // See: https://www.youtube.com/watch?v=o4-CwDo2zpg
14398|    534|        while (abs_value >= 100)
14399|    201|        {
14400|    201|            const auto digits_index = static_cast<unsigned>((abs_value % 100));
14401|    201|            abs_value /= 100;
14402|    201|            *(--buffer_ptr) = digits_to_99[digits_index][1];
14403|    201|            *(--buffer_ptr) = digits_to_99[digits_index][0];
14404|    201|        }
14405|       |
14406|    333|        if (abs_value >= 10)
14407|    174|        {
14408|    174|            const auto digits_index = static_cast<unsigned>(abs_value);
14409|    174|            *(--buffer_ptr) = digits_to_99[digits_index][1];
14410|    174|            *(--buffer_ptr) = digits_to_99[digits_index][0];
14411|    174|        }
14412|    159|        else
14413|    159|        {
14414|    159|            *(--buffer_ptr) = static_cast<char>('0' + abs_value);
14415|    159|        }
14416|       |
14417|    333|        o->write_characters(number_buffer.data(), n_chars);
14418|    333|    }
  ------------------
  | _ZN8nlohmann6detail10serializerINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12dump_integerIlLi0EEEvT_:
  |14343|    191|    {
  |14344|    191|        static constexpr std::array<std::array<char, 2>, 100> digits_to_99
  |14345|    191|        {
  |14346|    191|            {
  |14347|    191|                {{'0', '0'}}, {{'0', '1'}}, {{'0', '2'}}, {{'0', '3'}}, {{'0', '4'}}, {{'0', '5'}}, {{'0', '6'}}, {{'0', '7'}}, {{'0', '8'}}, {{'0', '9'}},
  |14348|    191|                {{'1', '0'}}, {{'1', '1'}}, {{'1', '2'}}, {{'1', '3'}}, {{'1', '4'}}, {{'1', '5'}}, {{'1', '6'}}, {{'1', '7'}}, {{'1', '8'}}, {{'1', '9'}},
  |14349|    191|                {{'2', '0'}}, {{'2', '1'}}, {{'2', '2'}}, {{'2', '3'}}, {{'2', '4'}}, {{'2', '5'}}, {{'2', '6'}}, {{'2', '7'}}, {{'2', '8'}}, {{'2', '9'}},
  |14350|    191|                {{'3', '0'}}, {{'3', '1'}}, {{'3', '2'}}, {{'3', '3'}}, {{'3', '4'}}, {{'3', '5'}}, {{'3', '6'}}, {{'3', '7'}}, {{'3', '8'}}, {{'3', '9'}},
  |14351|    191|                {{'4', '0'}}, {{'4', '1'}}, {{'4', '2'}}, {{'4', '3'}}, {{'4', '4'}}, {{'4', '5'}}, {{'4', '6'}}, {{'4', '7'}}, {{'4', '8'}}, {{'4', '9'}},
  |14352|    191|                {{'5', '0'}}, {{'5', '1'}}, {{'5', '2'}}, {{'5', '3'}}, {{'5', '4'}}, {{'5', '5'}}, {{'5', '6'}}, {{'5', '7'}}, {{'5', '8'}}, {{'5', '9'}},
  |14353|    191|                {{'6', '0'}}, {{'6', '1'}}, {{'6', '2'}}, {{'6', '3'}}, {{'6', '4'}}, {{'6', '5'}}, {{'6', '6'}}, {{'6', '7'}}, {{'6', '8'}}, {{'6', '9'}},
  |14354|    191|                {{'7', '0'}}, {{'7', '1'}}, {{'7', '2'}}, {{'7', '3'}}, {{'7', '4'}}, {{'7', '5'}}, {{'7', '6'}}, {{'7', '7'}}, {{'7', '8'}}, {{'7', '9'}},
  |14355|    191|                {{'8', '0'}}, {{'8', '1'}}, {{'8', '2'}}, {{'8', '3'}}, {{'8', '4'}}, {{'8', '5'}}, {{'8', '6'}}, {{'8', '7'}}, {{'8', '8'}}, {{'8', '9'}},
  |14356|    191|                {{'9', '0'}}, {{'9', '1'}}, {{'9', '2'}}, {{'9', '3'}}, {{'9', '4'}}, {{'9', '5'}}, {{'9', '6'}}, {{'9', '7'}}, {{'9', '8'}}, {{'9', '9'}},
  |14357|    191|            }
  |14358|    191|        };
  |14359|       |
  |14360|       |        // special case for "0"
  |14361|    191|        if (x == 0)
  |14362|      0|        {
  |14363|      0|            o->write_character('0');
  |14364|      0|            return;
  |14365|      0|        }
  |14366|       |
  |14367|       |        // use a pointer to fill the buffer
  |14368|    191|        auto buffer_ptr = number_buffer.begin();
  |14369|       |
  |14370|    191|        const bool is_negative = std::is_same<NumberType, number_integer_t>::value and not(x >= 0); // see issue #755
  |14371|    191|        number_unsigned_t abs_value;
  |14372|       |
  |14373|    191|        unsigned int n_chars;
  |14374|       |
  |14375|    191|        if (is_negative)
  |14376|      5|        {
  |14377|      5|            *buffer_ptr = '-';
  |14378|      5|            abs_value = remove_sign(x);
  |14379|       |
  |14380|       |            // account one more byte for the minus sign
  |14381|      5|            n_chars = 1 + count_digits(abs_value);
  |14382|      5|        }
  |14383|    186|        else
  |14384|    186|        {
  |14385|    186|            abs_value = static_cast<number_unsigned_t>(x);
  |14386|    186|            n_chars = count_digits(abs_value);
  |14387|    186|        }
  |14388|       |
  |14389|       |        // spare 1 byte for '\0'
  |14390|    191|        assert(n_chars < number_buffer.size() - 1);
  |14391|       |
  |14392|       |        // jump to the end to generate the string from backward
  |14393|       |        // so we later avoid reversing the result
  |14394|      0|        buffer_ptr += n_chars;
  |14395|       |
  |14396|       |        // Fast int2ascii implementation inspired by "Fastware" talk by Andrei Alexandrescu
  |14397|       |        // See: https://www.youtube.com/watch?v=o4-CwDo2zpg
  |14398|    285|        while (abs_value >= 100)
  |14399|     94|        {
  |14400|     94|            const auto digits_index = static_cast<unsigned>((abs_value % 100));
  |14401|     94|            abs_value /= 100;
  |14402|     94|            *(--buffer_ptr) = digits_to_99[digits_index][1];
  |14403|     94|            *(--buffer_ptr) = digits_to_99[digits_index][0];
  |14404|     94|        }
  |14405|       |
  |14406|    191|        if (abs_value >= 10)
  |14407|     92|        {
  |14408|     92|            const auto digits_index = static_cast<unsigned>(abs_value);
  |14409|     92|            *(--buffer_ptr) = digits_to_99[digits_index][1];
  |14410|     92|            *(--buffer_ptr) = digits_to_99[digits_index][0];
  |14411|     92|        }
  |14412|     99|        else
  |14413|     99|        {
  |14414|     99|            *(--buffer_ptr) = static_cast<char>('0' + abs_value);
  |14415|     99|        }
  |14416|       |
  |14417|    191|        o->write_characters(number_buffer.data(), n_chars);
  |14418|    191|    }
  ------------------
  | _ZN8nlohmann6detail10serializerINS_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEEE12dump_integerImLi0EEEvT_:
  |14343|    385|    {
  |14344|    385|        static constexpr std::array<std::array<char, 2>, 100> digits_to_99
  |14345|    385|        {
  |14346|    385|            {
  |14347|    385|                {{'0', '0'}}, {{'0', '1'}}, {{'0', '2'}}, {{'0', '3'}}, {{'0', '4'}}, {{'0', '5'}}, {{'0', '6'}}, {{'0', '7'}}, {{'0', '8'}}, {{'0', '9'}},
  |14348|    385|                {{'1', '0'}}, {{'1', '1'}}, {{'1', '2'}}, {{'1', '3'}}, {{'1', '4'}}, {{'1', '5'}}, {{'1', '6'}}, {{'1', '7'}}, {{'1', '8'}}, {{'1', '9'}},
  |14349|    385|                {{'2', '0'}}, {{'2', '1'}}, {{'2', '2'}}, {{'2', '3'}}, {{'2', '4'}}, {{'2', '5'}}, {{'2', '6'}}, {{'2', '7'}}, {{'2', '8'}}, {{'2', '9'}},
  |14350|    385|                {{'3', '0'}}, {{'3', '1'}}, {{'3', '2'}}, {{'3', '3'}}, {{'3', '4'}}, {{'3', '5'}}, {{'3', '6'}}, {{'3', '7'}}, {{'3', '8'}}, {{'3', '9'}},
  |14351|    385|                {{'4', '0'}}, {{'4', '1'}}, {{'4', '2'}}, {{'4', '3'}}, {{'4', '4'}}, {{'4', '5'}}, {{'4', '6'}}, {{'4', '7'}}, {{'4', '8'}}, {{'4', '9'}},
  |14352|    385|                {{'5', '0'}}, {{'5', '1'}}, {{'5', '2'}}, {{'5', '3'}}, {{'5', '4'}}, {{'5', '5'}}, {{'5', '6'}}, {{'5', '7'}}, {{'5', '8'}}, {{'5', '9'}},
  |14353|    385|                {{'6', '0'}}, {{'6', '1'}}, {{'6', '2'}}, {{'6', '3'}}, {{'6', '4'}}, {{'6', '5'}}, {{'6', '6'}}, {{'6', '7'}}, {{'6', '8'}}, {{'6', '9'}},
  |14354|    385|                {{'7', '0'}}, {{'7', '1'}}, {{'7', '2'}}, {{'7', '3'}}, {{'7', '4'}}, {{'7', '5'}}, {{'7', '6'}}, {{'7', '7'}}, {{'7', '8'}}, {{'7', '9'}},
  |14355|    385|                {{'8', '0'}}, {{'8', '1'}}, {{'8', '2'}}, {{'8', '3'}}, {{'8', '4'}}, {{'8', '5'}}, {{'8', '6'}}, {{'8', '7'}}, {{'8', '8'}}, {{'8', '9'}},
  |14356|    385|                {{'9', '0'}}, {{'9', '1'}}, {{'9', '2'}}, {{'9', '3'}}, {{'9', '4'}}, {{'9', '5'}}, {{'9', '6'}}, {{'9', '7'}}, {{'9', '8'}}, {{'9', '9'}},
  |14357|    385|            }
  |14358|    385|        };
  |14359|       |
  |14360|       |        // special case for "0"
  |14361|    385|        if (x == 0)
  |14362|    243|        {
  |14363|    243|            o->write_character('0');
  |14364|    243|            return;
  |14365|    243|        }
  |14366|       |
  |14367|       |        // use a pointer to fill the buffer
  |14368|    142|        auto buffer_ptr = number_buffer.begin();
  |14369|       |
  |14370|    142|        const bool is_negative = std::is_same<NumberType, number_integer_t>::value and not(x >= 0); // see issue #755
  |14371|    142|        number_unsigned_t abs_value;
  |14372|       |
  |14373|    142|        unsigned int n_chars;
  |14374|       |
  |14375|    142|        if (is_negative)
  |14376|      0|        {
  |14377|      0|            *buffer_ptr = '-';
  |14378|      0|            abs_value = remove_sign(x);
  |14379|       |
  |14380|       |            // account one more byte for the minus sign
  |14381|      0|            n_chars = 1 + count_digits(abs_value);
  |14382|      0|        }
  |14383|    142|        else
  |14384|    142|        {
  |14385|    142|            abs_value = static_cast<number_unsigned_t>(x);
  |14386|    142|            n_chars = count_digits(abs_value);
  |14387|    142|        }
  |14388|       |
  |14389|       |        // spare 1 byte for '\0'
  |14390|    142|        assert(n_chars < number_buffer.size() - 1);
  |14391|       |
  |14392|       |        // jump to the end to generate the string from backward
  |14393|       |        // so we later avoid reversing the result
  |14394|      0|        buffer_ptr += n_chars;
  |14395|       |
  |14396|       |        // Fast int2ascii implementation inspired by "Fastware" talk by Andrei Alexandrescu
  |14397|       |        // See: https://www.youtube.com/watch?v=o4-CwDo2zpg
  |14398|    249|        while (abs_value >= 100)
  |14399|    107|        {
  |14400|    107|            const auto digits_index = static_cast<unsigned>((abs_value % 100));
  |14401|    107|            abs_value /= 100;
  |14402|    107|            *(--buffer_ptr) = digits_to_99[digits_index][1];
  |14403|    107|            *(--buffer_ptr) = digits_to_99[digits_index][0];
  |14404|    107|        }
  |14405|       |
  |14406|    142|        if (abs_value >= 10)
  |14407|     82|        {
  |14408|     82|            const auto digits_index = static_cast<unsigned>(abs_value);
  |14409|     82|            *(--buffer_ptr) = digits_to_99[digits_index][1];
  |14410|     82|            *(--buffer_ptr) = digits_to_99[digits_index][0];
  |14411|     82|        }
  |14412|     60|        else
  |14413|     60|        {
  |14414|     60|            *(--buffer_ptr) = static_cast<char>('0' + abs_value);
  |14415|     60|        }
  |14416|       |
  |14417|    142|        o->write_characters(number_buffer.data(), n_chars);
  |14418|    142|    }
  ------------------
14419|       |
14420|       |    /*!
14421|       |    @brief dump a floating-point number
14422|       |
14423|       |    Dump a given floating-point number to output stream @a o. Works internally
14424|       |    with @a number_buffer.
14425|       |
14426|       |    @param[in] x  floating-point number to dump
14427|       |    */
14428|       |    void dump_float(number_float_t x)
14429|     33|    {
14430|       |        // NaN / inf
14431|     33|        if (not std::isfinite(x))
14432|      0|        {
14433|      0|            o->write_characters("null", 4);
14434|      0|            return;
14435|      0|        }
14436|       |
14437|       |        // If number_float_t is an IEEE-754 single or double precision number,
14438|       |        // use the Grisu2 algorithm to produce short numbers which are
14439|       |        // guaranteed to round-trip, using strtof and strtod, resp.
14440|       |        //
14441|       |        // NB: The test below works if <long double> == <double>.
14442|     33|        static constexpr bool is_ieee_single_or_double
14443|     33|            = (std::numeric_limits<number_float_t>::is_iec559 and std::numeric_limits<number_float_t>::digits == 24 and std::numeric_limits<number_float_t>::max_exponent == 128) or
14444|     33|              (std::numeric_limits<number_float_t>::is_iec559 and std::numeric_limits<number_float_t>::digits == 53 and std::numeric_limits<number_float_t>::max_exponent == 1024);
14445|       |
14446|     33|        dump_float(x, std::integral_constant<bool, is_ieee_single_or_double>());
14447|     33|    }
14448|       |
14449|       |    void dump_float(number_float_t x, std::true_type /*is_ieee_single_or_double*/)
14450|     33|    {
14451|     33|        char* begin = number_buffer.data();
14452|     33|        char* end = ::nlohmann::detail::to_chars(begin, begin + number_buffer.size(), x);
14453|       |
14454|     33|        o->write_characters(begin, static_cast<size_t>(end - begin));
14455|     33|    }
14456|       |
14457|       |    void dump_float(number_float_t x, std::false_type /*is_ieee_single_or_double*/)
14458|       |    {
14459|       |        // get number of digits for a float -> text -> float round-trip
14460|       |        static constexpr auto d = std::numeric_limits<number_float_t>::max_digits10;
14461|       |
14462|       |        // the actual conversion
14463|       |        std::ptrdiff_t len = (std::snprintf)(number_buffer.data(), number_buffer.size(), "%.*g", d, x);
14464|       |
14465|       |        // negative value indicates an error
14466|       |        assert(len > 0);
14467|       |        // check if buffer was large enough
14468|       |        assert(static_cast<std::size_t>(len) < number_buffer.size());
14469|       |
14470|       |        // erase thousands separator
14471|       |        if (thousands_sep != '\0')
14472|       |        {
14473|       |            const auto end = std::remove(number_buffer.begin(),
14474|       |                                         number_buffer.begin() + len, thousands_sep);
14475|       |            std::fill(end, number_buffer.end(), '\0');
14476|       |            assert((end - number_buffer.begin()) <= len);
14477|       |            len = (end - number_buffer.begin());
14478|       |        }
14479|       |
14480|       |        // convert decimal point to '.'
14481|       |        if (decimal_point != '\0' and decimal_point != '.')
14482|       |        {
14483|       |            const auto dec_pos = std::find(number_buffer.begin(), number_buffer.end(), decimal_point);
14484|       |            if (dec_pos != number_buffer.end())
14485|       |            {
14486|       |                *dec_pos = '.';
14487|       |            }
14488|       |        }
14489|       |
14490|       |        o->write_characters(number_buffer.data(), static_cast<std::size_t>(len));
14491|       |
14492|       |        // determine if need to append ".0"
14493|       |        const bool value_is_int_like =
14494|       |            std::none_of(number_buffer.begin(), number_buffer.begin() + len + 1,
14495|       |                         [](char c)
14496|       |        {
14497|       |            return c == '.' or c == 'e';
14498|       |        });
14499|       |
14500|       |        if (value_is_int_like)
14501|       |        {
14502|       |            o->write_characters(".0", 2);
14503|       |        }
14504|       |    }
14505|       |
14506|       |    /*!
14507|       |    @brief check whether a string is UTF-8 encoded
14508|       |
14509|       |    The function checks each byte of a string whether it is UTF-8 encoded. The
14510|       |    result of the check is stored in the @a state parameter. The function must
14511|       |    be called initially with state 0 (accept). State 1 means the string must
14512|       |    be rejected, because the current byte is not allowed. If the string is
14513|       |    completely processed, but the state is non-zero, the string ended
14514|       |    prematurely; that is, the last byte indicated more bytes should have
14515|       |    followed.
14516|       |
14517|       |    @param[in,out] state  the state of the decoding
14518|       |    @param[in,out] codep  codepoint (valid only if resulting state is UTF8_ACCEPT)
14519|       |    @param[in] byte       next byte to decode
14520|       |    @return               new state
14521|       |
14522|       |    @note The function has been edited: a std::array is used.
14523|       |
14524|       |    @copyright Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>
14525|       |    @sa http://bjoern.hoehrmann.de/utf-8/decoder/dfa/
14526|       |    */
14527|       |    static std::uint8_t decode(std::uint8_t& state, std::uint32_t& codep, const std::uint8_t byte) noexcept
14528|  29.5k|    {
14529|  29.5k|        static const std::array<std::uint8_t, 400> utf8d =
14530|  29.5k|        {
14531|  29.5k|            {
14532|  29.5k|                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 00..1F
14533|  29.5k|                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20..3F
14534|  29.5k|                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40..5F
14535|  29.5k|                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 60..7F
14536|  29.5k|                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, // 80..9F
14537|  29.5k|                7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, // A0..BF
14538|  29.5k|                8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // C0..DF
14539|  29.5k|                0xA, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, // E0..EF
14540|  29.5k|                0xB, 0x6, 0x6, 0x6, 0x5, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, // F0..FF
14541|  29.5k|                0x0, 0x1, 0x2, 0x3, 0x5, 0x8, 0x7, 0x1, 0x1, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x1, // s0..s0
14542|  29.5k|                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // s1..s2
14543|  29.5k|                1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, // s3..s4
14544|  29.5k|                1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, // s5..s6
14545|  29.5k|                1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 // s7..s8
14546|  29.5k|            }
14547|  29.5k|        };
14548|       |
14549|  29.5k|        const std::uint8_t type = utf8d[byte];
14550|       |
14551|  29.5k|        codep = (state != UTF8_ACCEPT)
14552|  29.5k|                ? (byte & 0x3fu) | (codep << 6u)
14553|  29.5k|                : (0xFFu >> type) & (byte);
14554|       |
14555|  29.5k|        state = utf8d[256u + state * 16u + type];
14556|  29.5k|        return state;
14557|  29.5k|    }
14558|       |
14559|       |    /*
14560|       |     * Overload to make the compiler happy while it is instantiating
14561|       |     * dump_integer for number_unsigned_t.
14562|       |     * Must never be called.
14563|       |     */
14564|       |    number_unsigned_t remove_sign(number_unsigned_t x)
14565|      0|    {
14566|      0|        assert(false); // LCOV_EXCL_LINE
14567|      0|        return x; // LCOV_EXCL_LINE
14568|      0|    }
14569|       |
14570|       |    /*
14571|       |     * Helper function for dump_integer
14572|       |     *
14573|       |     * This function takes a negative signed integer and returns its absolute
14574|       |     * value as unsigned integer. The plus/minus shuffling is necessary as we can
14575|       |     * not directly remove the sign of an arbitrary signed integer as the
14576|       |     * absolute values of INT_MIN and INT_MAX are usually not the same. See
14577|       |     * #1708 for details.
14578|       |     */
14579|       |    inline number_unsigned_t remove_sign(number_integer_t x) noexcept
14580|      5|    {
14581|      5|        assert(x < 0 and x < (std::numeric_limits<number_integer_t>::max)());
14582|      0|        return static_cast<number_unsigned_t>(-(x + 1)) + 1;
14583|      5|    }
14584|       |
14585|       |  private:
14586|       |    /// the output of the serializer
14587|       |    output_adapter_t<char> o = nullptr;
14588|       |
14589|       |    /// a (hopefully) large enough character buffer
14590|       |    std::array<char, 64> number_buffer{{}};
14591|       |
14592|       |    /// the locale
14593|       |    const std::lconv* loc = nullptr;
14594|       |    /// the locale's thousand separator character
14595|       |    const char thousands_sep = '\0';
14596|       |    /// the locale's decimal point character
14597|       |    const char decimal_point = '\0';
14598|       |
14599|       |    /// string buffer
14600|       |    std::array<char, 512> string_buffer{{}};
14601|       |
14602|       |    /// the indentation character
14603|       |    const char indent_char;
14604|       |    /// the indentation string
14605|       |    string_t indent_string;
14606|       |
14607|       |    /// error_handler how to react on decoding errors
14608|       |    const error_handler_t error_handler;
14609|       |};
14610|       |}  // namespace detail
14611|       |}  // namespace nlohmann
14612|       |
14613|       |// #include <nlohmann/detail/value_t.hpp>
14614|       |
14615|       |// #include <nlohmann/json_fwd.hpp>
14616|       |
14617|       |
14618|       |/*!
14619|       |@brief namespace for Niels Lohmann
14620|       |@see https://github.com/nlohmann
14621|       |@since version 1.0.0
14622|       |*/
14623|       |namespace nlohmann
14624|       |{
14625|       |
14626|       |/*!
14627|       |@brief a class to store JSON values
14628|       |
14629|       |@tparam ObjectType type for JSON objects (`std::map` by default; will be used
14630|       |in @ref object_t)
14631|       |@tparam ArrayType type for JSON arrays (`std::vector` by default; will be used
14632|       |in @ref array_t)
14633|       |@tparam StringType type for JSON strings and object keys (`std::string` by
14634|       |default; will be used in @ref string_t)
14635|       |@tparam BooleanType type for JSON booleans (`bool` by default; will be used
14636|       |in @ref boolean_t)
14637|       |@tparam NumberIntegerType type for JSON integer numbers (`int64_t` by
14638|       |default; will be used in @ref number_integer_t)
14639|       |@tparam NumberUnsignedType type for JSON unsigned integer numbers (@c
14640|       |`uint64_t` by default; will be used in @ref number_unsigned_t)
14641|       |@tparam NumberFloatType type for JSON floating-point numbers (`double` by
14642|       |default; will be used in @ref number_float_t)
14643|       |@tparam AllocatorType type of the allocator to use (`std::allocator` by
14644|       |default)
14645|       |@tparam JSONSerializer the serializer to resolve internal calls to `to_json()`
14646|       |and `from_json()` (@ref adl_serializer by default)
14647|       |
14648|       |@requirement The class satisfies the following concept requirements:
14649|       |- Basic
14650|       | - [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible):
14651|       |   JSON values can be default constructed. The result will be a JSON null
14652|       |   value.
14653|       | - [MoveConstructible](https://en.cppreference.com/w/cpp/named_req/MoveConstructible):
14654|       |   A JSON value can be constructed from an rvalue argument.
14655|       | - [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible):
14656|       |   A JSON value can be copy-constructed from an lvalue expression.
14657|       | - [MoveAssignable](https://en.cppreference.com/w/cpp/named_req/MoveAssignable):
14658|       |   A JSON value van be assigned from an rvalue argument.
14659|       | - [CopyAssignable](https://en.cppreference.com/w/cpp/named_req/CopyAssignable):
14660|       |   A JSON value can be copy-assigned from an lvalue expression.
14661|       | - [Destructible](https://en.cppreference.com/w/cpp/named_req/Destructible):
14662|       |   JSON values can be destructed.
14663|       |- Layout
14664|       | - [StandardLayoutType](https://en.cppreference.com/w/cpp/named_req/StandardLayoutType):
14665|       |   JSON values have
14666|       |   [standard layout](https://en.cppreference.com/w/cpp/language/data_members#Standard_layout):
14667|       |   All non-static data members are private and standard layout types, the
14668|       |   class has no virtual functions or (virtual) base classes.
14669|       |- Library-wide
14670|       | - [EqualityComparable](https://en.cppreference.com/w/cpp/named_req/EqualityComparable):
14671|       |   JSON values can be compared with `==`, see @ref
14672|       |   operator==(const_reference,const_reference).
14673|       | - [LessThanComparable](https://en.cppreference.com/w/cpp/named_req/LessThanComparable):
14674|       |   JSON values can be compared with `<`, see @ref
14675|       |   operator<(const_reference,const_reference).
14676|       | - [Swappable](https://en.cppreference.com/w/cpp/named_req/Swappable):
14677|       |   Any JSON lvalue or rvalue of can be swapped with any lvalue or rvalue of
14678|       |   other compatible types, using unqualified function call @ref swap().
14679|       | - [NullablePointer](https://en.cppreference.com/w/cpp/named_req/NullablePointer):
14680|       |   JSON values can be compared against `std::nullptr_t` objects which are used
14681|       |   to model the `null` value.
14682|       |- Container
14683|       | - [Container](https://en.cppreference.com/w/cpp/named_req/Container):
14684|       |   JSON values can be used like STL containers and provide iterator access.
14685|       | - [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer);
14686|       |   JSON values can be used like STL containers and provide reverse iterator
14687|       |   access.
14688|       |
14689|       |@invariant The member variables @a m_value and @a m_type have the following
14690|       |relationship:
14691|       |- If `m_type == value_t::object`, then `m_value.object != nullptr`.
14692|       |- If `m_type == value_t::array`, then `m_value.array != nullptr`.
14693|       |- If `m_type == value_t::string`, then `m_value.string != nullptr`.
14694|       |The invariants are checked by member function assert_invariant().
14695|       |
14696|       |@internal
14697|       |@note ObjectType trick from https://stackoverflow.com/a/9860911
14698|       |@endinternal
14699|       |
14700|       |@see [RFC 7159: The JavaScript Object Notation (JSON) Data Interchange
14701|       |Format](http://rfc7159.net/rfc7159)
14702|       |
14703|       |@since version 1.0.0
14704|       |
14705|       |@nosubgrouping
14706|       |*/
14707|       |NLOHMANN_BASIC_JSON_TPL_DECLARATION
14708|       |class basic_json
14709|       |{
14710|       |  private:
14711|       |    template<detail::value_t> friend struct detail::external_constructor;
14712|       |    friend ::nlohmann::json_pointer<basic_json>;
14713|       |    friend ::nlohmann::detail::parser<basic_json>;
14714|       |    friend ::nlohmann::detail::serializer<basic_json>;
14715|       |    template<typename BasicJsonType>
14716|       |    friend class ::nlohmann::detail::iter_impl;
14717|       |    template<typename BasicJsonType, typename CharType>
14718|       |    friend class ::nlohmann::detail::binary_writer;
14719|       |    template<typename BasicJsonType, typename SAX>
14720|       |    friend class ::nlohmann::detail::binary_reader;
14721|       |    template<typename BasicJsonType>
14722|       |    friend class ::nlohmann::detail::json_sax_dom_parser;
14723|       |    template<typename BasicJsonType>
14724|       |    friend class ::nlohmann::detail::json_sax_dom_callback_parser;
14725|       |
14726|       |    /// workaround type for MSVC
14727|       |    using basic_json_t = NLOHMANN_BASIC_JSON_TPL;
14728|       |
14729|       |    // convenience aliases for types residing in namespace detail;
14730|       |    using lexer = ::nlohmann::detail::lexer<basic_json>;
14731|       |    using parser = ::nlohmann::detail::parser<basic_json>;
14732|       |
14733|       |    using primitive_iterator_t = ::nlohmann::detail::primitive_iterator_t;
14734|       |    template<typename BasicJsonType>
14735|       |    using internal_iterator = ::nlohmann::detail::internal_iterator<BasicJsonType>;
14736|       |    template<typename BasicJsonType>
14737|       |    using iter_impl = ::nlohmann::detail::iter_impl<BasicJsonType>;
14738|       |    template<typename Iterator>
14739|       |    using iteration_proxy = ::nlohmann::detail::iteration_proxy<Iterator>;
14740|       |    template<typename Base> using json_reverse_iterator = ::nlohmann::detail::json_reverse_iterator<Base>;
14741|       |
14742|       |    template<typename CharType>
14743|       |    using output_adapter_t = ::nlohmann::detail::output_adapter_t<CharType>;
14744|       |
14745|       |    using binary_reader = ::nlohmann::detail::binary_reader<basic_json>;
14746|       |    template<typename CharType> using binary_writer = ::nlohmann::detail::binary_writer<basic_json, CharType>;
14747|       |
14748|       |    using serializer = ::nlohmann::detail::serializer<basic_json>;
14749|       |
14750|       |  public:
14751|       |    using value_t = detail::value_t;
14752|       |    /// JSON Pointer, see @ref nlohmann::json_pointer
14753|       |    using json_pointer = ::nlohmann::json_pointer<basic_json>;
14754|       |    template<typename T, typename SFINAE>
14755|       |    using json_serializer = JSONSerializer<T, SFINAE>;
14756|       |    /// how to treat decoding errors
14757|       |    using error_handler_t = detail::error_handler_t;
14758|       |    /// helper type for initializer lists of basic_json values
14759|       |    using initializer_list_t = std::initializer_list<detail::json_ref<basic_json>>;
14760|       |
14761|       |    using input_format_t = detail::input_format_t;
14762|       |    /// SAX interface type, see @ref nlohmann::json_sax
14763|       |    using json_sax_t = json_sax<basic_json>;
14764|       |
14765|       |    ////////////////
14766|       |    // exceptions //
14767|       |    ////////////////
14768|       |
14769|       |    /// @name exceptions
14770|       |    /// Classes to implement user-defined exceptions.
14771|       |    /// @{
14772|       |
14773|       |    /// @copydoc detail::exception
14774|       |    using exception = detail::exception;
14775|       |    /// @copydoc detail::parse_error
14776|       |    using parse_error = detail::parse_error;
14777|       |    /// @copydoc detail::invalid_iterator
14778|       |    using invalid_iterator = detail::invalid_iterator;
14779|       |    /// @copydoc detail::type_error
14780|       |    using type_error = detail::type_error;
14781|       |    /// @copydoc detail::out_of_range
14782|       |    using out_of_range = detail::out_of_range;
14783|       |    /// @copydoc detail::other_error
14784|       |    using other_error = detail::other_error;
14785|       |
14786|       |    /// @}
14787|       |
14788|       |
14789|       |    /////////////////////
14790|       |    // container types //
14791|       |    /////////////////////
14792|       |
14793|       |    /// @name container types
14794|       |    /// The canonic container types to use @ref basic_json like any other STL
14795|       |    /// container.
14796|       |    /// @{
14797|       |
14798|       |    /// the type of elements in a basic_json container
14799|       |    using value_type = basic_json;
14800|       |
14801|       |    /// the type of an element reference
14802|       |    using reference = value_type&;
14803|       |    /// the type of an element const reference
14804|       |    using const_reference = const value_type&;
14805|       |
14806|       |    /// a type to represent differences between iterators
14807|       |    using difference_type = std::ptrdiff_t;
14808|       |    /// a type to represent container sizes
14809|       |    using size_type = std::size_t;
14810|       |
14811|       |    /// the allocator type
14812|       |    using allocator_type = AllocatorType<basic_json>;
14813|       |
14814|       |    /// the type of an element pointer
14815|       |    using pointer = typename std::allocator_traits<allocator_type>::pointer;
14816|       |    /// the type of an element const pointer
14817|       |    using const_pointer = typename std::allocator_traits<allocator_type>::const_pointer;
14818|       |
14819|       |    /// an iterator for a basic_json container
14820|       |    using iterator = iter_impl<basic_json>;
14821|       |    /// a const iterator for a basic_json container
14822|       |    using const_iterator = iter_impl<const basic_json>;
14823|       |    /// a reverse iterator for a basic_json container
14824|       |    using reverse_iterator = json_reverse_iterator<typename basic_json::iterator>;
14825|       |    /// a const reverse iterator for a basic_json container
14826|       |    using const_reverse_iterator = json_reverse_iterator<typename basic_json::const_iterator>;
14827|       |
14828|       |    /// @}
14829|       |
14830|       |
14831|       |    /*!
14832|       |    @brief returns the allocator associated with the container
14833|       |    */
14834|       |    static allocator_type get_allocator()
14835|       |    {
14836|       |        return allocator_type();
14837|       |    }
14838|       |
14839|       |    /*!
14840|       |    @brief returns version information on the library
14841|       |
14842|       |    This function returns a JSON object with information about the library,
14843|       |    including the version number and information on the platform and compiler.
14844|       |
14845|       |    @return JSON object holding version information
14846|       |    key         | description
14847|       |    ----------- | ---------------
14848|       |    `compiler`  | Information on the used compiler. It is an object with the following keys: `c++` (the used C++ standard), `family` (the compiler family; possible values are `clang`, `icc`, `gcc`, `ilecpp`, `msvc`, `pgcpp`, `sunpro`, and `unknown`), and `version` (the compiler version).
14849|       |    `copyright` | The copyright line for the library as string.
14850|       |    `name`      | The name of the library as string.
14851|       |    `platform`  | The used platform as string. Possible values are `win32`, `linux`, `apple`, `unix`, and `unknown`.
14852|       |    `url`       | The URL of the project as string.
14853|       |    `version`   | The version of the library. It is an object with the following keys: `major`, `minor`, and `patch` as defined by [Semantic Versioning](http://semver.org), and `string` (the version string).
14854|       |
14855|       |    @liveexample{The following code shows an example output of the `meta()`
14856|       |    function.,meta}
14857|       |
14858|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
14859|       |    changes to any JSON value.
14860|       |
14861|       |    @complexity Constant.
14862|       |
14863|       |    @since 2.1.0
14864|       |    */
14865|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
14866|       |    static basic_json meta()
14867|       |    {
14868|       |        basic_json result;
14869|       |
14870|       |        result["copyright"] = "(C) 2013-2017 Niels Lohmann";
14871|       |        result["name"] = "JSON for Modern C++";
14872|       |        result["url"] = "https://github.com/nlohmann/json";
14873|       |        result["version"]["string"] =
14874|       |            std::to_string(NLOHMANN_JSON_VERSION_MAJOR) + "." +
14875|       |            std::to_string(NLOHMANN_JSON_VERSION_MINOR) + "." +
14876|       |            std::to_string(NLOHMANN_JSON_VERSION_PATCH);
14877|       |        result["version"]["major"] = NLOHMANN_JSON_VERSION_MAJOR;
14878|       |        result["version"]["minor"] = NLOHMANN_JSON_VERSION_MINOR;
14879|       |        result["version"]["patch"] = NLOHMANN_JSON_VERSION_PATCH;
14880|       |
14881|       |#ifdef _WIN32
14882|       |        result["platform"] = "win32";
14883|       |#elif defined __linux__
14884|       |        result["platform"] = "linux";
14885|       |#elif defined __APPLE__
14886|       |        result["platform"] = "apple";
14887|       |#elif defined __unix__
14888|       |        result["platform"] = "unix";
14889|       |#else
14890|       |        result["platform"] = "unknown";
14891|       |#endif
14892|       |
14893|       |#if defined(__ICC) || defined(__INTEL_COMPILER)
14894|       |        result["compiler"] = {{"family", "icc"}, {"version", __INTEL_COMPILER}};
14895|       |#elif defined(__clang__)
14896|       |        result["compiler"] = {{"family", "clang"}, {"version", __clang_version__}};
14897|       |#elif defined(__GNUC__) || defined(__GNUG__)
14898|       |        result["compiler"] = {{"family", "gcc"}, {"version", std::to_string(__GNUC__) + "." + std::to_string(__GNUC_MINOR__) + "." + std::to_string(__GNUC_PATCHLEVEL__)}};
14899|       |#elif defined(__HP_cc) || defined(__HP_aCC)
14900|       |        result["compiler"] = "hp"
14901|       |#elif defined(__IBMCPP__)
14902|       |        result["compiler"] = {{"family", "ilecpp"}, {"version", __IBMCPP__}};
14903|       |#elif defined(_MSC_VER)
14904|       |        result["compiler"] = {{"family", "msvc"}, {"version", _MSC_VER}};
14905|       |#elif defined(__PGI)
14906|       |        result["compiler"] = {{"family", "pgcpp"}, {"version", __PGI}};
14907|       |#elif defined(__SUNPRO_CC)
14908|       |        result["compiler"] = {{"family", "sunpro"}, {"version", __SUNPRO_CC}};
14909|       |#else
14910|       |        result["compiler"] = {{"family", "unknown"}, {"version", "unknown"}};
14911|       |#endif
14912|       |
14913|       |#ifdef __cplusplus
14914|       |        result["compiler"]["c++"] = std::to_string(__cplusplus);
14915|       |#else
14916|       |        result["compiler"]["c++"] = "unknown";
14917|       |#endif
14918|       |        return result;
14919|       |    }
14920|       |
14921|       |
14922|       |    ///////////////////////////
14923|       |    // JSON value data types //
14924|       |    ///////////////////////////
14925|       |
14926|       |    /// @name JSON value data types
14927|       |    /// The data types to store a JSON value. These types are derived from
14928|       |    /// the template arguments passed to class @ref basic_json.
14929|       |    /// @{
14930|       |
14931|       |#if defined(JSON_HAS_CPP_14)
14932|       |    // Use transparent comparator if possible, combined with perfect forwarding
14933|       |    // on find() and count() calls prevents unnecessary string construction.
14934|       |    using object_comparator_t = std::less<>;
14935|       |#else
14936|       |    using object_comparator_t = std::less<StringType>;
14937|       |#endif
14938|       |
14939|       |    /*!
14940|       |    @brief a type for an object
14941|       |
14942|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes JSON objects as follows:
14943|       |    > An object is an unordered collection of zero or more name/value pairs,
14944|       |    > where a name is a string and a value is a string, number, boolean, null,
14945|       |    > object, or array.
14946|       |
14947|       |    To store objects in C++, a type is defined by the template parameters
14948|       |    described below.
14949|       |
14950|       |    @tparam ObjectType  the container to store objects (e.g., `std::map` or
14951|       |    `std::unordered_map`)
14952|       |    @tparam StringType the type of the keys or names (e.g., `std::string`).
14953|       |    The comparison function `std::less<StringType>` is used to order elements
14954|       |    inside the container.
14955|       |    @tparam AllocatorType the allocator to use for objects (e.g.,
14956|       |    `std::allocator`)
14957|       |
14958|       |    #### Default type
14959|       |
14960|       |    With the default values for @a ObjectType (`std::map`), @a StringType
14961|       |    (`std::string`), and @a AllocatorType (`std::allocator`), the default
14962|       |    value for @a object_t is:
14963|       |
14964|       |    @code {.cpp}
14965|       |    std::map<
14966|       |      std::string, // key_type
14967|       |      basic_json, // value_type
14968|       |      std::less<std::string>, // key_compare
14969|       |      std::allocator<std::pair<const std::string, basic_json>> // allocator_type
14970|       |    >
14971|       |    @endcode
14972|       |
14973|       |    #### Behavior
14974|       |
14975|       |    The choice of @a object_t influences the behavior of the JSON class. With
14976|       |    the default type, objects have the following behavior:
14977|       |
14978|       |    - When all names are unique, objects will be interoperable in the sense
14979|       |      that all software implementations receiving that object will agree on
14980|       |      the name-value mappings.
14981|       |    - When the names within an object are not unique, it is unspecified which
14982|       |      one of the values for a given key will be chosen. For instance,
14983|       |      `{"key": 2, "key": 1}` could be equal to either `{"key": 1}` or
14984|       |      `{"key": 2}`.
14985|       |    - Internally, name/value pairs are stored in lexicographical order of the
14986|       |      names. Objects will also be serialized (see @ref dump) in this order.
14987|       |      For instance, `{"b": 1, "a": 2}` and `{"a": 2, "b": 1}` will be stored
14988|       |      and serialized as `{"a": 2, "b": 1}`.
14989|       |    - When comparing objects, the order of the name/value pairs is irrelevant.
14990|       |      This makes objects interoperable in the sense that they will not be
14991|       |      affected by these differences. For instance, `{"b": 1, "a": 2}` and
14992|       |      `{"a": 2, "b": 1}` will be treated as equal.
14993|       |
14994|       |    #### Limits
14995|       |
14996|       |    [RFC 7159](http://rfc7159.net/rfc7159) specifies:
14997|       |    > An implementation may set limits on the maximum depth of nesting.
14998|       |
14999|       |    In this class, the object's limit of nesting is not explicitly constrained.
15000|       |    However, a maximum depth of nesting may be introduced by the compiler or
15001|       |    runtime environment. A theoretical limit can be queried by calling the
15002|       |    @ref max_size function of a JSON object.
15003|       |
15004|       |    #### Storage
15005|       |
15006|       |    Objects are stored as pointers in a @ref basic_json type. That is, for any
15007|       |    access to object values, a pointer of type `object_t*` must be
15008|       |    dereferenced.
15009|       |
15010|       |    @sa @ref array_t -- type for an array value
15011|       |
15012|       |    @since version 1.0.0
15013|       |
15014|       |    @note The order name/value pairs are added to the object is *not*
15015|       |    preserved by the library. Therefore, iterating an object may return
15016|       |    name/value pairs in a different order than they were originally stored. In
15017|       |    fact, keys will be traversed in alphabetical order as `std::map` with
15018|       |    `std::less` is used by default. Please note this behavior conforms to [RFC
15019|       |    7159](http://rfc7159.net/rfc7159), because any order implements the
15020|       |    specified "unordered" nature of JSON objects.
15021|       |    */
15022|       |    using object_t = ObjectType<StringType,
15023|       |          basic_json,
15024|       |          object_comparator_t,
15025|       |          AllocatorType<std::pair<const StringType,
15026|       |          basic_json>>>;
15027|       |
15028|       |    /*!
15029|       |    @brief a type for an array
15030|       |
15031|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes JSON arrays as follows:
15032|       |    > An array is an ordered sequence of zero or more values.
15033|       |
15034|       |    To store objects in C++, a type is defined by the template parameters
15035|       |    explained below.
15036|       |
15037|       |    @tparam ArrayType  container type to store arrays (e.g., `std::vector` or
15038|       |    `std::list`)
15039|       |    @tparam AllocatorType allocator to use for arrays (e.g., `std::allocator`)
15040|       |
15041|       |    #### Default type
15042|       |
15043|       |    With the default values for @a ArrayType (`std::vector`) and @a
15044|       |    AllocatorType (`std::allocator`), the default value for @a array_t is:
15045|       |
15046|       |    @code {.cpp}
15047|       |    std::vector<
15048|       |      basic_json, // value_type
15049|       |      std::allocator<basic_json> // allocator_type
15050|       |    >
15051|       |    @endcode
15052|       |
15053|       |    #### Limits
15054|       |
15055|       |    [RFC 7159](http://rfc7159.net/rfc7159) specifies:
15056|       |    > An implementation may set limits on the maximum depth of nesting.
15057|       |
15058|       |    In this class, the array's limit of nesting is not explicitly constrained.
15059|       |    However, a maximum depth of nesting may be introduced by the compiler or
15060|       |    runtime environment. A theoretical limit can be queried by calling the
15061|       |    @ref max_size function of a JSON array.
15062|       |
15063|       |    #### Storage
15064|       |
15065|       |    Arrays are stored as pointers in a @ref basic_json type. That is, for any
15066|       |    access to array values, a pointer of type `array_t*` must be dereferenced.
15067|       |
15068|       |    @sa @ref object_t -- type for an object value
15069|       |
15070|       |    @since version 1.0.0
15071|       |    */
15072|       |    using array_t = ArrayType<basic_json, AllocatorType<basic_json>>;
15073|       |
15074|       |    /*!
15075|       |    @brief a type for a string
15076|       |
15077|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes JSON strings as follows:
15078|       |    > A string is a sequence of zero or more Unicode characters.
15079|       |
15080|       |    To store objects in C++, a type is defined by the template parameter
15081|       |    described below. Unicode values are split by the JSON class into
15082|       |    byte-sized characters during deserialization.
15083|       |
15084|       |    @tparam StringType  the container to store strings (e.g., `std::string`).
15085|       |    Note this container is used for keys/names in objects, see @ref object_t.
15086|       |
15087|       |    #### Default type
15088|       |
15089|       |    With the default values for @a StringType (`std::string`), the default
15090|       |    value for @a string_t is:
15091|       |
15092|       |    @code {.cpp}
15093|       |    std::string
15094|       |    @endcode
15095|       |
15096|       |    #### Encoding
15097|       |
15098|       |    Strings are stored in UTF-8 encoding. Therefore, functions like
15099|       |    `std::string::size()` or `std::string::length()` return the number of
15100|       |    bytes in the string rather than the number of characters or glyphs.
15101|       |
15102|       |    #### String comparison
15103|       |
15104|       |    [RFC 7159](http://rfc7159.net/rfc7159) states:
15105|       |    > Software implementations are typically required to test names of object
15106|       |    > members for equality. Implementations that transform the textual
15107|       |    > representation into sequences of Unicode code units and then perform the
15108|       |    > comparison numerically, code unit by code unit, are interoperable in the
15109|       |    > sense that implementations will agree in all cases on equality or
15110|       |    > inequality of two strings. For example, implementations that compare
15111|       |    > strings with escaped characters unconverted may incorrectly find that
15112|       |    > `"a\\b"` and `"a\u005Cb"` are not equal.
15113|       |
15114|       |    This implementation is interoperable as it does compare strings code unit
15115|       |    by code unit.
15116|       |
15117|       |    #### Storage
15118|       |
15119|       |    String values are stored as pointers in a @ref basic_json type. That is,
15120|       |    for any access to string values, a pointer of type `string_t*` must be
15121|       |    dereferenced.
15122|       |
15123|       |    @since version 1.0.0
15124|       |    */
15125|       |    using string_t = StringType;
15126|       |
15127|       |    /*!
15128|       |    @brief a type for a boolean
15129|       |
15130|       |    [RFC 7159](http://rfc7159.net/rfc7159) implicitly describes a boolean as a
15131|       |    type which differentiates the two literals `true` and `false`.
15132|       |
15133|       |    To store objects in C++, a type is defined by the template parameter @a
15134|       |    BooleanType which chooses the type to use.
15135|       |
15136|       |    #### Default type
15137|       |
15138|       |    With the default values for @a BooleanType (`bool`), the default value for
15139|       |    @a boolean_t is:
15140|       |
15141|       |    @code {.cpp}
15142|       |    bool
15143|       |    @endcode
15144|       |
15145|       |    #### Storage
15146|       |
15147|       |    Boolean values are stored directly inside a @ref basic_json type.
15148|       |
15149|       |    @since version 1.0.0
15150|       |    */
15151|       |    using boolean_t = BooleanType;
15152|       |
15153|       |    /*!
15154|       |    @brief a type for a number (integer)
15155|       |
15156|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes numbers as follows:
15157|       |    > The representation of numbers is similar to that used in most
15158|       |    > programming languages. A number is represented in base 10 using decimal
15159|       |    > digits. It contains an integer component that may be prefixed with an
15160|       |    > optional minus sign, which may be followed by a fraction part and/or an
15161|       |    > exponent part. Leading zeros are not allowed. (...) Numeric values that
15162|       |    > cannot be represented in the grammar below (such as Infinity and NaN)
15163|       |    > are not permitted.
15164|       |
15165|       |    This description includes both integer and floating-point numbers.
15166|       |    However, C++ allows more precise storage if it is known whether the number
15167|       |    is a signed integer, an unsigned integer or a floating-point number.
15168|       |    Therefore, three different types, @ref number_integer_t, @ref
15169|       |    number_unsigned_t and @ref number_float_t are used.
15170|       |
15171|       |    To store integer numbers in C++, a type is defined by the template
15172|       |    parameter @a NumberIntegerType which chooses the type to use.
15173|       |
15174|       |    #### Default type
15175|       |
15176|       |    With the default values for @a NumberIntegerType (`int64_t`), the default
15177|       |    value for @a number_integer_t is:
15178|       |
15179|       |    @code {.cpp}
15180|       |    int64_t
15181|       |    @endcode
15182|       |
15183|       |    #### Default behavior
15184|       |
15185|       |    - The restrictions about leading zeros is not enforced in C++. Instead,
15186|       |      leading zeros in integer literals lead to an interpretation as octal
15187|       |      number. Internally, the value will be stored as decimal number. For
15188|       |      instance, the C++ integer literal `010` will be serialized to `8`.
15189|       |      During deserialization, leading zeros yield an error.
15190|       |    - Not-a-number (NaN) values will be serialized to `null`.
15191|       |
15192|       |    #### Limits
15193|       |
15194|       |    [RFC 7159](http://rfc7159.net/rfc7159) specifies:
15195|       |    > An implementation may set limits on the range and precision of numbers.
15196|       |
15197|       |    When the default type is used, the maximal integer number that can be
15198|       |    stored is `9223372036854775807` (INT64_MAX) and the minimal integer number
15199|       |    that can be stored is `-9223372036854775808` (INT64_MIN). Integer numbers
15200|       |    that are out of range will yield over/underflow when used in a
15201|       |    constructor. During deserialization, too large or small integer numbers
15202|       |    will be automatically be stored as @ref number_unsigned_t or @ref
15203|       |    number_float_t.
15204|       |
15205|       |    [RFC 7159](http://rfc7159.net/rfc7159) further states:
15206|       |    > Note that when such software is used, numbers that are integers and are
15207|       |    > in the range \f$[-2^{53}+1, 2^{53}-1]\f$ are interoperable in the sense
15208|       |    > that implementations will agree exactly on their numeric values.
15209|       |
15210|       |    As this range is a subrange of the exactly supported range [INT64_MIN,
15211|       |    INT64_MAX], this class's integer type is interoperable.
15212|       |
15213|       |    #### Storage
15214|       |
15215|       |    Integer number values are stored directly inside a @ref basic_json type.
15216|       |
15217|       |    @sa @ref number_float_t -- type for number values (floating-point)
15218|       |
15219|       |    @sa @ref number_unsigned_t -- type for number values (unsigned integer)
15220|       |
15221|       |    @since version 1.0.0
15222|       |    */
15223|       |    using number_integer_t = NumberIntegerType;
15224|       |
15225|       |    /*!
15226|       |    @brief a type for a number (unsigned)
15227|       |
15228|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes numbers as follows:
15229|       |    > The representation of numbers is similar to that used in most
15230|       |    > programming languages. A number is represented in base 10 using decimal
15231|       |    > digits. It contains an integer component that may be prefixed with an
15232|       |    > optional minus sign, which may be followed by a fraction part and/or an
15233|       |    > exponent part. Leading zeros are not allowed. (...) Numeric values that
15234|       |    > cannot be represented in the grammar below (such as Infinity and NaN)
15235|       |    > are not permitted.
15236|       |
15237|       |    This description includes both integer and floating-point numbers.
15238|       |    However, C++ allows more precise storage if it is known whether the number
15239|       |    is a signed integer, an unsigned integer or a floating-point number.
15240|       |    Therefore, three different types, @ref number_integer_t, @ref
15241|       |    number_unsigned_t and @ref number_float_t are used.
15242|       |
15243|       |    To store unsigned integer numbers in C++, a type is defined by the
15244|       |    template parameter @a NumberUnsignedType which chooses the type to use.
15245|       |
15246|       |    #### Default type
15247|       |
15248|       |    With the default values for @a NumberUnsignedType (`uint64_t`), the
15249|       |    default value for @a number_unsigned_t is:
15250|       |
15251|       |    @code {.cpp}
15252|       |    uint64_t
15253|       |    @endcode
15254|       |
15255|       |    #### Default behavior
15256|       |
15257|       |    - The restrictions about leading zeros is not enforced in C++. Instead,
15258|       |      leading zeros in integer literals lead to an interpretation as octal
15259|       |      number. Internally, the value will be stored as decimal number. For
15260|       |      instance, the C++ integer literal `010` will be serialized to `8`.
15261|       |      During deserialization, leading zeros yield an error.
15262|       |    - Not-a-number (NaN) values will be serialized to `null`.
15263|       |
15264|       |    #### Limits
15265|       |
15266|       |    [RFC 7159](http://rfc7159.net/rfc7159) specifies:
15267|       |    > An implementation may set limits on the range and precision of numbers.
15268|       |
15269|       |    When the default type is used, the maximal integer number that can be
15270|       |    stored is `18446744073709551615` (UINT64_MAX) and the minimal integer
15271|       |    number that can be stored is `0`. Integer numbers that are out of range
15272|       |    will yield over/underflow when used in a constructor. During
15273|       |    deserialization, too large or small integer numbers will be automatically
15274|       |    be stored as @ref number_integer_t or @ref number_float_t.
15275|       |
15276|       |    [RFC 7159](http://rfc7159.net/rfc7159) further states:
15277|       |    > Note that when such software is used, numbers that are integers and are
15278|       |    > in the range \f$[-2^{53}+1, 2^{53}-1]\f$ are interoperable in the sense
15279|       |    > that implementations will agree exactly on their numeric values.
15280|       |
15281|       |    As this range is a subrange (when considered in conjunction with the
15282|       |    number_integer_t type) of the exactly supported range [0, UINT64_MAX],
15283|       |    this class's integer type is interoperable.
15284|       |
15285|       |    #### Storage
15286|       |
15287|       |    Integer number values are stored directly inside a @ref basic_json type.
15288|       |
15289|       |    @sa @ref number_float_t -- type for number values (floating-point)
15290|       |    @sa @ref number_integer_t -- type for number values (integer)
15291|       |
15292|       |    @since version 2.0.0
15293|       |    */
15294|       |    using number_unsigned_t = NumberUnsignedType;
15295|       |
15296|       |    /*!
15297|       |    @brief a type for a number (floating-point)
15298|       |
15299|       |    [RFC 7159](http://rfc7159.net/rfc7159) describes numbers as follows:
15300|       |    > The representation of numbers is similar to that used in most
15301|       |    > programming languages. A number is represented in base 10 using decimal
15302|       |    > digits. It contains an integer component that may be prefixed with an
15303|       |    > optional minus sign, which may be followed by a fraction part and/or an
15304|       |    > exponent part. Leading zeros are not allowed. (...) Numeric values that
15305|       |    > cannot be represented in the grammar below (such as Infinity and NaN)
15306|       |    > are not permitted.
15307|       |
15308|       |    This description includes both integer and floating-point numbers.
15309|       |    However, C++ allows more precise storage if it is known whether the number
15310|       |    is a signed integer, an unsigned integer or a floating-point number.
15311|       |    Therefore, three different types, @ref number_integer_t, @ref
15312|       |    number_unsigned_t and @ref number_float_t are used.
15313|       |
15314|       |    To store floating-point numbers in C++, a type is defined by the template
15315|       |    parameter @a NumberFloatType which chooses the type to use.
15316|       |
15317|       |    #### Default type
15318|       |
15319|       |    With the default values for @a NumberFloatType (`double`), the default
15320|       |    value for @a number_float_t is:
15321|       |
15322|       |    @code {.cpp}
15323|       |    double
15324|       |    @endcode
15325|       |
15326|       |    #### Default behavior
15327|       |
15328|       |    - The restrictions about leading zeros is not enforced in C++. Instead,
15329|       |      leading zeros in floating-point literals will be ignored. Internally,
15330|       |      the value will be stored as decimal number. For instance, the C++
15331|       |      floating-point literal `01.2` will be serialized to `1.2`. During
15332|       |      deserialization, leading zeros yield an error.
15333|       |    - Not-a-number (NaN) values will be serialized to `null`.
15334|       |
15335|       |    #### Limits
15336|       |
15337|       |    [RFC 7159](http://rfc7159.net/rfc7159) states:
15338|       |    > This specification allows implementations to set limits on the range and
15339|       |    > precision of numbers accepted. Since software that implements IEEE
15340|       |    > 754-2008 binary64 (double precision) numbers is generally available and
15341|       |    > widely used, good interoperability can be achieved by implementations
15342|       |    > that expect no more precision or range than these provide, in the sense
15343|       |    > that implementations will approximate JSON numbers within the expected
15344|       |    > precision.
15345|       |
15346|       |    This implementation does exactly follow this approach, as it uses double
15347|       |    precision floating-point numbers. Note values smaller than
15348|       |    `-1.79769313486232e+308` and values greater than `1.79769313486232e+308`
15349|       |    will be stored as NaN internally and be serialized to `null`.
15350|       |
15351|       |    #### Storage
15352|       |
15353|       |    Floating-point number values are stored directly inside a @ref basic_json
15354|       |    type.
15355|       |
15356|       |    @sa @ref number_integer_t -- type for number values (integer)
15357|       |
15358|       |    @sa @ref number_unsigned_t -- type for number values (unsigned integer)
15359|       |
15360|       |    @since version 1.0.0
15361|       |    */
15362|       |    using number_float_t = NumberFloatType;
15363|       |
15364|       |    /// @}
15365|       |
15366|       |  private:
15367|       |
15368|       |    /// helper for exception-safe object creation
15369|       |    template<typename T, typename... Args>
15370|       |    JSON_HEDLEY_RETURNS_NON_NULL
15371|       |    static T* create(Args&& ... args)
15372|  80.1k|    {
15373|  80.1k|        AllocatorType<T> alloc;
15374|  80.1k|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
15375|       |
15376|  80.1k|        auto deleter = [&](T * object)
15377|  80.1k|        {
15378|      0|            AllocatorTraits::deallocate(alloc, object, 1);
15379|      0|        };
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS1_IS8_SA_St4lessIvESaISt4pairIKS8_SA_EEEJEEEPT_DpOT0_ENKUlPSI_E_clESO_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS2_ISA_SaISA_EEJEEEPT_DpOT0_ENKUlPSD_E_clESJ_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA1_KcEEEPT_DpOT0_ENKUlPS8_E_clESK_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKS8_EEEPT_DpOT0_ENKUlPS8_E_clESJ_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS1_IS8_SA_St4lessIvESaISt4pairIKS8_SA_EEEJRKSI_EEEPT_DpOT0_ENKUlPSI_E_clESQ_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS2_ISA_SaISA_EEJRKSD_EEEPT_DpOT0_ENKUlPSD_E_clESL_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA474_KcEEEPT_DpOT0_ENKUlPS8_E_clESK_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JS8_EEEPT_DpOT0_ENKUlPS8_E_clESH_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS2_ISA_SaISA_EEJN9__gnu_cxx17__normal_iteratorIPKS8_S2_IS8_SaIS8_EEEESK_EEEPT_DpOT0_ENKUlPSD_E_clESQ_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKPKcEEEPT_DpOT0_ENKUlPS8_E_clESL_
  ------------------
  | Unexecuted instantiation: _ZZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA6_KcEEEPT_DpOT0_ENKUlPS8_E_clESK_
  ------------------
15380|  80.1k|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
15381|  80.1k|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
15382|  80.1k|        assert(object != nullptr);
15383|      0|        return object.release();
15384|  80.1k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS1_IS8_SA_St4lessIvESaISt4pairIKS8_SA_EEEJEEEPT_DpOT0_:
  |15372|  27.3k|    {
  |15373|  27.3k|        AllocatorType<T> alloc;
  |15374|  27.3k|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |15375|       |
  |15376|  27.3k|        auto deleter = [&](T * object)
  |15377|  27.3k|        {
  |15378|  27.3k|            AllocatorTraits::deallocate(alloc, object, 1);
  |15379|  27.3k|        };
  |15380|  27.3k|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |15381|  27.3k|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |15382|  27.3k|        assert(object != nullptr);
  |15383|      0|        return object.release();
  |15384|  27.3k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS2_ISA_SaISA_EEJEEEPT_DpOT0_:
  |15372|  1.50k|    {
  |15373|  1.50k|        AllocatorType<T> alloc;
  |15374|  1.50k|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |15375|       |
  |15376|  1.50k|        auto deleter = [&](T * object)
  |15377|  1.50k|        {
  |15378|  1.50k|            AllocatorTraits::deallocate(alloc, object, 1);
  |15379|  1.50k|        };
  |15380|  1.50k|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |15381|  1.50k|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |15382|  1.50k|        assert(object != nullptr);
  |15383|      0|        return object.release();
  |15384|  1.50k|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA1_KcEEEPT_DpOT0_
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS1_IS8_SA_St4lessIvESaISt4pairIKS8_SA_EEEJRKSI_EEEPT_DpOT0_:
  |15372|  2.52k|    {
  |15373|  2.52k|        AllocatorType<T> alloc;
  |15374|  2.52k|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |15375|       |
  |15376|  2.52k|        auto deleter = [&](T * object)
  |15377|  2.52k|        {
  |15378|  2.52k|            AllocatorTraits::deallocate(alloc, object, 1);
  |15379|  2.52k|        };
  |15380|  2.52k|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |15381|  2.52k|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |15382|  2.52k|        assert(object != nullptr);
  |15383|      0|        return object.release();
  |15384|  2.52k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS2_ISA_SaISA_EEJRKSD_EEEPT_DpOT0_:
  |15372|     41|    {
  |15373|     41|        AllocatorType<T> alloc;
  |15374|     41|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |15375|       |
  |15376|     41|        auto deleter = [&](T * object)
  |15377|     41|        {
  |15378|     41|            AllocatorTraits::deallocate(alloc, object, 1);
  |15379|     41|        };
  |15380|     41|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |15381|     41|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |15382|     41|        assert(object != nullptr);
  |15383|      0|        return object.release();
  |15384|     41|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKS8_EEEPT_DpOT0_:
  |15372|  47.7k|    {
  |15373|  47.7k|        AllocatorType<T> alloc;
  |15374|  47.7k|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |15375|       |
  |15376|  47.7k|        auto deleter = [&](T * object)
  |15377|  47.7k|        {
  |15378|  47.7k|            AllocatorTraits::deallocate(alloc, object, 1);
  |15379|  47.7k|        };
  |15380|  47.7k|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |15381|  47.7k|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |15382|  47.7k|        assert(object != nullptr);
  |15383|      0|        return object.release();
  |15384|  47.7k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA474_KcEEEPT_DpOT0_:
  |15372|     68|    {
  |15373|     68|        AllocatorType<T> alloc;
  |15374|     68|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |15375|       |
  |15376|     68|        auto deleter = [&](T * object)
  |15377|     68|        {
  |15378|     68|            AllocatorTraits::deallocate(alloc, object, 1);
  |15379|     68|        };
  |15380|     68|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |15381|     68|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |15382|     68|        assert(object != nullptr);
  |15383|      0|        return object.release();
  |15384|     68|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JS8_EEEPT_DpOT0_:
  |15372|    863|    {
  |15373|    863|        AllocatorType<T> alloc;
  |15374|    863|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |15375|       |
  |15376|    863|        auto deleter = [&](T * object)
  |15377|    863|        {
  |15378|    863|            AllocatorTraits::deallocate(alloc, object, 1);
  |15379|    863|        };
  |15380|    863|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |15381|    863|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |15382|    863|        assert(object != nullptr);
  |15383|      0|        return object.release();
  |15384|    863|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS2_ISA_SaISA_EEJN9__gnu_cxx17__normal_iteratorIPKS8_S2_IS8_SaIS8_EEEESK_EEEPT_DpOT0_:
  |15372|      5|    {
  |15373|      5|        AllocatorType<T> alloc;
  |15374|      5|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |15375|       |
  |15376|      5|        auto deleter = [&](T * object)
  |15377|      5|        {
  |15378|      5|            AllocatorTraits::deallocate(alloc, object, 1);
  |15379|      5|        };
  |15380|      5|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |15381|      5|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |15382|      5|        assert(object != nullptr);
  |15383|      0|        return object.release();
  |15384|      5|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRKPKcEEEPT_DpOT0_:
  |15372|     20|    {
  |15373|     20|        AllocatorType<T> alloc;
  |15374|     20|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |15375|       |
  |15376|     20|        auto deleter = [&](T * object)
  |15377|     20|        {
  |15378|     20|            AllocatorTraits::deallocate(alloc, object, 1);
  |15379|     20|        };
  |15380|     20|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |15381|     20|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |15382|     20|        assert(object != nullptr);
  |15383|      0|        return object.release();
  |15384|     20|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE6createIS8_JRA6_KcEEEPT_DpOT0_:
  |15372|      1|    {
  |15373|      1|        AllocatorType<T> alloc;
  |15374|      1|        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;
  |15375|       |
  |15376|      1|        auto deleter = [&](T * object)
  |15377|      1|        {
  |15378|      1|            AllocatorTraits::deallocate(alloc, object, 1);
  |15379|      1|        };
  |15380|      1|        std::unique_ptr<T, decltype(deleter)> object(AllocatorTraits::allocate(alloc, 1), deleter);
  |15381|      1|        AllocatorTraits::construct(alloc, object.get(), std::forward<Args>(args)...);
  |15382|      1|        assert(object != nullptr);
  |15383|      0|        return object.release();
  |15384|      1|    }
  ------------------
15385|       |
15386|       |    ////////////////////////
15387|       |    // JSON value storage //
15388|       |    ////////////////////////
15389|       |
15390|       |    /*!
15391|       |    @brief a JSON value
15392|       |
15393|       |    The actual storage for a JSON value of the @ref basic_json class. This
15394|       |    union combines the different storage types for the JSON value types
15395|       |    defined in @ref value_t.
15396|       |
15397|       |    JSON type | value_t type    | used type
15398|       |    --------- | --------------- | ------------------------
15399|       |    object    | object          | pointer to @ref object_t
15400|       |    array     | array           | pointer to @ref array_t
15401|       |    string    | string          | pointer to @ref string_t
15402|       |    boolean   | boolean         | @ref boolean_t
15403|       |    number    | number_integer  | @ref number_integer_t
15404|       |    number    | number_unsigned | @ref number_unsigned_t
15405|       |    number    | number_float    | @ref number_float_t
15406|       |    null      | null            | *no value is stored*
15407|       |
15408|       |    @note Variable-length types (objects, arrays, and strings) are stored as
15409|       |    pointers. The size of the union should not exceed 64 bits if the default
15410|       |    value types are used.
15411|       |
15412|       |    @since version 1.0.0
15413|       |    */
15414|       |    union json_value
15415|       |    {
15416|       |        /// object (stored with pointer to save storage)
15417|       |        object_t* object;
15418|       |        /// array (stored with pointer to save storage)
15419|       |        array_t* array;
15420|       |        /// string (stored with pointer to save storage)
15421|       |        string_t* string;
15422|       |        /// boolean
15423|       |        boolean_t boolean;
15424|       |        /// number (integer)
15425|       |        number_integer_t number_integer;
15426|       |        /// number (unsigned integer)
15427|       |        number_unsigned_t number_unsigned;
15428|       |        /// number (floating-point)
15429|       |        number_float_t number_float;
15430|       |
15431|       |        /// default constructor (for null values)
15432|       |        json_value() = default;
15433|       |        /// constructor for booleans
15434|    425|        json_value(boolean_t v) noexcept : boolean(v) {}
15435|       |        /// constructor for numbers (integer)
15436|  5.09k|        json_value(number_integer_t v) noexcept : number_integer(v) {}
15437|       |        /// constructor for numbers (unsigned)
15438|  40.9k|        json_value(number_unsigned_t v) noexcept : number_unsigned(v) {}
15439|       |        /// constructor for numbers (floating-point)
15440|  29.5k|        json_value(number_float_t v) noexcept : number_float(v) {}
15441|       |        /// constructor for empty values of a given type
15442|       |        json_value(value_t t)
15443|   162k|        {
15444|   162k|            switch (t)
15445|   162k|            {
15446|  27.3k|                case value_t::object:
15447|  27.3k|                {
15448|  27.3k|                    object = create<object_t>();
15449|  27.3k|                    break;
15450|      0|                }
15451|       |
15452|  1.50k|                case value_t::array:
15453|  1.50k|                {
15454|  1.50k|                    array = create<array_t>();
15455|  1.50k|                    break;
15456|      0|                }
15457|       |
15458|      0|                case value_t::string:
15459|      0|                {
15460|      0|                    string = create<string_t>("");
15461|      0|                    break;
15462|      0|                }
15463|       |
15464|      0|                case value_t::boolean:
15465|      0|                {
15466|      0|                    boolean = boolean_t(false);
15467|      0|                    break;
15468|      0|                }
15469|       |
15470|      0|                case value_t::number_integer:
15471|      0|                {
15472|      0|                    number_integer = number_integer_t(0);
15473|      0|                    break;
15474|      0|                }
15475|       |
15476|      0|                case value_t::number_unsigned:
15477|      0|                {
15478|      0|                    number_unsigned = number_unsigned_t(0);
15479|      0|                    break;
15480|      0|                }
15481|       |
15482|      0|                case value_t::number_float:
15483|      0|                {
15484|      0|                    number_float = number_float_t(0.0);
15485|      0|                    break;
15486|      0|                }
15487|       |
15488|   133k|                case value_t::null:
15489|   133k|                {
15490|   133k|                    object = nullptr;  // silence warning, see #821
15491|   133k|                    break;
15492|      0|                }
15493|       |
15494|      0|                default:
15495|      0|                {
15496|      0|                    object = nullptr;  // silence warning, see #821
15497|      0|                    if (JSON_HEDLEY_UNLIKELY(t == value_t::null))
15498|      0|                    {
15499|      0|                        JSON_THROW(other_error::create(500, "961c151d2e87f2686a955a9be24d316f1362bf21 3.7.3")); // LCOV_EXCL_LINE
15500|      0|                    }
15501|      0|                    break;
15502|      0|                }
15503|   162k|            }
15504|   162k|        }
15505|       |
15506|       |        /// constructor for strings
15507|       |        json_value(const string_t& value)
15508|  47.7k|        {
15509|  47.7k|            string = create<string_t>(value);
15510|  47.7k|        }
15511|       |
15512|       |        /// constructor for rvalue strings
15513|       |        json_value(string_t&& value)
15514|    863|        {
15515|    863|            string = create<string_t>(std::move(value));
15516|    863|        }
15517|       |
15518|       |        /// constructor for objects
15519|       |        json_value(const object_t& value)
15520|  2.52k|        {
15521|  2.52k|            object = create<object_t>(value);
15522|  2.52k|        }
15523|       |
15524|       |        /// constructor for rvalue objects
15525|       |        json_value(object_t&& value)
15526|       |        {
15527|       |            object = create<object_t>(std::move(value));
15528|       |        }
15529|       |
15530|       |        /// constructor for arrays
15531|       |        json_value(const array_t& value)
15532|     41|        {
15533|     41|            array = create<array_t>(value);
15534|     41|        }
15535|       |
15536|       |        /// constructor for rvalue arrays
15537|       |        json_value(array_t&& value)
15538|       |        {
15539|       |            array = create<array_t>(std::move(value));
15540|       |        }
15541|       |
15542|       |        void destroy(value_t t) noexcept
15543|   620k|        {
15544|       |            // flatten the current json_value to a heap-allocated stack
15545|   620k|            std::vector<basic_json> stack;
15546|       |
15547|       |            // move the top-level items to stack
15548|   620k|            if (t == value_t::array)
15549|  1.55k|            {
15550|  1.55k|                stack.reserve(array->size());
15551|  1.55k|                std::move(array->begin(), array->end(), std::back_inserter(stack));
15552|  1.55k|            }
15553|   618k|            else if (t == value_t::object)
15554|  29.8k|            {
15555|  29.8k|                stack.reserve(object->size());
15556|  29.8k|                for (auto&& it : *object)
15557|  10.8k|                {
15558|  10.8k|                    stack.push_back(std::move(it.second));
15559|  10.8k|                }
15560|  29.8k|            }
15561|       |
15562|   774k|            while (not stack.empty())
15563|   154k|            {
15564|       |                // move the last item to local variable to be processed
15565|   154k|                basic_json current_item(std::move(stack.back()));
15566|   154k|                stack.pop_back();
15567|       |
15568|       |                // if current_item is array/object, move
15569|       |                // its children to the stack to be processed later
15570|   154k|                if (current_item.is_array())
15571|  1.53k|                {
15572|  1.53k|                    std::move(current_item.m_value.array->begin(), current_item.m_value.array->end(),
15573|  1.53k|                              std::back_inserter(stack));
15574|       |
15575|  1.53k|                    current_item.m_value.array->clear();
15576|  1.53k|                }
15577|   152k|                else if (current_item.is_object())
15578|  27.8k|                {
15579|  27.8k|                    for (auto&& it : *current_item.m_value.object)
15580|   136k|                    {
15581|   136k|                        stack.push_back(std::move(it.second));
15582|   136k|                    }
15583|       |
15584|  27.8k|                    current_item.m_value.object->clear();
15585|  27.8k|                }
15586|       |
15587|       |                // it's now safe that current_item get destructed
15588|       |                // since it doesn't have any children
15589|   154k|            }
15590|       |
15591|   620k|            switch (t)
15592|   620k|            {
15593|  29.8k|                case value_t::object:
15594|  29.8k|                {
15595|  29.8k|                    AllocatorType<object_t> alloc;
15596|  29.8k|                    std::allocator_traits<decltype(alloc)>::destroy(alloc, object);
15597|  29.8k|                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, object, 1);
15598|  29.8k|                    break;
15599|      0|                }
15600|       |
15601|  1.55k|                case value_t::array:
15602|  1.55k|                {
15603|  1.55k|                    AllocatorType<array_t> alloc;
15604|  1.55k|                    std::allocator_traits<decltype(alloc)>::destroy(alloc, array);
15605|  1.55k|                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, array, 1);
15606|  1.55k|                    break;
15607|      0|                }
15608|       |
15609|  48.6k|                case value_t::string:
15610|  48.6k|                {
15611|  48.6k|                    AllocatorType<string_t> alloc;
15612|  48.6k|                    std::allocator_traits<decltype(alloc)>::destroy(alloc, string);
15613|  48.6k|                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, string, 1);
15614|  48.6k|                    break;
15615|      0|                }
15616|       |
15617|   540k|                default:
15618|   540k|                {
15619|   540k|                    break;
15620|      0|                }
15621|   620k|            }
15622|   620k|        }
15623|       |    };
15624|       |
15625|       |    /*!
15626|       |    @brief checks the class invariants
15627|       |
15628|       |    This function asserts the class invariants. It needs to be called at the
15629|       |    end of every constructor to make sure that created objects respect the
15630|       |    invariant. Furthermore, it has to be called each time the type of a JSON
15631|       |    value is changed, because the invariant expresses a relationship between
15632|       |    @a m_type and @a m_value.
15633|       |    */
15634|       |    void assert_invariant() const noexcept
15635|  2.09M|    {
15636|  2.09M|        assert(m_type != value_t::object or m_value.object != nullptr);
15637|      0|        assert(m_type != value_t::array or m_value.array != nullptr);
15638|      0|        assert(m_type != value_t::string or m_value.string != nullptr);
15639|  2.09M|    }
15640|       |
15641|       |  public:
15642|       |    //////////////////////////
15643|       |    // JSON parser callback //
15644|       |    //////////////////////////
15645|       |
15646|       |    /*!
15647|       |    @brief parser event types
15648|       |
15649|       |    The parser callback distinguishes the following events:
15650|       |    - `object_start`: the parser read `{` and started to process a JSON object
15651|       |    - `key`: the parser read a key of a value in an object
15652|       |    - `object_end`: the parser read `}` and finished processing a JSON object
15653|       |    - `array_start`: the parser read `[` and started to process a JSON array
15654|       |    - `array_end`: the parser read `]` and finished processing a JSON array
15655|       |    - `value`: the parser finished reading a JSON value
15656|       |
15657|       |    @image html callback_events.png "Example when certain parse events are triggered"
15658|       |
15659|       |    @sa @ref parser_callback_t for more information and examples
15660|       |    */
15661|       |    using parse_event_t = typename parser::parse_event_t;
15662|       |
15663|       |    /*!
15664|       |    @brief per-element parser callback type
15665|       |
15666|       |    With a parser callback function, the result of parsing a JSON text can be
15667|       |    influenced. When passed to @ref parse, it is called on certain events
15668|       |    (passed as @ref parse_event_t via parameter @a event) with a set recursion
15669|       |    depth @a depth and context JSON value @a parsed. The return value of the
15670|       |    callback function is a boolean indicating whether the element that emitted
15671|       |    the callback shall be kept or not.
15672|       |
15673|       |    We distinguish six scenarios (determined by the event type) in which the
15674|       |    callback function can be called. The following table describes the values
15675|       |    of the parameters @a depth, @a event, and @a parsed.
15676|       |
15677|       |    parameter @a event | description | parameter @a depth | parameter @a parsed
15678|       |    ------------------ | ----------- | ------------------ | -------------------
15679|       |    parse_event_t::object_start | the parser read `{` and started to process a JSON object | depth of the parent of the JSON object | a JSON value with type discarded
15680|       |    parse_event_t::key | the parser read a key of a value in an object | depth of the currently parsed JSON object | a JSON string containing the key
15681|       |    parse_event_t::object_end | the parser read `}` and finished processing a JSON object | depth of the parent of the JSON object | the parsed JSON object
15682|       |    parse_event_t::array_start | the parser read `[` and started to process a JSON array | depth of the parent of the JSON array | a JSON value with type discarded
15683|       |    parse_event_t::array_end | the parser read `]` and finished processing a JSON array | depth of the parent of the JSON array | the parsed JSON array
15684|       |    parse_event_t::value | the parser finished reading a JSON value | depth of the value | the parsed JSON value
15685|       |
15686|       |    @image html callback_events.png "Example when certain parse events are triggered"
15687|       |
15688|       |    Discarding a value (i.e., returning `false`) has different effects
15689|       |    depending on the context in which function was called:
15690|       |
15691|       |    - Discarded values in structured types are skipped. That is, the parser
15692|       |      will behave as if the discarded value was never read.
15693|       |    - In case a value outside a structured type is skipped, it is replaced
15694|       |      with `null`. This case happens if the top-level element is skipped.
15695|       |
15696|       |    @param[in] depth  the depth of the recursion during parsing
15697|       |
15698|       |    @param[in] event  an event of type parse_event_t indicating the context in
15699|       |    the callback function has been called
15700|       |
15701|       |    @param[in,out] parsed  the current intermediate parse result; note that
15702|       |    writing to this value has no effect for parse_event_t::key events
15703|       |
15704|       |    @return Whether the JSON value which called the function during parsing
15705|       |    should be kept (`true`) or not (`false`). In the latter case, it is either
15706|       |    skipped completely or replaced by an empty discarded object.
15707|       |
15708|       |    @sa @ref parse for examples
15709|       |
15710|       |    @since version 1.0.0
15711|       |    */
15712|       |    using parser_callback_t = typename parser::parser_callback_t;
15713|       |
15714|       |    //////////////////
15715|       |    // constructors //
15716|       |    //////////////////
15717|       |
15718|       |    /// @name constructors and destructors
15719|       |    /// Constructors of class @ref basic_json, copy/move constructor, copy
15720|       |    /// assignment, static functions creating objects, and the destructor.
15721|       |    /// @{
15722|       |
15723|       |    /*!
15724|       |    @brief create an empty value with a given type
15725|       |
15726|       |    Create an empty JSON value with a given type. The value will be default
15727|       |    initialized with an empty value which depends on the type:
15728|       |
15729|       |    Value type  | initial value
15730|       |    ----------- | -------------
15731|       |    null        | `null`
15732|       |    boolean     | `false`
15733|       |    string      | `""`
15734|       |    number      | `0`
15735|       |    object      | `{}`
15736|       |    array       | `[]`
15737|       |
15738|       |    @param[in] v  the type of the value to create
15739|       |
15740|       |    @complexity Constant.
15741|       |
15742|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
15743|       |    changes to any JSON value.
15744|       |
15745|       |    @liveexample{The following code shows the constructor for different @ref
15746|       |    value_t values,basic_json__value_t}
15747|       |
15748|       |    @sa @ref clear() -- restores the postcondition of this constructor
15749|       |
15750|       |    @since version 1.0.0
15751|       |    */
15752|       |    basic_json(const value_t v)
15753|       |        : m_type(v), m_value(v)
15754|   162k|    {
15755|   162k|        assert_invariant();
15756|   162k|    }
15757|       |
15758|       |    /*!
15759|       |    @brief create a null object
15760|       |
15761|       |    Create a `null` JSON value. It either takes a null pointer as parameter
15762|       |    (explicitly creating `null`) or no parameter (implicitly creating `null`).
15763|       |    The passed null pointer itself is not read -- it is only used to choose
15764|       |    the right constructor.
15765|       |
15766|       |    @complexity Constant.
15767|       |
15768|       |    @exceptionsafety No-throw guarantee: this constructor never throws
15769|       |    exceptions.
15770|       |
15771|       |    @liveexample{The following code shows the constructor with and without a
15772|       |    null pointer parameter.,basic_json__nullptr_t}
15773|       |
15774|       |    @since version 1.0.0
15775|       |    */
15776|       |    basic_json(std::nullptr_t = nullptr) noexcept
15777|       |        : basic_json(value_t::null)
15778|   133k|    {
15779|   133k|        assert_invariant();
15780|   133k|    }
15781|       |
15782|       |    /*!
15783|       |    @brief create a JSON value
15784|       |
15785|       |    This is a "catch all" constructor for all compatible JSON types; that is,
15786|       |    types for which a `to_json()` method exists. The constructor forwards the
15787|       |    parameter @a val to that method (to `json_serializer<U>::to_json` method
15788|       |    with `U = uncvref_t<CompatibleType>`, to be exact).
15789|       |
15790|       |    Template type @a CompatibleType includes, but is not limited to, the
15791|       |    following types:
15792|       |    - **arrays**: @ref array_t and all kinds of compatible containers such as
15793|       |      `std::vector`, `std::deque`, `std::list`, `std::forward_list`,
15794|       |      `std::array`, `std::valarray`, `std::set`, `std::unordered_set`,
15795|       |      `std::multiset`, and `std::unordered_multiset` with a `value_type` from
15796|       |      which a @ref basic_json value can be constructed.
15797|       |    - **objects**: @ref object_t and all kinds of compatible associative
15798|       |      containers such as `std::map`, `std::unordered_map`, `std::multimap`,
15799|       |      and `std::unordered_multimap` with a `key_type` compatible to
15800|       |      @ref string_t and a `value_type` from which a @ref basic_json value can
15801|       |      be constructed.
15802|       |    - **strings**: @ref string_t, string literals, and all compatible string
15803|       |      containers can be used.
15804|       |    - **numbers**: @ref number_integer_t, @ref number_unsigned_t,
15805|       |      @ref number_float_t, and all convertible number types such as `int`,
15806|       |      `size_t`, `int64_t`, `float` or `double` can be used.
15807|       |    - **boolean**: @ref boolean_t / `bool` can be used.
15808|       |
15809|       |    See the examples below.
15810|       |
15811|       |    @tparam CompatibleType a type such that:
15812|       |    - @a CompatibleType is not derived from `std::istream`,
15813|       |    - @a CompatibleType is not @ref basic_json (to avoid hijacking copy/move
15814|       |         constructors),
15815|       |    - @a CompatibleType is not a different @ref basic_json type (i.e. with different template arguments)
15816|       |    - @a CompatibleType is not a @ref basic_json nested type (e.g.,
15817|       |         @ref json_pointer, @ref iterator, etc ...)
15818|       |    - @ref @ref json_serializer<U> has a
15819|       |         `to_json(basic_json_t&, CompatibleType&&)` method
15820|       |
15821|       |    @tparam U = `uncvref_t<CompatibleType>`
15822|       |
15823|       |    @param[in] val the value to be forwarded to the respective constructor
15824|       |
15825|       |    @complexity Usually linear in the size of the passed @a val, also
15826|       |                depending on the implementation of the called `to_json()`
15827|       |                method.
15828|       |
15829|       |    @exceptionsafety Depends on the called constructor. For types directly
15830|       |    supported by the library (i.e., all types for which no `to_json()` function
15831|       |    was provided), strong guarantee holds: if an exception is thrown, there are
15832|       |    no changes to any JSON value.
15833|       |
15834|       |    @liveexample{The following code shows the constructor with several
15835|       |    compatible types.,basic_json__CompatibleType}
15836|       |
15837|       |    @since version 2.1.0
15838|       |    */
15839|       |    template <typename CompatibleType,
15840|       |              typename U = detail::uncvref_t<CompatibleType>,
15841|       |              detail::enable_if_t<
15842|       |                  not detail::is_basic_json<U>::value and detail::is_compatible_type<basic_json_t, U>::value, int> = 0>
15843|       |    basic_json(CompatibleType && val) noexcept(noexcept(
15844|       |                JSONSerializer<U>::to_json(std::declval<basic_json_t&>(),
15845|       |                                           std::forward<CompatibleType>(val))))
15846|   109k|    {
15847|   109k|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
15848|   109k|        assert_invariant();
15849|   109k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRS8_S8_Li0EEEOT_:
  |15846|  33.4k|    {
  |15847|  33.4k|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|  33.4k|        assert_invariant();
  |15849|  33.4k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRddLi0EEEOT_:
  |15846|  29.4k|    {
  |15847|  29.4k|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|  29.4k|        assert_invariant();
  |15849|  29.4k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRbbLi0EEEOT_:
  |15846|    348|    {
  |15847|    348|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|    348|        assert_invariant();
  |15849|    348|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRllLi0EEEOT_:
  |15846|  4.69k|    {
  |15847|  4.69k|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|  4.69k|        assert_invariant();
  |15849|  4.69k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRmmLi0EEEOT_:
  |15846|  40.3k|    {
  |15847|  40.3k|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|  40.3k|        assert_invariant();
  |15849|  40.3k|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRA474_KcA474_cLi0EEEOT_:
  |15846|     68|    {
  |15847|     68|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|     68|        assert_invariant();
  |15849|     68|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IddLi0EEEOT_:
  |15846|     11|    {
  |15847|     11|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|     11|        assert_invariant();
  |15849|     11|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IS8_S8_Li0EEEOT_:
  |15846|    863|    {
  |15847|    863|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|    863|        assert_invariant();
  |15849|    863|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRjjLi0EEEOT_:
  |15846|    134|    {
  |15847|    134|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|    134|        assert_invariant();
  |15849|    134|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRS2_IS8_SaIS8_EESD_Li0EEEOT_:
  |15846|      5|    {
  |15847|      5|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|      5|        assert_invariant();
  |15849|      5|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRKS8_S8_Li0EEEOT_:
  |15846|     18|    {
  |15847|     18|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|     18|        assert_invariant();
  |15849|     18|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRKPKcSD_Li0EEEOT_:
  |15846|     20|    {
  |15847|     20|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|     20|        assert_invariant();
  |15849|     20|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IbbLi0EEEOT_:
  |15846|      4|    {
  |15847|      4|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|      4|        assert_invariant();
  |15849|      4|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRA6_KcA6_cLi0EEEOT_:
  |15846|      1|    {
  |15847|      1|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|      1|        assert_invariant();
  |15849|      1|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IiiLi0EEEOT_:
  |15846|    103|    {
  |15847|    103|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|    103|        assert_invariant();
  |15849|    103|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IjjLi0EEEOT_:
  |15846|    104|    {
  |15847|    104|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|    104|        assert_invariant();
  |15849|    104|    }
  ------------------
  | _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEC2IRiiLi0EEEOT_:
  |15846|     99|    {
  |15847|     99|        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
  |15848|     99|        assert_invariant();
  |15849|     99|    }
  ------------------
15850|       |
15851|       |    /*!
15852|       |    @brief create a JSON value from an existing one
15853|       |
15854|       |    This is a constructor for existing @ref basic_json types.
15855|       |    It does not hijack copy/move constructors, since the parameter has different
15856|       |    template arguments than the current ones.
15857|       |
15858|       |    The constructor tries to convert the internal @ref m_value of the parameter.
15859|       |
15860|       |    @tparam BasicJsonType a type such that:
15861|       |    - @a BasicJsonType is a @ref basic_json type.
15862|       |    - @a BasicJsonType has different template arguments than @ref basic_json_t.
15863|       |
15864|       |    @param[in] val the @ref basic_json value to be converted.
15865|       |
15866|       |    @complexity Usually linear in the size of the passed @a val, also
15867|       |                depending on the implementation of the called `to_json()`
15868|       |                method.
15869|       |
15870|       |    @exceptionsafety Depends on the called constructor. For types directly
15871|       |    supported by the library (i.e., all types for which no `to_json()` function
15872|       |    was provided), strong guarantee holds: if an exception is thrown, there are
15873|       |    no changes to any JSON value.
15874|       |
15875|       |    @since version 3.2.0
15876|       |    */
15877|       |    template <typename BasicJsonType,
15878|       |              detail::enable_if_t<
15879|       |                  detail::is_basic_json<BasicJsonType>::value and not std::is_same<basic_json, BasicJsonType>::value, int> = 0>
15880|       |    basic_json(const BasicJsonType& val)
15881|       |    {
15882|       |        using other_boolean_t = typename BasicJsonType::boolean_t;
15883|       |        using other_number_float_t = typename BasicJsonType::number_float_t;
15884|       |        using other_number_integer_t = typename BasicJsonType::number_integer_t;
15885|       |        using other_number_unsigned_t = typename BasicJsonType::number_unsigned_t;
15886|       |        using other_string_t = typename BasicJsonType::string_t;
15887|       |        using other_object_t = typename BasicJsonType::object_t;
15888|       |        using other_array_t = typename BasicJsonType::array_t;
15889|       |
15890|       |        switch (val.type())
15891|       |        {
15892|       |            case value_t::boolean:
15893|       |                JSONSerializer<other_boolean_t>::to_json(*this, val.template get<other_boolean_t>());
15894|       |                break;
15895|       |            case value_t::number_float:
15896|       |                JSONSerializer<other_number_float_t>::to_json(*this, val.template get<other_number_float_t>());
15897|       |                break;
15898|       |            case value_t::number_integer:
15899|       |                JSONSerializer<other_number_integer_t>::to_json(*this, val.template get<other_number_integer_t>());
15900|       |                break;
15901|       |            case value_t::number_unsigned:
15902|       |                JSONSerializer<other_number_unsigned_t>::to_json(*this, val.template get<other_number_unsigned_t>());
15903|       |                break;
15904|       |            case value_t::string:
15905|       |                JSONSerializer<other_string_t>::to_json(*this, val.template get_ref<const other_string_t&>());
15906|       |                break;
15907|       |            case value_t::object:
15908|       |                JSONSerializer<other_object_t>::to_json(*this, val.template get_ref<const other_object_t&>());
15909|       |                break;
15910|       |            case value_t::array:
15911|       |                JSONSerializer<other_array_t>::to_json(*this, val.template get_ref<const other_array_t&>());
15912|       |                break;
15913|       |            case value_t::null:
15914|       |                *this = nullptr;
15915|       |                break;
15916|       |            case value_t::discarded:
15917|       |                m_type = value_t::discarded;
15918|       |                break;
15919|       |            default:            // LCOV_EXCL_LINE
15920|       |                assert(false);  // LCOV_EXCL_LINE
15921|       |        }
15922|       |        assert_invariant();
15923|       |    }
15924|       |
15925|       |    /*!
15926|       |    @brief create a container (array or object) from an initializer list
15927|       |
15928|       |    Creates a JSON value of type array or object from the passed initializer
15929|       |    list @a init. In case @a type_deduction is `true` (default), the type of
15930|       |    the JSON value to be created is deducted from the initializer list @a init
15931|       |    according to the following rules:
15932|       |
15933|       |    1. If the list is empty, an empty JSON object value `{}` is created.
15934|       |    2. If the list consists of pairs whose first element is a string, a JSON
15935|       |       object value is created where the first elements of the pairs are
15936|       |       treated as keys and the second elements are as values.
15937|       |    3. In all other cases, an array is created.
15938|       |
15939|       |    The rules aim to create the best fit between a C++ initializer list and
15940|       |    JSON values. The rationale is as follows:
15941|       |
15942|       |    1. The empty initializer list is written as `{}` which is exactly an empty
15943|       |       JSON object.
15944|       |    2. C++ has no way of describing mapped types other than to list a list of
15945|       |       pairs. As JSON requires that keys must be of type string, rule 2 is the
15946|       |       weakest constraint one can pose on initializer lists to interpret them
15947|       |       as an object.
15948|       |    3. In all other cases, the initializer list could not be interpreted as
15949|       |       JSON object type, so interpreting it as JSON array type is safe.
15950|       |
15951|       |    With the rules described above, the following JSON values cannot be
15952|       |    expressed by an initializer list:
15953|       |
15954|       |    - the empty array (`[]`): use @ref array(initializer_list_t)
15955|       |      with an empty initializer list in this case
15956|       |    - arrays whose elements satisfy rule 2: use @ref
15957|       |      array(initializer_list_t) with the same initializer list
15958|       |      in this case
15959|       |
15960|       |    @note When used without parentheses around an empty initializer list, @ref
15961|       |    basic_json() is called instead of this function, yielding the JSON null
15962|       |    value.
15963|       |
15964|       |    @param[in] init  initializer list with JSON values
15965|       |
15966|       |    @param[in] type_deduction internal parameter; when set to `true`, the type
15967|       |    of the JSON value is deducted from the initializer list @a init; when set
15968|       |    to `false`, the type provided via @a manual_type is forced. This mode is
15969|       |    used by the functions @ref array(initializer_list_t) and
15970|       |    @ref object(initializer_list_t).
15971|       |
15972|       |    @param[in] manual_type internal parameter; when @a type_deduction is set
15973|       |    to `false`, the created JSON value will use the provided type (only @ref
15974|       |    value_t::array and @ref value_t::object are valid); when @a type_deduction
15975|       |    is set to `true`, this parameter has no effect
15976|       |
15977|       |    @throw type_error.301 if @a type_deduction is `false`, @a manual_type is
15978|       |    `value_t::object`, but @a init contains an element which is not a pair
15979|       |    whose first element is a string. In this case, the constructor could not
15980|       |    create an object. If @a type_deduction would have be `true`, an array
15981|       |    would have been created. See @ref object(initializer_list_t)
15982|       |    for an example.
15983|       |
15984|       |    @complexity Linear in the size of the initializer list @a init.
15985|       |
15986|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
15987|       |    changes to any JSON value.
15988|       |
15989|       |    @liveexample{The example below shows how JSON values are created from
15990|       |    initializer lists.,basic_json__list_init_t}
15991|       |
15992|       |    @sa @ref array(initializer_list_t) -- create a JSON array
15993|       |    value from an initializer list
15994|       |    @sa @ref object(initializer_list_t) -- create a JSON object
15995|       |    value from an initializer list
15996|       |
15997|       |    @since version 1.0.0
15998|       |    */
15999|       |    basic_json(initializer_list_t init,
16000|       |               bool type_deduction = true,
16001|       |               value_t manual_type = value_t::array)
16002|       |    {
16003|       |        // check if each element is an array with two elements whose first
16004|       |        // element is a string
16005|       |        bool is_an_object = std::all_of(init.begin(), init.end(),
16006|       |                                        [](const detail::json_ref<basic_json>& element_ref)
16007|       |        {
16008|       |            return element_ref->is_array() and element_ref->size() == 2 and (*element_ref)[0].is_string();
16009|       |        });
16010|       |
16011|       |        // adjust type if type deduction is not wanted
16012|       |        if (not type_deduction)
16013|       |        {
16014|       |            // if array is wanted, do not create an object though possible
16015|       |            if (manual_type == value_t::array)
16016|       |            {
16017|       |                is_an_object = false;
16018|       |            }
16019|       |
16020|       |            // if object is wanted but impossible, throw an exception
16021|       |            if (JSON_HEDLEY_UNLIKELY(manual_type == value_t::object and not is_an_object))
16022|       |            {
16023|       |                JSON_THROW(type_error::create(301, "cannot create object from initializer list"));
16024|       |            }
16025|       |        }
16026|       |
16027|       |        if (is_an_object)
16028|       |        {
16029|       |            // the initializer list is a list of pairs -> create object
16030|       |            m_type = value_t::object;
16031|       |            m_value = value_t::object;
16032|       |
16033|       |            std::for_each(init.begin(), init.end(), [this](const detail::json_ref<basic_json>& element_ref)
16034|       |            {
16035|       |                auto element = element_ref.moved_or_copied();
16036|       |                m_value.object->emplace(
16037|       |                    std::move(*((*element.m_value.array)[0].m_value.string)),
16038|       |                    std::move((*element.m_value.array)[1]));
16039|       |            });
16040|       |        }
16041|       |        else
16042|       |        {
16043|       |            // the initializer list describes an array -> create array
16044|       |            m_type = value_t::array;
16045|       |            m_value.array = create<array_t>(init.begin(), init.end());
16046|       |        }
16047|       |
16048|       |        assert_invariant();
16049|       |    }
16050|       |
16051|       |    /*!
16052|       |    @brief explicitly create an array from an initializer list
16053|       |
16054|       |    Creates a JSON array value from a given initializer list. That is, given a
16055|       |    list of values `a, b, c`, creates the JSON value `[a, b, c]`. If the
16056|       |    initializer list is empty, the empty array `[]` is created.
16057|       |
16058|       |    @note This function is only needed to express two edge cases that cannot
16059|       |    be realized with the initializer list constructor (@ref
16060|       |    basic_json(initializer_list_t, bool, value_t)). These cases
16061|       |    are:
16062|       |    1. creating an array whose elements are all pairs whose first element is a
16063|       |    string -- in this case, the initializer list constructor would create an
16064|       |    object, taking the first elements as keys
16065|       |    2. creating an empty array -- passing the empty initializer list to the
16066|       |    initializer list constructor yields an empty object
16067|       |
16068|       |    @param[in] init  initializer list with JSON values to create an array from
16069|       |    (optional)
16070|       |
16071|       |    @return JSON array value
16072|       |
16073|       |    @complexity Linear in the size of @a init.
16074|       |
16075|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
16076|       |    changes to any JSON value.
16077|       |
16078|       |    @liveexample{The following code shows an example for the `array`
16079|       |    function.,array}
16080|       |
16081|       |    @sa @ref basic_json(initializer_list_t, bool, value_t) --
16082|       |    create a JSON value from an initializer list
16083|       |    @sa @ref object(initializer_list_t) -- create a JSON object
16084|       |    value from an initializer list
16085|       |
16086|       |    @since version 1.0.0
16087|       |    */
16088|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
16089|       |    static basic_json array(initializer_list_t init = {})
16090|       |    {
16091|       |        return basic_json(init, false, value_t::array);
16092|       |    }
16093|       |
16094|       |    /*!
16095|       |    @brief explicitly create an object from an initializer list
16096|       |
16097|       |    Creates a JSON object value from a given initializer list. The initializer
16098|       |    lists elements must be pairs, and their first elements must be strings. If
16099|       |    the initializer list is empty, the empty object `{}` is created.
16100|       |
16101|       |    @note This function is only added for symmetry reasons. In contrast to the
16102|       |    related function @ref array(initializer_list_t), there are
16103|       |    no cases which can only be expressed by this function. That is, any
16104|       |    initializer list @a init can also be passed to the initializer list
16105|       |    constructor @ref basic_json(initializer_list_t, bool, value_t).
16106|       |
16107|       |    @param[in] init  initializer list to create an object from (optional)
16108|       |
16109|       |    @return JSON object value
16110|       |
16111|       |    @throw type_error.301 if @a init is not a list of pairs whose first
16112|       |    elements are strings. In this case, no object can be created. When such a
16113|       |    value is passed to @ref basic_json(initializer_list_t, bool, value_t),
16114|       |    an array would have been created from the passed initializer list @a init.
16115|       |    See example below.
16116|       |
16117|       |    @complexity Linear in the size of @a init.
16118|       |
16119|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
16120|       |    changes to any JSON value.
16121|       |
16122|       |    @liveexample{The following code shows an example for the `object`
16123|       |    function.,object}
16124|       |
16125|       |    @sa @ref basic_json(initializer_list_t, bool, value_t) --
16126|       |    create a JSON value from an initializer list
16127|       |    @sa @ref array(initializer_list_t) -- create a JSON array
16128|       |    value from an initializer list
16129|       |
16130|       |    @since version 1.0.0
16131|       |    */
16132|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
16133|       |    static basic_json object(initializer_list_t init = {})
16134|       |    {
16135|       |        return basic_json(init, false, value_t::object);
16136|       |    }
16137|       |
16138|       |    /*!
16139|       |    @brief construct an array with count copies of given value
16140|       |
16141|       |    Constructs a JSON array value by creating @a cnt copies of a passed value.
16142|       |    In case @a cnt is `0`, an empty array is created.
16143|       |
16144|       |    @param[in] cnt  the number of JSON copies of @a val to create
16145|       |    @param[in] val  the JSON value to copy
16146|       |
16147|       |    @post `std::distance(begin(),end()) == cnt` holds.
16148|       |
16149|       |    @complexity Linear in @a cnt.
16150|       |
16151|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
16152|       |    changes to any JSON value.
16153|       |
16154|       |    @liveexample{The following code shows examples for the @ref
16155|       |    basic_json(size_type\, const basic_json&)
16156|       |    constructor.,basic_json__size_type_basic_json}
16157|       |
16158|       |    @since version 1.0.0
16159|       |    */
16160|       |    basic_json(size_type cnt, const basic_json& val)
16161|       |        : m_type(value_t::array)
16162|       |    {
16163|       |        m_value.array = create<array_t>(cnt, val);
16164|       |        assert_invariant();
16165|       |    }
16166|       |
16167|       |    /*!
16168|       |    @brief construct a JSON container given an iterator range
16169|       |
16170|       |    Constructs the JSON value with the contents of the range `[first, last)`.
16171|       |    The semantics depends on the different types a JSON value can have:
16172|       |    - In case of a null type, invalid_iterator.206 is thrown.
16173|       |    - In case of other primitive types (number, boolean, or string), @a first
16174|       |      must be `begin()` and @a last must be `end()`. In this case, the value is
16175|       |      copied. Otherwise, invalid_iterator.204 is thrown.
16176|       |    - In case of structured types (array, object), the constructor behaves as
16177|       |      similar versions for `std::vector` or `std::map`; that is, a JSON array
16178|       |      or object is constructed from the values in the range.
16179|       |
16180|       |    @tparam InputIT an input iterator type (@ref iterator or @ref
16181|       |    const_iterator)
16182|       |
16183|       |    @param[in] first begin of the range to copy from (included)
16184|       |    @param[in] last end of the range to copy from (excluded)
16185|       |
16186|       |    @pre Iterators @a first and @a last must be initialized. **This
16187|       |         precondition is enforced with an assertion (see warning).** If
16188|       |         assertions are switched off, a violation of this precondition yields
16189|       |         undefined behavior.
16190|       |
16191|       |    @pre Range `[first, last)` is valid. Usually, this precondition cannot be
16192|       |         checked efficiently. Only certain edge cases are detected; see the
16193|       |         description of the exceptions below. A violation of this precondition
16194|       |         yields undefined behavior.
16195|       |
16196|       |    @warning A precondition is enforced with a runtime assertion that will
16197|       |             result in calling `std::abort` if this precondition is not met.
16198|       |             Assertions can be disabled by defining `NDEBUG` at compile time.
16199|       |             See https://en.cppreference.com/w/cpp/error/assert for more
16200|       |             information.
16201|       |
16202|       |    @throw invalid_iterator.201 if iterators @a first and @a last are not
16203|       |    compatible (i.e., do not belong to the same JSON value). In this case,
16204|       |    the range `[first, last)` is undefined.
16205|       |    @throw invalid_iterator.204 if iterators @a first and @a last belong to a
16206|       |    primitive type (number, boolean, or string), but @a first does not point
16207|       |    to the first element any more. In this case, the range `[first, last)` is
16208|       |    undefined. See example code below.
16209|       |    @throw invalid_iterator.206 if iterators @a first and @a last belong to a
16210|       |    null value. In this case, the range `[first, last)` is undefined.
16211|       |
16212|       |    @complexity Linear in distance between @a first and @a last.
16213|       |
16214|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
16215|       |    changes to any JSON value.
16216|       |
16217|       |    @liveexample{The example below shows several ways to create JSON values by
16218|       |    specifying a subrange with iterators.,basic_json__InputIt_InputIt}
16219|       |
16220|       |    @since version 1.0.0
16221|       |    */
16222|       |    template<class InputIT, typename std::enable_if<
16223|       |                 std::is_same<InputIT, typename basic_json_t::iterator>::value or
16224|       |                 std::is_same<InputIT, typename basic_json_t::const_iterator>::value, int>::type = 0>
16225|       |    basic_json(InputIT first, InputIT last)
16226|       |    {
16227|       |        assert(first.m_object != nullptr);
16228|       |        assert(last.m_object != nullptr);
16229|       |
16230|       |        // make sure iterator fits the current value
16231|       |        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
16232|       |        {
16233|       |            JSON_THROW(invalid_iterator::create(201, "iterators are not compatible"));
16234|       |        }
16235|       |
16236|       |        // copy type from first iterator
16237|       |        m_type = first.m_object->m_type;
16238|       |
16239|       |        // check if iterator range is complete for primitive values
16240|       |        switch (m_type)
16241|       |        {
16242|       |            case value_t::boolean:
16243|       |            case value_t::number_float:
16244|       |            case value_t::number_integer:
16245|       |            case value_t::number_unsigned:
16246|       |            case value_t::string:
16247|       |            {
16248|       |                if (JSON_HEDLEY_UNLIKELY(not first.m_it.primitive_iterator.is_begin()
16249|       |                                         or not last.m_it.primitive_iterator.is_end()))
16250|       |                {
16251|       |                    JSON_THROW(invalid_iterator::create(204, "iterators out of range"));
16252|       |                }
16253|       |                break;
16254|       |            }
16255|       |
16256|       |            default:
16257|       |                break;
16258|       |        }
16259|       |
16260|       |        switch (m_type)
16261|       |        {
16262|       |            case value_t::number_integer:
16263|       |            {
16264|       |                m_value.number_integer = first.m_object->m_value.number_integer;
16265|       |                break;
16266|       |            }
16267|       |
16268|       |            case value_t::number_unsigned:
16269|       |            {
16270|       |                m_value.number_unsigned = first.m_object->m_value.number_unsigned;
16271|       |                break;
16272|       |            }
16273|       |
16274|       |            case value_t::number_float:
16275|       |            {
16276|       |                m_value.number_float = first.m_object->m_value.number_float;
16277|       |                break;
16278|       |            }
16279|       |
16280|       |            case value_t::boolean:
16281|       |            {
16282|       |                m_value.boolean = first.m_object->m_value.boolean;
16283|       |                break;
16284|       |            }
16285|       |
16286|       |            case value_t::string:
16287|       |            {
16288|       |                m_value = *first.m_object->m_value.string;
16289|       |                break;
16290|       |            }
16291|       |
16292|       |            case value_t::object:
16293|       |            {
16294|       |                m_value.object = create<object_t>(first.m_it.object_iterator,
16295|       |                                                  last.m_it.object_iterator);
16296|       |                break;
16297|       |            }
16298|       |
16299|       |            case value_t::array:
16300|       |            {
16301|       |                m_value.array = create<array_t>(first.m_it.array_iterator,
16302|       |                                                last.m_it.array_iterator);
16303|       |                break;
16304|       |            }
16305|       |
16306|       |            default:
16307|       |                JSON_THROW(invalid_iterator::create(206, "cannot construct with iterators from " +
16308|       |                                                    std::string(first.m_object->type_name())));
16309|       |        }
16310|       |
16311|       |        assert_invariant();
16312|       |    }
16313|       |
16314|       |
16315|       |    ///////////////////////////////////////
16316|       |    // other constructors and destructor //
16317|       |    ///////////////////////////////////////
16318|       |
16319|       |    /// @private
16320|       |    basic_json(const detail::json_ref<basic_json>& ref)
16321|       |        : basic_json(ref.moved_or_copied())
16322|       |    {}
16323|       |
16324|       |    /*!
16325|       |    @brief copy constructor
16326|       |
16327|       |    Creates a copy of a given JSON value.
16328|       |
16329|       |    @param[in] other  the JSON value to copy
16330|       |
16331|       |    @post `*this == other`
16332|       |
16333|       |    @complexity Linear in the size of @a other.
16334|       |
16335|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
16336|       |    changes to any JSON value.
16337|       |
16338|       |    @requirement This function helps `basic_json` satisfying the
16339|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
16340|       |    requirements:
16341|       |    - The complexity is linear.
16342|       |    - As postcondition, it holds: `other == basic_json(other)`.
16343|       |
16344|       |    @liveexample{The following code shows an example for the copy
16345|       |    constructor.,basic_json__basic_json}
16346|       |
16347|       |    @since version 1.0.0
16348|       |    */
16349|       |    basic_json(const basic_json& other)
16350|       |        : m_type(other.m_type)
16351|  17.5k|    {
16352|       |        // check of passed value is valid
16353|  17.5k|        other.assert_invariant();
16354|       |
16355|  17.5k|        switch (m_type)
16356|  17.5k|        {
16357|  2.52k|            case value_t::object:
16358|  2.52k|            {
16359|  2.52k|                m_value = *other.m_value.object;
16360|  2.52k|                break;
16361|      0|            }
16362|       |
16363|     41|            case value_t::array:
16364|     41|            {
16365|     41|                m_value = *other.m_value.array;
16366|     41|                break;
16367|      0|            }
16368|       |
16369|  14.2k|            case value_t::string:
16370|  14.2k|            {
16371|  14.2k|                m_value = *other.m_value.string;
16372|  14.2k|                break;
16373|      0|            }
16374|       |
16375|     73|            case value_t::boolean:
16376|     73|            {
16377|     73|                m_value = other.m_value.boolean;
16378|     73|                break;
16379|      0|            }
16380|       |
16381|    202|            case value_t::number_integer:
16382|    202|            {
16383|    202|                m_value = other.m_value.number_integer;
16384|    202|                break;
16385|      0|            }
16386|       |
16387|    432|            case value_t::number_unsigned:
16388|    432|            {
16389|    432|                m_value = other.m_value.number_unsigned;
16390|    432|                break;
16391|      0|            }
16392|       |
16393|     25|            case value_t::number_float:
16394|     25|            {
16395|     25|                m_value = other.m_value.number_float;
16396|     25|                break;
16397|      0|            }
16398|       |
16399|      0|            default:
16400|      0|                break;
16401|  17.5k|        }
16402|       |
16403|  17.5k|        assert_invariant();
16404|  17.5k|    }
16405|       |
16406|       |    /*!
16407|       |    @brief move constructor
16408|       |
16409|       |    Move constructor. Constructs a JSON value with the contents of the given
16410|       |    value @a other using move semantics. It "steals" the resources from @a
16411|       |    other and leaves it as JSON null value.
16412|       |
16413|       |    @param[in,out] other  value to move to this object
16414|       |
16415|       |    @post `*this` has the same value as @a other before the call.
16416|       |    @post @a other is a JSON null value.
16417|       |
16418|       |    @complexity Constant.
16419|       |
16420|       |    @exceptionsafety No-throw guarantee: this constructor never throws
16421|       |    exceptions.
16422|       |
16423|       |    @requirement This function helps `basic_json` satisfying the
16424|       |    [MoveConstructible](https://en.cppreference.com/w/cpp/named_req/MoveConstructible)
16425|       |    requirements.
16426|       |
16427|       |    @liveexample{The code below shows the move constructor explicitly called
16428|       |    via std::move.,basic_json__moveconstructor}
16429|       |
16430|       |    @since version 1.0.0
16431|       |    */
16432|       |    basic_json(basic_json&& other) noexcept
16433|       |        : m_type(std::move(other.m_type)),
16434|       |          m_value(std::move(other.m_value))
16435|   330k|    {
16436|       |        // check that passed value is valid
16437|   330k|        other.assert_invariant();
16438|       |
16439|       |        // invalidate payload
16440|   330k|        other.m_type = value_t::null;
16441|   330k|        other.m_value = {};
16442|       |
16443|   330k|        assert_invariant();
16444|   330k|    }
16445|       |
16446|       |    /*!
16447|       |    @brief copy assignment
16448|       |
16449|       |    Copy assignment operator. Copies a JSON value via the "copy and swap"
16450|       |    strategy: It is expressed in terms of the copy constructor, destructor,
16451|       |    and the `swap()` member function.
16452|       |
16453|       |    @param[in] other  value to copy from
16454|       |
16455|       |    @complexity Linear.
16456|       |
16457|       |    @requirement This function helps `basic_json` satisfying the
16458|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
16459|       |    requirements:
16460|       |    - The complexity is linear.
16461|       |
16462|       |    @liveexample{The code below shows and example for the copy assignment. It
16463|       |    creates a copy of value `a` which is then swapped with `b`. Finally\, the
16464|       |    copy of `a` (which is the null value after the swap) is
16465|       |    destroyed.,basic_json__copyassignment}
16466|       |
16467|       |    @since version 1.0.0
16468|       |    */
16469|       |    basic_json& operator=(basic_json other) noexcept (
16470|       |        std::is_nothrow_move_constructible<value_t>::value and
16471|       |        std::is_nothrow_move_assignable<value_t>::value and
16472|       |        std::is_nothrow_move_constructible<json_value>::value and
16473|       |        std::is_nothrow_move_assignable<json_value>::value
16474|       |    )
16475|   132k|    {
16476|       |        // check that passed value is valid
16477|   132k|        other.assert_invariant();
16478|       |
16479|   132k|        using std::swap;
16480|   132k|        swap(m_type, other.m_type);
16481|   132k|        swap(m_value, other.m_value);
16482|       |
16483|   132k|        assert_invariant();
16484|   132k|        return *this;
16485|   132k|    }
16486|       |
16487|       |    /*!
16488|       |    @brief destructor
16489|       |
16490|       |    Destroys the JSON value and frees all allocated memory.
16491|       |
16492|       |    @complexity Linear.
16493|       |
16494|       |    @requirement This function helps `basic_json` satisfying the
16495|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
16496|       |    requirements:
16497|       |    - The complexity is linear.
16498|       |    - All stored elements are destroyed and all memory is freed.
16499|       |
16500|       |    @since version 1.0.0
16501|       |    */
16502|       |    ~basic_json() noexcept
16503|   620k|    {
16504|   620k|        assert_invariant();
16505|   620k|        m_value.destroy(m_type);
16506|   620k|    }
16507|       |
16508|       |    /// @}
16509|       |
16510|       |  public:
16511|       |    ///////////////////////
16512|       |    // object inspection //
16513|       |    ///////////////////////
16514|       |
16515|       |    /// @name object inspection
16516|       |    /// Functions to inspect the type of a JSON value.
16517|       |    /// @{
16518|       |
16519|       |    /*!
16520|       |    @brief serialization
16521|       |
16522|       |    Serialization function for JSON values. The function tries to mimic
16523|       |    Python's `json.dumps()` function, and currently supports its @a indent
16524|       |    and @a ensure_ascii parameters.
16525|       |
16526|       |    @param[in] indent If indent is nonnegative, then array elements and object
16527|       |    members will be pretty-printed with that indent level. An indent level of
16528|       |    `0` will only insert newlines. `-1` (the default) selects the most compact
16529|       |    representation.
16530|       |    @param[in] indent_char The character to use for indentation if @a indent is
16531|       |    greater than `0`. The default is ` ` (space).
16532|       |    @param[in] ensure_ascii If @a ensure_ascii is true, all non-ASCII characters
16533|       |    in the output are escaped with `\uXXXX` sequences, and the result consists
16534|       |    of ASCII characters only.
16535|       |    @param[in] error_handler  how to react on decoding errors; there are three
16536|       |    possible values: `strict` (throws and exception in case a decoding error
16537|       |    occurs; default), `replace` (replace invalid UTF-8 sequences with U+FFFD),
16538|       |    and `ignore` (ignore invalid UTF-8 sequences during serialization).
16539|       |
16540|       |    @return string containing the serialization of the JSON value
16541|       |
16542|       |    @throw type_error.316 if a string stored inside the JSON value is not
16543|       |                          UTF-8 encoded
16544|       |
16545|       |    @complexity Linear.
16546|       |
16547|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
16548|       |    changes in the JSON value.
16549|       |
16550|       |    @liveexample{The following example shows the effect of different @a indent\,
16551|       |    @a indent_char\, and @a ensure_ascii parameters to the result of the
16552|       |    serialization.,dump}
16553|       |
16554|       |    @see https://docs.python.org/2/library/json.html#json.dump
16555|       |
16556|       |    @since version 1.0.0; indentation character @a indent_char, option
16557|       |           @a ensure_ascii and exceptions added in version 3.0.0; error
16558|       |           handlers added in version 3.4.0.
16559|       |    */
16560|       |    string_t dump(const int indent = -1,
16561|       |                  const char indent_char = ' ',
16562|       |                  const bool ensure_ascii = false,
16563|       |                  const error_handler_t error_handler = error_handler_t::strict) const
16564|     63|    {
16565|     63|        string_t result;
16566|     63|        serializer s(detail::output_adapter<char, string_t>(result), indent_char, error_handler);
16567|       |
16568|     63|        if (indent >= 0)
16569|     57|        {
16570|     57|            s.dump(*this, true, ensure_ascii, static_cast<unsigned int>(indent));
16571|     57|        }
16572|      6|        else
16573|      6|        {
16574|      6|            s.dump(*this, false, ensure_ascii, 0);
16575|      6|        }
16576|       |
16577|     63|        return result;
16578|     63|    }
16579|       |
16580|       |    /*!
16581|       |    @brief return the type of the JSON value (explicit)
16582|       |
16583|       |    Return the type of the JSON value as a value from the @ref value_t
16584|       |    enumeration.
16585|       |
16586|       |    @return the type of the JSON value
16587|       |            Value type                | return value
16588|       |            ------------------------- | -------------------------
16589|       |            null                      | value_t::null
16590|       |            boolean                   | value_t::boolean
16591|       |            string                    | value_t::string
16592|       |            number (integer)          | value_t::number_integer
16593|       |            number (unsigned integer) | value_t::number_unsigned
16594|       |            number (floating-point)   | value_t::number_float
16595|       |            object                    | value_t::object
16596|       |            array                     | value_t::array
16597|       |            discarded                 | value_t::discarded
16598|       |
16599|       |    @complexity Constant.
16600|       |
16601|       |    @exceptionsafety No-throw guarantee: this member function never throws
16602|       |    exceptions.
16603|       |
16604|       |    @liveexample{The following code exemplifies `type()` for all JSON
16605|       |    types.,type}
16606|       |
16607|       |    @sa @ref operator value_t() -- return the type of the JSON value (implicit)
16608|       |    @sa @ref type_name() -- return the type as string
16609|       |
16610|       |    @since version 1.0.0
16611|       |    */
16612|       |    constexpr value_t type() const noexcept
16613|     40|    {
16614|     40|        return m_type;
16615|     40|    }
16616|       |
16617|       |    /*!
16618|       |    @brief return whether type is primitive
16619|       |
16620|       |    This function returns true if and only if the JSON type is primitive
16621|       |    (string, number, boolean, or null).
16622|       |
16623|       |    @return `true` if type is primitive (string, number, boolean, or null),
16624|       |    `false` otherwise.
16625|       |
16626|       |    @complexity Constant.
16627|       |
16628|       |    @exceptionsafety No-throw guarantee: this member function never throws
16629|       |    exceptions.
16630|       |
16631|       |    @liveexample{The following code exemplifies `is_primitive()` for all JSON
16632|       |    types.,is_primitive}
16633|       |
16634|       |    @sa @ref is_structured() -- returns whether JSON value is structured
16635|       |    @sa @ref is_null() -- returns whether JSON value is `null`
16636|       |    @sa @ref is_string() -- returns whether JSON value is a string
16637|       |    @sa @ref is_boolean() -- returns whether JSON value is a boolean
16638|       |    @sa @ref is_number() -- returns whether JSON value is a number
16639|       |
16640|       |    @since version 1.0.0
16641|       |    */
16642|       |    constexpr bool is_primitive() const noexcept
16643|       |    {
16644|       |        return is_null() or is_string() or is_boolean() or is_number();
16645|       |    }
16646|       |
16647|       |    /*!
16648|       |    @brief return whether type is structured
16649|       |
16650|       |    This function returns true if and only if the JSON type is structured
16651|       |    (array or object).
16652|       |
16653|       |    @return `true` if type is structured (array or object), `false` otherwise.
16654|       |
16655|       |    @complexity Constant.
16656|       |
16657|       |    @exceptionsafety No-throw guarantee: this member function never throws
16658|       |    exceptions.
16659|       |
16660|       |    @liveexample{The following code exemplifies `is_structured()` for all JSON
16661|       |    types.,is_structured}
16662|       |
16663|       |    @sa @ref is_primitive() -- returns whether value is primitive
16664|       |    @sa @ref is_array() -- returns whether value is an array
16665|       |    @sa @ref is_object() -- returns whether value is an object
16666|       |
16667|       |    @since version 1.0.0
16668|       |    */
16669|       |    constexpr bool is_structured() const noexcept
16670|       |    {
16671|       |        return is_array() or is_object();
16672|       |    }
16673|       |
16674|       |    /*!
16675|       |    @brief return whether value is null
16676|       |
16677|       |    This function returns true if and only if the JSON value is null.
16678|       |
16679|       |    @return `true` if type is null, `false` otherwise.
16680|       |
16681|       |    @complexity Constant.
16682|       |
16683|       |    @exceptionsafety No-throw guarantee: this member function never throws
16684|       |    exceptions.
16685|       |
16686|       |    @liveexample{The following code exemplifies `is_null()` for all JSON
16687|       |    types.,is_null}
16688|       |
16689|       |    @since version 1.0.0
16690|       |    */
16691|       |    constexpr bool is_null() const noexcept
16692|  2.02k|    {
16693|  2.02k|        return m_type == value_t::null;
16694|  2.02k|    }
16695|       |
16696|       |    /*!
16697|       |    @brief return whether value is a boolean
16698|       |
16699|       |    This function returns true if and only if the JSON value is a boolean.
16700|       |
16701|       |    @return `true` if type is boolean, `false` otherwise.
16702|       |
16703|       |    @complexity Constant.
16704|       |
16705|       |    @exceptionsafety No-throw guarantee: this member function never throws
16706|       |    exceptions.
16707|       |
16708|       |    @liveexample{The following code exemplifies `is_boolean()` for all JSON
16709|       |    types.,is_boolean}
16710|       |
16711|       |    @since version 1.0.0
16712|       |    */
16713|       |    constexpr bool is_boolean() const noexcept
16714|     32|    {
16715|     32|        return m_type == value_t::boolean;
16716|     32|    }
16717|       |
16718|       |    /*!
16719|       |    @brief return whether value is a number
16720|       |
16721|       |    This function returns true if and only if the JSON value is a number. This
16722|       |    includes both integer (signed and unsigned) and floating-point values.
16723|       |
16724|       |    @return `true` if type is number (regardless whether integer, unsigned
16725|       |    integer or floating-type), `false` otherwise.
16726|       |
16727|       |    @complexity Constant.
16728|       |
16729|       |    @exceptionsafety No-throw guarantee: this member function never throws
16730|       |    exceptions.
16731|       |
16732|       |    @liveexample{The following code exemplifies `is_number()` for all JSON
16733|       |    types.,is_number}
16734|       |
16735|       |    @sa @ref is_number_integer() -- check if value is an integer or unsigned
16736|       |    integer number
16737|       |    @sa @ref is_number_unsigned() -- check if value is an unsigned integer
16738|       |    number
16739|       |    @sa @ref is_number_float() -- check if value is a floating-point number
16740|       |
16741|       |    @since version 1.0.0
16742|       |    */
16743|       |    constexpr bool is_number() const noexcept
16744|       |    {
16745|       |        return is_number_integer() or is_number_float();
16746|       |    }
16747|       |
16748|       |    /*!
16749|       |    @brief return whether value is an integer number
16750|       |
16751|       |    This function returns true if and only if the JSON value is a signed or
16752|       |    unsigned integer number. This excludes floating-point values.
16753|       |
16754|       |    @return `true` if type is an integer or unsigned integer number, `false`
16755|       |    otherwise.
16756|       |
16757|       |    @complexity Constant.
16758|       |
16759|       |    @exceptionsafety No-throw guarantee: this member function never throws
16760|       |    exceptions.
16761|       |
16762|       |    @liveexample{The following code exemplifies `is_number_integer()` for all
16763|       |    JSON types.,is_number_integer}
16764|       |
16765|       |    @sa @ref is_number() -- check if value is a number
16766|       |    @sa @ref is_number_unsigned() -- check if value is an unsigned integer
16767|       |    number
16768|       |    @sa @ref is_number_float() -- check if value is a floating-point number
16769|       |
16770|       |    @since version 1.0.0
16771|       |    */
16772|       |    constexpr bool is_number_integer() const noexcept
16773|      7|    {
16774|      7|        return m_type == value_t::number_integer or m_type == value_t::number_unsigned;
16775|      7|    }
16776|       |
16777|       |    /*!
16778|       |    @brief return whether value is an unsigned integer number
16779|       |
16780|       |    This function returns true if and only if the JSON value is an unsigned
16781|       |    integer number. This excludes floating-point and signed integer values.
16782|       |
16783|       |    @return `true` if type is an unsigned integer number, `false` otherwise.
16784|       |
16785|       |    @complexity Constant.
16786|       |
16787|       |    @exceptionsafety No-throw guarantee: this member function never throws
16788|       |    exceptions.
16789|       |
16790|       |    @liveexample{The following code exemplifies `is_number_unsigned()` for all
16791|       |    JSON types.,is_number_unsigned}
16792|       |
16793|       |    @sa @ref is_number() -- check if value is a number
16794|       |    @sa @ref is_number_integer() -- check if value is an integer or unsigned
16795|       |    integer number
16796|       |    @sa @ref is_number_float() -- check if value is a floating-point number
16797|       |
16798|       |    @since version 2.0.0
16799|       |    */
16800|       |    constexpr bool is_number_unsigned() const noexcept
16801|    729|    {
16802|    729|        return m_type == value_t::number_unsigned;
16803|    729|    }
16804|       |
16805|       |    /*!
16806|       |    @brief return whether value is a floating-point number
16807|       |
16808|       |    This function returns true if and only if the JSON value is a
16809|       |    floating-point number. This excludes signed and unsigned integer values.
16810|       |
16811|       |    @return `true` if type is a floating-point number, `false` otherwise.
16812|       |
16813|       |    @complexity Constant.
16814|       |
16815|       |    @exceptionsafety No-throw guarantee: this member function never throws
16816|       |    exceptions.
16817|       |
16818|       |    @liveexample{The following code exemplifies `is_number_float()` for all
16819|       |    JSON types.,is_number_float}
16820|       |
16821|       |    @sa @ref is_number() -- check if value is number
16822|       |    @sa @ref is_number_integer() -- check if value is an integer number
16823|       |    @sa @ref is_number_unsigned() -- check if value is an unsigned integer
16824|       |    number
16825|       |
16826|       |    @since version 1.0.0
16827|       |    */
16828|       |    constexpr bool is_number_float() const noexcept
16829|     22|    {
16830|     22|        return m_type == value_t::number_float;
16831|     22|    }
16832|       |
16833|       |    /*!
16834|       |    @brief return whether value is an object
16835|       |
16836|       |    This function returns true if and only if the JSON value is an object.
16837|       |
16838|       |    @return `true` if type is object, `false` otherwise.
16839|       |
16840|       |    @complexity Constant.
16841|       |
16842|       |    @exceptionsafety No-throw guarantee: this member function never throws
16843|       |    exceptions.
16844|       |
16845|       |    @liveexample{The following code exemplifies `is_object()` for all JSON
16846|       |    types.,is_object}
16847|       |
16848|       |    @since version 1.0.0
16849|       |    */
16850|       |    constexpr bool is_object() const noexcept
16851|   420k|    {
16852|   420k|        return m_type == value_t::object;
16853|   420k|    }
16854|       |
16855|       |    /*!
16856|       |    @brief return whether value is an array
16857|       |
16858|       |    This function returns true if and only if the JSON value is an array.
16859|       |
16860|       |    @return `true` if type is array, `false` otherwise.
16861|       |
16862|       |    @complexity Constant.
16863|       |
16864|       |    @exceptionsafety No-throw guarantee: this member function never throws
16865|       |    exceptions.
16866|       |
16867|       |    @liveexample{The following code exemplifies `is_array()` for all JSON
16868|       |    types.,is_array}
16869|       |
16870|       |    @since version 1.0.0
16871|       |    */
16872|       |    constexpr bool is_array() const noexcept
16873|   426k|    {
16874|   426k|        return m_type == value_t::array;
16875|   426k|    }
16876|       |
16877|       |    /*!
16878|       |    @brief return whether value is a string
16879|       |
16880|       |    This function returns true if and only if the JSON value is a string.
16881|       |
16882|       |    @return `true` if type is string, `false` otherwise.
16883|       |
16884|       |    @complexity Constant.
16885|       |
16886|       |    @exceptionsafety No-throw guarantee: this member function never throws
16887|       |    exceptions.
16888|       |
16889|       |    @liveexample{The following code exemplifies `is_string()` for all JSON
16890|       |    types.,is_string}
16891|       |
16892|       |    @since version 1.0.0
16893|       |    */
16894|       |    constexpr bool is_string() const noexcept
16895|  11.2k|    {
16896|  11.2k|        return m_type == value_t::string;
16897|  11.2k|    }
16898|       |
16899|       |    /*!
16900|       |    @brief return whether value is discarded
16901|       |
16902|       |    This function returns true if and only if the JSON value was discarded
16903|       |    during parsing with a callback function (see @ref parser_callback_t).
16904|       |
16905|       |    @note This function will always be `false` for JSON values after parsing.
16906|       |    That is, discarded values can only occur during parsing, but will be
16907|       |    removed when inside a structured value or replaced by null in other cases.
16908|       |
16909|       |    @return `true` if type is discarded, `false` otherwise.
16910|       |
16911|       |    @complexity Constant.
16912|       |
16913|       |    @exceptionsafety No-throw guarantee: this member function never throws
16914|       |    exceptions.
16915|       |
16916|       |    @liveexample{The following code exemplifies `is_discarded()` for all JSON
16917|       |    types.,is_discarded}
16918|       |
16919|       |    @since version 1.0.0
16920|       |    */
16921|       |    constexpr bool is_discarded() const noexcept
16922|      0|    {
16923|      0|        return m_type == value_t::discarded;
16924|      0|    }
16925|       |
16926|       |    /*!
16927|       |    @brief return the type of the JSON value (implicit)
16928|       |
16929|       |    Implicitly return the type of the JSON value as a value from the @ref
16930|       |    value_t enumeration.
16931|       |
16932|       |    @return the type of the JSON value
16933|       |
16934|       |    @complexity Constant.
16935|       |
16936|       |    @exceptionsafety No-throw guarantee: this member function never throws
16937|       |    exceptions.
16938|       |
16939|       |    @liveexample{The following code exemplifies the @ref value_t operator for
16940|       |    all JSON types.,operator__value_t}
16941|       |
16942|       |    @sa @ref type() -- return the type of the JSON value (explicit)
16943|       |    @sa @ref type_name() -- return the type as string
16944|       |
16945|       |    @since version 1.0.0
16946|       |    */
16947|       |    constexpr operator value_t() const noexcept
16948|    758|    {
16949|    758|        return m_type;
16950|    758|    }
16951|       |
16952|       |    /// @}
16953|       |
16954|       |  private:
16955|       |    //////////////////
16956|       |    // value access //
16957|       |    //////////////////
16958|       |
16959|       |    /// get a boolean (explicit)
16960|       |    boolean_t get_impl(boolean_t* /*unused*/) const
16961|       |    {
16962|       |        if (JSON_HEDLEY_LIKELY(is_boolean()))
16963|       |        {
16964|       |            return m_value.boolean;
16965|       |        }
16966|       |
16967|       |        JSON_THROW(type_error::create(302, "type must be boolean, but is " + std::string(type_name())));
16968|       |    }
16969|       |
16970|       |    /// get a pointer to the value (object)
16971|       |    object_t* get_impl_ptr(object_t* /*unused*/) noexcept
16972|       |    {
16973|       |        return is_object() ? m_value.object : nullptr;
16974|       |    }
16975|       |
16976|       |    /// get a pointer to the value (object)
16977|       |    constexpr const object_t* get_impl_ptr(const object_t* /*unused*/) const noexcept
16978|       |    {
16979|       |        return is_object() ? m_value.object : nullptr;
16980|       |    }
16981|       |
16982|       |    /// get a pointer to the value (array)
16983|       |    array_t* get_impl_ptr(array_t* /*unused*/) noexcept
16984|       |    {
16985|       |        return is_array() ? m_value.array : nullptr;
16986|       |    }
16987|       |
16988|       |    /// get a pointer to the value (array)
16989|       |    constexpr const array_t* get_impl_ptr(const array_t* /*unused*/) const noexcept
16990|       |    {
16991|       |        return is_array() ? m_value.array : nullptr;
16992|       |    }
16993|       |
16994|       |    /// get a pointer to the value (string)
16995|       |    string_t* get_impl_ptr(string_t* /*unused*/) noexcept
16996|       |    {
16997|       |        return is_string() ? m_value.string : nullptr;
16998|       |    }
16999|       |
17000|       |    /// get a pointer to the value (string)
17001|       |    constexpr const string_t* get_impl_ptr(const string_t* /*unused*/) const noexcept
17002|  5.62k|    {
17003|  5.62k|        return is_string() ? m_value.string : nullptr;
17004|  5.62k|    }
17005|       |
17006|       |    /// get a pointer to the value (boolean)
17007|       |    boolean_t* get_impl_ptr(boolean_t* /*unused*/) noexcept
17008|       |    {
17009|       |        return is_boolean() ? &m_value.boolean : nullptr;
17010|       |    }
17011|       |
17012|       |    /// get a pointer to the value (boolean)
17013|       |    constexpr const boolean_t* get_impl_ptr(const boolean_t* /*unused*/) const noexcept
17014|     16|    {
17015|     16|        return is_boolean() ? &m_value.boolean : nullptr;
17016|     16|    }
17017|       |
17018|       |    /// get a pointer to the value (integer number)
17019|       |    number_integer_t* get_impl_ptr(number_integer_t* /*unused*/) noexcept
17020|       |    {
17021|       |        return is_number_integer() ? &m_value.number_integer : nullptr;
17022|       |    }
17023|       |
17024|       |    /// get a pointer to the value (integer number)
17025|       |    constexpr const number_integer_t* get_impl_ptr(const number_integer_t* /*unused*/) const noexcept
17026|      7|    {
17027|      7|        return is_number_integer() ? &m_value.number_integer : nullptr;
17028|      7|    }
17029|       |
17030|       |    /// get a pointer to the value (unsigned number)
17031|       |    number_unsigned_t* get_impl_ptr(number_unsigned_t* /*unused*/) noexcept
17032|       |    {
17033|       |        return is_number_unsigned() ? &m_value.number_unsigned : nullptr;
17034|       |    }
17035|       |
17036|       |    /// get a pointer to the value (unsigned number)
17037|       |    constexpr const number_unsigned_t* get_impl_ptr(const number_unsigned_t* /*unused*/) const noexcept
17038|    729|    {
17039|    729|        return is_number_unsigned() ? &m_value.number_unsigned : nullptr;
17040|    729|    }
17041|       |
17042|       |    /// get a pointer to the value (floating-point number)
17043|       |    number_float_t* get_impl_ptr(number_float_t* /*unused*/) noexcept
17044|       |    {
17045|       |        return is_number_float() ? &m_value.number_float : nullptr;
17046|       |    }
17047|       |
17048|       |    /// get a pointer to the value (floating-point number)
17049|       |    constexpr const number_float_t* get_impl_ptr(const number_float_t* /*unused*/) const noexcept
17050|     22|    {
17051|     22|        return is_number_float() ? &m_value.number_float : nullptr;
17052|     22|    }
17053|       |
17054|       |    /*!
17055|       |    @brief helper function to implement get_ref()
17056|       |
17057|       |    This function helps to implement get_ref() without code duplication for
17058|       |    const and non-const overloads
17059|       |
17060|       |    @tparam ThisType will be deduced as `basic_json` or `const basic_json`
17061|       |
17062|       |    @throw type_error.303 if ReferenceType does not match underlying value
17063|       |    type of the current JSON
17064|       |    */
17065|       |    template<typename ReferenceType, typename ThisType>
17066|       |    static ReferenceType get_ref_impl(ThisType& obj)
17067|       |    {
17068|       |        // delegate the call to get_ptr<>()
17069|       |        auto ptr = obj.template get_ptr<typename std::add_pointer<ReferenceType>::type>();
17070|       |
17071|       |        if (JSON_HEDLEY_LIKELY(ptr != nullptr))
17072|       |        {
17073|       |            return *ptr;
17074|       |        }
17075|       |
17076|       |        JSON_THROW(type_error::create(303, "incompatible ReferenceType for get_ref, actual type is " + std::string(obj.type_name())));
17077|       |    }
17078|       |
17079|       |  public:
17080|       |    /// @name value access
17081|       |    /// Direct access to the stored value of a JSON value.
17082|       |    /// @{
17083|       |
17084|       |    /*!
17085|       |    @brief get special-case overload
17086|       |
17087|       |    This overloads avoids a lot of template boilerplate, it can be seen as the
17088|       |    identity method
17089|       |
17090|       |    @tparam BasicJsonType == @ref basic_json
17091|       |
17092|       |    @return a copy of *this
17093|       |
17094|       |    @complexity Constant.
17095|       |
17096|       |    @since version 2.1.0
17097|       |    */
17098|       |    template<typename BasicJsonType, detail::enable_if_t<
17099|       |                 std::is_same<typename std::remove_const<BasicJsonType>::type, basic_json_t>::value,
17100|       |                 int> = 0>
17101|       |    basic_json get() const
17102|       |    {
17103|       |        return *this;
17104|       |    }
17105|       |
17106|       |    /*!
17107|       |    @brief get special-case overload
17108|       |
17109|       |    This overloads converts the current @ref basic_json in a different
17110|       |    @ref basic_json type
17111|       |
17112|       |    @tparam BasicJsonType == @ref basic_json
17113|       |
17114|       |    @return a copy of *this, converted into @tparam BasicJsonType
17115|       |
17116|       |    @complexity Depending on the implementation of the called `from_json()`
17117|       |                method.
17118|       |
17119|       |    @since version 3.2.0
17120|       |    */
17121|       |    template<typename BasicJsonType, detail::enable_if_t<
17122|       |                 not std::is_same<BasicJsonType, basic_json>::value and
17123|       |                 detail::is_basic_json<BasicJsonType>::value, int> = 0>
17124|       |    BasicJsonType get() const
17125|       |    {
17126|       |        return *this;
17127|       |    }
17128|       |
17129|       |    /*!
17130|       |    @brief get a value (explicit)
17131|       |
17132|       |    Explicit type conversion between the JSON value and a compatible value
17133|       |    which is [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
17134|       |    and [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
17135|       |    The value is converted by calling the @ref json_serializer<ValueType>
17136|       |    `from_json()` method.
17137|       |
17138|       |    The function is equivalent to executing
17139|       |    @code {.cpp}
17140|       |    ValueType ret;
17141|       |    JSONSerializer<ValueType>::from_json(*this, ret);
17142|       |    return ret;
17143|       |    @endcode
17144|       |
17145|       |    This overloads is chosen if:
17146|       |    - @a ValueType is not @ref basic_json,
17147|       |    - @ref json_serializer<ValueType> has a `from_json()` method of the form
17148|       |      `void from_json(const basic_json&, ValueType&)`, and
17149|       |    - @ref json_serializer<ValueType> does not have a `from_json()` method of
17150|       |      the form `ValueType from_json(const basic_json&)`
17151|       |
17152|       |    @tparam ValueTypeCV the provided value type
17153|       |    @tparam ValueType the returned value type
17154|       |
17155|       |    @return copy of the JSON value, converted to @a ValueType
17156|       |
17157|       |    @throw what @ref json_serializer<ValueType> `from_json()` method throws
17158|       |
17159|       |    @liveexample{The example below shows several conversions from JSON values
17160|       |    to other types. There a few things to note: (1) Floating-point numbers can
17161|       |    be converted to integers\, (2) A JSON array can be converted to a standard
17162|       |    `std::vector<short>`\, (3) A JSON object can be converted to C++
17163|       |    associative containers such as `std::unordered_map<std::string\,
17164|       |    json>`.,get__ValueType_const}
17165|       |
17166|       |    @since version 2.1.0
17167|       |    */
17168|       |    template<typename ValueTypeCV, typename ValueType = detail::uncvref_t<ValueTypeCV>,
17169|       |             detail::enable_if_t <
17170|       |                 not detail::is_basic_json<ValueType>::value and
17171|       |                 detail::has_from_json<basic_json_t, ValueType>::value and
17172|       |                 not detail::has_non_default_from_json<basic_json_t, ValueType>::value,
17173|       |                 int> = 0>
17174|       |    ValueType get() const noexcept(noexcept(
17175|       |                                       JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), std::declval<ValueType&>())))
17176|  6.49k|    {
17177|       |        // we cannot static_assert on ValueTypeCV being non-const, because
17178|       |        // there is support for get<const basic_json_t>(), which is why we
17179|       |        // still need the uncvref
17180|  6.49k|        static_assert(not std::is_reference<ValueTypeCV>::value,
17181|  6.49k|                      "get() cannot be used with reference types, you might want to use get_ref()");
17182|  6.49k|        static_assert(std::is_default_constructible<ValueType>::value,
17183|  6.49k|                      "types must be DefaultConstructible when used with get()");
17184|       |
17185|  6.49k|        ValueType ret;
17186|  6.49k|        JSONSerializer<ValueType>::from_json(*this, ret);
17187|  6.49k|        return ret;
17188|  6.49k|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIS8_S8_Li0EEET0_v:
  |17176|  5.62k|    {
  |17177|       |        // we cannot static_assert on ValueTypeCV being non-const, because
  |17178|       |        // there is support for get<const basic_json_t>(), which is why we
  |17179|       |        // still need the uncvref
  |17180|  5.62k|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |17181|  5.62k|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |17182|  5.62k|        static_assert(std::is_default_constructible<ValueType>::value,
  |17183|  5.62k|                      "types must be DefaultConstructible when used with get()");
  |17184|       |
  |17185|  5.62k|        ValueType ret;
  |17186|  5.62k|        JSONSerializer<ValueType>::from_json(*this, ret);
  |17187|  5.62k|        return ret;
  |17188|  5.62k|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIiiLi0EEET0_v:
  |17176|    723|    {
  |17177|       |        // we cannot static_assert on ValueTypeCV being non-const, because
  |17178|       |        // there is support for get<const basic_json_t>(), which is why we
  |17179|       |        // still need the uncvref
  |17180|    723|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |17181|    723|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |17182|    723|        static_assert(std::is_default_constructible<ValueType>::value,
  |17183|    723|                      "types must be DefaultConstructible when used with get()");
  |17184|       |
  |17185|    723|        ValueType ret;
  |17186|    723|        JSONSerializer<ValueType>::from_json(*this, ret);
  |17187|    723|        return ret;
  |17188|    723|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIS2_IS8_SaIS8_EESD_Li0EEET0_v:
  |17176|     14|    {
  |17177|       |        // we cannot static_assert on ValueTypeCV being non-const, because
  |17178|       |        // there is support for get<const basic_json_t>(), which is why we
  |17179|       |        // still need the uncvref
  |17180|     14|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |17181|     14|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |17182|     14|        static_assert(std::is_default_constructible<ValueType>::value,
  |17183|     14|                      "types must be DefaultConstructible when used with get()");
  |17184|       |
  |17185|     14|        ValueType ret;
  |17186|     14|        JSONSerializer<ValueType>::from_json(*this, ret);
  |17187|     14|        return ret;
  |17188|     14|    }
  ------------------
  | Unexecuted instantiation: _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getI5STATESC_Li0EEET0_v
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIjjLi0EEET0_v:
  |17176|     11|    {
  |17177|       |        // we cannot static_assert on ValueTypeCV being non-const, because
  |17178|       |        // there is support for get<const basic_json_t>(), which is why we
  |17179|       |        // still need the uncvref
  |17180|     11|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |17181|     11|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |17182|     11|        static_assert(std::is_default_constructible<ValueType>::value,
  |17183|     11|                      "types must be DefaultConstructible when used with get()");
  |17184|       |
  |17185|     11|        ValueType ret;
  |17186|     11|        JSONSerializer<ValueType>::from_json(*this, ret);
  |17187|     11|        return ret;
  |17188|     11|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIddLi0EEET0_v:
  |17176|     19|    {
  |17177|       |        // we cannot static_assert on ValueTypeCV being non-const, because
  |17178|       |        // there is support for get<const basic_json_t>(), which is why we
  |17179|       |        // still need the uncvref
  |17180|     19|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |17181|     19|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |17182|     19|        static_assert(std::is_default_constructible<ValueType>::value,
  |17183|     19|                      "types must be DefaultConstructible when used with get()");
  |17184|       |
  |17185|     19|        ValueType ret;
  |17186|     19|        JSONSerializer<ValueType>::from_json(*this, ret);
  |17187|     19|        return ret;
  |17188|     19|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIbbLi0EEET0_v:
  |17176|     16|    {
  |17177|       |        // we cannot static_assert on ValueTypeCV being non-const, because
  |17178|       |        // there is support for get<const basic_json_t>(), which is why we
  |17179|       |        // still need the uncvref
  |17180|     16|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |17181|     16|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |17182|     16|        static_assert(std::is_default_constructible<ValueType>::value,
  |17183|     16|                      "types must be DefaultConstructible when used with get()");
  |17184|       |
  |17185|     16|        ValueType ret;
  |17186|     16|        JSONSerializer<ValueType>::from_json(*this, ret);
  |17187|     16|        return ret;
  |17188|     16|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIS2_IiSaIiEESD_Li0EEET0_v:
  |17176|     84|    {
  |17177|       |        // we cannot static_assert on ValueTypeCV being non-const, because
  |17178|       |        // there is support for get<const basic_json_t>(), which is why we
  |17179|       |        // still need the uncvref
  |17180|     84|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |17181|     84|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |17182|     84|        static_assert(std::is_default_constructible<ValueType>::value,
  |17183|     84|                      "types must be DefaultConstructible when used with get()");
  |17184|       |
  |17185|     84|        ValueType ret;
  |17186|     84|        JSONSerializer<ValueType>::from_json(*this, ret);
  |17187|     84|        return ret;
  |17188|     84|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE3getIffLi0EEET0_v:
  |17176|      5|    {
  |17177|       |        // we cannot static_assert on ValueTypeCV being non-const, because
  |17178|       |        // there is support for get<const basic_json_t>(), which is why we
  |17179|       |        // still need the uncvref
  |17180|      5|        static_assert(not std::is_reference<ValueTypeCV>::value,
  |17181|      5|                      "get() cannot be used with reference types, you might want to use get_ref()");
  |17182|      5|        static_assert(std::is_default_constructible<ValueType>::value,
  |17183|      5|                      "types must be DefaultConstructible when used with get()");
  |17184|       |
  |17185|      5|        ValueType ret;
  |17186|      5|        JSONSerializer<ValueType>::from_json(*this, ret);
  |17187|      5|        return ret;
  |17188|      5|    }
  ------------------
17189|       |
17190|       |    /*!
17191|       |    @brief get a value (explicit); special case
17192|       |
17193|       |    Explicit type conversion between the JSON value and a compatible value
17194|       |    which is **not** [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
17195|       |    and **not** [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
17196|       |    The value is converted by calling the @ref json_serializer<ValueType>
17197|       |    `from_json()` method.
17198|       |
17199|       |    The function is equivalent to executing
17200|       |    @code {.cpp}
17201|       |    return JSONSerializer<ValueTypeCV>::from_json(*this);
17202|       |    @endcode
17203|       |
17204|       |    This overloads is chosen if:
17205|       |    - @a ValueType is not @ref basic_json and
17206|       |    - @ref json_serializer<ValueType> has a `from_json()` method of the form
17207|       |      `ValueType from_json(const basic_json&)`
17208|       |
17209|       |    @note If @ref json_serializer<ValueType> has both overloads of
17210|       |    `from_json()`, this one is chosen.
17211|       |
17212|       |    @tparam ValueTypeCV the provided value type
17213|       |    @tparam ValueType the returned value type
17214|       |
17215|       |    @return copy of the JSON value, converted to @a ValueType
17216|       |
17217|       |    @throw what @ref json_serializer<ValueType> `from_json()` method throws
17218|       |
17219|       |    @since version 2.1.0
17220|       |    */
17221|       |    template<typename ValueTypeCV, typename ValueType = detail::uncvref_t<ValueTypeCV>,
17222|       |             detail::enable_if_t<not std::is_same<basic_json_t, ValueType>::value and
17223|       |                                 detail::has_non_default_from_json<basic_json_t, ValueType>::value,
17224|       |                                 int> = 0>
17225|       |    ValueType get() const noexcept(noexcept(
17226|       |                                       JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>())))
17227|       |    {
17228|       |        static_assert(not std::is_reference<ValueTypeCV>::value,
17229|       |                      "get() cannot be used with reference types, you might want to use get_ref()");
17230|       |        return JSONSerializer<ValueType>::from_json(*this);
17231|       |    }
17232|       |
17233|       |    /*!
17234|       |    @brief get a value (explicit)
17235|       |
17236|       |    Explicit type conversion between the JSON value and a compatible value.
17237|       |    The value is filled into the input parameter by calling the @ref json_serializer<ValueType>
17238|       |    `from_json()` method.
17239|       |
17240|       |    The function is equivalent to executing
17241|       |    @code {.cpp}
17242|       |    ValueType v;
17243|       |    JSONSerializer<ValueType>::from_json(*this, v);
17244|       |    @endcode
17245|       |
17246|       |    This overloads is chosen if:
17247|       |    - @a ValueType is not @ref basic_json,
17248|       |    - @ref json_serializer<ValueType> has a `from_json()` method of the form
17249|       |      `void from_json(const basic_json&, ValueType&)`, and
17250|       |
17251|       |    @tparam ValueType the input parameter type.
17252|       |
17253|       |    @return the input parameter, allowing chaining calls.
17254|       |
17255|       |    @throw what @ref json_serializer<ValueType> `from_json()` method throws
17256|       |
17257|       |    @liveexample{The example below shows several conversions from JSON values
17258|       |    to other types. There a few things to note: (1) Floating-point numbers can
17259|       |    be converted to integers\, (2) A JSON array can be converted to a standard
17260|       |    `std::vector<short>`\, (3) A JSON object can be converted to C++
17261|       |    associative containers such as `std::unordered_map<std::string\,
17262|       |    json>`.,get_to}
17263|       |
17264|       |    @since version 3.3.0
17265|       |    */
17266|       |    template<typename ValueType,
17267|       |             detail::enable_if_t <
17268|       |                 not detail::is_basic_json<ValueType>::value and
17269|       |                 detail::has_from_json<basic_json_t, ValueType>::value,
17270|       |                 int> = 0>
17271|       |    ValueType & get_to(ValueType& v) const noexcept(noexcept(
17272|       |                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), v)))
17273|       |    {
17274|       |        JSONSerializer<ValueType>::from_json(*this, v);
17275|       |        return v;
17276|       |    }
17277|       |
17278|       |    template <
17279|       |        typename T, std::size_t N,
17280|       |        typename Array = T (&)[N],
17281|       |        detail::enable_if_t <
17282|       |            detail::has_from_json<basic_json_t, Array>::value, int > = 0 >
17283|       |    Array get_to(T (&v)[N]) const
17284|       |    noexcept(noexcept(JSONSerializer<Array>::from_json(
17285|       |                          std::declval<const basic_json_t&>(), v)))
17286|       |    {
17287|       |        JSONSerializer<Array>::from_json(*this, v);
17288|       |        return v;
17289|       |    }
17290|       |
17291|       |
17292|       |    /*!
17293|       |    @brief get a pointer value (implicit)
17294|       |
17295|       |    Implicit pointer access to the internally stored JSON value. No copies are
17296|       |    made.
17297|       |
17298|       |    @warning Writing data to the pointee of the result yields an undefined
17299|       |    state.
17300|       |
17301|       |    @tparam PointerType pointer type; must be a pointer to @ref array_t, @ref
17302|       |    object_t, @ref string_t, @ref boolean_t, @ref number_integer_t,
17303|       |    @ref number_unsigned_t, or @ref number_float_t. Enforced by a static
17304|       |    assertion.
17305|       |
17306|       |    @return pointer to the internally stored JSON value if the requested
17307|       |    pointer type @a PointerType fits to the JSON value; `nullptr` otherwise
17308|       |
17309|       |    @complexity Constant.
17310|       |
17311|       |    @liveexample{The example below shows how pointers to internal values of a
17312|       |    JSON value can be requested. Note that no type conversions are made and a
17313|       |    `nullptr` is returned if the value and the requested pointer type does not
17314|       |    match.,get_ptr}
17315|       |
17316|       |    @since version 1.0.0
17317|       |    */
17318|       |    template<typename PointerType, typename std::enable_if<
17319|       |                 std::is_pointer<PointerType>::value, int>::type = 0>
17320|       |    auto get_ptr() noexcept -> decltype(std::declval<basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))
17321|       |    {
17322|       |        // delegate the call to get_impl_ptr<>()
17323|       |        return get_impl_ptr(static_cast<PointerType>(nullptr));
17324|       |    }
17325|       |
17326|       |    /*!
17327|       |    @brief get a pointer value (implicit)
17328|       |    @copydoc get_ptr()
17329|       |    */
17330|       |    template<typename PointerType, typename std::enable_if<
17331|       |                 std::is_pointer<PointerType>::value and
17332|       |                 std::is_const<typename std::remove_pointer<PointerType>::type>::value, int>::type = 0>
17333|       |    constexpr auto get_ptr() const noexcept -> decltype(std::declval<const basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))
17334|  6.39k|    {
17335|       |        // delegate the call to get_impl_ptr<>() const
17336|  6.39k|        return get_impl_ptr(static_cast<PointerType>(nullptr));
17337|  6.39k|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE7get_ptrIPKS8_Li0EEEDTcldtclL_ZSt7declvalIRKSA_EDTcl9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISH_EEEEv:
  |17334|  5.62k|    {
  |17335|       |        // delegate the call to get_impl_ptr<>() const
  |17336|  5.62k|        return get_impl_ptr(static_cast<PointerType>(nullptr));
  |17337|  5.62k|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE7get_ptrIPKmLi0EEEDTcldtclL_ZSt7declvalIRKSA_EDTcl9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISH_EEEEv:
  |17334|    729|    {
  |17335|       |        // delegate the call to get_impl_ptr<>() const
  |17336|    729|        return get_impl_ptr(static_cast<PointerType>(nullptr));
  |17337|    729|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE7get_ptrIPKlLi0EEEDTcldtclL_ZSt7declvalIRKSA_EDTcl9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISH_EEEEv:
  |17334|      7|    {
  |17335|       |        // delegate the call to get_impl_ptr<>() const
  |17336|      7|        return get_impl_ptr(static_cast<PointerType>(nullptr));
  |17337|      7|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE7get_ptrIPKdLi0EEEDTcldtclL_ZSt7declvalIRKSA_EDTcl9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISH_EEEEv:
  |17334|     22|    {
  |17335|       |        // delegate the call to get_impl_ptr<>() const
  |17336|     22|        return get_impl_ptr(static_cast<PointerType>(nullptr));
  |17337|     22|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE7get_ptrIPKbLi0EEEDTcldtclL_ZSt7declvalIRKSA_EDTcl9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISH_EEEEv:
  |17334|     16|    {
  |17335|       |        // delegate the call to get_impl_ptr<>() const
  |17336|     16|        return get_impl_ptr(static_cast<PointerType>(nullptr));
  |17337|     16|    }
  ------------------
17338|       |
17339|       |    /*!
17340|       |    @brief get a pointer value (explicit)
17341|       |
17342|       |    Explicit pointer access to the internally stored JSON value. No copies are
17343|       |    made.
17344|       |
17345|       |    @warning The pointer becomes invalid if the underlying JSON object
17346|       |    changes.
17347|       |
17348|       |    @tparam PointerType pointer type; must be a pointer to @ref array_t, @ref
17349|       |    object_t, @ref string_t, @ref boolean_t, @ref number_integer_t,
17350|       |    @ref number_unsigned_t, or @ref number_float_t.
17351|       |
17352|       |    @return pointer to the internally stored JSON value if the requested
17353|       |    pointer type @a PointerType fits to the JSON value; `nullptr` otherwise
17354|       |
17355|       |    @complexity Constant.
17356|       |
17357|       |    @liveexample{The example below shows how pointers to internal values of a
17358|       |    JSON value can be requested. Note that no type conversions are made and a
17359|       |    `nullptr` is returned if the value and the requested pointer type does not
17360|       |    match.,get__PointerType}
17361|       |
17362|       |    @sa @ref get_ptr() for explicit pointer-member access
17363|       |
17364|       |    @since version 1.0.0
17365|       |    */
17366|       |    template<typename PointerType, typename std::enable_if<
17367|       |                 std::is_pointer<PointerType>::value, int>::type = 0>
17368|       |    auto get() noexcept -> decltype(std::declval<basic_json_t&>().template get_ptr<PointerType>())
17369|       |    {
17370|       |        // delegate the call to get_ptr
17371|       |        return get_ptr<PointerType>();
17372|       |    }
17373|       |
17374|       |    /*!
17375|       |    @brief get a pointer value (explicit)
17376|       |    @copydoc get()
17377|       |    */
17378|       |    template<typename PointerType, typename std::enable_if<
17379|       |                 std::is_pointer<PointerType>::value, int>::type = 0>
17380|       |    constexpr auto get() const noexcept -> decltype(std::declval<const basic_json_t&>().template get_ptr<PointerType>())
17381|       |    {
17382|       |        // delegate the call to get_ptr
17383|       |        return get_ptr<PointerType>();
17384|       |    }
17385|       |
17386|       |    /*!
17387|       |    @brief get a reference value (implicit)
17388|       |
17389|       |    Implicit reference access to the internally stored JSON value. No copies
17390|       |    are made.
17391|       |
17392|       |    @warning Writing data to the referee of the result yields an undefined
17393|       |    state.
17394|       |
17395|       |    @tparam ReferenceType reference type; must be a reference to @ref array_t,
17396|       |    @ref object_t, @ref string_t, @ref boolean_t, @ref number_integer_t, or
17397|       |    @ref number_float_t. Enforced by static assertion.
17398|       |
17399|       |    @return reference to the internally stored JSON value if the requested
17400|       |    reference type @a ReferenceType fits to the JSON value; throws
17401|       |    type_error.303 otherwise
17402|       |
17403|       |    @throw type_error.303 in case passed type @a ReferenceType is incompatible
17404|       |    with the stored JSON value; see example below
17405|       |
17406|       |    @complexity Constant.
17407|       |
17408|       |    @liveexample{The example shows several calls to `get_ref()`.,get_ref}
17409|       |
17410|       |    @since version 1.1.0
17411|       |    */
17412|       |    template<typename ReferenceType, typename std::enable_if<
17413|       |                 std::is_reference<ReferenceType>::value, int>::type = 0>
17414|       |    ReferenceType get_ref()
17415|       |    {
17416|       |        // delegate call to get_ref_impl
17417|       |        return get_ref_impl<ReferenceType>(*this);
17418|       |    }
17419|       |
17420|       |    /*!
17421|       |    @brief get a reference value (implicit)
17422|       |    @copydoc get_ref()
17423|       |    */
17424|       |    template<typename ReferenceType, typename std::enable_if<
17425|       |                 std::is_reference<ReferenceType>::value and
17426|       |                 std::is_const<typename std::remove_reference<ReferenceType>::type>::value, int>::type = 0>
17427|       |    ReferenceType get_ref() const
17428|       |    {
17429|       |        // delegate call to get_ref_impl
17430|       |        return get_ref_impl<ReferenceType>(*this);
17431|       |    }
17432|       |
17433|       |    /*!
17434|       |    @brief get a value (implicit)
17435|       |
17436|       |    Implicit type conversion between the JSON value and a compatible value.
17437|       |    The call is realized by calling @ref get() const.
17438|       |
17439|       |    @tparam ValueType non-pointer type compatible to the JSON value, for
17440|       |    instance `int` for JSON integer numbers, `bool` for JSON booleans, or
17441|       |    `std::vector` types for JSON arrays. The character type of @ref string_t
17442|       |    as well as an initializer list of this type is excluded to avoid
17443|       |    ambiguities as these types implicitly convert to `std::string`.
17444|       |
17445|       |    @return copy of the JSON value, converted to type @a ValueType
17446|       |
17447|       |    @throw type_error.302 in case passed type @a ValueType is incompatible
17448|       |    to the JSON value type (e.g., the JSON value is of type boolean, but a
17449|       |    string is requested); see example below
17450|       |
17451|       |    @complexity Linear in the size of the JSON value.
17452|       |
17453|       |    @liveexample{The example below shows several conversions from JSON values
17454|       |    to other types. There a few things to note: (1) Floating-point numbers can
17455|       |    be converted to integers\, (2) A JSON array can be converted to a standard
17456|       |    `std::vector<short>`\, (3) A JSON object can be converted to C++
17457|       |    associative containers such as `std::unordered_map<std::string\,
17458|       |    json>`.,operator__ValueType}
17459|       |
17460|       |    @since version 1.0.0
17461|       |    */
17462|       |    template < typename ValueType, typename std::enable_if <
17463|       |                   not std::is_pointer<ValueType>::value and
17464|       |                   not std::is_same<ValueType, detail::json_ref<basic_json>>::value and
17465|       |                   not std::is_same<ValueType, typename string_t::value_type>::value and
17466|       |                   not detail::is_basic_json<ValueType>::value
17467|       |
17468|       |#ifndef _MSC_VER  // fix for issue #167 operator<< ambiguity under VS2015
17469|       |                   and not std::is_same<ValueType, std::initializer_list<typename string_t::value_type>>::value
17470|       |#if defined(JSON_HAS_CPP_17) && (defined(__GNUC__) || (defined(_MSC_VER) and _MSC_VER <= 1914))
17471|       |                   and not std::is_same<ValueType, typename std::string_view>::value
17472|       |#endif
17473|       |#endif
17474|       |                   and detail::is_detected<detail::get_template_function, const basic_json_t&, ValueType>::value
17475|       |                   , int >::type = 0 >
17476|       |    operator ValueType() const
17477|      4|    {
17478|       |        // delegate the call to get<>() const
17479|      4|        return get<ValueType>();
17480|      4|    }
  ------------------
  | Unexecuted instantiation: _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEcvT_I5STATELi0EEEv
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEEcvT_IS8_Li0EEEv:
  |17477|      4|    {
  |17478|       |        // delegate the call to get<>() const
  |17479|      4|        return get<ValueType>();
  |17480|      4|    }
  ------------------
17481|       |
17482|       |    /// @}
17483|       |
17484|       |
17485|       |    ////////////////////
17486|       |    // element access //
17487|       |    ////////////////////
17488|       |
17489|       |    /// @name element access
17490|       |    /// Access to the JSON value.
17491|       |    /// @{
17492|       |
17493|       |    /*!
17494|       |    @brief access specified array element with bounds checking
17495|       |
17496|       |    Returns a reference to the element at specified location @a idx, with
17497|       |    bounds checking.
17498|       |
17499|       |    @param[in] idx  index of the element to access
17500|       |
17501|       |    @return reference to the element at index @a idx
17502|       |
17503|       |    @throw type_error.304 if the JSON value is not an array; in this case,
17504|       |    calling `at` with an index makes no sense. See example below.
17505|       |    @throw out_of_range.401 if the index @a idx is out of range of the array;
17506|       |    that is, `idx >= size()`. See example below.
17507|       |
17508|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
17509|       |    changes in the JSON value.
17510|       |
17511|       |    @complexity Constant.
17512|       |
17513|       |    @since version 1.0.0
17514|       |
17515|       |    @liveexample{The example below shows how array elements can be read and
17516|       |    written using `at()`. It also demonstrates the different exceptions that
17517|       |    can be thrown.,at__size_type}
17518|       |    */
17519|       |    reference at(size_type idx)
17520|       |    {
17521|       |        // at only works for arrays
17522|       |        if (JSON_HEDLEY_LIKELY(is_array()))
17523|       |        {
17524|       |            JSON_TRY
17525|       |            {
17526|       |                return m_value.array->at(idx);
17527|       |            }
17528|       |            JSON_CATCH (std::out_of_range&)
17529|       |            {
17530|       |                // create better exception explanation
17531|       |                JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
17532|       |            }
17533|       |        }
17534|       |        else
17535|       |        {
17536|       |            JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
17537|       |        }
17538|       |    }
17539|       |
17540|       |    /*!
17541|       |    @brief access specified array element with bounds checking
17542|       |
17543|       |    Returns a const reference to the element at specified location @a idx,
17544|       |    with bounds checking.
17545|       |
17546|       |    @param[in] idx  index of the element to access
17547|       |
17548|       |    @return const reference to the element at index @a idx
17549|       |
17550|       |    @throw type_error.304 if the JSON value is not an array; in this case,
17551|       |    calling `at` with an index makes no sense. See example below.
17552|       |    @throw out_of_range.401 if the index @a idx is out of range of the array;
17553|       |    that is, `idx >= size()`. See example below.
17554|       |
17555|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
17556|       |    changes in the JSON value.
17557|       |
17558|       |    @complexity Constant.
17559|       |
17560|       |    @since version 1.0.0
17561|       |
17562|       |    @liveexample{The example below shows how array elements can be read using
17563|       |    `at()`. It also demonstrates the different exceptions that can be thrown.,
17564|       |    at__size_type_const}
17565|       |    */
17566|       |    const_reference at(size_type idx) const
17567|       |    {
17568|       |        // at only works for arrays
17569|       |        if (JSON_HEDLEY_LIKELY(is_array()))
17570|       |        {
17571|       |            JSON_TRY
17572|       |            {
17573|       |                return m_value.array->at(idx);
17574|       |            }
17575|       |            JSON_CATCH (std::out_of_range&)
17576|       |            {
17577|       |                // create better exception explanation
17578|       |                JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
17579|       |            }
17580|       |        }
17581|       |        else
17582|       |        {
17583|       |            JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
17584|       |        }
17585|       |    }
17586|       |
17587|       |    /*!
17588|       |    @brief access specified object element with bounds checking
17589|       |
17590|       |    Returns a reference to the element at with specified key @a key, with
17591|       |    bounds checking.
17592|       |
17593|       |    @param[in] key  key of the element to access
17594|       |
17595|       |    @return reference to the element at key @a key
17596|       |
17597|       |    @throw type_error.304 if the JSON value is not an object; in this case,
17598|       |    calling `at` with a key makes no sense. See example below.
17599|       |    @throw out_of_range.403 if the key @a key is is not stored in the object;
17600|       |    that is, `find(key) == end()`. See example below.
17601|       |
17602|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
17603|       |    changes in the JSON value.
17604|       |
17605|       |    @complexity Logarithmic in the size of the container.
17606|       |
17607|       |    @sa @ref operator[](const typename object_t::key_type&) for unchecked
17608|       |    access by reference
17609|       |    @sa @ref value() for access by value with a default value
17610|       |
17611|       |    @since version 1.0.0
17612|       |
17613|       |    @liveexample{The example below shows how object elements can be read and
17614|       |    written using `at()`. It also demonstrates the different exceptions that
17615|       |    can be thrown.,at__object_t_key_type}
17616|       |    */
17617|       |    reference at(const typename object_t::key_type& key)
17618|  5.47k|    {
17619|       |        // at only works for objects
17620|  5.47k|        if (JSON_HEDLEY_LIKELY(is_object()))
17621|  5.46k|        {
17622|  5.46k|            JSON_TRY
17623|  5.46k|            {
17624|  5.46k|                return m_value.object->at(key);
17625|  5.46k|            }
17626|  5.46k|            JSON_CATCH (std::out_of_range&)
17627|  5.46k|            {
17628|       |                // create better exception explanation
17629|      1|                JSON_THROW(out_of_range::create(403, "key '" + key + "' not found"));
17630|      1|            }
17631|  5.46k|        }
17632|      1|        else
17633|      1|        {
17634|      1|            JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
17635|      1|        }
17636|  5.47k|    }
17637|       |
17638|       |    /*!
17639|       |    @brief access specified object element with bounds checking
17640|       |
17641|       |    Returns a const reference to the element at with specified key @a key,
17642|       |    with bounds checking.
17643|       |
17644|       |    @param[in] key  key of the element to access
17645|       |
17646|       |    @return const reference to the element at key @a key
17647|       |
17648|       |    @throw type_error.304 if the JSON value is not an object; in this case,
17649|       |    calling `at` with a key makes no sense. See example below.
17650|       |    @throw out_of_range.403 if the key @a key is is not stored in the object;
17651|       |    that is, `find(key) == end()`. See example below.
17652|       |
17653|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
17654|       |    changes in the JSON value.
17655|       |
17656|       |    @complexity Logarithmic in the size of the container.
17657|       |
17658|       |    @sa @ref operator[](const typename object_t::key_type&) for unchecked
17659|       |    access by reference
17660|       |    @sa @ref value() for access by value with a default value
17661|       |
17662|       |    @since version 1.0.0
17663|       |
17664|       |    @liveexample{The example below shows how object elements can be read using
17665|       |    `at()`. It also demonstrates the different exceptions that can be thrown.,
17666|       |    at__object_t_key_type_const}
17667|       |    */
17668|       |    const_reference at(const typename object_t::key_type& key) const
17669|  1.25k|    {
17670|       |        // at only works for objects
17671|  1.25k|        if (JSON_HEDLEY_LIKELY(is_object()))
17672|  1.25k|        {
17673|  1.25k|            JSON_TRY
17674|  1.25k|            {
17675|  1.25k|                return m_value.object->at(key);
17676|  1.25k|            }
17677|  1.25k|            JSON_CATCH (std::out_of_range&)
17678|  1.25k|            {
17679|       |                // create better exception explanation
17680|      0|                JSON_THROW(out_of_range::create(403, "key '" + key + "' not found"));
17681|      0|            }
17682|  1.25k|        }
17683|      0|        else
17684|      0|        {
17685|      0|            JSON_THROW(type_error::create(304, "cannot use at() with " + std::string(type_name())));
17686|      0|        }
17687|  1.25k|    }
17688|       |
17689|       |    /*!
17690|       |    @brief access specified array element
17691|       |
17692|       |    Returns a reference to the element at specified location @a idx.
17693|       |
17694|       |    @note If @a idx is beyond the range of the array (i.e., `idx >= size()`),
17695|       |    then the array is silently filled up with `null` values to make `idx` a
17696|       |    valid reference to the last stored element.
17697|       |
17698|       |    @param[in] idx  index of the element to access
17699|       |
17700|       |    @return reference to the element at index @a idx
17701|       |
17702|       |    @throw type_error.305 if the JSON value is not an array or null; in that
17703|       |    cases, using the [] operator with an index makes no sense.
17704|       |
17705|       |    @complexity Constant if @a idx is in the range of the array. Otherwise
17706|       |    linear in `idx - size()`.
17707|       |
17708|       |    @liveexample{The example below shows how array elements can be read and
17709|       |    written using `[]` operator. Note the addition of `null`
17710|       |    values.,operatorarray__size_type}
17711|       |
17712|       |    @since version 1.0.0
17713|       |    */
17714|       |    reference operator[](size_type idx)
17715|      3|    {
17716|       |        // implicitly convert null value to an empty array
17717|      3|        if (is_null())
17718|      0|        {
17719|      0|            m_type = value_t::array;
17720|      0|            m_value.array = create<array_t>();
17721|      0|            assert_invariant();
17722|      0|        }
17723|       |
17724|       |        // operator[] only works for arrays
17725|      3|        if (JSON_HEDLEY_LIKELY(is_array()))
17726|      3|        {
17727|       |            // fill up array with null values if given idx is outside range
17728|      3|            if (idx >= m_value.array->size())
17729|      0|            {
17730|      0|                m_value.array->insert(m_value.array->end(),
17731|      0|                                      idx - m_value.array->size() + 1,
17732|      0|                                      basic_json());
17733|      0|            }
17734|       |
17735|      3|            return m_value.array->operator[](idx);
17736|      3|        }
17737|       |
17738|      3|        JSON_THROW(type_error::create(305, "cannot use operator[] with a numeric argument with " + std::string(type_name())));
17739|      3|    }
17740|       |
17741|       |    /*!
17742|       |    @brief access specified array element
17743|       |
17744|       |    Returns a const reference to the element at specified location @a idx.
17745|       |
17746|       |    @param[in] idx  index of the element to access
17747|       |
17748|       |    @return const reference to the element at index @a idx
17749|       |
17750|       |    @throw type_error.305 if the JSON value is not an array; in that case,
17751|       |    using the [] operator with an index makes no sense.
17752|       |
17753|       |    @complexity Constant.
17754|       |
17755|       |    @liveexample{The example below shows how array elements can be read using
17756|       |    the `[]` operator.,operatorarray__size_type_const}
17757|       |
17758|       |    @since version 1.0.0
17759|       |    */
17760|       |    const_reference operator[](size_type idx) const
17761|       |    {
17762|       |        // const operator[] only works for arrays
17763|       |        if (JSON_HEDLEY_LIKELY(is_array()))
17764|       |        {
17765|       |            return m_value.array->operator[](idx);
17766|       |        }
17767|       |
17768|       |        JSON_THROW(type_error::create(305, "cannot use operator[] with a numeric argument with " + std::string(type_name())));
17769|       |    }
17770|       |
17771|       |    /*!
17772|       |    @brief access specified object element
17773|       |
17774|       |    Returns a reference to the element at with specified key @a key.
17775|       |
17776|       |    @note If @a key is not found in the object, then it is silently added to
17777|       |    the object and filled with a `null` value to make `key` a valid reference.
17778|       |    In case the value was `null` before, it is converted to an object.
17779|       |
17780|       |    @param[in] key  key of the element to access
17781|       |
17782|       |    @return reference to the element at key @a key
17783|       |
17784|       |    @throw type_error.305 if the JSON value is not an object or null; in that
17785|       |    cases, using the [] operator with a key makes no sense.
17786|       |
17787|       |    @complexity Logarithmic in the size of the container.
17788|       |
17789|       |    @liveexample{The example below shows how object elements can be read and
17790|       |    written using the `[]` operator.,operatorarray__key_type}
17791|       |
17792|       |    @sa @ref at(const typename object_t::key_type&) for access by reference
17793|       |    with range checking
17794|       |    @sa @ref value() for access by value with a default value
17795|       |
17796|       |    @since version 1.0.0
17797|       |    */
17798|       |    reference operator[](const typename object_t::key_type& key)
17799|     66|    {
17800|       |        // implicitly convert null value to an empty object
17801|     66|        if (is_null())
17802|     17|        {
17803|     17|            m_type = value_t::object;
17804|     17|            m_value.object = create<object_t>();
17805|     17|            assert_invariant();
17806|     17|        }
17807|       |
17808|       |        // operator[] only works for objects
17809|     66|        if (JSON_HEDLEY_LIKELY(is_object()))
17810|     66|        {
17811|     66|            return m_value.object->operator[](key);
17812|     66|        }
17813|       |
17814|     66|        JSON_THROW(type_error::create(305, "cannot use operator[] with a string argument with " + std::string(type_name())));
17815|     66|    }
17816|       |
17817|       |    /*!
17818|       |    @brief read-only access specified object element
17819|       |
17820|       |    Returns a const reference to the element at with specified key @a key. No
17821|       |    bounds checking is performed.
17822|       |
17823|       |    @warning If the element with key @a key does not exist, the behavior is
17824|       |    undefined.
17825|       |
17826|       |    @param[in] key  key of the element to access
17827|       |
17828|       |    @return const reference to the element at key @a key
17829|       |
17830|       |    @pre The element with key @a key must exist. **This precondition is
17831|       |         enforced with an assertion.**
17832|       |
17833|       |    @throw type_error.305 if the JSON value is not an object; in that case,
17834|       |    using the [] operator with a key makes no sense.
17835|       |
17836|       |    @complexity Logarithmic in the size of the container.
17837|       |
17838|       |    @liveexample{The example below shows how object elements can be read using
17839|       |    the `[]` operator.,operatorarray__key_type_const}
17840|       |
17841|       |    @sa @ref at(const typename object_t::key_type&) for access by reference
17842|       |    with range checking
17843|       |    @sa @ref value() for access by value with a default value
17844|       |
17845|       |    @since version 1.0.0
17846|       |    */
17847|       |    const_reference operator[](const typename object_t::key_type& key) const
17848|      1|    {
17849|       |        // const operator[] only works for objects
17850|      1|        if (JSON_HEDLEY_LIKELY(is_object()))
17851|      1|        {
17852|      1|            assert(m_value.object->find(key) != m_value.object->end());
17853|      0|            return m_value.object->find(key)->second;
17854|      1|        }
17855|       |
17856|      1|        JSON_THROW(type_error::create(305, "cannot use operator[] with a string argument with " + std::string(type_name())));
17857|      1|    }
17858|       |
17859|       |    /*!
17860|       |    @brief access specified object element
17861|       |
17862|       |    Returns a reference to the element at with specified key @a key.
17863|       |
17864|       |    @note If @a key is not found in the object, then it is silently added to
17865|       |    the object and filled with a `null` value to make `key` a valid reference.
17866|       |    In case the value was `null` before, it is converted to an object.
17867|       |
17868|       |    @param[in] key  key of the element to access
17869|       |
17870|       |    @return reference to the element at key @a key
17871|       |
17872|       |    @throw type_error.305 if the JSON value is not an object or null; in that
17873|       |    cases, using the [] operator with a key makes no sense.
17874|       |
17875|       |    @complexity Logarithmic in the size of the container.
17876|       |
17877|       |    @liveexample{The example below shows how object elements can be read and
17878|       |    written using the `[]` operator.,operatorarray__key_type}
17879|       |
17880|       |    @sa @ref at(const typename object_t::key_type&) for access by reference
17881|       |    with range checking
17882|       |    @sa @ref value() for access by value with a default value
17883|       |
17884|       |    @since version 1.1.0
17885|       |    */
17886|       |    template<typename T>
17887|       |    JSON_HEDLEY_NON_NULL(2)
17888|       |    reference operator[](T* key)
17889|  1.72k|    {
17890|       |        // implicitly convert null to object
17891|  1.72k|        if (is_null())
17892|    188|        {
17893|    188|            m_type = value_t::object;
17894|    188|            m_value = value_t::object;
17895|    188|            assert_invariant();
17896|    188|        }
17897|       |
17898|       |        // at only works for objects
17899|  1.72k|        if (JSON_HEDLEY_LIKELY(is_object()))
17900|  1.72k|        {
17901|  1.72k|            return m_value.object->operator[](key);
17902|  1.72k|        }
17903|       |
17904|  1.72k|        JSON_THROW(type_error::create(305, "cannot use operator[] with a string argument with " + std::string(type_name())));
17905|  1.72k|    }
17906|       |
17907|       |    /*!
17908|       |    @brief read-only access specified object element
17909|       |
17910|       |    Returns a const reference to the element at with specified key @a key. No
17911|       |    bounds checking is performed.
17912|       |
17913|       |    @warning If the element with key @a key does not exist, the behavior is
17914|       |    undefined.
17915|       |
17916|       |    @param[in] key  key of the element to access
17917|       |
17918|       |    @return const reference to the element at key @a key
17919|       |
17920|       |    @pre The element with key @a key must exist. **This precondition is
17921|       |         enforced with an assertion.**
17922|       |
17923|       |    @throw type_error.305 if the JSON value is not an object; in that case,
17924|       |    using the [] operator with a key makes no sense.
17925|       |
17926|       |    @complexity Logarithmic in the size of the container.
17927|       |
17928|       |    @liveexample{The example below shows how object elements can be read using
17929|       |    the `[]` operator.,operatorarray__key_type_const}
17930|       |
17931|       |    @sa @ref at(const typename object_t::key_type&) for access by reference
17932|       |    with range checking
17933|       |    @sa @ref value() for access by value with a default value
17934|       |
17935|       |    @since version 1.1.0
17936|       |    */
17937|       |    template<typename T>
17938|       |    JSON_HEDLEY_NON_NULL(2)
17939|       |    const_reference operator[](T* key) const
17940|       |    {
17941|       |        // at only works for objects
17942|       |        if (JSON_HEDLEY_LIKELY(is_object()))
17943|       |        {
17944|       |            assert(m_value.object->find(key) != m_value.object->end());
17945|       |            return m_value.object->find(key)->second;
17946|       |        }
17947|       |
17948|       |        JSON_THROW(type_error::create(305, "cannot use operator[] with a string argument with " + std::string(type_name())));
17949|       |    }
17950|       |
17951|       |    /*!
17952|       |    @brief access specified object element with default value
17953|       |
17954|       |    Returns either a copy of an object's element at the specified key @a key
17955|       |    or a given default value if no element with key @a key exists.
17956|       |
17957|       |    The function is basically equivalent to executing
17958|       |    @code {.cpp}
17959|       |    try {
17960|       |        return at(key);
17961|       |    } catch(out_of_range) {
17962|       |        return default_value;
17963|       |    }
17964|       |    @endcode
17965|       |
17966|       |    @note Unlike @ref at(const typename object_t::key_type&), this function
17967|       |    does not throw if the given key @a key was not found.
17968|       |
17969|       |    @note Unlike @ref operator[](const typename object_t::key_type& key), this
17970|       |    function does not implicitly add an element to the position defined by @a
17971|       |    key. This function is furthermore also applicable to const objects.
17972|       |
17973|       |    @param[in] key  key of the element to access
17974|       |    @param[in] default_value  the value to return if @a key is not found
17975|       |
17976|       |    @tparam ValueType type compatible to JSON values, for instance `int` for
17977|       |    JSON integer numbers, `bool` for JSON booleans, or `std::vector` types for
17978|       |    JSON arrays. Note the type of the expected value at @a key and the default
17979|       |    value @a default_value must be compatible.
17980|       |
17981|       |    @return copy of the element at key @a key or @a default_value if @a key
17982|       |    is not found
17983|       |
17984|       |    @throw type_error.302 if @a default_value does not match the type of the
17985|       |    value at @a key
17986|       |    @throw type_error.306 if the JSON value is not an object; in that case,
17987|       |    using `value()` with a key makes no sense.
17988|       |
17989|       |    @complexity Logarithmic in the size of the container.
17990|       |
17991|       |    @liveexample{The example below shows how object elements can be queried
17992|       |    with a default value.,basic_json__value}
17993|       |
17994|       |    @sa @ref at(const typename object_t::key_type&) for access by reference
17995|       |    with range checking
17996|       |    @sa @ref operator[](const typename object_t::key_type&) for unchecked
17997|       |    access by reference
17998|       |
17999|       |    @since version 1.0.0
18000|       |    */
18001|       |    template<class ValueType, typename std::enable_if<
18002|       |                 std::is_convertible<basic_json_t, ValueType>::value, int>::type = 0>
18003|       |    ValueType value(const typename object_t::key_type& key, const ValueType& default_value) const
18004|       |    {
18005|       |        // at only works for objects
18006|       |        if (JSON_HEDLEY_LIKELY(is_object()))
18007|       |        {
18008|       |            // if key is found, return value and given default value otherwise
18009|       |            const auto it = find(key);
18010|       |            if (it != end())
18011|       |            {
18012|       |                return *it;
18013|       |            }
18014|       |
18015|       |            return default_value;
18016|       |        }
18017|       |
18018|       |        JSON_THROW(type_error::create(306, "cannot use value() with " + std::string(type_name())));
18019|       |    }
18020|       |
18021|       |    /*!
18022|       |    @brief overload for a default value of type const char*
18023|       |    @copydoc basic_json::value(const typename object_t::key_type&, const ValueType&) const
18024|       |    */
18025|       |    string_t value(const typename object_t::key_type& key, const char* default_value) const
18026|       |    {
18027|       |        return value(key, string_t(default_value));
18028|       |    }
18029|       |
18030|       |    /*!
18031|       |    @brief access specified object element via JSON Pointer with default value
18032|       |
18033|       |    Returns either a copy of an object's element at the specified key @a key
18034|       |    or a given default value if no element with key @a key exists.
18035|       |
18036|       |    The function is basically equivalent to executing
18037|       |    @code {.cpp}
18038|       |    try {
18039|       |        return at(ptr);
18040|       |    } catch(out_of_range) {
18041|       |        return default_value;
18042|       |    }
18043|       |    @endcode
18044|       |
18045|       |    @note Unlike @ref at(const json_pointer&), this function does not throw
18046|       |    if the given key @a key was not found.
18047|       |
18048|       |    @param[in] ptr  a JSON pointer to the element to access
18049|       |    @param[in] default_value  the value to return if @a ptr found no value
18050|       |
18051|       |    @tparam ValueType type compatible to JSON values, for instance `int` for
18052|       |    JSON integer numbers, `bool` for JSON booleans, or `std::vector` types for
18053|       |    JSON arrays. Note the type of the expected value at @a key and the default
18054|       |    value @a default_value must be compatible.
18055|       |
18056|       |    @return copy of the element at key @a key or @a default_value if @a key
18057|       |    is not found
18058|       |
18059|       |    @throw type_error.302 if @a default_value does not match the type of the
18060|       |    value at @a ptr
18061|       |    @throw type_error.306 if the JSON value is not an object; in that case,
18062|       |    using `value()` with a key makes no sense.
18063|       |
18064|       |    @complexity Logarithmic in the size of the container.
18065|       |
18066|       |    @liveexample{The example below shows how object elements can be queried
18067|       |    with a default value.,basic_json__value_ptr}
18068|       |
18069|       |    @sa @ref operator[](const json_pointer&) for unchecked access by reference
18070|       |
18071|       |    @since version 2.0.2
18072|       |    */
18073|       |    template<class ValueType, typename std::enable_if<
18074|       |                 std::is_convertible<basic_json_t, ValueType>::value, int>::type = 0>
18075|       |    ValueType value(const json_pointer& ptr, const ValueType& default_value) const
18076|       |    {
18077|       |        // at only works for objects
18078|       |        if (JSON_HEDLEY_LIKELY(is_object()))
18079|       |        {
18080|       |            // if pointer resolves a value, return it or use default value
18081|       |            JSON_TRY
18082|       |            {
18083|       |                return ptr.get_checked(this);
18084|       |            }
18085|       |            JSON_INTERNAL_CATCH (out_of_range&)
18086|       |            {
18087|       |                return default_value;
18088|       |            }
18089|       |        }
18090|       |
18091|       |        JSON_THROW(type_error::create(306, "cannot use value() with " + std::string(type_name())));
18092|       |    }
18093|       |
18094|       |    /*!
18095|       |    @brief overload for a default value of type const char*
18096|       |    @copydoc basic_json::value(const json_pointer&, ValueType) const
18097|       |    */
18098|       |    JSON_HEDLEY_NON_NULL(3)
18099|       |    string_t value(const json_pointer& ptr, const char* default_value) const
18100|       |    {
18101|       |        return value(ptr, string_t(default_value));
18102|       |    }
18103|       |
18104|       |    /*!
18105|       |    @brief access the first element
18106|       |
18107|       |    Returns a reference to the first element in the container. For a JSON
18108|       |    container `c`, the expression `c.front()` is equivalent to `*c.begin()`.
18109|       |
18110|       |    @return In case of a structured type (array or object), a reference to the
18111|       |    first element is returned. In case of number, string, or boolean values, a
18112|       |    reference to the value is returned.
18113|       |
18114|       |    @complexity Constant.
18115|       |
18116|       |    @pre The JSON value must not be `null` (would throw `std::out_of_range`)
18117|       |    or an empty array or object (undefined behavior, **guarded by
18118|       |    assertions**).
18119|       |    @post The JSON value remains unchanged.
18120|       |
18121|       |    @throw invalid_iterator.214 when called on `null` value
18122|       |
18123|       |    @liveexample{The following code shows an example for `front()`.,front}
18124|       |
18125|       |    @sa @ref back() -- access the last element
18126|       |
18127|       |    @since version 1.0.0
18128|       |    */
18129|       |    reference front()
18130|       |    {
18131|       |        return *begin();
18132|       |    }
18133|       |
18134|       |    /*!
18135|       |    @copydoc basic_json::front()
18136|       |    */
18137|       |    const_reference front() const
18138|       |    {
18139|       |        return *cbegin();
18140|       |    }
18141|       |
18142|       |    /*!
18143|       |    @brief access the last element
18144|       |
18145|       |    Returns a reference to the last element in the container. For a JSON
18146|       |    container `c`, the expression `c.back()` is equivalent to
18147|       |    @code {.cpp}
18148|       |    auto tmp = c.end();
18149|       |    --tmp;
18150|       |    return *tmp;
18151|       |    @endcode
18152|       |
18153|       |    @return In case of a structured type (array or object), a reference to the
18154|       |    last element is returned. In case of number, string, or boolean values, a
18155|       |    reference to the value is returned.
18156|       |
18157|       |    @complexity Constant.
18158|       |
18159|       |    @pre The JSON value must not be `null` (would throw `std::out_of_range`)
18160|       |    or an empty array or object (undefined behavior, **guarded by
18161|       |    assertions**).
18162|       |    @post The JSON value remains unchanged.
18163|       |
18164|       |    @throw invalid_iterator.214 when called on a `null` value. See example
18165|       |    below.
18166|       |
18167|       |    @liveexample{The following code shows an example for `back()`.,back}
18168|       |
18169|       |    @sa @ref front() -- access the first element
18170|       |
18171|       |    @since version 1.0.0
18172|       |    */
18173|       |    reference back()
18174|       |    {
18175|       |        auto tmp = end();
18176|       |        --tmp;
18177|       |        return *tmp;
18178|       |    }
18179|       |
18180|       |    /*!
18181|       |    @copydoc basic_json::back()
18182|       |    */
18183|       |    const_reference back() const
18184|       |    {
18185|       |        auto tmp = cend();
18186|       |        --tmp;
18187|       |        return *tmp;
18188|       |    }
18189|       |
18190|       |    /*!
18191|       |    @brief remove element given an iterator
18192|       |
18193|       |    Removes the element specified by iterator @a pos. The iterator @a pos must
18194|       |    be valid and dereferenceable. Thus the `end()` iterator (which is valid,
18195|       |    but is not dereferenceable) cannot be used as a value for @a pos.
18196|       |
18197|       |    If called on a primitive type other than `null`, the resulting JSON value
18198|       |    will be `null`.
18199|       |
18200|       |    @param[in] pos iterator to the element to remove
18201|       |    @return Iterator following the last removed element. If the iterator @a
18202|       |    pos refers to the last element, the `end()` iterator is returned.
18203|       |
18204|       |    @tparam IteratorType an @ref iterator or @ref const_iterator
18205|       |
18206|       |    @post Invalidates iterators and references at or after the point of the
18207|       |    erase, including the `end()` iterator.
18208|       |
18209|       |    @throw type_error.307 if called on a `null` value; example: `"cannot use
18210|       |    erase() with null"`
18211|       |    @throw invalid_iterator.202 if called on an iterator which does not belong
18212|       |    to the current JSON value; example: `"iterator does not fit current
18213|       |    value"`
18214|       |    @throw invalid_iterator.205 if called on a primitive type with invalid
18215|       |    iterator (i.e., any iterator which is not `begin()`); example: `"iterator
18216|       |    out of range"`
18217|       |
18218|       |    @complexity The complexity depends on the type:
18219|       |    - objects: amortized constant
18220|       |    - arrays: linear in distance between @a pos and the end of the container
18221|       |    - strings: linear in the length of the string
18222|       |    - other types: constant
18223|       |
18224|       |    @liveexample{The example shows the result of `erase()` for different JSON
18225|       |    types.,erase__IteratorType}
18226|       |
18227|       |    @sa @ref erase(IteratorType, IteratorType) -- removes the elements in
18228|       |    the given range
18229|       |    @sa @ref erase(const typename object_t::key_type&) -- removes the element
18230|       |    from an object at the given key
18231|       |    @sa @ref erase(const size_type) -- removes the element from an array at
18232|       |    the given index
18233|       |
18234|       |    @since version 1.0.0
18235|       |    */
18236|       |    template<class IteratorType, typename std::enable_if<
18237|       |                 std::is_same<IteratorType, typename basic_json_t::iterator>::value or
18238|       |                 std::is_same<IteratorType, typename basic_json_t::const_iterator>::value, int>::type
18239|       |             = 0>
18240|       |    IteratorType erase(IteratorType pos)
18241|      0|    {
18242|       |        // make sure iterator fits the current value
18243|      0|        if (JSON_HEDLEY_UNLIKELY(this != pos.m_object))
18244|      0|        {
18245|      0|            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value"));
18246|      0|        }
18247|       |
18248|      0|        IteratorType result = end();
18249|       |
18250|      0|        switch (m_type)
18251|      0|        {
18252|      0|            case value_t::boolean:
18253|      0|            case value_t::number_float:
18254|      0|            case value_t::number_integer:
18255|      0|            case value_t::number_unsigned:
18256|      0|            case value_t::string:
18257|      0|            {
18258|      0|                if (JSON_HEDLEY_UNLIKELY(not pos.m_it.primitive_iterator.is_begin()))
18259|      0|                {
18260|      0|                    JSON_THROW(invalid_iterator::create(205, "iterator out of range"));
18261|      0|                }
18262|       |
18263|      0|                if (is_string())
18264|      0|                {
18265|      0|                    AllocatorType<string_t> alloc;
18266|      0|                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.string);
18267|      0|                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.string, 1);
18268|      0|                    m_value.string = nullptr;
18269|      0|                }
18270|       |
18271|      0|                m_type = value_t::null;
18272|      0|                assert_invariant();
18273|      0|                break;
18274|      0|            }
18275|       |
18276|      0|            case value_t::object:
18277|      0|            {
18278|      0|                result.m_it.object_iterator = m_value.object->erase(pos.m_it.object_iterator);
18279|      0|                break;
18280|      0|            }
18281|       |
18282|      0|            case value_t::array:
18283|      0|            {
18284|      0|                result.m_it.array_iterator = m_value.array->erase(pos.m_it.array_iterator);
18285|      0|                break;
18286|      0|            }
18287|       |
18288|      0|            default:
18289|      0|                JSON_THROW(type_error::create(307, "cannot use erase() with " + std::string(type_name())));
18290|      0|        }
18291|       |
18292|      0|        return result;
18293|      0|    }
18294|       |
18295|       |    /*!
18296|       |    @brief remove elements given an iterator range
18297|       |
18298|       |    Removes the element specified by the range `[first; last)`. The iterator
18299|       |    @a first does not need to be dereferenceable if `first == last`: erasing
18300|       |    an empty range is a no-op.
18301|       |
18302|       |    If called on a primitive type other than `null`, the resulting JSON value
18303|       |    will be `null`.
18304|       |
18305|       |    @param[in] first iterator to the beginning of the range to remove
18306|       |    @param[in] last iterator past the end of the range to remove
18307|       |    @return Iterator following the last removed element. If the iterator @a
18308|       |    second refers to the last element, the `end()` iterator is returned.
18309|       |
18310|       |    @tparam IteratorType an @ref iterator or @ref const_iterator
18311|       |
18312|       |    @post Invalidates iterators and references at or after the point of the
18313|       |    erase, including the `end()` iterator.
18314|       |
18315|       |    @throw type_error.307 if called on a `null` value; example: `"cannot use
18316|       |    erase() with null"`
18317|       |    @throw invalid_iterator.203 if called on iterators which does not belong
18318|       |    to the current JSON value; example: `"iterators do not fit current value"`
18319|       |    @throw invalid_iterator.204 if called on a primitive type with invalid
18320|       |    iterators (i.e., if `first != begin()` and `last != end()`); example:
18321|       |    `"iterators out of range"`
18322|       |
18323|       |    @complexity The complexity depends on the type:
18324|       |    - objects: `log(size()) + std::distance(first, last)`
18325|       |    - arrays: linear in the distance between @a first and @a last, plus linear
18326|       |      in the distance between @a last and end of the container
18327|       |    - strings: linear in the length of the string
18328|       |    - other types: constant
18329|       |
18330|       |    @liveexample{The example shows the result of `erase()` for different JSON
18331|       |    types.,erase__IteratorType_IteratorType}
18332|       |
18333|       |    @sa @ref erase(IteratorType) -- removes the element at a given position
18334|       |    @sa @ref erase(const typename object_t::key_type&) -- removes the element
18335|       |    from an object at the given key
18336|       |    @sa @ref erase(const size_type) -- removes the element from an array at
18337|       |    the given index
18338|       |
18339|       |    @since version 1.0.0
18340|       |    */
18341|       |    template<class IteratorType, typename std::enable_if<
18342|       |                 std::is_same<IteratorType, typename basic_json_t::iterator>::value or
18343|       |                 std::is_same<IteratorType, typename basic_json_t::const_iterator>::value, int>::type
18344|       |             = 0>
18345|       |    IteratorType erase(IteratorType first, IteratorType last)
18346|       |    {
18347|       |        // make sure iterator fits the current value
18348|       |        if (JSON_HEDLEY_UNLIKELY(this != first.m_object or this != last.m_object))
18349|       |        {
18350|       |            JSON_THROW(invalid_iterator::create(203, "iterators do not fit current value"));
18351|       |        }
18352|       |
18353|       |        IteratorType result = end();
18354|       |
18355|       |        switch (m_type)
18356|       |        {
18357|       |            case value_t::boolean:
18358|       |            case value_t::number_float:
18359|       |            case value_t::number_integer:
18360|       |            case value_t::number_unsigned:
18361|       |            case value_t::string:
18362|       |            {
18363|       |                if (JSON_HEDLEY_LIKELY(not first.m_it.primitive_iterator.is_begin()
18364|       |                                       or not last.m_it.primitive_iterator.is_end()))
18365|       |                {
18366|       |                    JSON_THROW(invalid_iterator::create(204, "iterators out of range"));
18367|       |                }
18368|       |
18369|       |                if (is_string())
18370|       |                {
18371|       |                    AllocatorType<string_t> alloc;
18372|       |                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.string);
18373|       |                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.string, 1);
18374|       |                    m_value.string = nullptr;
18375|       |                }
18376|       |
18377|       |                m_type = value_t::null;
18378|       |                assert_invariant();
18379|       |                break;
18380|       |            }
18381|       |
18382|       |            case value_t::object:
18383|       |            {
18384|       |                result.m_it.object_iterator = m_value.object->erase(first.m_it.object_iterator,
18385|       |                                              last.m_it.object_iterator);
18386|       |                break;
18387|       |            }
18388|       |
18389|       |            case value_t::array:
18390|       |            {
18391|       |                result.m_it.array_iterator = m_value.array->erase(first.m_it.array_iterator,
18392|       |                                             last.m_it.array_iterator);
18393|       |                break;
18394|       |            }
18395|       |
18396|       |            default:
18397|       |                JSON_THROW(type_error::create(307, "cannot use erase() with " + std::string(type_name())));
18398|       |        }
18399|       |
18400|       |        return result;
18401|       |    }
18402|       |
18403|       |    /*!
18404|       |    @brief remove element from a JSON object given a key
18405|       |
18406|       |    Removes elements from a JSON object with the key value @a key.
18407|       |
18408|       |    @param[in] key value of the elements to remove
18409|       |
18410|       |    @return Number of elements removed. If @a ObjectType is the default
18411|       |    `std::map` type, the return value will always be `0` (@a key was not
18412|       |    found) or `1` (@a key was found).
18413|       |
18414|       |    @post References and iterators to the erased elements are invalidated.
18415|       |    Other references and iterators are not affected.
18416|       |
18417|       |    @throw type_error.307 when called on a type other than JSON object;
18418|       |    example: `"cannot use erase() with null"`
18419|       |
18420|       |    @complexity `log(size()) + count(key)`
18421|       |
18422|       |    @liveexample{The example shows the effect of `erase()`.,erase__key_type}
18423|       |
18424|       |    @sa @ref erase(IteratorType) -- removes the element at a given position
18425|       |    @sa @ref erase(IteratorType, IteratorType) -- removes the elements in
18426|       |    the given range
18427|       |    @sa @ref erase(const size_type) -- removes the element from an array at
18428|       |    the given index
18429|       |
18430|       |    @since version 1.0.0
18431|       |    */
18432|       |    size_type erase(const typename object_t::key_type& key)
18433|      7|    {
18434|       |        // this erase only works for objects
18435|      7|        if (JSON_HEDLEY_LIKELY(is_object()))
18436|      7|        {
18437|      7|            return m_value.object->erase(key);
18438|      7|        }
18439|       |
18440|      7|        JSON_THROW(type_error::create(307, "cannot use erase() with " + std::string(type_name())));
18441|      7|    }
18442|       |
18443|       |    /*!
18444|       |    @brief remove element from a JSON array given an index
18445|       |
18446|       |    Removes element from a JSON array at the index @a idx.
18447|       |
18448|       |    @param[in] idx index of the element to remove
18449|       |
18450|       |    @throw type_error.307 when called on a type other than JSON object;
18451|       |    example: `"cannot use erase() with null"`
18452|       |    @throw out_of_range.401 when `idx >= size()`; example: `"array index 17
18453|       |    is out of range"`
18454|       |
18455|       |    @complexity Linear in distance between @a idx and the end of the container.
18456|       |
18457|       |    @liveexample{The example shows the effect of `erase()`.,erase__size_type}
18458|       |
18459|       |    @sa @ref erase(IteratorType) -- removes the element at a given position
18460|       |    @sa @ref erase(IteratorType, IteratorType) -- removes the elements in
18461|       |    the given range
18462|       |    @sa @ref erase(const typename object_t::key_type&) -- removes the element
18463|       |    from an object at the given key
18464|       |
18465|       |    @since version 1.0.0
18466|       |    */
18467|       |    void erase(const size_type idx)
18468|       |    {
18469|       |        // this erase only works for arrays
18470|       |        if (JSON_HEDLEY_LIKELY(is_array()))
18471|       |        {
18472|       |            if (JSON_HEDLEY_UNLIKELY(idx >= size()))
18473|       |            {
18474|       |                JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
18475|       |            }
18476|       |
18477|       |            m_value.array->erase(m_value.array->begin() + static_cast<difference_type>(idx));
18478|       |        }
18479|       |        else
18480|       |        {
18481|       |            JSON_THROW(type_error::create(307, "cannot use erase() with " + std::string(type_name())));
18482|       |        }
18483|       |    }
18484|       |
18485|       |    /// @}
18486|       |
18487|       |
18488|       |    ////////////
18489|       |    // lookup //
18490|       |    ////////////
18491|       |
18492|       |    /// @name lookup
18493|       |    /// @{
18494|       |
18495|       |    /*!
18496|       |    @brief find an element in a JSON object
18497|       |
18498|       |    Finds an element in a JSON object with key equivalent to @a key. If the
18499|       |    element is not found or the JSON value is not an object, end() is
18500|       |    returned.
18501|       |
18502|       |    @note This method always returns @ref end() when executed on a JSON type
18503|       |          that is not an object.
18504|       |
18505|       |    @param[in] key key value of the element to search for.
18506|       |
18507|       |    @return Iterator to an element with key equivalent to @a key. If no such
18508|       |    element is found or the JSON value is not an object, past-the-end (see
18509|       |    @ref end()) iterator is returned.
18510|       |
18511|       |    @complexity Logarithmic in the size of the JSON object.
18512|       |
18513|       |    @liveexample{The example shows how `find()` is used.,find__key_type}
18514|       |
18515|       |    @sa @ref contains(KeyT&&) const -- checks whether a key exists
18516|       |
18517|       |    @since version 1.0.0
18518|       |    */
18519|       |    template<typename KeyT>
18520|       |    iterator find(KeyT&& key)
18521|      0|    {
18522|      0|        auto result = end();
18523|       |
18524|      0|        if (is_object())
18525|      0|        {
18526|      0|            result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));
18527|      0|        }
18528|       |
18529|      0|        return result;
18530|      0|    }
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE4findIRA15_KcEENS_6detail9iter_implISA_EEOT_
  ------------------
  | Unexecuted instantiation: _ZN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE4findIRKS8_EENS_6detail9iter_implISA_EEOT_
  ------------------
18531|       |
18532|       |    /*!
18533|       |    @brief find an element in a JSON object
18534|       |    @copydoc find(KeyT&&)
18535|       |    */
18536|       |    template<typename KeyT>
18537|       |    const_iterator find(KeyT&& key) const
18538|      0|    {
18539|      0|        auto result = cend();
18540|       |
18541|      0|        if (is_object())
18542|      0|        {
18543|      0|            result.m_it.object_iterator = m_value.object->find(std::forward<KeyT>(key));
18544|      0|        }
18545|       |
18546|      0|        return result;
18547|      0|    }
18548|       |
18549|       |    /*!
18550|       |    @brief returns the number of occurrences of a key in a JSON object
18551|       |
18552|       |    Returns the number of elements with key @a key. If ObjectType is the
18553|       |    default `std::map` type, the return value will always be `0` (@a key was
18554|       |    not found) or `1` (@a key was found).
18555|       |
18556|       |    @note This method always returns `0` when executed on a JSON type that is
18557|       |          not an object.
18558|       |
18559|       |    @param[in] key key value of the element to count
18560|       |
18561|       |    @return Number of elements with key @a key. If the JSON value is not an
18562|       |    object, the return value will be `0`.
18563|       |
18564|       |    @complexity Logarithmic in the size of the JSON object.
18565|       |
18566|       |    @liveexample{The example shows how `count()` is used.,count}
18567|       |
18568|       |    @since version 1.0.0
18569|       |    */
18570|       |    template<typename KeyT>
18571|       |    size_type count(KeyT&& key) const
18572|       |    {
18573|       |        // return 0 for all nonobject types
18574|       |        return is_object() ? m_value.object->count(std::forward<KeyT>(key)) : 0;
18575|       |    }
18576|       |
18577|       |    /*!
18578|       |    @brief check the existence of an element in a JSON object
18579|       |
18580|       |    Check whether an element exists in a JSON object with key equivalent to
18581|       |    @a key. If the element is not found or the JSON value is not an object,
18582|       |    false is returned.
18583|       |
18584|       |    @note This method always returns false when executed on a JSON type
18585|       |          that is not an object.
18586|       |
18587|       |    @param[in] key key value to check its existence.
18588|       |
18589|       |    @return true if an element with specified @a key exists. If no such
18590|       |    element with such key is found or the JSON value is not an object,
18591|       |    false is returned.
18592|       |
18593|       |    @complexity Logarithmic in the size of the JSON object.
18594|       |
18595|       |    @liveexample{The following code shows an example for `contains()`.,contains}
18596|       |
18597|       |    @sa @ref find(KeyT&&) -- returns an iterator to an object element
18598|       |    @sa @ref contains(const json_pointer&) const -- checks the existence for a JSON pointer
18599|       |
18600|       |    @since version 3.6.0
18601|       |    */
18602|       |    template<typename KeyT, typename std::enable_if<
18603|       |                 not std::is_same<typename std::decay<KeyT>::type, json_pointer>::value, int>::type = 0>
18604|       |    bool contains(KeyT && key) const
18605|     62|    {
18606|     62|        return is_object() and m_value.object->find(std::forward<KeyT>(key)) != m_value.object->end();
18607|     62|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE8containsIRA7_KcLi0EEEbOT_:
  |18605|     19|    {
  |18606|     19|        return is_object() and m_value.object->find(std::forward<KeyT>(key)) != m_value.object->end();
  |18607|     19|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE8containsIRA5_KcLi0EEEbOT_:
  |18605|      9|    {
  |18606|      9|        return is_object() and m_value.object->find(std::forward<KeyT>(key)) != m_value.object->end();
  |18607|      9|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE8containsIRA8_KcLi0EEEbOT_:
  |18605|     10|    {
  |18606|     10|        return is_object() and m_value.object->find(std::forward<KeyT>(key)) != m_value.object->end();
  |18607|     10|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE8containsIRA12_KcLi0EEEbOT_:
  |18605|     16|    {
  |18606|     16|        return is_object() and m_value.object->find(std::forward<KeyT>(key)) != m_value.object->end();
  |18607|     16|    }
  ------------------
  | _ZNK8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS_14adl_serializerEE8containsIRA15_KcLi0EEEbOT_:
  |18605|      8|    {
  |18606|      8|        return is_object() and m_value.object->find(std::forward<KeyT>(key)) != m_value.object->end();
  |18607|      8|    }
  ------------------
18608|       |
18609|       |    /*!
18610|       |    @brief check the existence of an element in a JSON object given a JSON pointer
18611|       |
18612|       |    Check whether the given JSON pointer @a ptr can be resolved in the current
18613|       |    JSON value.
18614|       |
18615|       |    @note This method can be executed on any JSON value type.
18616|       |
18617|       |    @param[in] ptr JSON pointer to check its existence.
18618|       |
18619|       |    @return true if the JSON pointer can be resolved to a stored value, false
18620|       |    otherwise.
18621|       |
18622|       |    @post If `j.contains(ptr)` returns true, it is safe to call `j[ptr]`.
18623|       |
18624|       |    @throw parse_error.106   if an array index begins with '0'
18625|       |    @throw parse_error.109   if an array index was not a number
18626|       |
18627|       |    @complexity Logarithmic in the size of the JSON object.
18628|       |
18629|       |    @liveexample{The following code shows an example for `contains()`.,contains_json_pointer}
18630|       |
18631|       |    @sa @ref contains(KeyT &&) const -- checks the existence of a key
18632|       |
18633|       |    @since version 3.7.0
18634|       |    */
18635|       |    bool contains(const json_pointer& ptr) const
18636|       |    {
18637|       |        return ptr.contains(this);
18638|       |    }
18639|       |
18640|       |    /// @}
18641|       |
18642|       |
18643|       |    ///////////////
18644|       |    // iterators //
18645|       |    ///////////////
18646|       |
18647|       |    /// @name iterators
18648|       |    /// @{
18649|       |
18650|       |    /*!
18651|       |    @brief returns an iterator to the first element
18652|       |
18653|       |    Returns an iterator to the first element.
18654|       |
18655|       |    @image html range-begin-end.svg "Illustration from cppreference.com"
18656|       |
18657|       |    @return iterator to the first element
18658|       |
18659|       |    @complexity Constant.
18660|       |
18661|       |    @requirement This function helps `basic_json` satisfying the
18662|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
18663|       |    requirements:
18664|       |    - The complexity is constant.
18665|       |
18666|       |    @liveexample{The following code shows an example for `begin()`.,begin}
18667|       |
18668|       |    @sa @ref cbegin() -- returns a const iterator to the beginning
18669|       |    @sa @ref end() -- returns an iterator to the end
18670|       |    @sa @ref cend() -- returns a const iterator to the end
18671|       |
18672|       |    @since version 1.0.0
18673|       |    */
18674|       |    iterator begin() noexcept
18675|    333|    {
18676|    333|        iterator result(this);
18677|    333|        result.set_begin();
18678|    333|        return result;
18679|    333|    }
18680|       |
18681|       |    /*!
18682|       |    @copydoc basic_json::cbegin()
18683|       |    */
18684|       |    const_iterator begin() const noexcept
18685|    381|    {
18686|    381|        return cbegin();
18687|    381|    }
18688|       |
18689|       |    /*!
18690|       |    @brief returns a const iterator to the first element
18691|       |
18692|       |    Returns a const iterator to the first element.
18693|       |
18694|       |    @image html range-begin-end.svg "Illustration from cppreference.com"
18695|       |
18696|       |    @return const iterator to the first element
18697|       |
18698|       |    @complexity Constant.
18699|       |
18700|       |    @requirement This function helps `basic_json` satisfying the
18701|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
18702|       |    requirements:
18703|       |    - The complexity is constant.
18704|       |    - Has the semantics of `const_cast<const basic_json&>(*this).begin()`.
18705|       |
18706|       |    @liveexample{The following code shows an example for `cbegin()`.,cbegin}
18707|       |
18708|       |    @sa @ref begin() -- returns an iterator to the beginning
18709|       |    @sa @ref end() -- returns an iterator to the end
18710|       |    @sa @ref cend() -- returns a const iterator to the end
18711|       |
18712|       |    @since version 1.0.0
18713|       |    */
18714|       |    const_iterator cbegin() const noexcept
18715|    381|    {
18716|    381|        const_iterator result(this);
18717|    381|        result.set_begin();
18718|    381|        return result;
18719|    381|    }
18720|       |
18721|       |    /*!
18722|       |    @brief returns an iterator to one past the last element
18723|       |
18724|       |    Returns an iterator to one past the last element.
18725|       |
18726|       |    @image html range-begin-end.svg "Illustration from cppreference.com"
18727|       |
18728|       |    @return iterator one past the last element
18729|       |
18730|       |    @complexity Constant.
18731|       |
18732|       |    @requirement This function helps `basic_json` satisfying the
18733|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
18734|       |    requirements:
18735|       |    - The complexity is constant.
18736|       |
18737|       |    @liveexample{The following code shows an example for `end()`.,end}
18738|       |
18739|       |    @sa @ref cend() -- returns a const iterator to the end
18740|       |    @sa @ref begin() -- returns an iterator to the beginning
18741|       |    @sa @ref cbegin() -- returns a const iterator to the beginning
18742|       |
18743|       |    @since version 1.0.0
18744|       |    */
18745|       |    iterator end() noexcept
18746|  1.23k|    {
18747|  1.23k|        iterator result(this);
18748|  1.23k|        result.set_end();
18749|  1.23k|        return result;
18750|  1.23k|    }
18751|       |
18752|       |    /*!
18753|       |    @copydoc basic_json::cend()
18754|       |    */
18755|       |    const_iterator end() const noexcept
18756|    381|    {
18757|    381|        return cend();
18758|    381|    }
18759|       |
18760|       |    /*!
18761|       |    @brief returns a const iterator to one past the last element
18762|       |
18763|       |    Returns a const iterator to one past the last element.
18764|       |
18765|       |    @image html range-begin-end.svg "Illustration from cppreference.com"
18766|       |
18767|       |    @return const iterator one past the last element
18768|       |
18769|       |    @complexity Constant.
18770|       |
18771|       |    @requirement This function helps `basic_json` satisfying the
18772|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
18773|       |    requirements:
18774|       |    - The complexity is constant.
18775|       |    - Has the semantics of `const_cast<const basic_json&>(*this).end()`.
18776|       |
18777|       |    @liveexample{The following code shows an example for `cend()`.,cend}
18778|       |
18779|       |    @sa @ref end() -- returns an iterator to the end
18780|       |    @sa @ref begin() -- returns an iterator to the beginning
18781|       |    @sa @ref cbegin() -- returns a const iterator to the beginning
18782|       |
18783|       |    @since version 1.0.0
18784|       |    */
18785|       |    const_iterator cend() const noexcept
18786|    381|    {
18787|    381|        const_iterator result(this);
18788|    381|        result.set_end();
18789|    381|        return result;
18790|    381|    }
18791|       |
18792|       |    /*!
18793|       |    @brief returns an iterator to the reverse-beginning
18794|       |
18795|       |    Returns an iterator to the reverse-beginning; that is, the last element.
18796|       |
18797|       |    @image html range-rbegin-rend.svg "Illustration from cppreference.com"
18798|       |
18799|       |    @complexity Constant.
18800|       |
18801|       |    @requirement This function helps `basic_json` satisfying the
18802|       |    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
18803|       |    requirements:
18804|       |    - The complexity is constant.
18805|       |    - Has the semantics of `reverse_iterator(end())`.
18806|       |
18807|       |    @liveexample{The following code shows an example for `rbegin()`.,rbegin}
18808|       |
18809|       |    @sa @ref crbegin() -- returns a const reverse iterator to the beginning
18810|       |    @sa @ref rend() -- returns a reverse iterator to the end
18811|       |    @sa @ref crend() -- returns a const reverse iterator to the end
18812|       |
18813|       |    @since version 1.0.0
18814|       |    */
18815|       |    reverse_iterator rbegin() noexcept
18816|       |    {
18817|       |        return reverse_iterator(end());
18818|       |    }
18819|       |
18820|       |    /*!
18821|       |    @copydoc basic_json::crbegin()
18822|       |    */
18823|       |    const_reverse_iterator rbegin() const noexcept
18824|       |    {
18825|       |        return crbegin();
18826|       |    }
18827|       |
18828|       |    /*!
18829|       |    @brief returns an iterator to the reverse-end
18830|       |
18831|       |    Returns an iterator to the reverse-end; that is, one before the first
18832|       |    element.
18833|       |
18834|       |    @image html range-rbegin-rend.svg "Illustration from cppreference.com"
18835|       |
18836|       |    @complexity Constant.
18837|       |
18838|       |    @requirement This function helps `basic_json` satisfying the
18839|       |    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
18840|       |    requirements:
18841|       |    - The complexity is constant.
18842|       |    - Has the semantics of `reverse_iterator(begin())`.
18843|       |
18844|       |    @liveexample{The following code shows an example for `rend()`.,rend}
18845|       |
18846|       |    @sa @ref crend() -- returns a const reverse iterator to the end
18847|       |    @sa @ref rbegin() -- returns a reverse iterator to the beginning
18848|       |    @sa @ref crbegin() -- returns a const reverse iterator to the beginning
18849|       |
18850|       |    @since version 1.0.0
18851|       |    */
18852|       |    reverse_iterator rend() noexcept
18853|       |    {
18854|       |        return reverse_iterator(begin());
18855|       |    }
18856|       |
18857|       |    /*!
18858|       |    @copydoc basic_json::crend()
18859|       |    */
18860|       |    const_reverse_iterator rend() const noexcept
18861|       |    {
18862|       |        return crend();
18863|       |    }
18864|       |
18865|       |    /*!
18866|       |    @brief returns a const reverse iterator to the last element
18867|       |
18868|       |    Returns a const iterator to the reverse-beginning; that is, the last
18869|       |    element.
18870|       |
18871|       |    @image html range-rbegin-rend.svg "Illustration from cppreference.com"
18872|       |
18873|       |    @complexity Constant.
18874|       |
18875|       |    @requirement This function helps `basic_json` satisfying the
18876|       |    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
18877|       |    requirements:
18878|       |    - The complexity is constant.
18879|       |    - Has the semantics of `const_cast<const basic_json&>(*this).rbegin()`.
18880|       |
18881|       |    @liveexample{The following code shows an example for `crbegin()`.,crbegin}
18882|       |
18883|       |    @sa @ref rbegin() -- returns a reverse iterator to the beginning
18884|       |    @sa @ref rend() -- returns a reverse iterator to the end
18885|       |    @sa @ref crend() -- returns a const reverse iterator to the end
18886|       |
18887|       |    @since version 1.0.0
18888|       |    */
18889|       |    const_reverse_iterator crbegin() const noexcept
18890|       |    {
18891|       |        return const_reverse_iterator(cend());
18892|       |    }
18893|       |
18894|       |    /*!
18895|       |    @brief returns a const reverse iterator to one before the first
18896|       |
18897|       |    Returns a const reverse iterator to the reverse-end; that is, one before
18898|       |    the first element.
18899|       |
18900|       |    @image html range-rbegin-rend.svg "Illustration from cppreference.com"
18901|       |
18902|       |    @complexity Constant.
18903|       |
18904|       |    @requirement This function helps `basic_json` satisfying the
18905|       |    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
18906|       |    requirements:
18907|       |    - The complexity is constant.
18908|       |    - Has the semantics of `const_cast<const basic_json&>(*this).rend()`.
18909|       |
18910|       |    @liveexample{The following code shows an example for `crend()`.,crend}
18911|       |
18912|       |    @sa @ref rend() -- returns a reverse iterator to the end
18913|       |    @sa @ref rbegin() -- returns a reverse iterator to the beginning
18914|       |    @sa @ref crbegin() -- returns a const reverse iterator to the beginning
18915|       |
18916|       |    @since version 1.0.0
18917|       |    */
18918|       |    const_reverse_iterator crend() const noexcept
18919|       |    {
18920|       |        return const_reverse_iterator(cbegin());
18921|       |    }
18922|       |
18923|       |  public:
18924|       |    /*!
18925|       |    @brief wrapper to access iterator member functions in range-based for
18926|       |
18927|       |    This function allows to access @ref iterator::key() and @ref
18928|       |    iterator::value() during range-based for loops. In these loops, a
18929|       |    reference to the JSON values is returned, so there is no access to the
18930|       |    underlying iterator.
18931|       |
18932|       |    For loop without iterator_wrapper:
18933|       |
18934|       |    @code{cpp}
18935|       |    for (auto it = j_object.begin(); it != j_object.end(); ++it)
18936|       |    {
18937|       |        std::cout << "key: " << it.key() << ", value:" << it.value() << '\n';
18938|       |    }
18939|       |    @endcode
18940|       |
18941|       |    Range-based for loop without iterator proxy:
18942|       |
18943|       |    @code{cpp}
18944|       |    for (auto it : j_object)
18945|       |    {
18946|       |        // "it" is of type json::reference and has no key() member
18947|       |        std::cout << "value: " << it << '\n';
18948|       |    }
18949|       |    @endcode
18950|       |
18951|       |    Range-based for loop with iterator proxy:
18952|       |
18953|       |    @code{cpp}
18954|       |    for (auto it : json::iterator_wrapper(j_object))
18955|       |    {
18956|       |        std::cout << "key: " << it.key() << ", value:" << it.value() << '\n';
18957|       |    }
18958|       |    @endcode
18959|       |
18960|       |    @note When iterating over an array, `key()` will return the index of the
18961|       |          element as string (see example).
18962|       |
18963|       |    @param[in] ref  reference to a JSON value
18964|       |    @return iteration proxy object wrapping @a ref with an interface to use in
18965|       |            range-based for loops
18966|       |
18967|       |    @liveexample{The following code shows how the wrapper is used,iterator_wrapper}
18968|       |
18969|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
18970|       |    changes in the JSON value.
18971|       |
18972|       |    @complexity Constant.
18973|       |
18974|       |    @note The name of this function is not yet final and may change in the
18975|       |    future.
18976|       |
18977|       |    @deprecated This stream operator is deprecated and will be removed in
18978|       |                future 4.0.0 of the library. Please use @ref items() instead;
18979|       |                that is, replace `json::iterator_wrapper(j)` with `j.items()`.
18980|       |    */
18981|       |    JSON_HEDLEY_DEPRECATED(3.1.0)
18982|       |    static iteration_proxy<iterator> iterator_wrapper(reference ref) noexcept
18983|       |    {
18984|       |        return ref.items();
18985|       |    }
18986|       |
18987|       |    /*!
18988|       |    @copydoc iterator_wrapper(reference)
18989|       |    */
18990|       |    JSON_HEDLEY_DEPRECATED(3.1.0)
18991|       |    static iteration_proxy<const_iterator> iterator_wrapper(const_reference ref) noexcept
18992|       |    {
18993|       |        return ref.items();
18994|       |    }
18995|       |
18996|       |    /*!
18997|       |    @brief helper to access iterator member functions in range-based for
18998|       |
18999|       |    This function allows to access @ref iterator::key() and @ref
19000|       |    iterator::value() during range-based for loops. In these loops, a
19001|       |    reference to the JSON values is returned, so there is no access to the
19002|       |    underlying iterator.
19003|       |
19004|       |    For loop without `items()` function:
19005|       |
19006|       |    @code{cpp}
19007|       |    for (auto it = j_object.begin(); it != j_object.end(); ++it)
19008|       |    {
19009|       |        std::cout << "key: " << it.key() << ", value:" << it.value() << '\n';
19010|       |    }
19011|       |    @endcode
19012|       |
19013|       |    Range-based for loop without `items()` function:
19014|       |
19015|       |    @code{cpp}
19016|       |    for (auto it : j_object)
19017|       |    {
19018|       |        // "it" is of type json::reference and has no key() member
19019|       |        std::cout << "value: " << it << '\n';
19020|       |    }
19021|       |    @endcode
19022|       |
19023|       |    Range-based for loop with `items()` function:
19024|       |
19025|       |    @code{cpp}
19026|       |    for (auto& el : j_object.items())
19027|       |    {
19028|       |        std::cout << "key: " << el.key() << ", value:" << el.value() << '\n';
19029|       |    }
19030|       |    @endcode
19031|       |
19032|       |    The `items()` function also allows to use
19033|       |    [structured bindings](https://en.cppreference.com/w/cpp/language/structured_binding)
19034|       |    (C++17):
19035|       |
19036|       |    @code{cpp}
19037|       |    for (auto& [key, val] : j_object.items())
19038|       |    {
19039|       |        std::cout << "key: " << key << ", value:" << val << '\n';
19040|       |    }
19041|       |    @endcode
19042|       |
19043|       |    @note When iterating over an array, `key()` will return the index of the
19044|       |          element as string (see example). For primitive types (e.g., numbers),
19045|       |          `key()` returns an empty string.
19046|       |
19047|       |    @return iteration proxy object wrapping @a ref with an interface to use in
19048|       |            range-based for loops
19049|       |
19050|       |    @liveexample{The following code shows how the function is used.,items}
19051|       |
19052|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
19053|       |    changes in the JSON value.
19054|       |
19055|       |    @complexity Constant.
19056|       |
19057|       |    @since version 3.1.0, structured bindings support since 3.5.0.
19058|       |    */
19059|       |    iteration_proxy<iterator> items() noexcept
19060|       |    {
19061|       |        return iteration_proxy<iterator>(*this);
19062|       |    }
19063|       |
19064|       |    /*!
19065|       |    @copydoc items()
19066|       |    */
19067|       |    iteration_proxy<const_iterator> items() const noexcept
19068|       |    {
19069|       |        return iteration_proxy<const_iterator>(*this);
19070|       |    }
19071|       |
19072|       |    /// @}
19073|       |
19074|       |
19075|       |    //////////////
19076|       |    // capacity //
19077|       |    //////////////
19078|       |
19079|       |    /// @name capacity
19080|       |    /// @{
19081|       |
19082|       |    /*!
19083|       |    @brief checks whether the container is empty.
19084|       |
19085|       |    Checks if a JSON value has no elements (i.e. whether its @ref size is `0`).
19086|       |
19087|       |    @return The return value depends on the different types and is
19088|       |            defined as follows:
19089|       |            Value type  | return value
19090|       |            ----------- | -------------
19091|       |            null        | `true`
19092|       |            boolean     | `false`
19093|       |            string      | `false`
19094|       |            number      | `false`
19095|       |            object      | result of function `object_t::empty()`
19096|       |            array       | result of function `array_t::empty()`
19097|       |
19098|       |    @liveexample{The following code uses `empty()` to check if a JSON
19099|       |    object contains any elements.,empty}
19100|       |
19101|       |    @complexity Constant, as long as @ref array_t and @ref object_t satisfy
19102|       |    the Container concept; that is, their `empty()` functions have constant
19103|       |    complexity.
19104|       |
19105|       |    @iterators No changes.
19106|       |
19107|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
19108|       |
19109|       |    @note This function does not return whether a string stored as JSON value
19110|       |    is empty - it returns whether the JSON container itself is empty which is
19111|       |    false in the case of a string.
19112|       |
19113|       |    @requirement This function helps `basic_json` satisfying the
19114|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
19115|       |    requirements:
19116|       |    - The complexity is constant.
19117|       |    - Has the semantics of `begin() == end()`.
19118|       |
19119|       |    @sa @ref size() -- returns the number of elements
19120|       |
19121|       |    @since version 1.0.0
19122|       |    */
19123|       |    bool empty() const noexcept
19124|       |    {
19125|       |        switch (m_type)
19126|       |        {
19127|       |            case value_t::null:
19128|       |            {
19129|       |                // null values are empty
19130|       |                return true;
19131|       |            }
19132|       |
19133|       |            case value_t::array:
19134|       |            {
19135|       |                // delegate call to array_t::empty()
19136|       |                return m_value.array->empty();
19137|       |            }
19138|       |
19139|       |            case value_t::object:
19140|       |            {
19141|       |                // delegate call to object_t::empty()
19142|       |                return m_value.object->empty();
19143|       |            }
19144|       |
19145|       |            default:
19146|       |            {
19147|       |                // all other types are nonempty
19148|       |                return false;
19149|       |            }
19150|       |        }
19151|       |    }
19152|       |
19153|       |    /*!
19154|       |    @brief returns the number of elements
19155|       |
19156|       |    Returns the number of elements in a JSON value.
19157|       |
19158|       |    @return The return value depends on the different types and is
19159|       |            defined as follows:
19160|       |            Value type  | return value
19161|       |            ----------- | -------------
19162|       |            null        | `0`
19163|       |            boolean     | `1`
19164|       |            string      | `1`
19165|       |            number      | `1`
19166|       |            object      | result of function object_t::size()
19167|       |            array       | result of function array_t::size()
19168|       |
19169|       |    @liveexample{The following code calls `size()` on the different value
19170|       |    types.,size}
19171|       |
19172|       |    @complexity Constant, as long as @ref array_t and @ref object_t satisfy
19173|       |    the Container concept; that is, their size() functions have constant
19174|       |    complexity.
19175|       |
19176|       |    @iterators No changes.
19177|       |
19178|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
19179|       |
19180|       |    @note This function does not return the length of a string stored as JSON
19181|       |    value - it returns the number of elements in the JSON value which is 1 in
19182|       |    the case of a string.
19183|       |
19184|       |    @requirement This function helps `basic_json` satisfying the
19185|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
19186|       |    requirements:
19187|       |    - The complexity is constant.
19188|       |    - Has the semantics of `std::distance(begin(), end())`.
19189|       |
19190|       |    @sa @ref empty() -- checks whether the container is empty
19191|       |    @sa @ref max_size() -- returns the maximal number of elements
19192|       |
19193|       |    @since version 1.0.0
19194|       |    */
19195|       |    size_type size() const noexcept
19196|     98|    {
19197|     98|        switch (m_type)
19198|     98|        {
19199|      0|            case value_t::null:
19200|      0|            {
19201|       |                // null values are empty
19202|      0|                return 0;
19203|      0|            }
19204|       |
19205|     98|            case value_t::array:
19206|     98|            {
19207|       |                // delegate call to array_t::size()
19208|     98|                return m_value.array->size();
19209|      0|            }
19210|       |
19211|      0|            case value_t::object:
19212|      0|            {
19213|       |                // delegate call to object_t::size()
19214|      0|                return m_value.object->size();
19215|      0|            }
19216|       |
19217|      0|            default:
19218|      0|            {
19219|       |                // all other types have size 1
19220|      0|                return 1;
19221|      0|            }
19222|     98|        }
19223|     98|    }
19224|       |
19225|       |    /*!
19226|       |    @brief returns the maximum possible number of elements
19227|       |
19228|       |    Returns the maximum number of elements a JSON value is able to hold due to
19229|       |    system or library implementation limitations, i.e. `std::distance(begin(),
19230|       |    end())` for the JSON value.
19231|       |
19232|       |    @return The return value depends on the different types and is
19233|       |            defined as follows:
19234|       |            Value type  | return value
19235|       |            ----------- | -------------
19236|       |            null        | `0` (same as `size()`)
19237|       |            boolean     | `1` (same as `size()`)
19238|       |            string      | `1` (same as `size()`)
19239|       |            number      | `1` (same as `size()`)
19240|       |            object      | result of function `object_t::max_size()`
19241|       |            array       | result of function `array_t::max_size()`
19242|       |
19243|       |    @liveexample{The following code calls `max_size()` on the different value
19244|       |    types. Note the output is implementation specific.,max_size}
19245|       |
19246|       |    @complexity Constant, as long as @ref array_t and @ref object_t satisfy
19247|       |    the Container concept; that is, their `max_size()` functions have constant
19248|       |    complexity.
19249|       |
19250|       |    @iterators No changes.
19251|       |
19252|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
19253|       |
19254|       |    @requirement This function helps `basic_json` satisfying the
19255|       |    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
19256|       |    requirements:
19257|       |    - The complexity is constant.
19258|       |    - Has the semantics of returning `b.size()` where `b` is the largest
19259|       |      possible JSON value.
19260|       |
19261|       |    @sa @ref size() -- returns the number of elements
19262|       |
19263|       |    @since version 1.0.0
19264|       |    */
19265|       |    size_type max_size() const noexcept
19266|      0|    {
19267|      0|        switch (m_type)
19268|      0|        {
19269|      0|            case value_t::array:
19270|      0|            {
19271|       |                // delegate call to array_t::max_size()
19272|      0|                return m_value.array->max_size();
19273|      0|            }
19274|       |
19275|      0|            case value_t::object:
19276|      0|            {
19277|       |                // delegate call to object_t::max_size()
19278|      0|                return m_value.object->max_size();
19279|      0|            }
19280|       |
19281|      0|            default:
19282|      0|            {
19283|       |                // all other types have max_size() == size()
19284|      0|                return size();
19285|      0|            }
19286|      0|        }
19287|      0|    }
19288|       |
19289|       |    /// @}
19290|       |
19291|       |
19292|       |    ///////////////
19293|       |    // modifiers //
19294|       |    ///////////////
19295|       |
19296|       |    /// @name modifiers
19297|       |    /// @{
19298|       |
19299|       |    /*!
19300|       |    @brief clears the contents
19301|       |
19302|       |    Clears the content of a JSON value and resets it to the default value as
19303|       |    if @ref basic_json(value_t) would have been called with the current value
19304|       |    type from @ref type():
19305|       |
19306|       |    Value type  | initial value
19307|       |    ----------- | -------------
19308|       |    null        | `null`
19309|       |    boolean     | `false`
19310|       |    string      | `""`
19311|       |    number      | `0`
19312|       |    object      | `{}`
19313|       |    array       | `[]`
19314|       |
19315|       |    @post Has the same effect as calling
19316|       |    @code {.cpp}
19317|       |    *this = basic_json(type());
19318|       |    @endcode
19319|       |
19320|       |    @liveexample{The example below shows the effect of `clear()` to different
19321|       |    JSON types.,clear}
19322|       |
19323|       |    @complexity Linear in the size of the JSON value.
19324|       |
19325|       |    @iterators All iterators, pointers and references related to this container
19326|       |               are invalidated.
19327|       |
19328|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
19329|       |
19330|       |    @sa @ref basic_json(value_t) -- constructor that creates an object with the
19331|       |        same value than calling `clear()`
19332|       |
19333|       |    @since version 1.0.0
19334|       |    */
19335|       |    void clear() noexcept
19336|       |    {
19337|       |        switch (m_type)
19338|       |        {
19339|       |            case value_t::number_integer:
19340|       |            {
19341|       |                m_value.number_integer = 0;
19342|       |                break;
19343|       |            }
19344|       |
19345|       |            case value_t::number_unsigned:
19346|       |            {
19347|       |                m_value.number_unsigned = 0;
19348|       |                break;
19349|       |            }
19350|       |
19351|       |            case value_t::number_float:
19352|       |            {
19353|       |                m_value.number_float = 0.0;
19354|       |                break;
19355|       |            }
19356|       |
19357|       |            case value_t::boolean:
19358|       |            {
19359|       |                m_value.boolean = false;
19360|       |                break;
19361|       |            }
19362|       |
19363|       |            case value_t::string:
19364|       |            {
19365|       |                m_value.string->clear();
19366|       |                break;
19367|       |            }
19368|       |
19369|       |            case value_t::array:
19370|       |            {
19371|       |                m_value.array->clear();
19372|       |                break;
19373|       |            }
19374|       |
19375|       |            case value_t::object:
19376|       |            {
19377|       |                m_value.object->clear();
19378|       |                break;
19379|       |            }
19380|       |
19381|       |            default:
19382|       |                break;
19383|       |        }
19384|       |    }
19385|       |
19386|       |    /*!
19387|       |    @brief add an object to an array
19388|       |
19389|       |    Appends the given element @a val to the end of the JSON value. If the
19390|       |    function is called on a JSON null value, an empty array is created before
19391|       |    appending @a val.
19392|       |
19393|       |    @param[in] val the value to add to the JSON array
19394|       |
19395|       |    @throw type_error.308 when called on a type other than JSON array or
19396|       |    null; example: `"cannot use push_back() with number"`
19397|       |
19398|       |    @complexity Amortized constant.
19399|       |
19400|       |    @liveexample{The example shows how `push_back()` and `+=` can be used to
19401|       |    add elements to a JSON array. Note how the `null` value was silently
19402|       |    converted to a JSON array.,push_back}
19403|       |
19404|       |    @since version 1.0.0
19405|       |    */
19406|       |    void push_back(basic_json&& val)
19407|     14|    {
19408|       |        // push_back only works for null objects or arrays
19409|     14|        if (JSON_HEDLEY_UNLIKELY(not(is_null() or is_array())))
19410|      0|        {
19411|      0|            JSON_THROW(type_error::create(308, "cannot use push_back() with " + std::string(type_name())));
19412|      0|        }
19413|       |
19414|       |        // transform null object into an array
19415|     14|        if (is_null())
19416|      6|        {
19417|      6|            m_type = value_t::array;
19418|      6|            m_value = value_t::array;
19419|      6|            assert_invariant();
19420|      6|        }
19421|       |
19422|       |        // add element to array (move semantics)
19423|     14|        m_value.array->push_back(std::move(val));
19424|       |        // invalidate object: mark it null so we do not call the destructor
19425|       |        // cppcheck-suppress accessMoved
19426|     14|        val.m_type = value_t::null;
19427|     14|    }
19428|       |
19429|       |    /*!
19430|       |    @brief add an object to an array
19431|       |    @copydoc push_back(basic_json&&)
19432|       |    */
19433|       |    reference operator+=(basic_json&& val)
19434|       |    {
19435|       |        push_back(std::move(val));
19436|       |        return *this;
19437|       |    }
19438|       |
19439|       |    /*!
19440|       |    @brief add an object to an array
19441|       |    @copydoc push_back(basic_json&&)
19442|       |    */
19443|       |    void push_back(const basic_json& val)
19444|    100|    {
19445|       |        // push_back only works for null objects or arrays
19446|    100|        if (JSON_HEDLEY_UNLIKELY(not(is_null() or is_array())))
19447|      0|        {
19448|      0|            JSON_THROW(type_error::create(308, "cannot use push_back() with " + std::string(type_name())));
19449|      0|        }
19450|       |
19451|       |        // transform null object into an array
19452|    100|        if (is_null())
19453|     15|        {
19454|     15|            m_type = value_t::array;
19455|     15|            m_value = value_t::array;
19456|     15|            assert_invariant();
19457|     15|        }
19458|       |
19459|       |        // add element to array
19460|    100|        m_value.array->push_back(val);
19461|    100|    }
19462|       |
19463|       |    /*!
19464|       |    @brief add an object to an array
19465|       |    @copydoc push_back(basic_json&&)
19466|       |    */
19467|       |    reference operator+=(const basic_json& val)
19468|       |    {
19469|       |        push_back(val);
19470|       |        return *this;
19471|       |    }
19472|       |
19473|       |    /*!
19474|       |    @brief add an object to an object
19475|       |
19476|       |    Inserts the given element @a val to the JSON object. If the function is
19477|       |    called on a JSON null value, an empty object is created before inserting
19478|       |    @a val.
19479|       |
19480|       |    @param[in] val the value to add to the JSON object
19481|       |
19482|       |    @throw type_error.308 when called on a type other than JSON object or
19483|       |    null; example: `"cannot use push_back() with number"`
19484|       |
19485|       |    @complexity Logarithmic in the size of the container, O(log(`size()`)).
19486|       |
19487|       |    @liveexample{The example shows how `push_back()` and `+=` can be used to
19488|       |    add elements to a JSON object. Note how the `null` value was silently
19489|       |    converted to a JSON object.,push_back__object_t__value}
19490|       |
19491|       |    @since version 1.0.0
19492|       |    */
19493|       |    void push_back(const typename object_t::value_type& val)
19494|       |    {
19495|       |        // push_back only works for null objects or objects
19496|       |        if (JSON_HEDLEY_UNLIKELY(not(is_null() or is_object())))
19497|       |        {
19498|       |            JSON_THROW(type_error::create(308, "cannot use push_back() with " + std::string(type_name())));
19499|       |        }
19500|       |
19501|       |        // transform null object into an object
19502|       |        if (is_null())
19503|       |        {
19504|       |            m_type = value_t::object;
19505|       |            m_value = value_t::object;
19506|       |            assert_invariant();
19507|       |        }
19508|       |
19509|       |        // add element to array
19510|       |        m_value.object->insert(val);
19511|       |    }
19512|       |
19513|       |    /*!
19514|       |    @brief add an object to an object
19515|       |    @copydoc push_back(const typename object_t::value_type&)
19516|       |    */
19517|       |    reference operator+=(const typename object_t::value_type& val)
19518|       |    {
19519|       |        push_back(val);
19520|       |        return *this;
19521|       |    }
19522|       |
19523|       |    /*!
19524|       |    @brief add an object to an object
19525|       |
19526|       |    This function allows to use `push_back` with an initializer list. In case
19527|       |
19528|       |    1. the current value is an object,
19529|       |    2. the initializer list @a init contains only two elements, and
19530|       |    3. the first element of @a init is a string,
19531|       |
19532|       |    @a init is converted into an object element and added using
19533|       |    @ref push_back(const typename object_t::value_type&). Otherwise, @a init
19534|       |    is converted to a JSON value and added using @ref push_back(basic_json&&).
19535|       |
19536|       |    @param[in] init  an initializer list
19537|       |
19538|       |    @complexity Linear in the size of the initializer list @a init.
19539|       |
19540|       |    @note This function is required to resolve an ambiguous overload error,
19541|       |          because pairs like `{"key", "value"}` can be both interpreted as
19542|       |          `object_t::value_type` or `std::initializer_list<basic_json>`, see
19543|       |          https://github.com/nlohmann/json/issues/235 for more information.
19544|       |
19545|       |    @liveexample{The example shows how initializer lists are treated as
19546|       |    objects when possible.,push_back__initializer_list}
19547|       |    */
19548|       |    void push_back(initializer_list_t init)
19549|       |    {
19550|       |        if (is_object() and init.size() == 2 and (*init.begin())->is_string())
19551|       |        {
19552|       |            basic_json&& key = init.begin()->moved_or_copied();
19553|       |            push_back(typename object_t::value_type(
19554|       |                          std::move(key.get_ref<string_t&>()), (init.begin() + 1)->moved_or_copied()));
19555|       |        }
19556|       |        else
19557|       |        {
19558|       |            push_back(basic_json(init));
19559|       |        }
19560|       |    }
19561|       |
19562|       |    /*!
19563|       |    @brief add an object to an object
19564|       |    @copydoc push_back(initializer_list_t)
19565|       |    */
19566|       |    reference operator+=(initializer_list_t init)
19567|       |    {
19568|       |        push_back(init);
19569|       |        return *this;
19570|       |    }
19571|       |
19572|       |    /*!
19573|       |    @brief add an object to an array
19574|       |
19575|       |    Creates a JSON value from the passed parameters @a args to the end of the
19576|       |    JSON value. If the function is called on a JSON null value, an empty array
19577|       |    is created before appending the value created from @a args.
19578|       |
19579|       |    @param[in] args arguments to forward to a constructor of @ref basic_json
19580|       |    @tparam Args compatible types to create a @ref basic_json object
19581|       |
19582|       |    @return reference to the inserted element
19583|       |
19584|       |    @throw type_error.311 when called on a type other than JSON array or
19585|       |    null; example: `"cannot use emplace_back() with number"`
19586|       |
19587|       |    @complexity Amortized constant.
19588|       |
19589|       |    @liveexample{The example shows how `push_back()` can be used to add
19590|       |    elements to a JSON array. Note how the `null` value was silently converted
19591|       |    to a JSON array.,emplace_back}
19592|       |
19593|       |    @since version 2.0.8, returns reference since 3.7.0
19594|       |    */
19595|       |    template<class... Args>
19596|       |    reference emplace_back(Args&& ... args)
19597|       |    {
19598|       |        // emplace_back only works for null objects or arrays
19599|       |        if (JSON_HEDLEY_UNLIKELY(not(is_null() or is_array())))
19600|       |        {
19601|       |            JSON_THROW(type_error::create(311, "cannot use emplace_back() with " + std::string(type_name())));
19602|       |        }
19603|       |
19604|       |        // transform null object into an array
19605|       |        if (is_null())
19606|       |        {
19607|       |            m_type = value_t::array;
19608|       |            m_value = value_t::array;
19609|       |            assert_invariant();
19610|       |        }
19611|       |
19612|       |        // add element to array (perfect forwarding)
19613|       |#ifdef JSON_HAS_CPP_17
19614|       |        return m_value.array->emplace_back(std::forward<Args>(args)...);
19615|       |#else
19616|       |        m_value.array->emplace_back(std::forward<Args>(args)...);
19617|       |        return m_value.array->back();
19618|       |#endif
19619|       |    }
19620|       |
19621|       |    /*!
19622|       |    @brief add an object to an object if key does not exist
19623|       |
19624|       |    Inserts a new element into a JSON object constructed in-place with the
19625|       |    given @a args if there is no element with the key in the container. If the
19626|       |    function is called on a JSON null value, an empty object is created before
19627|       |    appending the value created from @a args.
19628|       |
19629|       |    @param[in] args arguments to forward to a constructor of @ref basic_json
19630|       |    @tparam Args compatible types to create a @ref basic_json object
19631|       |
19632|       |    @return a pair consisting of an iterator to the inserted element, or the
19633|       |            already-existing element if no insertion happened, and a bool
19634|       |            denoting whether the insertion took place.
19635|       |
19636|       |    @throw type_error.311 when called on a type other than JSON object or
19637|       |    null; example: `"cannot use emplace() with number"`
19638|       |
19639|       |    @complexity Logarithmic in the size of the container, O(log(`size()`)).
19640|       |
19641|       |    @liveexample{The example shows how `emplace()` can be used to add elements
19642|       |    to a JSON object. Note how the `null` value was silently converted to a
19643|       |    JSON object. Further note how no value is added if there was already one
19644|       |    value stored with the same key.,emplace}
19645|       |
19646|       |    @since version 2.0.8
19647|       |    */
19648|       |    template<class... Args>
19649|       |    std::pair<iterator, bool> emplace(Args&& ... args)
19650|       |    {
19651|       |        // emplace only works for null objects or arrays
19652|       |        if (JSON_HEDLEY_UNLIKELY(not(is_null() or is_object())))
19653|       |        {
19654|       |            JSON_THROW(type_error::create(311, "cannot use emplace() with " + std::string(type_name())));
19655|       |        }
19656|       |
19657|       |        // transform null object into an object
19658|       |        if (is_null())
19659|       |        {
19660|       |            m_type = value_t::object;
19661|       |            m_value = value_t::object;
19662|       |            assert_invariant();
19663|       |        }
19664|       |
19665|       |        // add element to array (perfect forwarding)
19666|       |        auto res = m_value.object->emplace(std::forward<Args>(args)...);
19667|       |        // create result iterator and set iterator to the result of emplace
19668|       |        auto it = begin();
19669|       |        it.m_it.object_iterator = res.first;
19670|       |
19671|       |        // return pair of iterator and boolean
19672|       |        return {it, res.second};
19673|       |    }
19674|       |
19675|       |    /// Helper for insertion of an iterator
19676|       |    /// @note: This uses std::distance to support GCC 4.8,
19677|       |    ///        see https://github.com/nlohmann/json/pull/1257
19678|       |    template<typename... Args>
19679|       |    iterator insert_iterator(const_iterator pos, Args&& ... args)
19680|       |    {
19681|       |        iterator result(this);
19682|       |        assert(m_value.array != nullptr);
19683|       |
19684|       |        auto insert_pos = std::distance(m_value.array->begin(), pos.m_it.array_iterator);
19685|       |        m_value.array->insert(pos.m_it.array_iterator, std::forward<Args>(args)...);
19686|       |        result.m_it.array_iterator = m_value.array->begin() + insert_pos;
19687|       |
19688|       |        // This could have been written as:
19689|       |        // result.m_it.array_iterator = m_value.array->insert(pos.m_it.array_iterator, cnt, val);
19690|       |        // but the return value of insert is missing in GCC 4.8, so it is written this way instead.
19691|       |
19692|       |        return result;
19693|       |    }
19694|       |
19695|       |    /*!
19696|       |    @brief inserts element
19697|       |
19698|       |    Inserts element @a val before iterator @a pos.
19699|       |
19700|       |    @param[in] pos iterator before which the content will be inserted; may be
19701|       |    the end() iterator
19702|       |    @param[in] val element to insert
19703|       |    @return iterator pointing to the inserted @a val.
19704|       |
19705|       |    @throw type_error.309 if called on JSON values other than arrays;
19706|       |    example: `"cannot use insert() with string"`
19707|       |    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
19708|       |    example: `"iterator does not fit current value"`
19709|       |
19710|       |    @complexity Constant plus linear in the distance between @a pos and end of
19711|       |    the container.
19712|       |
19713|       |    @liveexample{The example shows how `insert()` is used.,insert}
19714|       |
19715|       |    @since version 1.0.0
19716|       |    */
19717|       |    iterator insert(const_iterator pos, const basic_json& val)
19718|       |    {
19719|       |        // insert only works for arrays
19720|       |        if (JSON_HEDLEY_LIKELY(is_array()))
19721|       |        {
19722|       |            // check if iterator pos fits to this JSON value
19723|       |            if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
19724|       |            {
19725|       |                JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value"));
19726|       |            }
19727|       |
19728|       |            // insert to array and return iterator
19729|       |            return insert_iterator(pos, val);
19730|       |        }
19731|       |
19732|       |        JSON_THROW(type_error::create(309, "cannot use insert() with " + std::string(type_name())));
19733|       |    }
19734|       |
19735|       |    /*!
19736|       |    @brief inserts element
19737|       |    @copydoc insert(const_iterator, const basic_json&)
19738|       |    */
19739|       |    iterator insert(const_iterator pos, basic_json&& val)
19740|       |    {
19741|       |        return insert(pos, val);
19742|       |    }
19743|       |
19744|       |    /*!
19745|       |    @brief inserts elements
19746|       |
19747|       |    Inserts @a cnt copies of @a val before iterator @a pos.
19748|       |
19749|       |    @param[in] pos iterator before which the content will be inserted; may be
19750|       |    the end() iterator
19751|       |    @param[in] cnt number of copies of @a val to insert
19752|       |    @param[in] val element to insert
19753|       |    @return iterator pointing to the first element inserted, or @a pos if
19754|       |    `cnt==0`
19755|       |
19756|       |    @throw type_error.309 if called on JSON values other than arrays; example:
19757|       |    `"cannot use insert() with string"`
19758|       |    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
19759|       |    example: `"iterator does not fit current value"`
19760|       |
19761|       |    @complexity Linear in @a cnt plus linear in the distance between @a pos
19762|       |    and end of the container.
19763|       |
19764|       |    @liveexample{The example shows how `insert()` is used.,insert__count}
19765|       |
19766|       |    @since version 1.0.0
19767|       |    */
19768|       |    iterator insert(const_iterator pos, size_type cnt, const basic_json& val)
19769|       |    {
19770|       |        // insert only works for arrays
19771|       |        if (JSON_HEDLEY_LIKELY(is_array()))
19772|       |        {
19773|       |            // check if iterator pos fits to this JSON value
19774|       |            if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
19775|       |            {
19776|       |                JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value"));
19777|       |            }
19778|       |
19779|       |            // insert to array and return iterator
19780|       |            return insert_iterator(pos, cnt, val);
19781|       |        }
19782|       |
19783|       |        JSON_THROW(type_error::create(309, "cannot use insert() with " + std::string(type_name())));
19784|       |    }
19785|       |
19786|       |    /*!
19787|       |    @brief inserts elements
19788|       |
19789|       |    Inserts elements from range `[first, last)` before iterator @a pos.
19790|       |
19791|       |    @param[in] pos iterator before which the content will be inserted; may be
19792|       |    the end() iterator
19793|       |    @param[in] first begin of the range of elements to insert
19794|       |    @param[in] last end of the range of elements to insert
19795|       |
19796|       |    @throw type_error.309 if called on JSON values other than arrays; example:
19797|       |    `"cannot use insert() with string"`
19798|       |    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
19799|       |    example: `"iterator does not fit current value"`
19800|       |    @throw invalid_iterator.210 if @a first and @a last do not belong to the
19801|       |    same JSON value; example: `"iterators do not fit"`
19802|       |    @throw invalid_iterator.211 if @a first or @a last are iterators into
19803|       |    container for which insert is called; example: `"passed iterators may not
19804|       |    belong to container"`
19805|       |
19806|       |    @return iterator pointing to the first element inserted, or @a pos if
19807|       |    `first==last`
19808|       |
19809|       |    @complexity Linear in `std::distance(first, last)` plus linear in the
19810|       |    distance between @a pos and end of the container.
19811|       |
19812|       |    @liveexample{The example shows how `insert()` is used.,insert__range}
19813|       |
19814|       |    @since version 1.0.0
19815|       |    */
19816|       |    iterator insert(const_iterator pos, const_iterator first, const_iterator last)
19817|       |    {
19818|       |        // insert only works for arrays
19819|       |        if (JSON_HEDLEY_UNLIKELY(not is_array()))
19820|       |        {
19821|       |            JSON_THROW(type_error::create(309, "cannot use insert() with " + std::string(type_name())));
19822|       |        }
19823|       |
19824|       |        // check if iterator pos fits to this JSON value
19825|       |        if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
19826|       |        {
19827|       |            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value"));
19828|       |        }
19829|       |
19830|       |        // check if range iterators belong to the same JSON object
19831|       |        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
19832|       |        {
19833|       |            JSON_THROW(invalid_iterator::create(210, "iterators do not fit"));
19834|       |        }
19835|       |
19836|       |        if (JSON_HEDLEY_UNLIKELY(first.m_object == this))
19837|       |        {
19838|       |            JSON_THROW(invalid_iterator::create(211, "passed iterators may not belong to container"));
19839|       |        }
19840|       |
19841|       |        // insert to array and return iterator
19842|       |        return insert_iterator(pos, first.m_it.array_iterator, last.m_it.array_iterator);
19843|       |    }
19844|       |
19845|       |    /*!
19846|       |    @brief inserts elements
19847|       |
19848|       |    Inserts elements from initializer list @a ilist before iterator @a pos.
19849|       |
19850|       |    @param[in] pos iterator before which the content will be inserted; may be
19851|       |    the end() iterator
19852|       |    @param[in] ilist initializer list to insert the values from
19853|       |
19854|       |    @throw type_error.309 if called on JSON values other than arrays; example:
19855|       |    `"cannot use insert() with string"`
19856|       |    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
19857|       |    example: `"iterator does not fit current value"`
19858|       |
19859|       |    @return iterator pointing to the first element inserted, or @a pos if
19860|       |    `ilist` is empty
19861|       |
19862|       |    @complexity Linear in `ilist.size()` plus linear in the distance between
19863|       |    @a pos and end of the container.
19864|       |
19865|       |    @liveexample{The example shows how `insert()` is used.,insert__ilist}
19866|       |
19867|       |    @since version 1.0.0
19868|       |    */
19869|       |    iterator insert(const_iterator pos, initializer_list_t ilist)
19870|       |    {
19871|       |        // insert only works for arrays
19872|       |        if (JSON_HEDLEY_UNLIKELY(not is_array()))
19873|       |        {
19874|       |            JSON_THROW(type_error::create(309, "cannot use insert() with " + std::string(type_name())));
19875|       |        }
19876|       |
19877|       |        // check if iterator pos fits to this JSON value
19878|       |        if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
19879|       |        {
19880|       |            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value"));
19881|       |        }
19882|       |
19883|       |        // insert to array and return iterator
19884|       |        return insert_iterator(pos, ilist.begin(), ilist.end());
19885|       |    }
19886|       |
19887|       |    /*!
19888|       |    @brief inserts elements
19889|       |
19890|       |    Inserts elements from range `[first, last)`.
19891|       |
19892|       |    @param[in] first begin of the range of elements to insert
19893|       |    @param[in] last end of the range of elements to insert
19894|       |
19895|       |    @throw type_error.309 if called on JSON values other than objects; example:
19896|       |    `"cannot use insert() with string"`
19897|       |    @throw invalid_iterator.202 if iterator @a first or @a last does does not
19898|       |    point to an object; example: `"iterators first and last must point to
19899|       |    objects"`
19900|       |    @throw invalid_iterator.210 if @a first and @a last do not belong to the
19901|       |    same JSON value; example: `"iterators do not fit"`
19902|       |
19903|       |    @complexity Logarithmic: `O(N*log(size() + N))`, where `N` is the number
19904|       |    of elements to insert.
19905|       |
19906|       |    @liveexample{The example shows how `insert()` is used.,insert__range_object}
19907|       |
19908|       |    @since version 3.0.0
19909|       |    */
19910|       |    void insert(const_iterator first, const_iterator last)
19911|       |    {
19912|       |        // insert only works for objects
19913|       |        if (JSON_HEDLEY_UNLIKELY(not is_object()))
19914|       |        {
19915|       |            JSON_THROW(type_error::create(309, "cannot use insert() with " + std::string(type_name())));
19916|       |        }
19917|       |
19918|       |        // check if range iterators belong to the same JSON object
19919|       |        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
19920|       |        {
19921|       |            JSON_THROW(invalid_iterator::create(210, "iterators do not fit"));
19922|       |        }
19923|       |
19924|       |        // passed iterators must belong to objects
19925|       |        if (JSON_HEDLEY_UNLIKELY(not first.m_object->is_object()))
19926|       |        {
19927|       |            JSON_THROW(invalid_iterator::create(202, "iterators first and last must point to objects"));
19928|       |        }
19929|       |
19930|       |        m_value.object->insert(first.m_it.object_iterator, last.m_it.object_iterator);
19931|       |    }
19932|       |
19933|       |    /*!
19934|       |    @brief updates a JSON object from another object, overwriting existing keys
19935|       |
19936|       |    Inserts all values from JSON object @a j and overwrites existing keys.
19937|       |
19938|       |    @param[in] j  JSON object to read values from
19939|       |
19940|       |    @throw type_error.312 if called on JSON values other than objects; example:
19941|       |    `"cannot use update() with string"`
19942|       |
19943|       |    @complexity O(N*log(size() + N)), where N is the number of elements to
19944|       |                insert.
19945|       |
19946|       |    @liveexample{The example shows how `update()` is used.,update}
19947|       |
19948|       |    @sa https://docs.python.org/3.6/library/stdtypes.html#dict.update
19949|       |
19950|       |    @since version 3.0.0
19951|       |    */
19952|       |    void update(const_reference j)
19953|       |    {
19954|       |        // implicitly convert null value to an empty object
19955|       |        if (is_null())
19956|       |        {
19957|       |            m_type = value_t::object;
19958|       |            m_value.object = create<object_t>();
19959|       |            assert_invariant();
19960|       |        }
19961|       |
19962|       |        if (JSON_HEDLEY_UNLIKELY(not is_object()))
19963|       |        {
19964|       |            JSON_THROW(type_error::create(312, "cannot use update() with " + std::string(type_name())));
19965|       |        }
19966|       |        if (JSON_HEDLEY_UNLIKELY(not j.is_object()))
19967|       |        {
19968|       |            JSON_THROW(type_error::create(312, "cannot use update() with " + std::string(j.type_name())));
19969|       |        }
19970|       |
19971|       |        for (auto it = j.cbegin(); it != j.cend(); ++it)
19972|       |        {
19973|       |            m_value.object->operator[](it.key()) = it.value();
19974|       |        }
19975|       |    }
19976|       |
19977|       |    /*!
19978|       |    @brief updates a JSON object from another object, overwriting existing keys
19979|       |
19980|       |    Inserts all values from from range `[first, last)` and overwrites existing
19981|       |    keys.
19982|       |
19983|       |    @param[in] first begin of the range of elements to insert
19984|       |    @param[in] last end of the range of elements to insert
19985|       |
19986|       |    @throw type_error.312 if called on JSON values other than objects; example:
19987|       |    `"cannot use update() with string"`
19988|       |    @throw invalid_iterator.202 if iterator @a first or @a last does does not
19989|       |    point to an object; example: `"iterators first and last must point to
19990|       |    objects"`
19991|       |    @throw invalid_iterator.210 if @a first and @a last do not belong to the
19992|       |    same JSON value; example: `"iterators do not fit"`
19993|       |
19994|       |    @complexity O(N*log(size() + N)), where N is the number of elements to
19995|       |                insert.
19996|       |
19997|       |    @liveexample{The example shows how `update()` is used__range.,update}
19998|       |
19999|       |    @sa https://docs.python.org/3.6/library/stdtypes.html#dict.update
20000|       |
20001|       |    @since version 3.0.0
20002|       |    */
20003|       |    void update(const_iterator first, const_iterator last)
20004|       |    {
20005|       |        // implicitly convert null value to an empty object
20006|       |        if (is_null())
20007|       |        {
20008|       |            m_type = value_t::object;
20009|       |            m_value.object = create<object_t>();
20010|       |            assert_invariant();
20011|       |        }
20012|       |
20013|       |        if (JSON_HEDLEY_UNLIKELY(not is_object()))
20014|       |        {
20015|       |            JSON_THROW(type_error::create(312, "cannot use update() with " + std::string(type_name())));
20016|       |        }
20017|       |
20018|       |        // check if range iterators belong to the same JSON object
20019|       |        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
20020|       |        {
20021|       |            JSON_THROW(invalid_iterator::create(210, "iterators do not fit"));
20022|       |        }
20023|       |
20024|       |        // passed iterators must belong to objects
20025|       |        if (JSON_HEDLEY_UNLIKELY(not first.m_object->is_object()
20026|       |                                 or not last.m_object->is_object()))
20027|       |        {
20028|       |            JSON_THROW(invalid_iterator::create(202, "iterators first and last must point to objects"));
20029|       |        }
20030|       |
20031|       |        for (auto it = first; it != last; ++it)
20032|       |        {
20033|       |            m_value.object->operator[](it.key()) = it.value();
20034|       |        }
20035|       |    }
20036|       |
20037|       |    /*!
20038|       |    @brief exchanges the values
20039|       |
20040|       |    Exchanges the contents of the JSON value with those of @a other. Does not
20041|       |    invoke any move, copy, or swap operations on individual elements. All
20042|       |    iterators and references remain valid. The past-the-end iterator is
20043|       |    invalidated.
20044|       |
20045|       |    @param[in,out] other JSON value to exchange the contents with
20046|       |
20047|       |    @complexity Constant.
20048|       |
20049|       |    @liveexample{The example below shows how JSON values can be swapped with
20050|       |    `swap()`.,swap__reference}
20051|       |
20052|       |    @since version 1.0.0
20053|       |    */
20054|       |    void swap(reference other) noexcept (
20055|       |        std::is_nothrow_move_constructible<value_t>::value and
20056|       |        std::is_nothrow_move_assignable<value_t>::value and
20057|       |        std::is_nothrow_move_constructible<json_value>::value and
20058|       |        std::is_nothrow_move_assignable<json_value>::value
20059|       |    )
20060|      0|    {
20061|      0|        std::swap(m_type, other.m_type);
20062|      0|        std::swap(m_value, other.m_value);
20063|      0|        assert_invariant();
20064|      0|    }
20065|       |
20066|       |    /*!
20067|       |    @brief exchanges the values
20068|       |
20069|       |    Exchanges the contents of a JSON array with those of @a other. Does not
20070|       |    invoke any move, copy, or swap operations on individual elements. All
20071|       |    iterators and references remain valid. The past-the-end iterator is
20072|       |    invalidated.
20073|       |
20074|       |    @param[in,out] other array to exchange the contents with
20075|       |
20076|       |    @throw type_error.310 when JSON value is not an array; example: `"cannot
20077|       |    use swap() with string"`
20078|       |
20079|       |    @complexity Constant.
20080|       |
20081|       |    @liveexample{The example below shows how arrays can be swapped with
20082|       |    `swap()`.,swap__array_t}
20083|       |
20084|       |    @since version 1.0.0
20085|       |    */
20086|       |    void swap(array_t& other)
20087|       |    {
20088|       |        // swap only works for arrays
20089|       |        if (JSON_HEDLEY_LIKELY(is_array()))
20090|       |        {
20091|       |            std::swap(*(m_value.array), other);
20092|       |        }
20093|       |        else
20094|       |        {
20095|       |            JSON_THROW(type_error::create(310, "cannot use swap() with " + std::string(type_name())));
20096|       |        }
20097|       |    }
20098|       |
20099|       |    /*!
20100|       |    @brief exchanges the values
20101|       |
20102|       |    Exchanges the contents of a JSON object with those of @a other. Does not
20103|       |    invoke any move, copy, or swap operations on individual elements. All
20104|       |    iterators and references remain valid. The past-the-end iterator is
20105|       |    invalidated.
20106|       |
20107|       |    @param[in,out] other object to exchange the contents with
20108|       |
20109|       |    @throw type_error.310 when JSON value is not an object; example:
20110|       |    `"cannot use swap() with string"`
20111|       |
20112|       |    @complexity Constant.
20113|       |
20114|       |    @liveexample{The example below shows how objects can be swapped with
20115|       |    `swap()`.,swap__object_t}
20116|       |
20117|       |    @since version 1.0.0
20118|       |    */
20119|       |    void swap(object_t& other)
20120|       |    {
20121|       |        // swap only works for objects
20122|       |        if (JSON_HEDLEY_LIKELY(is_object()))
20123|       |        {
20124|       |            std::swap(*(m_value.object), other);
20125|       |        }
20126|       |        else
20127|       |        {
20128|       |            JSON_THROW(type_error::create(310, "cannot use swap() with " + std::string(type_name())));
20129|       |        }
20130|       |    }
20131|       |
20132|       |    /*!
20133|       |    @brief exchanges the values
20134|       |
20135|       |    Exchanges the contents of a JSON string with those of @a other. Does not
20136|       |    invoke any move, copy, or swap operations on individual elements. All
20137|       |    iterators and references remain valid. The past-the-end iterator is
20138|       |    invalidated.
20139|       |
20140|       |    @param[in,out] other string to exchange the contents with
20141|       |
20142|       |    @throw type_error.310 when JSON value is not a string; example: `"cannot
20143|       |    use swap() with boolean"`
20144|       |
20145|       |    @complexity Constant.
20146|       |
20147|       |    @liveexample{The example below shows how strings can be swapped with
20148|       |    `swap()`.,swap__string_t}
20149|       |
20150|       |    @since version 1.0.0
20151|       |    */
20152|       |    void swap(string_t& other)
20153|       |    {
20154|       |        // swap only works for strings
20155|       |        if (JSON_HEDLEY_LIKELY(is_string()))
20156|       |        {
20157|       |            std::swap(*(m_value.string), other);
20158|       |        }
20159|       |        else
20160|       |        {
20161|       |            JSON_THROW(type_error::create(310, "cannot use swap() with " + std::string(type_name())));
20162|       |        }
20163|       |    }
20164|       |
20165|       |    /// @}
20166|       |
20167|       |  public:
20168|       |    //////////////////////////////////////////
20169|       |    // lexicographical comparison operators //
20170|       |    //////////////////////////////////////////
20171|       |
20172|       |    /// @name lexicographical comparison operators
20173|       |    /// @{
20174|       |
20175|       |    /*!
20176|       |    @brief comparison: equal
20177|       |
20178|       |    Compares two JSON values for equality according to the following rules:
20179|       |    - Two JSON values are equal if (1) they are from the same type and (2)
20180|       |      their stored values are the same according to their respective
20181|       |      `operator==`.
20182|       |    - Integer and floating-point numbers are automatically converted before
20183|       |      comparison. Note than two NaN values are always treated as unequal.
20184|       |    - Two JSON null values are equal.
20185|       |
20186|       |    @note Floating-point inside JSON values numbers are compared with
20187|       |    `json::number_float_t::operator==` which is `double::operator==` by
20188|       |    default. To compare floating-point while respecting an epsilon, an alternative
20189|       |    [comparison function](https://github.com/mariokonrad/marnav/blob/master/src/marnav/math/floatingpoint.hpp#L34-#L39)
20190|       |    could be used, for instance
20191|       |    @code {.cpp}
20192|       |    template<typename T, typename = typename std::enable_if<std::is_floating_point<T>::value, T>::type>
20193|       |    inline bool is_same(T a, T b, T epsilon = std::numeric_limits<T>::epsilon()) noexcept
20194|       |    {
20195|       |        return std::abs(a - b) <= epsilon;
20196|       |    }
20197|       |    @endcode
20198|       |
20199|       |    @note NaN values never compare equal to themselves or to other NaN values.
20200|       |
20201|       |    @param[in] lhs  first JSON value to consider
20202|       |    @param[in] rhs  second JSON value to consider
20203|       |    @return whether the values @a lhs and @a rhs are equal
20204|       |
20205|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
20206|       |
20207|       |    @complexity Linear.
20208|       |
20209|       |    @liveexample{The example demonstrates comparing several JSON
20210|       |    types.,operator__equal}
20211|       |
20212|       |    @since version 1.0.0
20213|       |    */
20214|       |    friend bool operator==(const_reference lhs, const_reference rhs) noexcept
20215|     20|    {
20216|     20|        const auto lhs_type = lhs.type();
20217|     20|        const auto rhs_type = rhs.type();
20218|       |
20219|     20|        if (lhs_type == rhs_type)
20220|     20|        {
20221|     20|            switch (lhs_type)
20222|     20|            {
20223|      0|                case value_t::array:
20224|      0|                    return *lhs.m_value.array == *rhs.m_value.array;
20225|       |
20226|      0|                case value_t::object:
20227|      0|                    return *lhs.m_value.object == *rhs.m_value.object;
20228|       |
20229|      0|                case value_t::null:
20230|      0|                    return true;
20231|       |
20232|     20|                case value_t::string:
20233|     20|                    return *lhs.m_value.string == *rhs.m_value.string;
20234|       |
20235|      0|                case value_t::boolean:
20236|      0|                    return lhs.m_value.boolean == rhs.m_value.boolean;
20237|       |
20238|      0|                case value_t::number_integer:
20239|      0|                    return lhs.m_value.number_integer == rhs.m_value.number_integer;
20240|       |
20241|      0|                case value_t::number_unsigned:
20242|      0|                    return lhs.m_value.number_unsigned == rhs.m_value.number_unsigned;
20243|       |
20244|      0|                case value_t::number_float:
20245|      0|                    return lhs.m_value.number_float == rhs.m_value.number_float;
20246|       |
20247|      0|                default:
20248|      0|                    return false;
20249|     20|            }
20250|     20|        }
20251|      0|        else if (lhs_type == value_t::number_integer and rhs_type == value_t::number_float)
20252|      0|        {
20253|      0|            return static_cast<number_float_t>(lhs.m_value.number_integer) == rhs.m_value.number_float;
20254|      0|        }
20255|      0|        else if (lhs_type == value_t::number_float and rhs_type == value_t::number_integer)
20256|      0|        {
20257|      0|            return lhs.m_value.number_float == static_cast<number_float_t>(rhs.m_value.number_integer);
20258|      0|        }
20259|      0|        else if (lhs_type == value_t::number_unsigned and rhs_type == value_t::number_float)
20260|      0|        {
20261|      0|            return static_cast<number_float_t>(lhs.m_value.number_unsigned) == rhs.m_value.number_float;
20262|      0|        }
20263|      0|        else if (lhs_type == value_t::number_float and rhs_type == value_t::number_unsigned)
20264|      0|        {
20265|      0|            return lhs.m_value.number_float == static_cast<number_float_t>(rhs.m_value.number_unsigned);
20266|      0|        }
20267|      0|        else if (lhs_type == value_t::number_unsigned and rhs_type == value_t::number_integer)
20268|      0|        {
20269|      0|            return static_cast<number_integer_t>(lhs.m_value.number_unsigned) == rhs.m_value.number_integer;
20270|      0|        }
20271|      0|        else if (lhs_type == value_t::number_integer and rhs_type == value_t::number_unsigned)
20272|      0|        {
20273|      0|            return lhs.m_value.number_integer == static_cast<number_integer_t>(rhs.m_value.number_unsigned);
20274|      0|        }
20275|       |
20276|      0|        return false;
20277|     20|    }
20278|       |
20279|       |    /*!
20280|       |    @brief comparison: equal
20281|       |    @copydoc operator==(const_reference, const_reference)
20282|       |    */
20283|       |    template<typename ScalarType, typename std::enable_if<
20284|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20285|       |    friend bool operator==(const_reference lhs, const ScalarType rhs) noexcept
20286|     20|    {
20287|     20|        return lhs == basic_json(rhs);
20288|     20|    }
20289|       |
20290|       |    /*!
20291|       |    @brief comparison: equal
20292|       |    @copydoc operator==(const_reference, const_reference)
20293|       |    */
20294|       |    template<typename ScalarType, typename std::enable_if<
20295|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20296|       |    friend bool operator==(const ScalarType lhs, const_reference rhs) noexcept
20297|       |    {
20298|       |        return basic_json(lhs) == rhs;
20299|       |    }
20300|       |
20301|       |    /*!
20302|       |    @brief comparison: not equal
20303|       |
20304|       |    Compares two JSON values for inequality by calculating `not (lhs == rhs)`.
20305|       |
20306|       |    @param[in] lhs  first JSON value to consider
20307|       |    @param[in] rhs  second JSON value to consider
20308|       |    @return whether the values @a lhs and @a rhs are not equal
20309|       |
20310|       |    @complexity Linear.
20311|       |
20312|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
20313|       |
20314|       |    @liveexample{The example demonstrates comparing several JSON
20315|       |    types.,operator__notequal}
20316|       |
20317|       |    @since version 1.0.0
20318|       |    */
20319|       |    friend bool operator!=(const_reference lhs, const_reference rhs) noexcept
20320|       |    {
20321|       |        return not (lhs == rhs);
20322|       |    }
20323|       |
20324|       |    /*!
20325|       |    @brief comparison: not equal
20326|       |    @copydoc operator!=(const_reference, const_reference)
20327|       |    */
20328|       |    template<typename ScalarType, typename std::enable_if<
20329|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20330|       |    friend bool operator!=(const_reference lhs, const ScalarType rhs) noexcept
20331|       |    {
20332|       |        return lhs != basic_json(rhs);
20333|       |    }
20334|       |
20335|       |    /*!
20336|       |    @brief comparison: not equal
20337|       |    @copydoc operator!=(const_reference, const_reference)
20338|       |    */
20339|       |    template<typename ScalarType, typename std::enable_if<
20340|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20341|       |    friend bool operator!=(const ScalarType lhs, const_reference rhs) noexcept
20342|       |    {
20343|       |        return basic_json(lhs) != rhs;
20344|       |    }
20345|       |
20346|       |    /*!
20347|       |    @brief comparison: less than
20348|       |
20349|       |    Compares whether one JSON value @a lhs is less than another JSON value @a
20350|       |    rhs according to the following rules:
20351|       |    - If @a lhs and @a rhs have the same type, the values are compared using
20352|       |      the default `<` operator.
20353|       |    - Integer and floating-point numbers are automatically converted before
20354|       |      comparison
20355|       |    - In case @a lhs and @a rhs have different types, the values are ignored
20356|       |      and the order of the types is considered, see
20357|       |      @ref operator<(const value_t, const value_t).
20358|       |
20359|       |    @param[in] lhs  first JSON value to consider
20360|       |    @param[in] rhs  second JSON value to consider
20361|       |    @return whether @a lhs is less than @a rhs
20362|       |
20363|       |    @complexity Linear.
20364|       |
20365|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
20366|       |
20367|       |    @liveexample{The example demonstrates comparing several JSON
20368|       |    types.,operator__less}
20369|       |
20370|       |    @since version 1.0.0
20371|       |    */
20372|       |    friend bool operator<(const_reference lhs, const_reference rhs) noexcept
20373|       |    {
20374|       |        const auto lhs_type = lhs.type();
20375|       |        const auto rhs_type = rhs.type();
20376|       |
20377|       |        if (lhs_type == rhs_type)
20378|       |        {
20379|       |            switch (lhs_type)
20380|       |            {
20381|       |                case value_t::array:
20382|       |                    // note parentheses are necessary, see
20383|       |                    // https://github.com/nlohmann/json/issues/1530
20384|       |                    return (*lhs.m_value.array) < (*rhs.m_value.array);
20385|       |
20386|       |                case value_t::object:
20387|       |                    return (*lhs.m_value.object) < (*rhs.m_value.object);
20388|       |
20389|       |                case value_t::null:
20390|       |                    return false;
20391|       |
20392|       |                case value_t::string:
20393|       |                    return (*lhs.m_value.string) < (*rhs.m_value.string);
20394|       |
20395|       |                case value_t::boolean:
20396|       |                    return (lhs.m_value.boolean) < (rhs.m_value.boolean);
20397|       |
20398|       |                case value_t::number_integer:
20399|       |                    return (lhs.m_value.number_integer) < (rhs.m_value.number_integer);
20400|       |
20401|       |                case value_t::number_unsigned:
20402|       |                    return (lhs.m_value.number_unsigned) < (rhs.m_value.number_unsigned);
20403|       |
20404|       |                case value_t::number_float:
20405|       |                    return (lhs.m_value.number_float) < (rhs.m_value.number_float);
20406|       |
20407|       |                default:
20408|       |                    return false;
20409|       |            }
20410|       |        }
20411|       |        else if (lhs_type == value_t::number_integer and rhs_type == value_t::number_float)
20412|       |        {
20413|       |            return static_cast<number_float_t>(lhs.m_value.number_integer) < rhs.m_value.number_float;
20414|       |        }
20415|       |        else if (lhs_type == value_t::number_float and rhs_type == value_t::number_integer)
20416|       |        {
20417|       |            return lhs.m_value.number_float < static_cast<number_float_t>(rhs.m_value.number_integer);
20418|       |        }
20419|       |        else if (lhs_type == value_t::number_unsigned and rhs_type == value_t::number_float)
20420|       |        {
20421|       |            return static_cast<number_float_t>(lhs.m_value.number_unsigned) < rhs.m_value.number_float;
20422|       |        }
20423|       |        else if (lhs_type == value_t::number_float and rhs_type == value_t::number_unsigned)
20424|       |        {
20425|       |            return lhs.m_value.number_float < static_cast<number_float_t>(rhs.m_value.number_unsigned);
20426|       |        }
20427|       |        else if (lhs_type == value_t::number_integer and rhs_type == value_t::number_unsigned)
20428|       |        {
20429|       |            return lhs.m_value.number_integer < static_cast<number_integer_t>(rhs.m_value.number_unsigned);
20430|       |        }
20431|       |        else if (lhs_type == value_t::number_unsigned and rhs_type == value_t::number_integer)
20432|       |        {
20433|       |            return static_cast<number_integer_t>(lhs.m_value.number_unsigned) < rhs.m_value.number_integer;
20434|       |        }
20435|       |
20436|       |        // We only reach this line if we cannot compare values. In that case,
20437|       |        // we compare types. Note we have to call the operator explicitly,
20438|       |        // because MSVC has problems otherwise.
20439|       |        return operator<(lhs_type, rhs_type);
20440|       |    }
20441|       |
20442|       |    /*!
20443|       |    @brief comparison: less than
20444|       |    @copydoc operator<(const_reference, const_reference)
20445|       |    */
20446|       |    template<typename ScalarType, typename std::enable_if<
20447|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20448|       |    friend bool operator<(const_reference lhs, const ScalarType rhs) noexcept
20449|       |    {
20450|       |        return lhs < basic_json(rhs);
20451|       |    }
20452|       |
20453|       |    /*!
20454|       |    @brief comparison: less than
20455|       |    @copydoc operator<(const_reference, const_reference)
20456|       |    */
20457|       |    template<typename ScalarType, typename std::enable_if<
20458|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20459|       |    friend bool operator<(const ScalarType lhs, const_reference rhs) noexcept
20460|       |    {
20461|       |        return basic_json(lhs) < rhs;
20462|       |    }
20463|       |
20464|       |    /*!
20465|       |    @brief comparison: less than or equal
20466|       |
20467|       |    Compares whether one JSON value @a lhs is less than or equal to another
20468|       |    JSON value by calculating `not (rhs < lhs)`.
20469|       |
20470|       |    @param[in] lhs  first JSON value to consider
20471|       |    @param[in] rhs  second JSON value to consider
20472|       |    @return whether @a lhs is less than or equal to @a rhs
20473|       |
20474|       |    @complexity Linear.
20475|       |
20476|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
20477|       |
20478|       |    @liveexample{The example demonstrates comparing several JSON
20479|       |    types.,operator__greater}
20480|       |
20481|       |    @since version 1.0.0
20482|       |    */
20483|       |    friend bool operator<=(const_reference lhs, const_reference rhs) noexcept
20484|       |    {
20485|       |        return not (rhs < lhs);
20486|       |    }
20487|       |
20488|       |    /*!
20489|       |    @brief comparison: less than or equal
20490|       |    @copydoc operator<=(const_reference, const_reference)
20491|       |    */
20492|       |    template<typename ScalarType, typename std::enable_if<
20493|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20494|       |    friend bool operator<=(const_reference lhs, const ScalarType rhs) noexcept
20495|       |    {
20496|       |        return lhs <= basic_json(rhs);
20497|       |    }
20498|       |
20499|       |    /*!
20500|       |    @brief comparison: less than or equal
20501|       |    @copydoc operator<=(const_reference, const_reference)
20502|       |    */
20503|       |    template<typename ScalarType, typename std::enable_if<
20504|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20505|       |    friend bool operator<=(const ScalarType lhs, const_reference rhs) noexcept
20506|       |    {
20507|       |        return basic_json(lhs) <= rhs;
20508|       |    }
20509|       |
20510|       |    /*!
20511|       |    @brief comparison: greater than
20512|       |
20513|       |    Compares whether one JSON value @a lhs is greater than another
20514|       |    JSON value by calculating `not (lhs <= rhs)`.
20515|       |
20516|       |    @param[in] lhs  first JSON value to consider
20517|       |    @param[in] rhs  second JSON value to consider
20518|       |    @return whether @a lhs is greater than to @a rhs
20519|       |
20520|       |    @complexity Linear.
20521|       |
20522|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
20523|       |
20524|       |    @liveexample{The example demonstrates comparing several JSON
20525|       |    types.,operator__lessequal}
20526|       |
20527|       |    @since version 1.0.0
20528|       |    */
20529|       |    friend bool operator>(const_reference lhs, const_reference rhs) noexcept
20530|       |    {
20531|       |        return not (lhs <= rhs);
20532|       |    }
20533|       |
20534|       |    /*!
20535|       |    @brief comparison: greater than
20536|       |    @copydoc operator>(const_reference, const_reference)
20537|       |    */
20538|       |    template<typename ScalarType, typename std::enable_if<
20539|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20540|       |    friend bool operator>(const_reference lhs, const ScalarType rhs) noexcept
20541|       |    {
20542|       |        return lhs > basic_json(rhs);
20543|       |    }
20544|       |
20545|       |    /*!
20546|       |    @brief comparison: greater than
20547|       |    @copydoc operator>(const_reference, const_reference)
20548|       |    */
20549|       |    template<typename ScalarType, typename std::enable_if<
20550|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20551|       |    friend bool operator>(const ScalarType lhs, const_reference rhs) noexcept
20552|       |    {
20553|       |        return basic_json(lhs) > rhs;
20554|       |    }
20555|       |
20556|       |    /*!
20557|       |    @brief comparison: greater than or equal
20558|       |
20559|       |    Compares whether one JSON value @a lhs is greater than or equal to another
20560|       |    JSON value by calculating `not (lhs < rhs)`.
20561|       |
20562|       |    @param[in] lhs  first JSON value to consider
20563|       |    @param[in] rhs  second JSON value to consider
20564|       |    @return whether @a lhs is greater than or equal to @a rhs
20565|       |
20566|       |    @complexity Linear.
20567|       |
20568|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
20569|       |
20570|       |    @liveexample{The example demonstrates comparing several JSON
20571|       |    types.,operator__greaterequal}
20572|       |
20573|       |    @since version 1.0.0
20574|       |    */
20575|       |    friend bool operator>=(const_reference lhs, const_reference rhs) noexcept
20576|       |    {
20577|       |        return not (lhs < rhs);
20578|       |    }
20579|       |
20580|       |    /*!
20581|       |    @brief comparison: greater than or equal
20582|       |    @copydoc operator>=(const_reference, const_reference)
20583|       |    */
20584|       |    template<typename ScalarType, typename std::enable_if<
20585|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20586|       |    friend bool operator>=(const_reference lhs, const ScalarType rhs) noexcept
20587|       |    {
20588|       |        return lhs >= basic_json(rhs);
20589|       |    }
20590|       |
20591|       |    /*!
20592|       |    @brief comparison: greater than or equal
20593|       |    @copydoc operator>=(const_reference, const_reference)
20594|       |    */
20595|       |    template<typename ScalarType, typename std::enable_if<
20596|       |                 std::is_scalar<ScalarType>::value, int>::type = 0>
20597|       |    friend bool operator>=(const ScalarType lhs, const_reference rhs) noexcept
20598|       |    {
20599|       |        return basic_json(lhs) >= rhs;
20600|       |    }
20601|       |
20602|       |    /// @}
20603|       |
20604|       |    ///////////////////
20605|       |    // serialization //
20606|       |    ///////////////////
20607|       |
20608|       |    /// @name serialization
20609|       |    /// @{
20610|       |
20611|       |    /*!
20612|       |    @brief serialize to stream
20613|       |
20614|       |    Serialize the given JSON value @a j to the output stream @a o. The JSON
20615|       |    value will be serialized using the @ref dump member function.
20616|       |
20617|       |    - The indentation of the output can be controlled with the member variable
20618|       |      `width` of the output stream @a o. For instance, using the manipulator
20619|       |      `std::setw(4)` on @a o sets the indentation level to `4` and the
20620|       |      serialization result is the same as calling `dump(4)`.
20621|       |
20622|       |    - The indentation character can be controlled with the member variable
20623|       |      `fill` of the output stream @a o. For instance, the manipulator
20624|       |      `std::setfill('\\t')` sets indentation to use a tab character rather than
20625|       |      the default space character.
20626|       |
20627|       |    @param[in,out] o  stream to serialize to
20628|       |    @param[in] j  JSON value to serialize
20629|       |
20630|       |    @return the stream @a o
20631|       |
20632|       |    @throw type_error.316 if a string stored inside the JSON value is not
20633|       |                          UTF-8 encoded
20634|       |
20635|       |    @complexity Linear.
20636|       |
20637|       |    @liveexample{The example below shows the serialization with different
20638|       |    parameters to `width` to adjust the indentation level.,operator_serialize}
20639|       |
20640|       |    @since version 1.0.0; indentation character added in version 3.0.0
20641|       |    */
20642|       |    friend std::ostream& operator<<(std::ostream& o, const basic_json& j)
20643|     25|    {
20644|       |        // read width member and use it as indentation parameter if nonzero
20645|     25|        const bool pretty_print = o.width() > 0;
20646|     25|        const auto indentation = pretty_print ? o.width() : 0;
20647|       |
20648|       |        // reset width to 0 for subsequent calls to this stream
20649|     25|        o.width(0);
20650|       |
20651|       |        // do the actual serialization
20652|     25|        serializer s(detail::output_adapter<char>(o), o.fill());
20653|     25|        s.dump(j, pretty_print, false, static_cast<unsigned int>(indentation));
20654|     25|        return o;
20655|     25|    }
20656|       |
20657|       |    /*!
20658|       |    @brief serialize to stream
20659|       |    @deprecated This stream operator is deprecated and will be removed in
20660|       |                future 4.0.0 of the library. Please use
20661|       |                @ref operator<<(std::ostream&, const basic_json&)
20662|       |                instead; that is, replace calls like `j >> o;` with `o << j;`.
20663|       |    @since version 1.0.0; deprecated since version 3.0.0
20664|       |    */
20665|       |    JSON_HEDLEY_DEPRECATED(3.0.0)
20666|       |    friend std::ostream& operator>>(const basic_json& j, std::ostream& o)
20667|       |    {
20668|       |        return o << j;
20669|       |    }
20670|       |
20671|       |    /// @}
20672|       |
20673|       |
20674|       |    /////////////////////
20675|       |    // deserialization //
20676|       |    /////////////////////
20677|       |
20678|       |    /// @name deserialization
20679|       |    /// @{
20680|       |
20681|       |    /*!
20682|       |    @brief deserialize from a compatible input
20683|       |
20684|       |    This function reads from a compatible input. Examples are:
20685|       |    - an array of 1-byte values
20686|       |    - strings with character/literal type with size of 1 byte
20687|       |    - input streams
20688|       |    - container with contiguous storage of 1-byte values. Compatible container
20689|       |      types include `std::vector`, `std::string`, `std::array`,
20690|       |      `std::valarray`, and `std::initializer_list`. Furthermore, C-style
20691|       |      arrays can be used with `std::begin()`/`std::end()`. User-defined
20692|       |      containers can be used as long as they implement random-access iterators
20693|       |      and a contiguous storage.
20694|       |
20695|       |    @pre Each element of the container has a size of 1 byte. Violating this
20696|       |    precondition yields undefined behavior. **This precondition is enforced
20697|       |    with a static assertion.**
20698|       |
20699|       |    @pre The container storage is contiguous. Violating this precondition
20700|       |    yields undefined behavior. **This precondition is enforced with an
20701|       |    assertion.**
20702|       |
20703|       |    @warning There is no way to enforce all preconditions at compile-time. If
20704|       |             the function is called with a noncompliant container and with
20705|       |             assertions switched off, the behavior is undefined and will most
20706|       |             likely yield segmentation violation.
20707|       |
20708|       |    @param[in] i  input to read from
20709|       |    @param[in] cb  a parser callback function of type @ref parser_callback_t
20710|       |    which is used to control the deserialization by filtering unwanted values
20711|       |    (optional)
20712|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
20713|       |    parse error (optional, true by default)
20714|       |
20715|       |    @return deserialized JSON value; in case of a parse error and
20716|       |            @a allow_exceptions set to `false`, the return value will be
20717|       |            value_t::discarded.
20718|       |
20719|       |    @throw parse_error.101 if a parse error occurs; example: `""unexpected end
20720|       |    of input; expected string literal""`
20721|       |    @throw parse_error.102 if to_unicode fails or surrogate error
20722|       |    @throw parse_error.103 if to_unicode fails
20723|       |
20724|       |    @complexity Linear in the length of the input. The parser is a predictive
20725|       |    LL(1) parser. The complexity can be higher if the parser callback function
20726|       |    @a cb has a super-linear complexity.
20727|       |
20728|       |    @note A UTF-8 byte order mark is silently ignored.
20729|       |
20730|       |    @liveexample{The example below demonstrates the `parse()` function reading
20731|       |    from an array.,parse__array__parser_callback_t}
20732|       |
20733|       |    @liveexample{The example below demonstrates the `parse()` function with
20734|       |    and without callback function.,parse__string__parser_callback_t}
20735|       |
20736|       |    @liveexample{The example below demonstrates the `parse()` function with
20737|       |    and without callback function.,parse__istream__parser_callback_t}
20738|       |
20739|       |    @liveexample{The example below demonstrates the `parse()` function reading
20740|       |    from a contiguous container.,parse__contiguouscontainer__parser_callback_t}
20741|       |
20742|       |    @since version 2.0.3 (contiguous containers)
20743|       |    */
20744|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
20745|       |    static basic_json parse(detail::input_adapter&& i,
20746|       |                            const parser_callback_t cb = nullptr,
20747|       |                            const bool allow_exceptions = true)
20748|    414|    {
20749|    414|        basic_json result;
20750|    414|        parser(i, cb, allow_exceptions).parse(true, result);
20751|    414|        return result;
20752|    414|    }
20753|       |
20754|       |    static bool accept(detail::input_adapter&& i)
20755|       |    {
20756|       |        return parser(i).accept(true);
20757|       |    }
20758|       |
20759|       |    /*!
20760|       |    @brief generate SAX events
20761|       |
20762|       |    The SAX event lister must follow the interface of @ref json_sax.
20763|       |
20764|       |    This function reads from a compatible input. Examples are:
20765|       |    - an array of 1-byte values
20766|       |    - strings with character/literal type with size of 1 byte
20767|       |    - input streams
20768|       |    - container with contiguous storage of 1-byte values. Compatible container
20769|       |      types include `std::vector`, `std::string`, `std::array`,
20770|       |      `std::valarray`, and `std::initializer_list`. Furthermore, C-style
20771|       |      arrays can be used with `std::begin()`/`std::end()`. User-defined
20772|       |      containers can be used as long as they implement random-access iterators
20773|       |      and a contiguous storage.
20774|       |
20775|       |    @pre Each element of the container has a size of 1 byte. Violating this
20776|       |    precondition yields undefined behavior. **This precondition is enforced
20777|       |    with a static assertion.**
20778|       |
20779|       |    @pre The container storage is contiguous. Violating this precondition
20780|       |    yields undefined behavior. **This precondition is enforced with an
20781|       |    assertion.**
20782|       |
20783|       |    @warning There is no way to enforce all preconditions at compile-time. If
20784|       |             the function is called with a noncompliant container and with
20785|       |             assertions switched off, the behavior is undefined and will most
20786|       |             likely yield segmentation violation.
20787|       |
20788|       |    @param[in] i  input to read from
20789|       |    @param[in,out] sax  SAX event listener
20790|       |    @param[in] format  the format to parse (JSON, CBOR, MessagePack, or UBJSON)
20791|       |    @param[in] strict  whether the input has to be consumed completely
20792|       |
20793|       |    @return return value of the last processed SAX event
20794|       |
20795|       |    @throw parse_error.101 if a parse error occurs; example: `""unexpected end
20796|       |    of input; expected string literal""`
20797|       |    @throw parse_error.102 if to_unicode fails or surrogate error
20798|       |    @throw parse_error.103 if to_unicode fails
20799|       |
20800|       |    @complexity Linear in the length of the input. The parser is a predictive
20801|       |    LL(1) parser. The complexity can be higher if the SAX consumer @a sax has
20802|       |    a super-linear complexity.
20803|       |
20804|       |    @note A UTF-8 byte order mark is silently ignored.
20805|       |
20806|       |    @liveexample{The example below demonstrates the `sax_parse()` function
20807|       |    reading from string and processing the events with a user-defined SAX
20808|       |    event consumer.,sax_parse}
20809|       |
20810|       |    @since version 3.2.0
20811|       |    */
20812|       |    template <typename SAX>
20813|       |    JSON_HEDLEY_NON_NULL(2)
20814|       |    static bool sax_parse(detail::input_adapter&& i, SAX* sax,
20815|       |                          input_format_t format = input_format_t::json,
20816|       |                          const bool strict = true)
20817|       |    {
20818|       |        assert(sax);
20819|       |        return format == input_format_t::json
20820|       |               ? parser(std::move(i)).sax_parse(sax, strict)
20821|       |               : detail::binary_reader<basic_json, SAX>(std::move(i)).sax_parse(format, sax, strict);
20822|       |    }
20823|       |
20824|       |    /*!
20825|       |    @brief deserialize from an iterator range with contiguous storage
20826|       |
20827|       |    This function reads from an iterator range of a container with contiguous
20828|       |    storage of 1-byte values. Compatible container types include
20829|       |    `std::vector`, `std::string`, `std::array`, `std::valarray`, and
20830|       |    `std::initializer_list`. Furthermore, C-style arrays can be used with
20831|       |    `std::begin()`/`std::end()`. User-defined containers can be used as long
20832|       |    as they implement random-access iterators and a contiguous storage.
20833|       |
20834|       |    @pre The iterator range is contiguous. Violating this precondition yields
20835|       |    undefined behavior. **This precondition is enforced with an assertion.**
20836|       |    @pre Each element in the range has a size of 1 byte. Violating this
20837|       |    precondition yields undefined behavior. **This precondition is enforced
20838|       |    with a static assertion.**
20839|       |
20840|       |    @warning There is no way to enforce all preconditions at compile-time. If
20841|       |             the function is called with noncompliant iterators and with
20842|       |             assertions switched off, the behavior is undefined and will most
20843|       |             likely yield segmentation violation.
20844|       |
20845|       |    @tparam IteratorType iterator of container with contiguous storage
20846|       |    @param[in] first  begin of the range to parse (included)
20847|       |    @param[in] last  end of the range to parse (excluded)
20848|       |    @param[in] cb  a parser callback function of type @ref parser_callback_t
20849|       |    which is used to control the deserialization by filtering unwanted values
20850|       |    (optional)
20851|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
20852|       |    parse error (optional, true by default)
20853|       |
20854|       |    @return deserialized JSON value; in case of a parse error and
20855|       |            @a allow_exceptions set to `false`, the return value will be
20856|       |            value_t::discarded.
20857|       |
20858|       |    @throw parse_error.101 in case of an unexpected token
20859|       |    @throw parse_error.102 if to_unicode fails or surrogate error
20860|       |    @throw parse_error.103 if to_unicode fails
20861|       |
20862|       |    @complexity Linear in the length of the input. The parser is a predictive
20863|       |    LL(1) parser. The complexity can be higher if the parser callback function
20864|       |    @a cb has a super-linear complexity.
20865|       |
20866|       |    @note A UTF-8 byte order mark is silently ignored.
20867|       |
20868|       |    @liveexample{The example below demonstrates the `parse()` function reading
20869|       |    from an iterator range.,parse__iteratortype__parser_callback_t}
20870|       |
20871|       |    @since version 2.0.3
20872|       |    */
20873|       |    template<class IteratorType, typename std::enable_if<
20874|       |                 std::is_base_of<
20875|       |                     std::random_access_iterator_tag,
20876|       |                     typename std::iterator_traits<IteratorType>::iterator_category>::value, int>::type = 0>
20877|       |    static basic_json parse(IteratorType first, IteratorType last,
20878|       |                            const parser_callback_t cb = nullptr,
20879|       |                            const bool allow_exceptions = true)
20880|      0|    {
20881|      0|        basic_json result;
20882|      0|        parser(detail::input_adapter(first, last), cb, allow_exceptions).parse(true, result);
20883|      0|        return result;
20884|      0|    }
20885|       |
20886|       |    template<class IteratorType, typename std::enable_if<
20887|       |                 std::is_base_of<
20888|       |                     std::random_access_iterator_tag,
20889|       |                     typename std::iterator_traits<IteratorType>::iterator_category>::value, int>::type = 0>
20890|       |    static bool accept(IteratorType first, IteratorType last)
20891|       |    {
20892|       |        return parser(detail::input_adapter(first, last)).accept(true);
20893|       |    }
20894|       |
20895|       |    template<class IteratorType, class SAX, typename std::enable_if<
20896|       |                 std::is_base_of<
20897|       |                     std::random_access_iterator_tag,
20898|       |                     typename std::iterator_traits<IteratorType>::iterator_category>::value, int>::type = 0>
20899|       |    JSON_HEDLEY_NON_NULL(3)
20900|       |    static bool sax_parse(IteratorType first, IteratorType last, SAX* sax)
20901|       |    {
20902|       |        return parser(detail::input_adapter(first, last)).sax_parse(sax);
20903|       |    }
20904|       |
20905|       |    /*!
20906|       |    @brief deserialize from stream
20907|       |    @deprecated This stream operator is deprecated and will be removed in
20908|       |                version 4.0.0 of the library. Please use
20909|       |                @ref operator>>(std::istream&, basic_json&)
20910|       |                instead; that is, replace calls like `j << i;` with `i >> j;`.
20911|       |    @since version 1.0.0; deprecated since version 3.0.0
20912|       |    */
20913|       |    JSON_HEDLEY_DEPRECATED(3.0.0)
20914|       |    friend std::istream& operator<<(basic_json& j, std::istream& i)
20915|       |    {
20916|       |        return operator>>(i, j);
20917|       |    }
20918|       |
20919|       |    /*!
20920|       |    @brief deserialize from stream
20921|       |
20922|       |    Deserializes an input stream to a JSON value.
20923|       |
20924|       |    @param[in,out] i  input stream to read a serialized JSON value from
20925|       |    @param[in,out] j  JSON value to write the deserialized input to
20926|       |
20927|       |    @throw parse_error.101 in case of an unexpected token
20928|       |    @throw parse_error.102 if to_unicode fails or surrogate error
20929|       |    @throw parse_error.103 if to_unicode fails
20930|       |
20931|       |    @complexity Linear in the length of the input. The parser is a predictive
20932|       |    LL(1) parser.
20933|       |
20934|       |    @note A UTF-8 byte order mark is silently ignored.
20935|       |
20936|       |    @liveexample{The example below shows how a JSON value is constructed by
20937|       |    reading a serialization from a stream.,operator_deserialize}
20938|       |
20939|       |    @sa parse(std::istream&, const parser_callback_t) for a variant with a
20940|       |    parser callback function to filter values while parsing
20941|       |
20942|       |    @since version 1.0.0
20943|       |    */
20944|       |    friend std::istream& operator>>(std::istream& i, basic_json& j)
20945|    231|    {
20946|    231|        parser(detail::input_adapter(i)).parse(false, j);
20947|    231|        return i;
20948|    231|    }
20949|       |
20950|       |    /// @}
20951|       |
20952|       |    ///////////////////////////
20953|       |    // convenience functions //
20954|       |    ///////////////////////////
20955|       |
20956|       |    /*!
20957|       |    @brief return the type as string
20958|       |
20959|       |    Returns the type name as string to be used in error messages - usually to
20960|       |    indicate that a function was called on a wrong JSON type.
20961|       |
20962|       |    @return a string representation of a the @a m_type member:
20963|       |            Value type  | return value
20964|       |            ----------- | -------------
20965|       |            null        | `"null"`
20966|       |            boolean     | `"boolean"`
20967|       |            string      | `"string"`
20968|       |            number      | `"number"` (for all number types)
20969|       |            object      | `"object"`
20970|       |            array       | `"array"`
20971|       |            discarded   | `"discarded"`
20972|       |
20973|       |    @exceptionsafety No-throw guarantee: this function never throws exceptions.
20974|       |
20975|       |    @complexity Constant.
20976|       |
20977|       |    @liveexample{The following code exemplifies `type_name()` for all JSON
20978|       |    types.,type_name}
20979|       |
20980|       |    @sa @ref type() -- return the type of the JSON value
20981|       |    @sa @ref operator value_t() -- return the type of the JSON value (implicit)
20982|       |
20983|       |    @since version 1.0.0, public since 2.1.0, `const char*` and `noexcept`
20984|       |    since 3.0.0
20985|       |    */
20986|       |    JSON_HEDLEY_RETURNS_NON_NULL
20987|       |    const char* type_name() const noexcept
20988|      1|    {
20989|      1|        {
20990|      1|            switch (m_type)
20991|      1|            {
20992|      1|                case value_t::null:
20993|      1|                    return "null";
20994|      0|                case value_t::object:
20995|      0|                    return "object";
20996|      0|                case value_t::array:
20997|      0|                    return "array";
20998|      0|                case value_t::string:
20999|      0|                    return "string";
21000|      0|                case value_t::boolean:
21001|      0|                    return "boolean";
21002|      0|                case value_t::discarded:
21003|      0|                    return "discarded";
21004|      0|                default:
21005|      0|                    return "number";
21006|      1|            }
21007|      1|        }
21008|      1|    }
21009|       |
21010|       |
21011|       |  private:
21012|       |    //////////////////////
21013|       |    // member variables //
21014|       |    //////////////////////
21015|       |
21016|       |    /// the type of the current element
21017|       |    value_t m_type = value_t::null;
21018|       |
21019|       |    /// the value of the current element
21020|       |    json_value m_value = {};
21021|       |
21022|       |    //////////////////////////////////////////
21023|       |    // binary serialization/deserialization //
21024|       |    //////////////////////////////////////////
21025|       |
21026|       |    /// @name binary serialization/deserialization support
21027|       |    /// @{
21028|       |
21029|       |  public:
21030|       |    /*!
21031|       |    @brief create a CBOR serialization of a given JSON value
21032|       |
21033|       |    Serializes a given JSON value @a j to a byte vector using the CBOR (Concise
21034|       |    Binary Object Representation) serialization format. CBOR is a binary
21035|       |    serialization format which aims to be more compact than JSON itself, yet
21036|       |    more efficient to parse.
21037|       |
21038|       |    The library uses the following mapping from JSON values types to
21039|       |    CBOR types according to the CBOR specification (RFC 7049):
21040|       |
21041|       |    JSON value type | value/range                                | CBOR type                          | first byte
21042|       |    --------------- | ------------------------------------------ | ---------------------------------- | ---------------
21043|       |    null            | `null`                                     | Null                               | 0xF6
21044|       |    boolean         | `true`                                     | True                               | 0xF5
21045|       |    boolean         | `false`                                    | False                              | 0xF4
21046|       |    number_integer  | -9223372036854775808..-2147483649          | Negative integer (8 bytes follow)  | 0x3B
21047|       |    number_integer  | -2147483648..-32769                        | Negative integer (4 bytes follow)  | 0x3A
21048|       |    number_integer  | -32768..-129                               | Negative integer (2 bytes follow)  | 0x39
21049|       |    number_integer  | -128..-25                                  | Negative integer (1 byte follow)   | 0x38
21050|       |    number_integer  | -24..-1                                    | Negative integer                   | 0x20..0x37
21051|       |    number_integer  | 0..23                                      | Integer                            | 0x00..0x17
21052|       |    number_integer  | 24..255                                    | Unsigned integer (1 byte follow)   | 0x18
21053|       |    number_integer  | 256..65535                                 | Unsigned integer (2 bytes follow)  | 0x19
21054|       |    number_integer  | 65536..4294967295                          | Unsigned integer (4 bytes follow)  | 0x1A
21055|       |    number_integer  | 4294967296..18446744073709551615           | Unsigned integer (8 bytes follow)  | 0x1B
21056|       |    number_unsigned | 0..23                                      | Integer                            | 0x00..0x17
21057|       |    number_unsigned | 24..255                                    | Unsigned integer (1 byte follow)   | 0x18
21058|       |    number_unsigned | 256..65535                                 | Unsigned integer (2 bytes follow)  | 0x19
21059|       |    number_unsigned | 65536..4294967295                          | Unsigned integer (4 bytes follow)  | 0x1A
21060|       |    number_unsigned | 4294967296..18446744073709551615           | Unsigned integer (8 bytes follow)  | 0x1B
21061|       |    number_float    | *any value*                                | Double-Precision Float             | 0xFB
21062|       |    string          | *length*: 0..23                            | UTF-8 string                       | 0x60..0x77
21063|       |    string          | *length*: 23..255                          | UTF-8 string (1 byte follow)       | 0x78
21064|       |    string          | *length*: 256..65535                       | UTF-8 string (2 bytes follow)      | 0x79
21065|       |    string          | *length*: 65536..4294967295                | UTF-8 string (4 bytes follow)      | 0x7A
21066|       |    string          | *length*: 4294967296..18446744073709551615 | UTF-8 string (8 bytes follow)      | 0x7B
21067|       |    array           | *size*: 0..23                              | array                              | 0x80..0x97
21068|       |    array           | *size*: 23..255                            | array (1 byte follow)              | 0x98
21069|       |    array           | *size*: 256..65535                         | array (2 bytes follow)             | 0x99
21070|       |    array           | *size*: 65536..4294967295                  | array (4 bytes follow)             | 0x9A
21071|       |    array           | *size*: 4294967296..18446744073709551615   | array (8 bytes follow)             | 0x9B
21072|       |    object          | *size*: 0..23                              | map                                | 0xA0..0xB7
21073|       |    object          | *size*: 23..255                            | map (1 byte follow)                | 0xB8
21074|       |    object          | *size*: 256..65535                         | map (2 bytes follow)               | 0xB9
21075|       |    object          | *size*: 65536..4294967295                  | map (4 bytes follow)               | 0xBA
21076|       |    object          | *size*: 4294967296..18446744073709551615   | map (8 bytes follow)               | 0xBB
21077|       |
21078|       |    @note The mapping is **complete** in the sense that any JSON value type
21079|       |          can be converted to a CBOR value.
21080|       |
21081|       |    @note If NaN or Infinity are stored inside a JSON number, they are
21082|       |          serialized properly. This behavior differs from the @ref dump()
21083|       |          function which serializes NaN or Infinity to `null`.
21084|       |
21085|       |    @note The following CBOR types are not used in the conversion:
21086|       |          - byte strings (0x40..0x5F)
21087|       |          - UTF-8 strings terminated by "break" (0x7F)
21088|       |          - arrays terminated by "break" (0x9F)
21089|       |          - maps terminated by "break" (0xBF)
21090|       |          - date/time (0xC0..0xC1)
21091|       |          - bignum (0xC2..0xC3)
21092|       |          - decimal fraction (0xC4)
21093|       |          - bigfloat (0xC5)
21094|       |          - tagged items (0xC6..0xD4, 0xD8..0xDB)
21095|       |          - expected conversions (0xD5..0xD7)
21096|       |          - simple values (0xE0..0xF3, 0xF8)
21097|       |          - undefined (0xF7)
21098|       |          - half and single-precision floats (0xF9-0xFA)
21099|       |          - break (0xFF)
21100|       |
21101|       |    @param[in] j  JSON value to serialize
21102|       |    @return MessagePack serialization as byte vector
21103|       |
21104|       |    @complexity Linear in the size of the JSON value @a j.
21105|       |
21106|       |    @liveexample{The example shows the serialization of a JSON value to a byte
21107|       |    vector in CBOR format.,to_cbor}
21108|       |
21109|       |    @sa http://cbor.io
21110|       |    @sa @ref from_cbor(detail::input_adapter&&, const bool, const bool) for the
21111|       |        analogous deserialization
21112|       |    @sa @ref to_msgpack(const basic_json&) for the related MessagePack format
21113|       |    @sa @ref to_ubjson(const basic_json&, const bool, const bool) for the
21114|       |             related UBJSON format
21115|       |
21116|       |    @since version 2.0.9
21117|       |    */
21118|       |    static std::vector<uint8_t> to_cbor(const basic_json& j)
21119|       |    {
21120|       |        std::vector<uint8_t> result;
21121|       |        to_cbor(j, result);
21122|       |        return result;
21123|       |    }
21124|       |
21125|       |    static void to_cbor(const basic_json& j, detail::output_adapter<uint8_t> o)
21126|       |    {
21127|       |        binary_writer<uint8_t>(o).write_cbor(j);
21128|       |    }
21129|       |
21130|       |    static void to_cbor(const basic_json& j, detail::output_adapter<char> o)
21131|       |    {
21132|       |        binary_writer<char>(o).write_cbor(j);
21133|       |    }
21134|       |
21135|       |    /*!
21136|       |    @brief create a MessagePack serialization of a given JSON value
21137|       |
21138|       |    Serializes a given JSON value @a j to a byte vector using the MessagePack
21139|       |    serialization format. MessagePack is a binary serialization format which
21140|       |    aims to be more compact than JSON itself, yet more efficient to parse.
21141|       |
21142|       |    The library uses the following mapping from JSON values types to
21143|       |    MessagePack types according to the MessagePack specification:
21144|       |
21145|       |    JSON value type | value/range                       | MessagePack type | first byte
21146|       |    --------------- | --------------------------------- | ---------------- | ----------
21147|       |    null            | `null`                            | nil              | 0xC0
21148|       |    boolean         | `true`                            | true             | 0xC3
21149|       |    boolean         | `false`                           | false            | 0xC2
21150|       |    number_integer  | -9223372036854775808..-2147483649 | int64            | 0xD3
21151|       |    number_integer  | -2147483648..-32769               | int32            | 0xD2
21152|       |    number_integer  | -32768..-129                      | int16            | 0xD1
21153|       |    number_integer  | -128..-33                         | int8             | 0xD0
21154|       |    number_integer  | -32..-1                           | negative fixint  | 0xE0..0xFF
21155|       |    number_integer  | 0..127                            | positive fixint  | 0x00..0x7F
21156|       |    number_integer  | 128..255                          | uint 8           | 0xCC
21157|       |    number_integer  | 256..65535                        | uint 16          | 0xCD
21158|       |    number_integer  | 65536..4294967295                 | uint 32          | 0xCE
21159|       |    number_integer  | 4294967296..18446744073709551615  | uint 64          | 0xCF
21160|       |    number_unsigned | 0..127                            | positive fixint  | 0x00..0x7F
21161|       |    number_unsigned | 128..255                          | uint 8           | 0xCC
21162|       |    number_unsigned | 256..65535                        | uint 16          | 0xCD
21163|       |    number_unsigned | 65536..4294967295                 | uint 32          | 0xCE
21164|       |    number_unsigned | 4294967296..18446744073709551615  | uint 64          | 0xCF
21165|       |    number_float    | *any value*                       | float 64         | 0xCB
21166|       |    string          | *length*: 0..31                   | fixstr           | 0xA0..0xBF
21167|       |    string          | *length*: 32..255                 | str 8            | 0xD9
21168|       |    string          | *length*: 256..65535              | str 16           | 0xDA
21169|       |    string          | *length*: 65536..4294967295       | str 32           | 0xDB
21170|       |    array           | *size*: 0..15                     | fixarray         | 0x90..0x9F
21171|       |    array           | *size*: 16..65535                 | array 16         | 0xDC
21172|       |    array           | *size*: 65536..4294967295         | array 32         | 0xDD
21173|       |    object          | *size*: 0..15                     | fix map          | 0x80..0x8F
21174|       |    object          | *size*: 16..65535                 | map 16           | 0xDE
21175|       |    object          | *size*: 65536..4294967295         | map 32           | 0xDF
21176|       |
21177|       |    @note The mapping is **complete** in the sense that any JSON value type
21178|       |          can be converted to a MessagePack value.
21179|       |
21180|       |    @note The following values can **not** be converted to a MessagePack value:
21181|       |          - strings with more than 4294967295 bytes
21182|       |          - arrays with more than 4294967295 elements
21183|       |          - objects with more than 4294967295 elements
21184|       |
21185|       |    @note The following MessagePack types are not used in the conversion:
21186|       |          - bin 8 - bin 32 (0xC4..0xC6)
21187|       |          - ext 8 - ext 32 (0xC7..0xC9)
21188|       |          - float 32 (0xCA)
21189|       |          - fixext 1 - fixext 16 (0xD4..0xD8)
21190|       |
21191|       |    @note Any MessagePack output created @ref to_msgpack can be successfully
21192|       |          parsed by @ref from_msgpack.
21193|       |
21194|       |    @note If NaN or Infinity are stored inside a JSON number, they are
21195|       |          serialized properly. This behavior differs from the @ref dump()
21196|       |          function which serializes NaN or Infinity to `null`.
21197|       |
21198|       |    @param[in] j  JSON value to serialize
21199|       |    @return MessagePack serialization as byte vector
21200|       |
21201|       |    @complexity Linear in the size of the JSON value @a j.
21202|       |
21203|       |    @liveexample{The example shows the serialization of a JSON value to a byte
21204|       |    vector in MessagePack format.,to_msgpack}
21205|       |
21206|       |    @sa http://msgpack.org
21207|       |    @sa @ref from_msgpack for the analogous deserialization
21208|       |    @sa @ref to_cbor(const basic_json& for the related CBOR format
21209|       |    @sa @ref to_ubjson(const basic_json&, const bool, const bool) for the
21210|       |             related UBJSON format
21211|       |
21212|       |    @since version 2.0.9
21213|       |    */
21214|       |    static std::vector<uint8_t> to_msgpack(const basic_json& j)
21215|       |    {
21216|       |        std::vector<uint8_t> result;
21217|       |        to_msgpack(j, result);
21218|       |        return result;
21219|       |    }
21220|       |
21221|       |    static void to_msgpack(const basic_json& j, detail::output_adapter<uint8_t> o)
21222|       |    {
21223|       |        binary_writer<uint8_t>(o).write_msgpack(j);
21224|       |    }
21225|       |
21226|       |    static void to_msgpack(const basic_json& j, detail::output_adapter<char> o)
21227|       |    {
21228|       |        binary_writer<char>(o).write_msgpack(j);
21229|       |    }
21230|       |
21231|       |    /*!
21232|       |    @brief create a UBJSON serialization of a given JSON value
21233|       |
21234|       |    Serializes a given JSON value @a j to a byte vector using the UBJSON
21235|       |    (Universal Binary JSON) serialization format. UBJSON aims to be more compact
21236|       |    than JSON itself, yet more efficient to parse.
21237|       |
21238|       |    The library uses the following mapping from JSON values types to
21239|       |    UBJSON types according to the UBJSON specification:
21240|       |
21241|       |    JSON value type | value/range                       | UBJSON type | marker
21242|       |    --------------- | --------------------------------- | ----------- | ------
21243|       |    null            | `null`                            | null        | `Z`
21244|       |    boolean         | `true`                            | true        | `T`
21245|       |    boolean         | `false`                           | false       | `F`
21246|       |    number_integer  | -9223372036854775808..-2147483649 | int64       | `L`
21247|       |    number_integer  | -2147483648..-32769               | int32       | `l`
21248|       |    number_integer  | -32768..-129                      | int16       | `I`
21249|       |    number_integer  | -128..127                         | int8        | `i`
21250|       |    number_integer  | 128..255                          | uint8       | `U`
21251|       |    number_integer  | 256..32767                        | int16       | `I`
21252|       |    number_integer  | 32768..2147483647                 | int32       | `l`
21253|       |    number_integer  | 2147483648..9223372036854775807   | int64       | `L`
21254|       |    number_unsigned | 0..127                            | int8        | `i`
21255|       |    number_unsigned | 128..255                          | uint8       | `U`
21256|       |    number_unsigned | 256..32767                        | int16       | `I`
21257|       |    number_unsigned | 32768..2147483647                 | int32       | `l`
21258|       |    number_unsigned | 2147483648..9223372036854775807   | int64       | `L`
21259|       |    number_float    | *any value*                       | float64     | `D`
21260|       |    string          | *with shortest length indicator*  | string      | `S`
21261|       |    array           | *see notes on optimized format*   | array       | `[`
21262|       |    object          | *see notes on optimized format*   | map         | `{`
21263|       |
21264|       |    @note The mapping is **complete** in the sense that any JSON value type
21265|       |          can be converted to a UBJSON value.
21266|       |
21267|       |    @note The following values can **not** be converted to a UBJSON value:
21268|       |          - strings with more than 9223372036854775807 bytes (theoretical)
21269|       |          - unsigned integer numbers above 9223372036854775807
21270|       |
21271|       |    @note The following markers are not used in the conversion:
21272|       |          - `Z`: no-op values are not created.
21273|       |          - `C`: single-byte strings are serialized with `S` markers.
21274|       |
21275|       |    @note Any UBJSON output created @ref to_ubjson can be successfully parsed
21276|       |          by @ref from_ubjson.
21277|       |
21278|       |    @note If NaN or Infinity are stored inside a JSON number, they are
21279|       |          serialized properly. This behavior differs from the @ref dump()
21280|       |          function which serializes NaN or Infinity to `null`.
21281|       |
21282|       |    @note The optimized formats for containers are supported: Parameter
21283|       |          @a use_size adds size information to the beginning of a container and
21284|       |          removes the closing marker. Parameter @a use_type further checks
21285|       |          whether all elements of a container have the same type and adds the
21286|       |          type marker to the beginning of the container. The @a use_type
21287|       |          parameter must only be used together with @a use_size = true. Note
21288|       |          that @a use_size = true alone may result in larger representations -
21289|       |          the benefit of this parameter is that the receiving side is
21290|       |          immediately informed on the number of elements of the container.
21291|       |
21292|       |    @param[in] j  JSON value to serialize
21293|       |    @param[in] use_size  whether to add size annotations to container types
21294|       |    @param[in] use_type  whether to add type annotations to container types
21295|       |                         (must be combined with @a use_size = true)
21296|       |    @return UBJSON serialization as byte vector
21297|       |
21298|       |    @complexity Linear in the size of the JSON value @a j.
21299|       |
21300|       |    @liveexample{The example shows the serialization of a JSON value to a byte
21301|       |    vector in UBJSON format.,to_ubjson}
21302|       |
21303|       |    @sa http://ubjson.org
21304|       |    @sa @ref from_ubjson(detail::input_adapter&&, const bool, const bool) for the
21305|       |        analogous deserialization
21306|       |    @sa @ref to_cbor(const basic_json& for the related CBOR format
21307|       |    @sa @ref to_msgpack(const basic_json&) for the related MessagePack format
21308|       |
21309|       |    @since version 3.1.0
21310|       |    */
21311|       |    static std::vector<uint8_t> to_ubjson(const basic_json& j,
21312|       |                                          const bool use_size = false,
21313|       |                                          const bool use_type = false)
21314|       |    {
21315|       |        std::vector<uint8_t> result;
21316|       |        to_ubjson(j, result, use_size, use_type);
21317|       |        return result;
21318|       |    }
21319|       |
21320|       |    static void to_ubjson(const basic_json& j, detail::output_adapter<uint8_t> o,
21321|       |                          const bool use_size = false, const bool use_type = false)
21322|       |    {
21323|       |        binary_writer<uint8_t>(o).write_ubjson(j, use_size, use_type);
21324|       |    }
21325|       |
21326|       |    static void to_ubjson(const basic_json& j, detail::output_adapter<char> o,
21327|       |                          const bool use_size = false, const bool use_type = false)
21328|       |    {
21329|       |        binary_writer<char>(o).write_ubjson(j, use_size, use_type);
21330|       |    }
21331|       |
21332|       |
21333|       |    /*!
21334|       |    @brief Serializes the given JSON object `j` to BSON and returns a vector
21335|       |           containing the corresponding BSON-representation.
21336|       |
21337|       |    BSON (Binary JSON) is a binary format in which zero or more ordered key/value pairs are
21338|       |    stored as a single entity (a so-called document).
21339|       |
21340|       |    The library uses the following mapping from JSON values types to BSON types:
21341|       |
21342|       |    JSON value type | value/range                       | BSON type   | marker
21343|       |    --------------- | --------------------------------- | ----------- | ------
21344|       |    null            | `null`                            | null        | 0x0A
21345|       |    boolean         | `true`, `false`                   | boolean     | 0x08
21346|       |    number_integer  | -9223372036854775808..-2147483649 | int64       | 0x12
21347|       |    number_integer  | -2147483648..2147483647           | int32       | 0x10
21348|       |    number_integer  | 2147483648..9223372036854775807   | int64       | 0x12
21349|       |    number_unsigned | 0..2147483647                     | int32       | 0x10
21350|       |    number_unsigned | 2147483648..9223372036854775807   | int64       | 0x12
21351|       |    number_unsigned | 9223372036854775808..18446744073709551615| --   | --
21352|       |    number_float    | *any value*                       | double      | 0x01
21353|       |    string          | *any value*                       | string      | 0x02
21354|       |    array           | *any value*                       | document    | 0x04
21355|       |    object          | *any value*                       | document    | 0x03
21356|       |
21357|       |    @warning The mapping is **incomplete**, since only JSON-objects (and things
21358|       |    contained therein) can be serialized to BSON.
21359|       |    Also, integers larger than 9223372036854775807 cannot be serialized to BSON,
21360|       |    and the keys may not contain U+0000, since they are serialized a
21361|       |    zero-terminated c-strings.
21362|       |
21363|       |    @throw out_of_range.407  if `j.is_number_unsigned() && j.get<std::uint64_t>() > 9223372036854775807`
21364|       |    @throw out_of_range.409  if a key in `j` contains a NULL (U+0000)
21365|       |    @throw type_error.317    if `!j.is_object()`
21366|       |
21367|       |    @pre The input `j` is required to be an object: `j.is_object() == true`.
21368|       |
21369|       |    @note Any BSON output created via @ref to_bson can be successfully parsed
21370|       |          by @ref from_bson.
21371|       |
21372|       |    @param[in] j  JSON value to serialize
21373|       |    @return BSON serialization as byte vector
21374|       |
21375|       |    @complexity Linear in the size of the JSON value @a j.
21376|       |
21377|       |    @liveexample{The example shows the serialization of a JSON value to a byte
21378|       |    vector in BSON format.,to_bson}
21379|       |
21380|       |    @sa http://bsonspec.org/spec.html
21381|       |    @sa @ref from_bson(detail::input_adapter&&, const bool strict) for the
21382|       |        analogous deserialization
21383|       |    @sa @ref to_ubjson(const basic_json&, const bool, const bool) for the
21384|       |             related UBJSON format
21385|       |    @sa @ref to_cbor(const basic_json&) for the related CBOR format
21386|       |    @sa @ref to_msgpack(const basic_json&) for the related MessagePack format
21387|       |    */
21388|       |    static std::vector<uint8_t> to_bson(const basic_json& j)
21389|       |    {
21390|       |        std::vector<uint8_t> result;
21391|       |        to_bson(j, result);
21392|       |        return result;
21393|       |    }
21394|       |
21395|       |    /*!
21396|       |    @brief Serializes the given JSON object `j` to BSON and forwards the
21397|       |           corresponding BSON-representation to the given output_adapter `o`.
21398|       |    @param j The JSON object to convert to BSON.
21399|       |    @param o The output adapter that receives the binary BSON representation.
21400|       |    @pre The input `j` shall be an object: `j.is_object() == true`
21401|       |    @sa @ref to_bson(const basic_json&)
21402|       |    */
21403|       |    static void to_bson(const basic_json& j, detail::output_adapter<uint8_t> o)
21404|       |    {
21405|       |        binary_writer<uint8_t>(o).write_bson(j);
21406|       |    }
21407|       |
21408|       |    /*!
21409|       |    @copydoc to_bson(const basic_json&, detail::output_adapter<uint8_t>)
21410|       |    */
21411|       |    static void to_bson(const basic_json& j, detail::output_adapter<char> o)
21412|       |    {
21413|       |        binary_writer<char>(o).write_bson(j);
21414|       |    }
21415|       |
21416|       |
21417|       |    /*!
21418|       |    @brief create a JSON value from an input in CBOR format
21419|       |
21420|       |    Deserializes a given input @a i to a JSON value using the CBOR (Concise
21421|       |    Binary Object Representation) serialization format.
21422|       |
21423|       |    The library maps CBOR types to JSON value types as follows:
21424|       |
21425|       |    CBOR type              | JSON value type | first byte
21426|       |    ---------------------- | --------------- | ----------
21427|       |    Integer                | number_unsigned | 0x00..0x17
21428|       |    Unsigned integer       | number_unsigned | 0x18
21429|       |    Unsigned integer       | number_unsigned | 0x19
21430|       |    Unsigned integer       | number_unsigned | 0x1A
21431|       |    Unsigned integer       | number_unsigned | 0x1B
21432|       |    Negative integer       | number_integer  | 0x20..0x37
21433|       |    Negative integer       | number_integer  | 0x38
21434|       |    Negative integer       | number_integer  | 0x39
21435|       |    Negative integer       | number_integer  | 0x3A
21436|       |    Negative integer       | number_integer  | 0x3B
21437|       |    Negative integer       | number_integer  | 0x40..0x57
21438|       |    UTF-8 string           | string          | 0x60..0x77
21439|       |    UTF-8 string           | string          | 0x78
21440|       |    UTF-8 string           | string          | 0x79
21441|       |    UTF-8 string           | string          | 0x7A
21442|       |    UTF-8 string           | string          | 0x7B
21443|       |    UTF-8 string           | string          | 0x7F
21444|       |    array                  | array           | 0x80..0x97
21445|       |    array                  | array           | 0x98
21446|       |    array                  | array           | 0x99
21447|       |    array                  | array           | 0x9A
21448|       |    array                  | array           | 0x9B
21449|       |    array                  | array           | 0x9F
21450|       |    map                    | object          | 0xA0..0xB7
21451|       |    map                    | object          | 0xB8
21452|       |    map                    | object          | 0xB9
21453|       |    map                    | object          | 0xBA
21454|       |    map                    | object          | 0xBB
21455|       |    map                    | object          | 0xBF
21456|       |    False                  | `false`         | 0xF4
21457|       |    True                   | `true`          | 0xF5
21458|       |    Null                   | `null`          | 0xF6
21459|       |    Half-Precision Float   | number_float    | 0xF9
21460|       |    Single-Precision Float | number_float    | 0xFA
21461|       |    Double-Precision Float | number_float    | 0xFB
21462|       |
21463|       |    @warning The mapping is **incomplete** in the sense that not all CBOR
21464|       |             types can be converted to a JSON value. The following CBOR types
21465|       |             are not supported and will yield parse errors (parse_error.112):
21466|       |             - byte strings (0x40..0x5F)
21467|       |             - date/time (0xC0..0xC1)
21468|       |             - bignum (0xC2..0xC3)
21469|       |             - decimal fraction (0xC4)
21470|       |             - bigfloat (0xC5)
21471|       |             - tagged items (0xC6..0xD4, 0xD8..0xDB)
21472|       |             - expected conversions (0xD5..0xD7)
21473|       |             - simple values (0xE0..0xF3, 0xF8)
21474|       |             - undefined (0xF7)
21475|       |
21476|       |    @warning CBOR allows map keys of any type, whereas JSON only allows
21477|       |             strings as keys in object values. Therefore, CBOR maps with keys
21478|       |             other than UTF-8 strings are rejected (parse_error.113).
21479|       |
21480|       |    @note Any CBOR output created @ref to_cbor can be successfully parsed by
21481|       |          @ref from_cbor.
21482|       |
21483|       |    @param[in] i  an input in CBOR format convertible to an input adapter
21484|       |    @param[in] strict  whether to expect the input to be consumed until EOF
21485|       |                       (true by default)
21486|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
21487|       |    parse error (optional, true by default)
21488|       |
21489|       |    @return deserialized JSON value; in case of a parse error and
21490|       |            @a allow_exceptions set to `false`, the return value will be
21491|       |            value_t::discarded.
21492|       |
21493|       |    @throw parse_error.110 if the given input ends prematurely or the end of
21494|       |    file was not reached when @a strict was set to true
21495|       |    @throw parse_error.112 if unsupported features from CBOR were
21496|       |    used in the given input @a v or if the input is not valid CBOR
21497|       |    @throw parse_error.113 if a string was expected as map key, but not found
21498|       |
21499|       |    @complexity Linear in the size of the input @a i.
21500|       |
21501|       |    @liveexample{The example shows the deserialization of a byte vector in CBOR
21502|       |    format to a JSON value.,from_cbor}
21503|       |
21504|       |    @sa http://cbor.io
21505|       |    @sa @ref to_cbor(const basic_json&) for the analogous serialization
21506|       |    @sa @ref from_msgpack(detail::input_adapter&&, const bool, const bool) for the
21507|       |        related MessagePack format
21508|       |    @sa @ref from_ubjson(detail::input_adapter&&, const bool, const bool) for the
21509|       |        related UBJSON format
21510|       |
21511|       |    @since version 2.0.9; parameter @a start_index since 2.1.1; changed to
21512|       |           consume input adapters, removed start_index parameter, and added
21513|       |           @a strict parameter since 3.0.0; added @a allow_exceptions parameter
21514|       |           since 3.2.0
21515|       |    */
21516|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
21517|       |    static basic_json from_cbor(detail::input_adapter&& i,
21518|       |                                const bool strict = true,
21519|       |                                const bool allow_exceptions = true)
21520|       |    {
21521|       |        basic_json result;
21522|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
21523|       |        const bool res = binary_reader(detail::input_adapter(i)).sax_parse(input_format_t::cbor, &sdp, strict);
21524|       |        return res ? result : basic_json(value_t::discarded);
21525|       |    }
21526|       |
21527|       |    /*!
21528|       |    @copydoc from_cbor(detail::input_adapter&&, const bool, const bool)
21529|       |    */
21530|       |    template<typename A1, typename A2,
21531|       |             detail::enable_if_t<std::is_constructible<detail::input_adapter, A1, A2>::value, int> = 0>
21532|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
21533|       |    static basic_json from_cbor(A1 && a1, A2 && a2,
21534|       |                                const bool strict = true,
21535|       |                                const bool allow_exceptions = true)
21536|       |    {
21537|       |        basic_json result;
21538|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
21539|       |        const bool res = binary_reader(detail::input_adapter(std::forward<A1>(a1), std::forward<A2>(a2))).sax_parse(input_format_t::cbor, &sdp, strict);
21540|       |        return res ? result : basic_json(value_t::discarded);
21541|       |    }
21542|       |
21543|       |    /*!
21544|       |    @brief create a JSON value from an input in MessagePack format
21545|       |
21546|       |    Deserializes a given input @a i to a JSON value using the MessagePack
21547|       |    serialization format.
21548|       |
21549|       |    The library maps MessagePack types to JSON value types as follows:
21550|       |
21551|       |    MessagePack type | JSON value type | first byte
21552|       |    ---------------- | --------------- | ----------
21553|       |    positive fixint  | number_unsigned | 0x00..0x7F
21554|       |    fixmap           | object          | 0x80..0x8F
21555|       |    fixarray         | array           | 0x90..0x9F
21556|       |    fixstr           | string          | 0xA0..0xBF
21557|       |    nil              | `null`          | 0xC0
21558|       |    false            | `false`         | 0xC2
21559|       |    true             | `true`          | 0xC3
21560|       |    float 32         | number_float    | 0xCA
21561|       |    float 64         | number_float    | 0xCB
21562|       |    uint 8           | number_unsigned | 0xCC
21563|       |    uint 16          | number_unsigned | 0xCD
21564|       |    uint 32          | number_unsigned | 0xCE
21565|       |    uint 64          | number_unsigned | 0xCF
21566|       |    int 8            | number_integer  | 0xD0
21567|       |    int 16           | number_integer  | 0xD1
21568|       |    int 32           | number_integer  | 0xD2
21569|       |    int 64           | number_integer  | 0xD3
21570|       |    str 8            | string          | 0xD9
21571|       |    str 16           | string          | 0xDA
21572|       |    str 32           | string          | 0xDB
21573|       |    array 16         | array           | 0xDC
21574|       |    array 32         | array           | 0xDD
21575|       |    map 16           | object          | 0xDE
21576|       |    map 32           | object          | 0xDF
21577|       |    negative fixint  | number_integer  | 0xE0-0xFF
21578|       |
21579|       |    @warning The mapping is **incomplete** in the sense that not all
21580|       |             MessagePack types can be converted to a JSON value. The following
21581|       |             MessagePack types are not supported and will yield parse errors:
21582|       |              - bin 8 - bin 32 (0xC4..0xC6)
21583|       |              - ext 8 - ext 32 (0xC7..0xC9)
21584|       |              - fixext 1 - fixext 16 (0xD4..0xD8)
21585|       |
21586|       |    @note Any MessagePack output created @ref to_msgpack can be successfully
21587|       |          parsed by @ref from_msgpack.
21588|       |
21589|       |    @param[in] i  an input in MessagePack format convertible to an input
21590|       |                  adapter
21591|       |    @param[in] strict  whether to expect the input to be consumed until EOF
21592|       |                       (true by default)
21593|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
21594|       |    parse error (optional, true by default)
21595|       |
21596|       |    @return deserialized JSON value; in case of a parse error and
21597|       |            @a allow_exceptions set to `false`, the return value will be
21598|       |            value_t::discarded.
21599|       |
21600|       |    @throw parse_error.110 if the given input ends prematurely or the end of
21601|       |    file was not reached when @a strict was set to true
21602|       |    @throw parse_error.112 if unsupported features from MessagePack were
21603|       |    used in the given input @a i or if the input is not valid MessagePack
21604|       |    @throw parse_error.113 if a string was expected as map key, but not found
21605|       |
21606|       |    @complexity Linear in the size of the input @a i.
21607|       |
21608|       |    @liveexample{The example shows the deserialization of a byte vector in
21609|       |    MessagePack format to a JSON value.,from_msgpack}
21610|       |
21611|       |    @sa http://msgpack.org
21612|       |    @sa @ref to_msgpack(const basic_json&) for the analogous serialization
21613|       |    @sa @ref from_cbor(detail::input_adapter&&, const bool, const bool) for the
21614|       |        related CBOR format
21615|       |    @sa @ref from_ubjson(detail::input_adapter&&, const bool, const bool) for
21616|       |        the related UBJSON format
21617|       |    @sa @ref from_bson(detail::input_adapter&&, const bool, const bool) for
21618|       |        the related BSON format
21619|       |
21620|       |    @since version 2.0.9; parameter @a start_index since 2.1.1; changed to
21621|       |           consume input adapters, removed start_index parameter, and added
21622|       |           @a strict parameter since 3.0.0; added @a allow_exceptions parameter
21623|       |           since 3.2.0
21624|       |    */
21625|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
21626|       |    static basic_json from_msgpack(detail::input_adapter&& i,
21627|       |                                   const bool strict = true,
21628|       |                                   const bool allow_exceptions = true)
21629|       |    {
21630|       |        basic_json result;
21631|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
21632|       |        const bool res = binary_reader(detail::input_adapter(i)).sax_parse(input_format_t::msgpack, &sdp, strict);
21633|       |        return res ? result : basic_json(value_t::discarded);
21634|       |    }
21635|       |
21636|       |    /*!
21637|       |    @copydoc from_msgpack(detail::input_adapter&&, const bool, const bool)
21638|       |    */
21639|       |    template<typename A1, typename A2,
21640|       |             detail::enable_if_t<std::is_constructible<detail::input_adapter, A1, A2>::value, int> = 0>
21641|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
21642|       |    static basic_json from_msgpack(A1 && a1, A2 && a2,
21643|       |                                   const bool strict = true,
21644|       |                                   const bool allow_exceptions = true)
21645|       |    {
21646|       |        basic_json result;
21647|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
21648|       |        const bool res = binary_reader(detail::input_adapter(std::forward<A1>(a1), std::forward<A2>(a2))).sax_parse(input_format_t::msgpack, &sdp, strict);
21649|       |        return res ? result : basic_json(value_t::discarded);
21650|       |    }
21651|       |
21652|       |    /*!
21653|       |    @brief create a JSON value from an input in UBJSON format
21654|       |
21655|       |    Deserializes a given input @a i to a JSON value using the UBJSON (Universal
21656|       |    Binary JSON) serialization format.
21657|       |
21658|       |    The library maps UBJSON types to JSON value types as follows:
21659|       |
21660|       |    UBJSON type | JSON value type                         | marker
21661|       |    ----------- | --------------------------------------- | ------
21662|       |    no-op       | *no value, next value is read*          | `N`
21663|       |    null        | `null`                                  | `Z`
21664|       |    false       | `false`                                 | `F`
21665|       |    true        | `true`                                  | `T`
21666|       |    float32     | number_float                            | `d`
21667|       |    float64     | number_float                            | `D`
21668|       |    uint8       | number_unsigned                         | `U`
21669|       |    int8        | number_integer                          | `i`
21670|       |    int16       | number_integer                          | `I`
21671|       |    int32       | number_integer                          | `l`
21672|       |    int64       | number_integer                          | `L`
21673|       |    string      | string                                  | `S`
21674|       |    char        | string                                  | `C`
21675|       |    array       | array (optimized values are supported)  | `[`
21676|       |    object      | object (optimized values are supported) | `{`
21677|       |
21678|       |    @note The mapping is **complete** in the sense that any UBJSON value can
21679|       |          be converted to a JSON value.
21680|       |
21681|       |    @param[in] i  an input in UBJSON format convertible to an input adapter
21682|       |    @param[in] strict  whether to expect the input to be consumed until EOF
21683|       |                       (true by default)
21684|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
21685|       |    parse error (optional, true by default)
21686|       |
21687|       |    @return deserialized JSON value; in case of a parse error and
21688|       |            @a allow_exceptions set to `false`, the return value will be
21689|       |            value_t::discarded.
21690|       |
21691|       |    @throw parse_error.110 if the given input ends prematurely or the end of
21692|       |    file was not reached when @a strict was set to true
21693|       |    @throw parse_error.112 if a parse error occurs
21694|       |    @throw parse_error.113 if a string could not be parsed successfully
21695|       |
21696|       |    @complexity Linear in the size of the input @a i.
21697|       |
21698|       |    @liveexample{The example shows the deserialization of a byte vector in
21699|       |    UBJSON format to a JSON value.,from_ubjson}
21700|       |
21701|       |    @sa http://ubjson.org
21702|       |    @sa @ref to_ubjson(const basic_json&, const bool, const bool) for the
21703|       |             analogous serialization
21704|       |    @sa @ref from_cbor(detail::input_adapter&&, const bool, const bool) for the
21705|       |        related CBOR format
21706|       |    @sa @ref from_msgpack(detail::input_adapter&&, const bool, const bool) for
21707|       |        the related MessagePack format
21708|       |    @sa @ref from_bson(detail::input_adapter&&, const bool, const bool) for
21709|       |        the related BSON format
21710|       |
21711|       |    @since version 3.1.0; added @a allow_exceptions parameter since 3.2.0
21712|       |    */
21713|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
21714|       |    static basic_json from_ubjson(detail::input_adapter&& i,
21715|       |                                  const bool strict = true,
21716|       |                                  const bool allow_exceptions = true)
21717|       |    {
21718|       |        basic_json result;
21719|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
21720|       |        const bool res = binary_reader(detail::input_adapter(i)).sax_parse(input_format_t::ubjson, &sdp, strict);
21721|       |        return res ? result : basic_json(value_t::discarded);
21722|       |    }
21723|       |
21724|       |    /*!
21725|       |    @copydoc from_ubjson(detail::input_adapter&&, const bool, const bool)
21726|       |    */
21727|       |    template<typename A1, typename A2,
21728|       |             detail::enable_if_t<std::is_constructible<detail::input_adapter, A1, A2>::value, int> = 0>
21729|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
21730|       |    static basic_json from_ubjson(A1 && a1, A2 && a2,
21731|       |                                  const bool strict = true,
21732|       |                                  const bool allow_exceptions = true)
21733|       |    {
21734|       |        basic_json result;
21735|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
21736|       |        const bool res = binary_reader(detail::input_adapter(std::forward<A1>(a1), std::forward<A2>(a2))).sax_parse(input_format_t::ubjson, &sdp, strict);
21737|       |        return res ? result : basic_json(value_t::discarded);
21738|       |    }
21739|       |
21740|       |    /*!
21741|       |    @brief Create a JSON value from an input in BSON format
21742|       |
21743|       |    Deserializes a given input @a i to a JSON value using the BSON (Binary JSON)
21744|       |    serialization format.
21745|       |
21746|       |    The library maps BSON record types to JSON value types as follows:
21747|       |
21748|       |    BSON type       | BSON marker byte | JSON value type
21749|       |    --------------- | ---------------- | ---------------------------
21750|       |    double          | 0x01             | number_float
21751|       |    string          | 0x02             | string
21752|       |    document        | 0x03             | object
21753|       |    array           | 0x04             | array
21754|       |    binary          | 0x05             | still unsupported
21755|       |    undefined       | 0x06             | still unsupported
21756|       |    ObjectId        | 0x07             | still unsupported
21757|       |    boolean         | 0x08             | boolean
21758|       |    UTC Date-Time   | 0x09             | still unsupported
21759|       |    null            | 0x0A             | null
21760|       |    Regular Expr.   | 0x0B             | still unsupported
21761|       |    DB Pointer      | 0x0C             | still unsupported
21762|       |    JavaScript Code | 0x0D             | still unsupported
21763|       |    Symbol          | 0x0E             | still unsupported
21764|       |    JavaScript Code | 0x0F             | still unsupported
21765|       |    int32           | 0x10             | number_integer
21766|       |    Timestamp       | 0x11             | still unsupported
21767|       |    128-bit decimal float | 0x13       | still unsupported
21768|       |    Max Key         | 0x7F             | still unsupported
21769|       |    Min Key         | 0xFF             | still unsupported
21770|       |
21771|       |    @warning The mapping is **incomplete**. The unsupported mappings
21772|       |             are indicated in the table above.
21773|       |
21774|       |    @param[in] i  an input in BSON format convertible to an input adapter
21775|       |    @param[in] strict  whether to expect the input to be consumed until EOF
21776|       |                       (true by default)
21777|       |    @param[in] allow_exceptions  whether to throw exceptions in case of a
21778|       |    parse error (optional, true by default)
21779|       |
21780|       |    @return deserialized JSON value; in case of a parse error and
21781|       |            @a allow_exceptions set to `false`, the return value will be
21782|       |            value_t::discarded.
21783|       |
21784|       |    @throw parse_error.114 if an unsupported BSON record type is encountered
21785|       |
21786|       |    @complexity Linear in the size of the input @a i.
21787|       |
21788|       |    @liveexample{The example shows the deserialization of a byte vector in
21789|       |    BSON format to a JSON value.,from_bson}
21790|       |
21791|       |    @sa http://bsonspec.org/spec.html
21792|       |    @sa @ref to_bson(const basic_json&) for the analogous serialization
21793|       |    @sa @ref from_cbor(detail::input_adapter&&, const bool, const bool) for the
21794|       |        related CBOR format
21795|       |    @sa @ref from_msgpack(detail::input_adapter&&, const bool, const bool) for
21796|       |        the related MessagePack format
21797|       |    @sa @ref from_ubjson(detail::input_adapter&&, const bool, const bool) for the
21798|       |        related UBJSON format
21799|       |    */
21800|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
21801|       |    static basic_json from_bson(detail::input_adapter&& i,
21802|       |                                const bool strict = true,
21803|       |                                const bool allow_exceptions = true)
21804|       |    {
21805|       |        basic_json result;
21806|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
21807|       |        const bool res = binary_reader(detail::input_adapter(i)).sax_parse(input_format_t::bson, &sdp, strict);
21808|       |        return res ? result : basic_json(value_t::discarded);
21809|       |    }
21810|       |
21811|       |    /*!
21812|       |    @copydoc from_bson(detail::input_adapter&&, const bool, const bool)
21813|       |    */
21814|       |    template<typename A1, typename A2,
21815|       |             detail::enable_if_t<std::is_constructible<detail::input_adapter, A1, A2>::value, int> = 0>
21816|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
21817|       |    static basic_json from_bson(A1 && a1, A2 && a2,
21818|       |                                const bool strict = true,
21819|       |                                const bool allow_exceptions = true)
21820|       |    {
21821|       |        basic_json result;
21822|       |        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
21823|       |        const bool res = binary_reader(detail::input_adapter(std::forward<A1>(a1), std::forward<A2>(a2))).sax_parse(input_format_t::bson, &sdp, strict);
21824|       |        return res ? result : basic_json(value_t::discarded);
21825|       |    }
21826|       |
21827|       |
21828|       |
21829|       |    /// @}
21830|       |
21831|       |    //////////////////////////
21832|       |    // JSON Pointer support //
21833|       |    //////////////////////////
21834|       |
21835|       |    /// @name JSON Pointer functions
21836|       |    /// @{
21837|       |
21838|       |    /*!
21839|       |    @brief access specified element via JSON Pointer
21840|       |
21841|       |    Uses a JSON pointer to retrieve a reference to the respective JSON value.
21842|       |    No bound checking is performed. Similar to @ref operator[](const typename
21843|       |    object_t::key_type&), `null` values are created in arrays and objects if
21844|       |    necessary.
21845|       |
21846|       |    In particular:
21847|       |    - If the JSON pointer points to an object key that does not exist, it
21848|       |      is created an filled with a `null` value before a reference to it
21849|       |      is returned.
21850|       |    - If the JSON pointer points to an array index that does not exist, it
21851|       |      is created an filled with a `null` value before a reference to it
21852|       |      is returned. All indices between the current maximum and the given
21853|       |      index are also filled with `null`.
21854|       |    - The special value `-` is treated as a synonym for the index past the
21855|       |      end.
21856|       |
21857|       |    @param[in] ptr  a JSON pointer
21858|       |
21859|       |    @return reference to the element pointed to by @a ptr
21860|       |
21861|       |    @complexity Constant.
21862|       |
21863|       |    @throw parse_error.106   if an array index begins with '0'
21864|       |    @throw parse_error.109   if an array index was not a number
21865|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
21866|       |
21867|       |    @liveexample{The behavior is shown in the example.,operatorjson_pointer}
21868|       |
21869|       |    @since version 2.0.0
21870|       |    */
21871|       |    reference operator[](const json_pointer& ptr)
21872|       |    {
21873|       |        return ptr.get_unchecked(this);
21874|       |    }
21875|       |
21876|       |    /*!
21877|       |    @brief access specified element via JSON Pointer
21878|       |
21879|       |    Uses a JSON pointer to retrieve a reference to the respective JSON value.
21880|       |    No bound checking is performed. The function does not change the JSON
21881|       |    value; no `null` values are created. In particular, the special value
21882|       |    `-` yields an exception.
21883|       |
21884|       |    @param[in] ptr  JSON pointer to the desired element
21885|       |
21886|       |    @return const reference to the element pointed to by @a ptr
21887|       |
21888|       |    @complexity Constant.
21889|       |
21890|       |    @throw parse_error.106   if an array index begins with '0'
21891|       |    @throw parse_error.109   if an array index was not a number
21892|       |    @throw out_of_range.402  if the array index '-' is used
21893|       |    @throw out_of_range.404  if the JSON pointer can not be resolved
21894|       |
21895|       |    @liveexample{The behavior is shown in the example.,operatorjson_pointer_const}
21896|       |
21897|       |    @since version 2.0.0
21898|       |    */
21899|       |    const_reference operator[](const json_pointer& ptr) const
21900|       |    {
21901|       |        return ptr.get_unchecked(this);
21902|       |    }
21903|       |
21904|       |    /*!
21905|       |    @brief access specified element via JSON Pointer
21906|       |
21907|       |    Returns a reference to the element at with specified JSON pointer @a ptr,
21908|       |    with bounds checking.
21909|       |
21910|       |    @param[in] ptr  JSON pointer to the desired element
21911|       |
21912|       |    @return reference to the element pointed to by @a ptr
21913|       |
21914|       |    @throw parse_error.106 if an array index in the passed JSON pointer @a ptr
21915|       |    begins with '0'. See example below.
21916|       |
21917|       |    @throw parse_error.109 if an array index in the passed JSON pointer @a ptr
21918|       |    is not a number. See example below.
21919|       |
21920|       |    @throw out_of_range.401 if an array index in the passed JSON pointer @a ptr
21921|       |    is out of range. See example below.
21922|       |
21923|       |    @throw out_of_range.402 if the array index '-' is used in the passed JSON
21924|       |    pointer @a ptr. As `at` provides checked access (and no elements are
21925|       |    implicitly inserted), the index '-' is always invalid. See example below.
21926|       |
21927|       |    @throw out_of_range.403 if the JSON pointer describes a key of an object
21928|       |    which cannot be found. See example below.
21929|       |
21930|       |    @throw out_of_range.404 if the JSON pointer @a ptr can not be resolved.
21931|       |    See example below.
21932|       |
21933|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
21934|       |    changes in the JSON value.
21935|       |
21936|       |    @complexity Constant.
21937|       |
21938|       |    @since version 2.0.0
21939|       |
21940|       |    @liveexample{The behavior is shown in the example.,at_json_pointer}
21941|       |    */
21942|       |    reference at(const json_pointer& ptr)
21943|       |    {
21944|       |        return ptr.get_checked(this);
21945|       |    }
21946|       |
21947|       |    /*!
21948|       |    @brief access specified element via JSON Pointer
21949|       |
21950|       |    Returns a const reference to the element at with specified JSON pointer @a
21951|       |    ptr, with bounds checking.
21952|       |
21953|       |    @param[in] ptr  JSON pointer to the desired element
21954|       |
21955|       |    @return reference to the element pointed to by @a ptr
21956|       |
21957|       |    @throw parse_error.106 if an array index in the passed JSON pointer @a ptr
21958|       |    begins with '0'. See example below.
21959|       |
21960|       |    @throw parse_error.109 if an array index in the passed JSON pointer @a ptr
21961|       |    is not a number. See example below.
21962|       |
21963|       |    @throw out_of_range.401 if an array index in the passed JSON pointer @a ptr
21964|       |    is out of range. See example below.
21965|       |
21966|       |    @throw out_of_range.402 if the array index '-' is used in the passed JSON
21967|       |    pointer @a ptr. As `at` provides checked access (and no elements are
21968|       |    implicitly inserted), the index '-' is always invalid. See example below.
21969|       |
21970|       |    @throw out_of_range.403 if the JSON pointer describes a key of an object
21971|       |    which cannot be found. See example below.
21972|       |
21973|       |    @throw out_of_range.404 if the JSON pointer @a ptr can not be resolved.
21974|       |    See example below.
21975|       |
21976|       |    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
21977|       |    changes in the JSON value.
21978|       |
21979|       |    @complexity Constant.
21980|       |
21981|       |    @since version 2.0.0
21982|       |
21983|       |    @liveexample{The behavior is shown in the example.,at_json_pointer_const}
21984|       |    */
21985|       |    const_reference at(const json_pointer& ptr) const
21986|       |    {
21987|       |        return ptr.get_checked(this);
21988|       |    }
21989|       |
21990|       |    /*!
21991|       |    @brief return flattened JSON value
21992|       |
21993|       |    The function creates a JSON object whose keys are JSON pointers (see [RFC
21994|       |    6901](https://tools.ietf.org/html/rfc6901)) and whose values are all
21995|       |    primitive. The original JSON value can be restored using the @ref
21996|       |    unflatten() function.
21997|       |
21998|       |    @return an object that maps JSON pointers to primitive values
21999|       |
22000|       |    @note Empty objects and arrays are flattened to `null` and will not be
22001|       |          reconstructed correctly by the @ref unflatten() function.
22002|       |
22003|       |    @complexity Linear in the size the JSON value.
22004|       |
22005|       |    @liveexample{The following code shows how a JSON object is flattened to an
22006|       |    object whose keys consist of JSON pointers.,flatten}
22007|       |
22008|       |    @sa @ref unflatten() for the reverse function
22009|       |
22010|       |    @since version 2.0.0
22011|       |    */
22012|       |    basic_json flatten() const
22013|       |    {
22014|       |        basic_json result(value_t::object);
22015|       |        json_pointer::flatten("", *this, result);
22016|       |        return result;
22017|       |    }
22018|       |
22019|       |    /*!
22020|       |    @brief unflatten a previously flattened JSON value
22021|       |
22022|       |    The function restores the arbitrary nesting of a JSON value that has been
22023|       |    flattened before using the @ref flatten() function. The JSON value must
22024|       |    meet certain constraints:
22025|       |    1. The value must be an object.
22026|       |    2. The keys must be JSON pointers (see
22027|       |       [RFC 6901](https://tools.ietf.org/html/rfc6901))
22028|       |    3. The mapped values must be primitive JSON types.
22029|       |
22030|       |    @return the original JSON from a flattened version
22031|       |
22032|       |    @note Empty objects and arrays are flattened by @ref flatten() to `null`
22033|       |          values and can not unflattened to their original type. Apart from
22034|       |          this example, for a JSON value `j`, the following is always true:
22035|       |          `j == j.flatten().unflatten()`.
22036|       |
22037|       |    @complexity Linear in the size the JSON value.
22038|       |
22039|       |    @throw type_error.314  if value is not an object
22040|       |    @throw type_error.315  if object values are not primitive
22041|       |
22042|       |    @liveexample{The following code shows how a flattened JSON object is
22043|       |    unflattened into the original nested JSON object.,unflatten}
22044|       |
22045|       |    @sa @ref flatten() for the reverse function
22046|       |
22047|       |    @since version 2.0.0
22048|       |    */
22049|       |    basic_json unflatten() const
22050|       |    {
22051|       |        return json_pointer::unflatten(*this);
22052|       |    }
22053|       |
22054|       |    /// @}
22055|       |
22056|       |    //////////////////////////
22057|       |    // JSON Patch functions //
22058|       |    //////////////////////////
22059|       |
22060|       |    /// @name JSON Patch functions
22061|       |    /// @{
22062|       |
22063|       |    /*!
22064|       |    @brief applies a JSON patch
22065|       |
22066|       |    [JSON Patch](http://jsonpatch.com) defines a JSON document structure for
22067|       |    expressing a sequence of operations to apply to a JSON) document. With
22068|       |    this function, a JSON Patch is applied to the current JSON value by
22069|       |    executing all operations from the patch.
22070|       |
22071|       |    @param[in] json_patch  JSON patch document
22072|       |    @return patched document
22073|       |
22074|       |    @note The application of a patch is atomic: Either all operations succeed
22075|       |          and the patched document is returned or an exception is thrown. In
22076|       |          any case, the original value is not changed: the patch is applied
22077|       |          to a copy of the value.
22078|       |
22079|       |    @throw parse_error.104 if the JSON patch does not consist of an array of
22080|       |    objects
22081|       |
22082|       |    @throw parse_error.105 if the JSON patch is malformed (e.g., mandatory
22083|       |    attributes are missing); example: `"operation add must have member path"`
22084|       |
22085|       |    @throw out_of_range.401 if an array index is out of range.
22086|       |
22087|       |    @throw out_of_range.403 if a JSON pointer inside the patch could not be
22088|       |    resolved successfully in the current JSON value; example: `"key baz not
22089|       |    found"`
22090|       |
22091|       |    @throw out_of_range.405 if JSON pointer has no parent ("add", "remove",
22092|       |    "move")
22093|       |
22094|       |    @throw other_error.501 if "test" operation was unsuccessful
22095|       |
22096|       |    @complexity Linear in the size of the JSON value and the length of the
22097|       |    JSON patch. As usually only a fraction of the JSON value is affected by
22098|       |    the patch, the complexity can usually be neglected.
22099|       |
22100|       |    @liveexample{The following code shows how a JSON patch is applied to a
22101|       |    value.,patch}
22102|       |
22103|       |    @sa @ref diff -- create a JSON patch by comparing two JSON values
22104|       |
22105|       |    @sa [RFC 6902 (JSON Patch)](https://tools.ietf.org/html/rfc6902)
22106|       |    @sa [RFC 6901 (JSON Pointer)](https://tools.ietf.org/html/rfc6901)
22107|       |
22108|       |    @since version 2.0.0
22109|       |    */
22110|       |    basic_json patch(const basic_json& json_patch) const
22111|       |    {
22112|       |        // make a working copy to apply the patch to
22113|       |        basic_json result = *this;
22114|       |
22115|       |        // the valid JSON Patch operations
22116|       |        enum class patch_operations {add, remove, replace, move, copy, test, invalid};
22117|       |
22118|       |        const auto get_op = [](const std::string & op)
22119|       |        {
22120|       |            if (op == "add")
22121|       |            {
22122|       |                return patch_operations::add;
22123|       |            }
22124|       |            if (op == "remove")
22125|       |            {
22126|       |                return patch_operations::remove;
22127|       |            }
22128|       |            if (op == "replace")
22129|       |            {
22130|       |                return patch_operations::replace;
22131|       |            }
22132|       |            if (op == "move")
22133|       |            {
22134|       |                return patch_operations::move;
22135|       |            }
22136|       |            if (op == "copy")
22137|       |            {
22138|       |                return patch_operations::copy;
22139|       |            }
22140|       |            if (op == "test")
22141|       |            {
22142|       |                return patch_operations::test;
22143|       |            }
22144|       |
22145|       |            return patch_operations::invalid;
22146|       |        };
22147|       |
22148|       |        // wrapper for "add" operation; add value at ptr
22149|       |        const auto operation_add = [&result](json_pointer & ptr, basic_json val)
22150|       |        {
22151|       |            // adding to the root of the target document means replacing it
22152|       |            if (ptr.empty())
22153|       |            {
22154|       |                result = val;
22155|       |                return;
22156|       |            }
22157|       |
22158|       |            // make sure the top element of the pointer exists
22159|       |            json_pointer top_pointer = ptr.top();
22160|       |            if (top_pointer != ptr)
22161|       |            {
22162|       |                result.at(top_pointer);
22163|       |            }
22164|       |
22165|       |            // get reference to parent of JSON pointer ptr
22166|       |            const auto last_path = ptr.back();
22167|       |            ptr.pop_back();
22168|       |            basic_json& parent = result[ptr];
22169|       |
22170|       |            switch (parent.m_type)
22171|       |            {
22172|       |                case value_t::null:
22173|       |                case value_t::object:
22174|       |                {
22175|       |                    // use operator[] to add value
22176|       |                    parent[last_path] = val;
22177|       |                    break;
22178|       |                }
22179|       |
22180|       |                case value_t::array:
22181|       |                {
22182|       |                    if (last_path == "-")
22183|       |                    {
22184|       |                        // special case: append to back
22185|       |                        parent.push_back(val);
22186|       |                    }
22187|       |                    else
22188|       |                    {
22189|       |                        const auto idx = json_pointer::array_index(last_path);
22190|       |                        if (JSON_HEDLEY_UNLIKELY(static_cast<size_type>(idx) > parent.size()))
22191|       |                        {
22192|       |                            // avoid undefined behavior
22193|       |                            JSON_THROW(out_of_range::create(401, "array index " + std::to_string(idx) + " is out of range"));
22194|       |                        }
22195|       |
22196|       |                        // default case: insert add offset
22197|       |                        parent.insert(parent.begin() + static_cast<difference_type>(idx), val);
22198|       |                    }
22199|       |                    break;
22200|       |                }
22201|       |
22202|       |                // if there exists a parent it cannot be primitive
22203|       |                default:            // LCOV_EXCL_LINE
22204|       |                    assert(false);  // LCOV_EXCL_LINE
22205|       |            }
22206|       |        };
22207|       |
22208|       |        // wrapper for "remove" operation; remove value at ptr
22209|       |        const auto operation_remove = [&result](json_pointer & ptr)
22210|       |        {
22211|       |            // get reference to parent of JSON pointer ptr
22212|       |            const auto last_path = ptr.back();
22213|       |            ptr.pop_back();
22214|       |            basic_json& parent = result.at(ptr);
22215|       |
22216|       |            // remove child
22217|       |            if (parent.is_object())
22218|       |            {
22219|       |                // perform range check
22220|       |                auto it = parent.find(last_path);
22221|       |                if (JSON_HEDLEY_LIKELY(it != parent.end()))
22222|       |                {
22223|       |                    parent.erase(it);
22224|       |                }
22225|       |                else
22226|       |                {
22227|       |                    JSON_THROW(out_of_range::create(403, "key '" + last_path + "' not found"));
22228|       |                }
22229|       |            }
22230|       |            else if (parent.is_array())
22231|       |            {
22232|       |                // note erase performs range check
22233|       |                parent.erase(static_cast<size_type>(json_pointer::array_index(last_path)));
22234|       |            }
22235|       |        };
22236|       |
22237|       |        // type check: top level value must be an array
22238|       |        if (JSON_HEDLEY_UNLIKELY(not json_patch.is_array()))
22239|       |        {
22240|       |            JSON_THROW(parse_error::create(104, 0, "JSON patch must be an array of objects"));
22241|       |        }
22242|       |
22243|       |        // iterate and apply the operations
22244|       |        for (const auto& val : json_patch)
22245|       |        {
22246|       |            // wrapper to get a value for an operation
22247|       |            const auto get_value = [&val](const std::string & op,
22248|       |                                          const std::string & member,
22249|       |                                          bool string_type) -> basic_json &
22250|       |            {
22251|       |                // find value
22252|       |                auto it = val.m_value.object->find(member);
22253|       |
22254|       |                // context-sensitive error message
22255|       |                const auto error_msg = (op == "op") ? "operation" : "operation '" + op + "'";
22256|       |
22257|       |                // check if desired value is present
22258|       |                if (JSON_HEDLEY_UNLIKELY(it == val.m_value.object->end()))
22259|       |                {
22260|       |                    JSON_THROW(parse_error::create(105, 0, error_msg + " must have member '" + member + "'"));
22261|       |                }
22262|       |
22263|       |                // check if result is of type string
22264|       |                if (JSON_HEDLEY_UNLIKELY(string_type and not it->second.is_string()))
22265|       |                {
22266|       |                    JSON_THROW(parse_error::create(105, 0, error_msg + " must have string member '" + member + "'"));
22267|       |                }
22268|       |
22269|       |                // no error: return value
22270|       |                return it->second;
22271|       |            };
22272|       |
22273|       |            // type check: every element of the array must be an object
22274|       |            if (JSON_HEDLEY_UNLIKELY(not val.is_object()))
22275|       |            {
22276|       |                JSON_THROW(parse_error::create(104, 0, "JSON patch must be an array of objects"));
22277|       |            }
22278|       |
22279|       |            // collect mandatory members
22280|       |            const std::string op = get_value("op", "op", true);
22281|       |            const std::string path = get_value(op, "path", true);
22282|       |            json_pointer ptr(path);
22283|       |
22284|       |            switch (get_op(op))
22285|       |            {
22286|       |                case patch_operations::add:
22287|       |                {
22288|       |                    operation_add(ptr, get_value("add", "value", false));
22289|       |                    break;
22290|       |                }
22291|       |
22292|       |                case patch_operations::remove:
22293|       |                {
22294|       |                    operation_remove(ptr);
22295|       |                    break;
22296|       |                }
22297|       |
22298|       |                case patch_operations::replace:
22299|       |                {
22300|       |                    // the "path" location must exist - use at()
22301|       |                    result.at(ptr) = get_value("replace", "value", false);
22302|       |                    break;
22303|       |                }
22304|       |
22305|       |                case patch_operations::move:
22306|       |                {
22307|       |                    const std::string from_path = get_value("move", "from", true);
22308|       |                    json_pointer from_ptr(from_path);
22309|       |
22310|       |                    // the "from" location must exist - use at()
22311|       |                    basic_json v = result.at(from_ptr);
22312|       |
22313|       |                    // The move operation is functionally identical to a
22314|       |                    // "remove" operation on the "from" location, followed
22315|       |                    // immediately by an "add" operation at the target
22316|       |                    // location with the value that was just removed.
22317|       |                    operation_remove(from_ptr);
22318|       |                    operation_add(ptr, v);
22319|       |                    break;
22320|       |                }
22321|       |
22322|       |                case patch_operations::copy:
22323|       |                {
22324|       |                    const std::string from_path = get_value("copy", "from", true);
22325|       |                    const json_pointer from_ptr(from_path);
22326|       |
22327|       |                    // the "from" location must exist - use at()
22328|       |                    basic_json v = result.at(from_ptr);
22329|       |
22330|       |                    // The copy is functionally identical to an "add"
22331|       |                    // operation at the target location using the value
22332|       |                    // specified in the "from" member.
22333|       |                    operation_add(ptr, v);
22334|       |                    break;
22335|       |                }
22336|       |
22337|       |                case patch_operations::test:
22338|       |                {
22339|       |                    bool success = false;
22340|       |                    JSON_TRY
22341|       |                    {
22342|       |                        // check if "value" matches the one at "path"
22343|       |                        // the "path" location must exist - use at()
22344|       |                        success = (result.at(ptr) == get_value("test", "value", false));
22345|       |                    }
22346|       |                    JSON_INTERNAL_CATCH (out_of_range&)
22347|       |                    {
22348|       |                        // ignore out of range errors: success remains false
22349|       |                    }
22350|       |
22351|       |                    // throw an exception if test fails
22352|       |                    if (JSON_HEDLEY_UNLIKELY(not success))
22353|       |                    {
22354|       |                        JSON_THROW(other_error::create(501, "unsuccessful: " + val.dump()));
22355|       |                    }
22356|       |
22357|       |                    break;
22358|       |                }
22359|       |
22360|       |                default:
22361|       |                {
22362|       |                    // op must be "add", "remove", "replace", "move", "copy", or
22363|       |                    // "test"
22364|       |                    JSON_THROW(parse_error::create(105, 0, "operation value '" + op + "' is invalid"));
22365|       |                }
22366|       |            }
22367|       |        }
22368|       |
22369|       |        return result;
22370|       |    }
22371|       |
22372|       |    /*!
22373|       |    @brief creates a diff as a JSON patch
22374|       |
22375|       |    Creates a [JSON Patch](http://jsonpatch.com) so that value @a source can
22376|       |    be changed into the value @a target by calling @ref patch function.
22377|       |
22378|       |    @invariant For two JSON values @a source and @a target, the following code
22379|       |    yields always `true`:
22380|       |    @code {.cpp}
22381|       |    source.patch(diff(source, target)) == target;
22382|       |    @endcode
22383|       |
22384|       |    @note Currently, only `remove`, `add`, and `replace` operations are
22385|       |          generated.
22386|       |
22387|       |    @param[in] source  JSON value to compare from
22388|       |    @param[in] target  JSON value to compare against
22389|       |    @param[in] path    helper value to create JSON pointers
22390|       |
22391|       |    @return a JSON patch to convert the @a source to @a target
22392|       |
22393|       |    @complexity Linear in the lengths of @a source and @a target.
22394|       |
22395|       |    @liveexample{The following code shows how a JSON patch is created as a
22396|       |    diff for two JSON values.,diff}
22397|       |
22398|       |    @sa @ref patch -- apply a JSON patch
22399|       |    @sa @ref merge_patch -- apply a JSON Merge Patch
22400|       |
22401|       |    @sa [RFC 6902 (JSON Patch)](https://tools.ietf.org/html/rfc6902)
22402|       |
22403|       |    @since version 2.0.0
22404|       |    */
22405|       |    JSON_HEDLEY_WARN_UNUSED_RESULT
22406|       |    static basic_json diff(const basic_json& source, const basic_json& target,
22407|       |                           const std::string& path = "")
22408|       |    {
22409|       |        // the patch
22410|       |        basic_json result(value_t::array);
22411|       |
22412|       |        // if the values are the same, return empty patch
22413|       |        if (source == target)
22414|       |        {
22415|       |            return result;
22416|       |        }
22417|       |
22418|       |        if (source.type() != target.type())
22419|       |        {
22420|       |            // different types: replace value
22421|       |            result.push_back(
22422|       |            {
22423|       |                {"op", "replace"}, {"path", path}, {"value", target}
22424|       |            });
22425|       |            return result;
22426|       |        }
22427|       |
22428|       |        switch (source.type())
22429|       |        {
22430|       |            case value_t::array:
22431|       |            {
22432|       |                // first pass: traverse common elements
22433|       |                std::size_t i = 0;
22434|       |                while (i < source.size() and i < target.size())
22435|       |                {
22436|       |                    // recursive call to compare array values at index i
22437|       |                    auto temp_diff = diff(source[i], target[i], path + "/" + std::to_string(i));
22438|       |                    result.insert(result.end(), temp_diff.begin(), temp_diff.end());
22439|       |                    ++i;
22440|       |                }
22441|       |
22442|       |                // i now reached the end of at least one array
22443|       |                // in a second pass, traverse the remaining elements
22444|       |
22445|       |                // remove my remaining elements
22446|       |                const auto end_index = static_cast<difference_type>(result.size());
22447|       |                while (i < source.size())
22448|       |                {
22449|       |                    // add operations in reverse order to avoid invalid
22450|       |                    // indices
22451|       |                    result.insert(result.begin() + end_index, object(
22452|       |                    {
22453|       |                        {"op", "remove"},
22454|       |                        {"path", path + "/" + std::to_string(i)}
22455|       |                    }));
22456|       |                    ++i;
22457|       |                }
22458|       |
22459|       |                // add other remaining elements
22460|       |                while (i < target.size())
22461|       |                {
22462|       |                    result.push_back(
22463|       |                    {
22464|       |                        {"op", "add"},
22465|       |                        {"path", path + "/" + std::to_string(i)},
22466|       |                        {"value", target[i]}
22467|       |                    });
22468|       |                    ++i;
22469|       |                }
22470|       |
22471|       |                break;
22472|       |            }
22473|       |
22474|       |            case value_t::object:
22475|       |            {
22476|       |                // first pass: traverse this object's elements
22477|       |                for (auto it = source.cbegin(); it != source.cend(); ++it)
22478|       |                {
22479|       |                    // escape the key name to be used in a JSON patch
22480|       |                    const auto key = json_pointer::escape(it.key());
22481|       |
22482|       |                    if (target.find(it.key()) != target.end())
22483|       |                    {
22484|       |                        // recursive call to compare object values at key it
22485|       |                        auto temp_diff = diff(it.value(), target[it.key()], path + "/" + key);
22486|       |                        result.insert(result.end(), temp_diff.begin(), temp_diff.end());
22487|       |                    }
22488|       |                    else
22489|       |                    {
22490|       |                        // found a key that is not in o -> remove it
22491|       |                        result.push_back(object(
22492|       |                        {
22493|       |                            {"op", "remove"}, {"path", path + "/" + key}
22494|       |                        }));
22495|       |                    }
22496|       |                }
22497|       |
22498|       |                // second pass: traverse other object's elements
22499|       |                for (auto it = target.cbegin(); it != target.cend(); ++it)
22500|       |                {
22501|       |                    if (source.find(it.key()) == source.end())
22502|       |                    {
22503|       |                        // found a key that is not in this -> add it
22504|       |                        const auto key = json_pointer::escape(it.key());
22505|       |                        result.push_back(
22506|       |                        {
22507|       |                            {"op", "add"}, {"path", path + "/" + key},
22508|       |                            {"value", it.value()}
22509|       |                        });
22510|       |                    }
22511|       |                }
22512|       |
22513|       |                break;
22514|       |            }
22515|       |
22516|       |            default:
22517|       |            {
22518|       |                // both primitive type: replace value
22519|       |                result.push_back(
22520|       |                {
22521|       |                    {"op", "replace"}, {"path", path}, {"value", target}
22522|       |                });
22523|       |                break;
22524|       |            }
22525|       |        }
22526|       |
22527|       |        return result;
22528|       |    }
22529|       |
22530|       |    /// @}
22531|       |
22532|       |    ////////////////////////////////
22533|       |    // JSON Merge Patch functions //
22534|       |    ////////////////////////////////
22535|       |
22536|       |    /// @name JSON Merge Patch functions
22537|       |    /// @{
22538|       |
22539|       |    /*!
22540|       |    @brief applies a JSON Merge Patch
22541|       |
22542|       |    The merge patch format is primarily intended for use with the HTTP PATCH
22543|       |    method as a means of describing a set of modifications to a target
22544|       |    resource's content. This function applies a merge patch to the current
22545|       |    JSON value.
22546|       |
22547|       |    The function implements the following algorithm from Section 2 of
22548|       |    [RFC 7396 (JSON Merge Patch)](https://tools.ietf.org/html/rfc7396):
22549|       |
22550|       |    ```
22551|       |    define MergePatch(Target, Patch):
22552|       |      if Patch is an Object:
22553|       |        if Target is not an Object:
22554|       |          Target = {} // Ignore the contents and set it to an empty Object
22555|       |        for each Name/Value pair in Patch:
22556|       |          if Value is null:
22557|       |            if Name exists in Target:
22558|       |              remove the Name/Value pair from Target
22559|       |          else:
22560|       |            Target[Name] = MergePatch(Target[Name], Value)
22561|       |        return Target
22562|       |      else:
22563|       |        return Patch
22564|       |    ```
22565|       |
22566|       |    Thereby, `Target` is the current object; that is, the patch is applied to
22567|       |    the current value.
22568|       |
22569|       |    @param[in] apply_patch  the patch to apply
22570|       |
22571|       |    @complexity Linear in the lengths of @a patch.
22572|       |
22573|       |    @liveexample{The following code shows how a JSON Merge Patch is applied to
22574|       |    a JSON document.,merge_patch}
22575|       |
22576|       |    @sa @ref patch -- apply a JSON patch
22577|       |    @sa [RFC 7396 (JSON Merge Patch)](https://tools.ietf.org/html/rfc7396)
22578|       |
22579|       |    @since version 3.0.0
22580|       |    */
22581|       |    void merge_patch(const basic_json& apply_patch)
22582|       |    {
22583|       |        if (apply_patch.is_object())
22584|       |        {
22585|       |            if (not is_object())
22586|       |            {
22587|       |                *this = object();
22588|       |            }
22589|       |            for (auto it = apply_patch.begin(); it != apply_patch.end(); ++it)
22590|       |            {
22591|       |                if (it.value().is_null())
22592|       |                {
22593|       |                    erase(it.key());
22594|       |                }
22595|       |                else
22596|       |                {
22597|       |                    operator[](it.key()).merge_patch(it.value());
22598|       |                }
22599|       |            }
22600|       |        }
22601|       |        else
22602|       |        {
22603|       |            *this = apply_patch;
22604|       |        }
22605|       |    }
22606|       |
22607|       |    /// @}
22608|       |};
22609|       |
22610|       |/*!
22611|       |@brief user-defined to_string function for JSON values
22612|       |
22613|       |This function implements a user-defined to_string  for JSON objects.
22614|       |
22615|       |@param[in] j  a JSON object
22616|       |@return a std::string object
22617|       |*/
22618|       |
22619|       |NLOHMANN_BASIC_JSON_TPL_DECLARATION
22620|       |std::string to_string(const NLOHMANN_BASIC_JSON_TPL& j)
22621|       |{
22622|       |    return j.dump();
22623|       |}
22624|       |} // namespace nlohmann
22625|       |
22626|       |///////////////////////
22627|       |// nonmember support //
22628|       |///////////////////////
22629|       |
22630|       |// specialization of std::swap, and std::hash
22631|       |namespace std
22632|       |{
22633|       |
22634|       |/// hash value for JSON objects
22635|       |template<>
22636|       |struct hash<nlohmann::json>
22637|       |{
22638|       |    /*!
22639|       |    @brief return a hash value for a JSON object
22640|       |
22641|       |    @since version 1.0.0
22642|       |    */
22643|       |    std::size_t operator()(const nlohmann::json& j) const
22644|      0|    {
22645|      0|        // a naive hashing via the string representation
22646|      0|        const auto& h = hash<nlohmann::json::string_t>();
22647|      0|        return h(j.dump());
22648|      0|    }
22649|       |};
22650|       |
22651|       |/// specialization for std::less<value_t>
22652|       |/// @note: do not remove the space after '<',
22653|       |///        see https://github.com/nlohmann/json/pull/679
22654|       |template<>
22655|       |struct less<::nlohmann::detail::value_t>
22656|       |{
22657|       |    /*!
22658|       |    @brief compare two value_t enum values
22659|       |    @since version 3.0.0
22660|       |    */
22661|       |    bool operator()(nlohmann::detail::value_t lhs,
22662|       |                    nlohmann::detail::value_t rhs) const noexcept
22663|      0|    {
22664|      0|        return nlohmann::detail::operator<(lhs, rhs);
22665|      0|    }
22666|       |};
22667|       |
22668|       |/*!
22669|       |@brief exchanges the values of two JSON objects
22670|       |
22671|       |@since version 1.0.0
22672|       |*/
22673|       |template<>
22674|       |inline void swap<nlohmann::json>(nlohmann::json& j1, nlohmann::json& j2) noexcept(
22675|       |    is_nothrow_move_constructible<nlohmann::json>::value and
22676|       |    is_nothrow_move_assignable<nlohmann::json>::value
22677|       |)
22678|      0|{
22679|      0|    j1.swap(j2);
22680|      0|}
22681|       |
22682|       |} // namespace std
22683|       |
22684|       |/*!
22685|       |@brief user-defined string literal for JSON values
22686|       |
22687|       |This operator implements a user-defined string literal for JSON objects. It
22688|       |can be used by adding `"_json"` to a string literal and returns a JSON object
22689|       |if no parse error occurred.
22690|       |
22691|       |@param[in] s  a string representation of a JSON object
22692|       |@param[in] n  the length of string @a s
22693|       |@return a JSON object
22694|       |
22695|       |@since version 1.0.0
22696|       |*/
22697|       |JSON_HEDLEY_NON_NULL(1)
22698|       |inline nlohmann::json operator "" _json(const char* s, std::size_t n)
22699|      0|{
22700|      0|    return nlohmann::json::parse(s, s + n);
22701|      0|}
22702|       |
22703|       |/*!
22704|       |@brief user-defined string literal for JSON pointer
22705|       |
22706|       |This operator implements a user-defined string literal for JSON Pointers. It
22707|       |can be used by adding `"_json_pointer"` to a string literal and returns a JSON pointer
22708|       |object if no parse error occurred.
22709|       |
22710|       |@param[in] s  a string representation of a JSON Pointer
22711|       |@param[in] n  the length of string @a s
22712|       |@return a JSON pointer object
22713|       |
22714|       |@since version 2.0.0
22715|       |*/
22716|       |JSON_HEDLEY_NON_NULL(1)
22717|       |inline nlohmann::json::json_pointer operator "" _json_pointer(const char* s, std::size_t n)
22718|      0|{
22719|      0|    return nlohmann::json::json_pointer(std::string(s, n));
22720|      0|}
22721|       |
22722|       |// #include <nlohmann/detail/macro_unscope.hpp>
22723|       |
22724|       |
22725|       |// restore GCC/clang diagnostic settings
22726|       |#if defined(__clang__) || defined(__GNUC__) || defined(__GNUG__)
22727|       |    #pragma GCC diagnostic pop
22728|       |#endif
22729|       |#if defined(__clang__)
22730|       |    #pragma GCC diagnostic pop
22731|       |#endif
22732|       |
22733|       |// clean up
22734|       |#undef JSON_INTERNAL_CATCH
22735|       |#undef JSON_CATCH
22736|       |#undef JSON_THROW
22737|       |#undef JSON_TRY
22738|       |#undef JSON_HAS_CPP_14
22739|       |#undef JSON_HAS_CPP_17
22740|       |#undef NLOHMANN_BASIC_JSON_TPL_DECLARATION
22741|       |#undef NLOHMANN_BASIC_JSON_TPL
22742|       |
22743|       |// #include <nlohmann/thirdparty/hedley/hedley_undef.hpp>
22744|       |#undef JSON_HEDLEY_ALWAYS_INLINE
22745|       |#undef JSON_HEDLEY_ARM_VERSION
22746|       |#undef JSON_HEDLEY_ARM_VERSION_CHECK
22747|       |#undef JSON_HEDLEY_ARRAY_PARAM
22748|       |#undef JSON_HEDLEY_ASSUME
22749|       |#undef JSON_HEDLEY_BEGIN_C_DECLS
22750|       |#undef JSON_HEDLEY_C_DECL
22751|       |#undef JSON_HEDLEY_CLANG_HAS_ATTRIBUTE
22752|       |#undef JSON_HEDLEY_CLANG_HAS_BUILTIN
22753|       |#undef JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE
22754|       |#undef JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE
22755|       |#undef JSON_HEDLEY_CLANG_HAS_EXTENSION
22756|       |#undef JSON_HEDLEY_CLANG_HAS_FEATURE
22757|       |#undef JSON_HEDLEY_CLANG_HAS_WARNING
22758|       |#undef JSON_HEDLEY_COMPCERT_VERSION
22759|       |#undef JSON_HEDLEY_COMPCERT_VERSION_CHECK
22760|       |#undef JSON_HEDLEY_CONCAT
22761|       |#undef JSON_HEDLEY_CONCAT_EX
22762|       |#undef JSON_HEDLEY_CONST
22763|       |#undef JSON_HEDLEY_CONST_CAST
22764|       |#undef JSON_HEDLEY_CONSTEXPR
22765|       |#undef JSON_HEDLEY_CPP_CAST
22766|       |#undef JSON_HEDLEY_CRAY_VERSION
22767|       |#undef JSON_HEDLEY_CRAY_VERSION_CHECK
22768|       |#undef JSON_HEDLEY_DEPRECATED
22769|       |#undef JSON_HEDLEY_DEPRECATED_FOR
22770|       |#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL
22771|       |#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_
22772|       |#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED
22773|       |#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES
22774|       |#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS
22775|       |#undef JSON_HEDLEY_DIAGNOSTIC_POP
22776|       |#undef JSON_HEDLEY_DIAGNOSTIC_PUSH
22777|       |#undef JSON_HEDLEY_DMC_VERSION
22778|       |#undef JSON_HEDLEY_DMC_VERSION_CHECK
22779|       |#undef JSON_HEDLEY_EMPTY_BASES
22780|       |#undef JSON_HEDLEY_EMSCRIPTEN_VERSION
22781|       |#undef JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK
22782|       |#undef JSON_HEDLEY_END_C_DECLS
22783|       |#undef JSON_HEDLEY_FALL_THROUGH
22784|       |#undef JSON_HEDLEY_FLAGS
22785|       |#undef JSON_HEDLEY_FLAGS_CAST
22786|       |#undef JSON_HEDLEY_GCC_HAS_ATTRIBUTE
22787|       |#undef JSON_HEDLEY_GCC_HAS_BUILTIN
22788|       |#undef JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE
22789|       |#undef JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE
22790|       |#undef JSON_HEDLEY_GCC_HAS_EXTENSION
22791|       |#undef JSON_HEDLEY_GCC_HAS_FEATURE
22792|       |#undef JSON_HEDLEY_GCC_HAS_WARNING
22793|       |#undef JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK
22794|       |#undef JSON_HEDLEY_GCC_VERSION
22795|       |#undef JSON_HEDLEY_GCC_VERSION_CHECK
22796|       |#undef JSON_HEDLEY_GNUC_HAS_ATTRIBUTE
22797|       |#undef JSON_HEDLEY_GNUC_HAS_BUILTIN
22798|       |#undef JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE
22799|       |#undef JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE
22800|       |#undef JSON_HEDLEY_GNUC_HAS_EXTENSION
22801|       |#undef JSON_HEDLEY_GNUC_HAS_FEATURE
22802|       |#undef JSON_HEDLEY_GNUC_HAS_WARNING
22803|       |#undef JSON_HEDLEY_GNUC_VERSION
22804|       |#undef JSON_HEDLEY_GNUC_VERSION_CHECK
22805|       |#undef JSON_HEDLEY_HAS_ATTRIBUTE
22806|       |#undef JSON_HEDLEY_HAS_BUILTIN
22807|       |#undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE
22808|       |#undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS
22809|       |#undef JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE
22810|       |#undef JSON_HEDLEY_HAS_EXTENSION
22811|       |#undef JSON_HEDLEY_HAS_FEATURE
22812|       |#undef JSON_HEDLEY_HAS_WARNING
22813|       |#undef JSON_HEDLEY_IAR_VERSION
22814|       |#undef JSON_HEDLEY_IAR_VERSION_CHECK
22815|       |#undef JSON_HEDLEY_IBM_VERSION
22816|       |#undef JSON_HEDLEY_IBM_VERSION_CHECK
22817|       |#undef JSON_HEDLEY_IMPORT
22818|       |#undef JSON_HEDLEY_INLINE
22819|       |#undef JSON_HEDLEY_INTEL_VERSION
22820|       |#undef JSON_HEDLEY_INTEL_VERSION_CHECK
22821|       |#undef JSON_HEDLEY_IS_CONSTANT
22822|       |#undef JSON_HEDLEY_IS_CONSTEXPR_
22823|       |#undef JSON_HEDLEY_LIKELY
22824|       |#undef JSON_HEDLEY_MALLOC
22825|       |#undef JSON_HEDLEY_MESSAGE
22826|       |#undef JSON_HEDLEY_MSVC_VERSION
22827|       |#undef JSON_HEDLEY_MSVC_VERSION_CHECK
22828|       |#undef JSON_HEDLEY_NEVER_INLINE
22829|       |#undef JSON_HEDLEY_NO_ESCAPE
22830|       |#undef JSON_HEDLEY_NON_NULL
22831|       |#undef JSON_HEDLEY_NO_RETURN
22832|       |#undef JSON_HEDLEY_NO_THROW
22833|       |#undef JSON_HEDLEY_NULL
22834|       |#undef JSON_HEDLEY_PELLES_VERSION
22835|       |#undef JSON_HEDLEY_PELLES_VERSION_CHECK
22836|       |#undef JSON_HEDLEY_PGI_VERSION
22837|       |#undef JSON_HEDLEY_PGI_VERSION_CHECK
22838|       |#undef JSON_HEDLEY_PREDICT
22839|       |#undef JSON_HEDLEY_PRINTF_FORMAT
22840|       |#undef JSON_HEDLEY_PRIVATE
22841|       |#undef JSON_HEDLEY_PUBLIC
22842|       |#undef JSON_HEDLEY_PURE
22843|       |#undef JSON_HEDLEY_REINTERPRET_CAST
22844|       |#undef JSON_HEDLEY_REQUIRE
22845|       |#undef JSON_HEDLEY_REQUIRE_CONSTEXPR
22846|       |#undef JSON_HEDLEY_REQUIRE_MSG
22847|       |#undef JSON_HEDLEY_RESTRICT
22848|       |#undef JSON_HEDLEY_RETURNS_NON_NULL
22849|       |#undef JSON_HEDLEY_SENTINEL
22850|       |#undef JSON_HEDLEY_STATIC_ASSERT
22851|       |#undef JSON_HEDLEY_STATIC_CAST
22852|       |#undef JSON_HEDLEY_STRINGIFY
22853|       |#undef JSON_HEDLEY_STRINGIFY_EX
22854|       |#undef JSON_HEDLEY_SUNPRO_VERSION
22855|       |#undef JSON_HEDLEY_SUNPRO_VERSION_CHECK
22856|       |#undef JSON_HEDLEY_TINYC_VERSION
22857|       |#undef JSON_HEDLEY_TINYC_VERSION_CHECK
22858|       |#undef JSON_HEDLEY_TI_VERSION
22859|       |#undef JSON_HEDLEY_TI_VERSION_CHECK
22860|       |#undef JSON_HEDLEY_UNAVAILABLE
22861|       |#undef JSON_HEDLEY_UNLIKELY
22862|       |#undef JSON_HEDLEY_UNPREDICTABLE
22863|       |#undef JSON_HEDLEY_UNREACHABLE
22864|       |#undef JSON_HEDLEY_UNREACHABLE_RETURN
22865|       |#undef JSON_HEDLEY_VERSION
22866|       |#undef JSON_HEDLEY_VERSION_DECODE_MAJOR
22867|       |#undef JSON_HEDLEY_VERSION_DECODE_MINOR
22868|       |#undef JSON_HEDLEY_VERSION_DECODE_REVISION
22869|       |#undef JSON_HEDLEY_VERSION_ENCODE
22870|       |#undef JSON_HEDLEY_WARNING
22871|       |#undef JSON_HEDLEY_WARN_UNUSED_RESULT
22872|       |
22873|       |
22874|       |
22875|       |#endif  // INCLUDE_NLOHMANN_JSON_HPP_

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/Statistic/statistic.h:
    1|       |#pragma once
    2|       |
    3|       |#include <iostream>
    4|       |#include <deque>
    5|       |#include <numeric>
    6|       |#include <algorithm>
    7|       |#include <sstream>
    8|       |#include <cmath>
    9|       |#include <vector>
   10|       |
   11|       |
   12|       |template <class T>
   13|       |struct TREND_DATA{
   14|       |    int down = 0;
   15|       |    double downPercent = 0;
   16|       |    int up = 0;
   17|       |    double upPercent = 0;
   18|       |    int eq = 0;
   19|       |    double eqPercent = 0;
   20|       |    T down_sum = 0;
   21|       |    T up_sum = 0;
   22|      8|    void clear(){
   23|      8|        down = 0;
   24|      8|        up = 0;
   25|      8|        eq = 0;
   26|      8|        down_sum = 0;
   27|      8|        up_sum = 0;
   28|      8|    }
  ------------------
  | _ZN10TREND_DATAIdE5clearEv:
  |   22|      3|    void clear(){
  |   23|      3|        down = 0;
  |   24|      3|        up = 0;
  |   25|      3|        eq = 0;
  |   26|      3|        down_sum = 0;
  |   27|      3|        up_sum = 0;
  |   28|      3|    }
  ------------------
  | _ZN10TREND_DATAIfE5clearEv:
  |   22|      5|    void clear(){
  |   23|      5|        down = 0;
  |   24|      5|        up = 0;
  |   25|      5|        eq = 0;
  |   26|      5|        down_sum = 0;
  |   27|      5|        up_sum = 0;
  |   28|      5|    }
  ------------------
   29|     13|    void countPercent(){
   30|     13|        int sum = eq + up + down;
   31|     13|        if(sum == 0)
   32|      3|            return;
   33|     10|        eqPercent = eq * 100.0f / sum;
   34|     10|        upPercent = up * 100.0f / sum;
   35|     10|        downPercent = down * 100.0f / sum;
   36|     10|    }
  ------------------
  | _ZN10TREND_DATAIdE12countPercentEv:
  |   29|      3|    void countPercent(){
  |   30|      3|        int sum = eq + up + down;
  |   31|      3|        if(sum == 0)
  |   32|      1|            return;
  |   33|      2|        eqPercent = eq * 100.0f / sum;
  |   34|      2|        upPercent = up * 100.0f / sum;
  |   35|      2|        downPercent = down * 100.0f / sum;
  |   36|      2|    }
  ------------------
  | _ZN10TREND_DATAIfE12countPercentEv:
  |   29|     10|    void countPercent(){
  |   30|     10|        int sum = eq + up + down;
  |   31|     10|        if(sum == 0)
  |   32|      2|            return;
  |   33|      8|        eqPercent = eq * 100.0f / sum;
  |   34|      8|        upPercent = up * 100.0f / sum;
  |   35|      8|        downPercent = down * 100.0f / sum;
  |   36|      8|    }
  ------------------
   37|     13|    std::string getStringInfo(){
   38|     13|        countPercent();
   39|     13|        std::stringstream ret;
   40|       |        //ret.precision(2);
   41|     13|        ret << "eq: " << eqPercent << "% | "
   42|     13|            << "up: " << upPercent << "% | "
   43|     13|            << "down: " << downPercent << "%"
   44|     13|            << std::endl
   45|     13|            << "eq: " << eq
   46|     13|            << " | up: " << up
   47|     13|            << " | down: " << down
   48|     13|            << " | down_sume: " << down_sum
   49|     13|            << " | up_sum: " << up_sum
   50|     13|            << std::endl;
   51|       |
   52|     13|        return ret.str();
   53|     13|    }
  ------------------
  | _ZN10TREND_DATAIdE13getStringInfoB5cxx11Ev:
  |   37|      3|    std::string getStringInfo(){
  |   38|      3|        countPercent();
  |   39|      3|        std::stringstream ret;
  |   40|       |        //ret.precision(2);
  |   41|      3|        ret << "eq: " << eqPercent << "% | "
  |   42|      3|            << "up: " << upPercent << "% | "
  |   43|      3|            << "down: " << downPercent << "%"
  |   44|      3|            << std::endl
  |   45|      3|            << "eq: " << eq
  |   46|      3|            << " | up: " << up
  |   47|      3|            << " | down: " << down
  |   48|      3|            << " | down_sume: " << down_sum
  |   49|      3|            << " | up_sum: " << up_sum
  |   50|      3|            << std::endl;
  |   51|       |
  |   52|      3|        return ret.str();
  |   53|      3|    }
  ------------------
  | _ZN10TREND_DATAIfE13getStringInfoB5cxx11Ev:
  |   37|     10|    std::string getStringInfo(){
  |   38|     10|        countPercent();
  |   39|     10|        std::stringstream ret;
  |   40|       |        //ret.precision(2);
  |   41|     10|        ret << "eq: " << eqPercent << "% | "
  |   42|     10|            << "up: " << upPercent << "% | "
  |   43|     10|            << "down: " << downPercent << "%"
  |   44|     10|            << std::endl
  |   45|     10|            << "eq: " << eq
  |   46|     10|            << " | up: " << up
  |   47|     10|            << " | down: " << down
  |   48|     10|            << " | down_sume: " << down_sum
  |   49|     10|            << " | up_sum: " << up_sum
  |   50|     10|            << std::endl;
  |   51|       |
  |   52|     10|        return ret.str();
  |   53|     10|    }
  ------------------
   54|       |};
   55|       |
   56|       |template <class T>
   57|       |class STATISTIC
   58|       |{
   59|       |public:
   60|       |    explicit STATISTIC(std::size_t size): m_size(size)
   61|  1.52k|    {
   62|       |
   63|  1.52k|    }
  ------------------
  | _ZN9STATISTICIfEC2Em:
  |   61|  1.14k|    {
  |   62|       |
  |   63|  1.14k|    }
  ------------------
  | _ZN9STATISTICIdEC2Em:
  |   61|    376|    {
  |   62|       |
  |   63|    376|    }
  ------------------
  | _ZN9STATISTICIiEC2Em:
  |   61|      1|    {
  |   62|       |
  |   63|      1|    }
  ------------------
   64|      3|    void resize(std::size_t i){
   65|      3|        if (i < m_size){
   66|     24|            while(m_dequeue.size()> i){
   67|     21|                pop_front();
   68|     21|            }
   69|      3|        }
   70|      3|        m_size = i;
   71|      3|    }
   72|    375|    T getSize(){
   73|    375|        return  static_cast<T>((m_dequeue.size() == 0)?1:m_dequeue.size());
   74|    375|    }
  ------------------
  | _ZN9STATISTICIfE7getSizeEv:
  |   72|     30|    T getSize(){
  |   73|     30|        return  static_cast<T>((m_dequeue.size() == 0)?1:m_dequeue.size());
  |   74|     30|    }
  ------------------
  | _ZN9STATISTICIdE7getSizeEv:
  |   72|     71|    T getSize(){
  |   73|     71|        return  static_cast<T>((m_dequeue.size() == 0)?1:m_dequeue.size());
  |   74|     71|    }
  ------------------
  | _ZN9STATISTICIiE7getSizeEv:
  |   72|    274|    T getSize(){
  |   73|    274|        return  static_cast<T>((m_dequeue.size() == 0)?1:m_dequeue.size());
  |   74|    274|    }
  ------------------
   75|     10|    void push_front(T v){
   76|     10|        if (m_dequeue.size() >= m_size){
   77|      1|            pop_back();
   78|      1|        }
   79|     10|        m_dequeue.push_front(v);
   80|     10|    }
   81|    662|    void push_back(T v){
   82|    662|        if (m_dequeue.size() >= m_size){
   83|     32|            pop_front();
   84|     32|        }
   85|    662|        m_dequeue.push_back(v);
   86|    662|    }
  ------------------
  | _ZN9STATISTICIfE9push_backEf:
  |   81|    129|    void push_back(T v){
  |   82|    129|        if (m_dequeue.size() >= m_size){
  |   83|      0|            pop_front();
  |   84|      0|        }
  |   85|    129|        m_dequeue.push_back(v);
  |   86|    129|    }
  ------------------
  | _ZN9STATISTICIdE9push_backEd:
  |   81|    233|    void push_back(T v){
  |   82|    233|        if (m_dequeue.size() >= m_size){
  |   83|      2|            pop_front();
  |   84|      2|        }
  |   85|    233|        m_dequeue.push_back(v);
  |   86|    233|    }
  ------------------
  | _ZN9STATISTICIiE9push_backEi:
  |   81|    300|    void push_back(T v){
  |   82|    300|        if (m_dequeue.size() >= m_size){
  |   83|     30|            pop_front();
  |   84|     30|        }
  |   85|    300|        m_dequeue.push_back(v);
  |   86|    300|    }
  ------------------
   87|      3|    void pop_back(){
   88|      3|        m_dequeue.pop_back();
   89|       |        // std::cout <<"pop_back"<<std::endl;
   90|      3|    }
   91|     53|    void pop_front(){
   92|     53|        m_dequeue.pop_front();
   93|       |        // std::cout <<"pop_front"<<std::endl;
   94|     53|    }
  ------------------
  | Unexecuted instantiation: _ZN9STATISTICIfE9pop_frontEv
  ------------------
  | _ZN9STATISTICIdE9pop_frontEv:
  |   91|     23|    void pop_front(){
  |   92|     23|        m_dequeue.pop_front();
  |   93|       |        // std::cout <<"pop_front"<<std::endl;
  |   94|     23|    }
  ------------------
  | _ZN9STATISTICIiE9pop_frontEv:
  |   91|     30|    void pop_front(){
  |   92|     30|        m_dequeue.pop_front();
  |   93|       |        // std::cout <<"pop_front"<<std::endl;
  |   94|     30|    }
  ------------------
   95|       |    ///////////////////////////////////////////// statistic /////////////////////////////
   96|      5|    T median(){
   97|      5|        auto backup = m_dequeue;
   98|      5|        std::sort(backup.begin(), backup.end());
   99|      5|        if(backup.empty())
  100|      0|            return static_cast<T>(0);
  101|      5|        if(backup.size() % 2 != 0){
  102|      3|            return backup[backup.size() / 2];
  103|      3|        }
  104|      2|        else{
  105|      2|            T m = backup[backup.size() / 2] + backup[(backup.size() / 2)-1];
  106|      2|            return m /2;
  107|      2|        }
  108|      5|    }
  109|     51|    T sum(){
  110|     51|        return std::accumulate(m_dequeue.begin(), m_dequeue.end(), static_cast<T>(0));
  111|     51|    }
  ------------------
  | _ZN9STATISTICIfE3sumEv:
  |  109|     30|    T sum(){
  |  110|     30|        return std::accumulate(m_dequeue.begin(), m_dequeue.end(), static_cast<T>(0));
  |  111|     30|    }
  ------------------
  | _ZN9STATISTICIdE3sumEv:
  |  109|     19|    T sum(){
  |  110|     19|        return std::accumulate(m_dequeue.begin(), m_dequeue.end(), static_cast<T>(0));
  |  111|     19|    }
  ------------------
  | _ZN9STATISTICIiE3sumEv:
  |  109|      2|    T sum(){
  |  110|      2|        return std::accumulate(m_dequeue.begin(), m_dequeue.end(), static_cast<T>(0));
  |  111|      2|    }
  ------------------
  112|       |
  113|     51|    T average(){
  114|     51|        T av  = sum() /getSize();
  115|     51|        return av;
  116|     51|    }
  ------------------
  | _ZN9STATISTICIfE7averageEv:
  |  113|     30|    T average(){
  |  114|     30|        T av  = sum() /getSize();
  |  115|     30|        return av;
  |  116|     30|    }
  ------------------
  | _ZN9STATISTICIdE7averageEv:
  |  113|     19|    T average(){
  |  114|     19|        T av  = sum() /getSize();
  |  115|     19|        return av;
  |  116|     19|    }
  ------------------
  | _ZN9STATISTICIiE7averageEv:
  |  113|      2|    T average(){
  |  114|      2|        T av  = sum() /getSize();
  |  115|      2|        return av;
  |  116|      2|    }
  ------------------
  117|       |
  118|      5|    T max(){
  119|      5|        T max = m_dequeue[0];
  120|     40|        for (auto v : m_dequeue){
  121|     40|            if (v > max){
  122|     13|                max = v;
  123|     13|            }
  124|     40|        }
  125|      5|        return max;
  126|      5|    }
  127|       |
  128|      5|    T min(){
  129|      5|        T min = m_dequeue[0];
  130|     40|        for (auto v : m_dequeue){
  131|     40|            if (v < min){
  132|      3|                min = v;
  133|      3|            }
  134|     40|        }
  135|      5|        return min;
  136|      5|    }
  137|       |
  138|      1|    T range(){
  139|      1|        return max() - min();
  140|      1|    }
  141|       |
  142|      7|    double standardDeviation(){
  143|      7|        double standardDeviation = 0.0;
  144|      7|        T _av = average();
  145|       |
  146|    309|        for(int i = 0; i < getSize(); ++i){
  147|    302|            standardDeviation += pow(m_dequeue.at(i) - _av, 2);
  148|    302|        }
  149|      7|        return sqrt(standardDeviation / getSize());
  150|      7|    }
  ------------------
  | _ZN9STATISTICIdE17standardDeviationEv:
  |  142|      6|    double standardDeviation(){
  |  143|      6|        double standardDeviation = 0.0;
  |  144|      6|        T _av = average();
  |  145|       |
  |  146|     38|        for(int i = 0; i < getSize(); ++i){
  |  147|     32|            standardDeviation += pow(m_dequeue.at(i) - _av, 2);
  |  148|     32|        }
  |  149|      6|        return sqrt(standardDeviation / getSize());
  |  150|      6|    }
  ------------------
  | _ZN9STATISTICIiE17standardDeviationEv:
  |  142|      1|    double standardDeviation(){
  |  143|      1|        double standardDeviation = 0.0;
  |  144|      1|        T _av = average();
  |  145|       |
  |  146|    271|        for(int i = 0; i < getSize(); ++i){
  |  147|    270|            standardDeviation += pow(m_dequeue.at(i) - _av, 2);
  |  148|    270|        }
  |  149|      1|        return sqrt(standardDeviation / getSize());
  |  150|      1|    }
  ------------------
  151|       |
  152|      4|    double coefficientOfVariation(){
  153|       |
  154|      4|        return (standardDeviation()/average()) /** 100*/;
  155|      4|    }
  ------------------
  | _ZN9STATISTICIdE22coefficientOfVariationEv:
  |  152|      3|    double coefficientOfVariation(){
  |  153|       |
  |  154|      3|        return (standardDeviation()/average()) /** 100*/;
  |  155|      3|    }
  ------------------
  | _ZN9STATISTICIiE22coefficientOfVariationEv:
  |  152|      1|    double coefficientOfVariation(){
  |  153|       |
  |  154|      1|        return (standardDeviation()/average()) /** 100*/;
  |  155|      1|    }
  ------------------
  156|       |
  157|     15|    T mode(){
  158|       |
  159|     15|        T _mode = 0;
  160|     15|        T _modeTemp = 0;
  161|     15|        int counter = 1;
  162|     15|        int modeCounter = 1;
  163|     15|        auto backup = m_dequeue;
  164|     15|        if(m_dequeue.empty()){
  165|      2|            return static_cast<T>(0);
  166|      2|        }
  167|     13|        if(m_dequeue.size() == 1)
  168|      3|        {
  169|      3|            return m_dequeue.at(0);
  170|      3|        }
  171|     10|        std::sort(backup.begin(), backup.end());
  172|     10|#ifdef BT_TEST
  173|     10|        std::cout << " " << std::endl;
  174|     10|        for (auto i : backup)
  175|     89|        {
  176|     89|            std::cout << i << " ";
  177|     89|        }
  178|     10|        std::cout << " " << std::endl;
  179|     10|#endif
  180|     10|        _mode = _modeTemp = backup.at(0);
  181|     10|        backup.pop_front();
  182|     10|        for (auto b : backup)
  183|     79|        {
  184|     79|            if (_modeTemp == b)
  185|     15|            {
  186|     15|                modeCounter++;
  187|     15|            }
  188|     64|            else
  189|     64|            {
  190|     64|                _modeTemp = b;
  191|     64|                modeCounter = 1;
  192|     64|            }
  193|       |
  194|     79|            if(counter < modeCounter)
  195|      8|            {
  196|      8|                counter = modeCounter;
  197|      8|                _mode = _modeTemp;
  198|      8|            }
  199|     79|        }
  200|     10|#ifdef BT_TEST
  201|     10|        std::cout << " moda: " << _mode << " wystepuje razy " << counter << std::endl;
  202|     10|#endif
  203|     10|        return _mode;
  204|     13|    }
  205|       |
  206|      8|    TREND_DATA<T> trend(){
  207|      8|        m_trendData.clear();
  208|      8|        if(m_dequeue.size() == 0)
  209|      1|            return m_trendData;
  210|       |
  211|      7|        T first = m_dequeue[0];
  212|    243|        for (auto i = 1; i < m_dequeue.size(); ++i){
  213|    236|            if(first > m_dequeue.at(i)){
  214|      5|                ++m_trendData.down;
  215|      5|                m_trendData.down_sum += (first - m_dequeue.at(i));
  216|      5|            }
  217|    231|            else if(first < m_dequeue.at(i)){
  218|     18|                ++m_trendData.up;
  219|     18|                m_trendData.up_sum += (m_dequeue.at(i) - first);
  220|     18|            }
  221|    213|            else
  222|    213|                ++m_trendData.eq;
  223|    236|            first = m_dequeue.at(i);
  224|    236|        }
  225|       |
  226|      7|        return m_trendData;
  227|      8|    }
  ------------------
  | _ZN9STATISTICIdE5trendEv:
  |  206|      3|    TREND_DATA<T> trend(){
  |  207|      3|        m_trendData.clear();
  |  208|      3|        if(m_dequeue.size() == 0)
  |  209|      0|            return m_trendData;
  |  210|       |
  |  211|      3|        T first = m_dequeue[0];
  |  212|     16|        for (auto i = 1; i < m_dequeue.size(); ++i){
  |  213|     13|            if(first > m_dequeue.at(i)){
  |  214|      1|                ++m_trendData.down;
  |  215|      1|                m_trendData.down_sum += (first - m_dequeue.at(i));
  |  216|      1|            }
  |  217|     12|            else if(first < m_dequeue.at(i)){
  |  218|      5|                ++m_trendData.up;
  |  219|      5|                m_trendData.up_sum += (m_dequeue.at(i) - first);
  |  220|      5|            }
  |  221|      7|            else
  |  222|      7|                ++m_trendData.eq;
  |  223|     13|            first = m_dequeue.at(i);
  |  224|     13|        }
  |  225|       |
  |  226|      3|        return m_trendData;
  |  227|      3|    }
  ------------------
  | _ZN9STATISTICIfE5trendEv:
  |  206|      5|    TREND_DATA<T> trend(){
  |  207|      5|        m_trendData.clear();
  |  208|      5|        if(m_dequeue.size() == 0)
  |  209|      1|            return m_trendData;
  |  210|       |
  |  211|      4|        T first = m_dequeue[0];
  |  212|    227|        for (auto i = 1; i < m_dequeue.size(); ++i){
  |  213|    223|            if(first > m_dequeue.at(i)){
  |  214|      4|                ++m_trendData.down;
  |  215|      4|                m_trendData.down_sum += (first - m_dequeue.at(i));
  |  216|      4|            }
  |  217|    219|            else if(first < m_dequeue.at(i)){
  |  218|     13|                ++m_trendData.up;
  |  219|     13|                m_trendData.up_sum += (m_dequeue.at(i) - first);
  |  220|     13|            }
  |  221|    206|            else
  |  222|    206|                ++m_trendData.eq;
  |  223|    223|            first = m_dequeue.at(i);
  |  224|    223|        }
  |  225|       |
  |  226|      4|        return m_trendData;
  |  227|      5|    }
  ------------------
  228|       |
  229|     20|    bool isMoreDiff(T diff){
  230|     20|        if (m_dequeue.size()>2){
  231|     14|            T d = m_dequeue.at( m_dequeue.size()-2)
  232|     14|                  - m_dequeue.at( m_dequeue.size() - 1);
  233|     14|            d = fabs(d);
  234|     14|            if (d > diff && m_alarm == false){
  235|      6|                m_alarm = true;
  236|      6|                return true;
  237|      6|            }
  238|      8|            if (d <= diff){
  239|      8|                m_alarm = false;
  240|      8|                return false;
  241|      8|            }
  242|      8|        }
  243|      6|        return false;
  244|     20|    }
  245|      7|    std::pair<double,double> getLast2(){
  246|      7|        if (m_dequeue.size()>2){
  247|      6|            return std::make_pair(static_cast<double>(m_dequeue.at( m_dequeue.size()-2)),
  248|      6|                                  static_cast<double>(m_dequeue.at( m_dequeue.size()-1))    );
  249|      6|        }
  250|      1|#ifdef BT_TEST
  251|      1|        puts("no data - return 0.0 0.0");
  252|      1|#endif
  253|      1|        return std::make_pair(0.0,0.0);
  254|      7|    }
  255|       |
  256|       |    /////////////////////////////////////////////////////////////////////////////////////
  257|     15|    void print(){
  258|     71|        for(auto n : m_dequeue){
  259|     71|            std::cout << ","<< n;
  260|     71|        }
  261|     15|        std::cout << " " <<std::endl;
  262|     15|    }
  263|       |
  264|       |
  265|      5|    std::string stats(){
  266|       |
  267|      5|        std::stringstream ss(" brak danych =(");
  268|      5|        if(m_dequeue.size() > 0)
  269|      3|        {
  270|      3|            ss.str("");
  271|      3|            ss <<"rozmiar tablicy: "<< getSize() <<std::endl
  272|      3|               << "min: "<< min() <<std::endl
  273|      3|               << "max: "<< max()<<std::endl
  274|      3|               << "srednia " << average() <<std::endl
  275|      3|               << "mediana " << median()  <<std::endl
  276|      3|               << "odchylenie st "<< standardDeviation() << std::endl
  277|      3|               << "wspolczynnik zmiennosci " << coefficientOfVariation() <<"%"<< std::endl
  278|      3|               << "Dominanta " << mode() << std::endl
  279|      3|               << "trend " << trend().getStringInfo();
  280|       |
  281|       |
  282|      3|            ss << std::endl
  283|      3|               << "data " <<  std::endl;
  284|     16|            for(auto n : m_dequeue){
  285|     16|                ss << "|"<< n;
  286|     16|            }
  287|      3|        }
  288|      5|        ss <<  std::endl;
  289|      5|        return ss.str();
  290|      5|    }
  291|       |
  292|       |private:
  293|       |    unsigned int m_size;
  294|       |    std::deque <T> m_dequeue;
  295|       |    bool m_alarm = false;
  296|       |    TREND_DATA <T> m_trendData;
  297|       |};
  298|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/Statistic/statistic_test/statistic_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "../statistic.h"
    4|       |
    5|       |class StatisticClass_fixture : public ::testing::Test
    6|       |{
    7|       |public:
    8|       |  STATISTIC<double> average;
    9|       |  StatisticClass_fixture(): average(12)
   10|     13|  {
   11|     13|    average.push_back(1);
   12|     13|    average.push_back(1);
   13|     13|    average.push_back(2);
   14|     13|    average.push_back(2);
   15|     13|    average.push_back(3);
   16|     13|    average.push_back(3);
   17|     13|    average.push_back(4);
   18|     13|    average.push_back(4);
   19|     13|    average.push_back(-5);
   20|     13|    average.push_back(-5);
   21|     13|    average.push_back(6);
   22|     13|    average.push_back(6);
   23|     13|  }
   24|       |};
   25|       |
   26|       |TEST_F(StatisticClass_fixture, range)
   27|      1|{
   28|      1|  EXPECT_DOUBLE_EQ(average.average() , 1.8333333333333333);
   29|      1|  EXPECT_EQ(average.range(), 11);
   30|      1|}
   31|       |
   32|       |TEST_F(StatisticClass_fixture, average)
   33|      1|{
   34|      1|  EXPECT_DOUBLE_EQ(average.average() , 1.8333333333333333);
   35|      1|  std::string ret = average.stats();
   36|      1|  EXPECT_THAT(ret, testing::HasSubstr("max"));
   37|      1|}
   38|       |
   39|       |TEST_F(StatisticClass_fixture, averageOne)
   40|      1|{
   41|      1|  average.resize(1);
   42|      1|  average.push_back(1);
   43|      1|  EXPECT_DOUBLE_EQ(average.average() , 1.0);
   44|      1|}
   45|       |
   46|       |TEST_F(StatisticClass_fixture, averageZero)
   47|      1|{
   48|      1|  STATISTIC<double>a(1);
   49|      1|  std::cout << "Srednia: " << a.average() << std::endl;
   50|      1|  EXPECT_DOUBLE_EQ(a.average() , 0.0);
   51|      1|}
   52|       |
   53|       |TEST_F(StatisticClass_fixture, medianZero)
   54|      1|{
   55|      1|  STATISTIC<double>a(1);
   56|      1|  std::cout << "Mediana: " << a.average() << std::endl;
   57|      1|  EXPECT_DOUBLE_EQ(a.average() , 0.0);
   58|      1|}
   59|       |
   60|       |TEST_F(StatisticClass_fixture, median)
   61|      1|{
   62|      1|  EXPECT_EQ(average.median(),2.5f);
   63|      1|}
   64|       |
   65|       |TEST_F(StatisticClass_fixture, trendMain)
   66|      1|{
   67|      1|  STATISTIC<float> data(105);
   68|    104|  for(int i = 0; i < 103; ++i)
   69|    103|    data.push_back(1.2f);
   70|      1|  data.push_back(1.0f);
   71|       |
   72|      1|  auto ret = data.trend();
   73|      1|  std::cout << ret.getStringInfo();
   74|      1|  EXPECT_THAT(ret.getStringInfo(), testing::HasSubstr("up_sum: 0"));
   75|       |
   76|       |
   77|      1|  data.push_back(2.5f);
   78|      1|  ret = data.trend();
   79|      1|  std::cout << ret.getStringInfo();
   80|      1|  EXPECT_THAT(ret.getStringInfo(), testing::HasSubstr("up_sum: 1.5"));
   81|      1|}
   82|       |
   83|       |TEST_F(StatisticClass_fixture, trendRise)
   84|      1|{
   85|      1|  STATISTIC<float> data(10);
   86|      1|  data.push_back(10.2f);
   87|      1|  data.push_back(100.3f);
   88|      1|  data.push_back(1000.4f);
   89|      1|  data.push_back(1000.5f);
   90|      1|  data.push_back(1000.6f);
   91|      1|  data.push_back(1000.7f);
   92|      1|  data.push_back(1000.8f);
   93|      1|  data.push_back(1000.9f);
   94|      1|  data.push_back(1001.0f);
   95|      1|  auto ret = data.trend();
   96|      1|  std::cout << ret.getStringInfo();
   97|      1|  EXPECT_THAT(ret.getStringInfo(), testing::HasSubstr("up_sum: 990.8"));
   98|      1|}
   99|       |
  100|       |TEST_F(StatisticClass_fixture, trendBouncing)
  101|      1|{
  102|      1|  STATISTIC<float> data(10);
  103|      1|  data.push_back(10.2f);
  104|      1|  data.push_back(100.3f);
  105|      1|  data.push_back(100.3f);
  106|      1|  data.push_back(100.3f);
  107|      1|  data.push_back(1000.6f);
  108|      1|  data.push_back(1000.7f);
  109|      1|  data.push_back(1000.8f);
  110|      1|  data.push_back(100.9f);
  111|      1|  data.push_back(10.0f);
  112|      1|  auto ret = data.trend();
  113|      1|  std::cout << ret.getStringInfo();
  114|      1|  EXPECT_THAT(ret.getStringInfo(), testing::HasSubstr("up_sum: 990.6"));
  115|      1|}
  116|       |
  117|       |TEST_F(StatisticClass_fixture, trendZero)
  118|      1|{
  119|      1|  STATISTIC<float> data(10);
  120|      1|  auto ret = data.trend();
  121|      1|  std::cout << ret.getStringInfo();
  122|      1|  EXPECT_THAT(ret.getStringInfo(), testing::HasSubstr("up_sum: 0"));
  123|      1|}
  124|       |
  125|       |TEST(StatisticClass, medianOne)
  126|      1|{
  127|      1|  STATISTIC<double> average(1);
  128|      1|  average.push_back(1);
  129|      1|  EXPECT_EQ(average.median(), 1.0f);
  130|      1|}
  131|       |
  132|       |TEST_F(StatisticClass_fixture, min)
  133|      1|{
  134|      1|  EXPECT_EQ(average.min(),-5.0f);
  135|      1|}
  136|       |
  137|       |TEST_F(StatisticClass_fixture, max)
  138|      1|{
  139|      1|  EXPECT_EQ(average.max(),6);
  140|      1|}
  141|       |
  142|       |TEST_F(StatisticClass_fixture, push_and_pop)
  143|      1|{
  144|      1|  average.pop_back();
  145|      1|  EXPECT_EQ(average.getSize(),11);
  146|      1|  average.push_front(3.9);
  147|      1|  EXPECT_EQ(average.getSize(),12);
  148|      1|  average.pop_back();
  149|      1|  EXPECT_EQ(average.getSize(),11);
  150|      1|}
  151|       |
  152|       |TEST(StatisticClass, resize)
  153|      1|{
  154|      1|  unsigned int s = 3;
  155|      1|  STATISTIC<double> average(12);
  156|      1|  average.push_back(1);
  157|      1|  average.push_back(2);
  158|      1|  average.push_back(3);
  159|      1|  average.push_back(4);
  160|      1|  average.push_back(5);
  161|      1|  average.push_front(44);
  162|      1|  average.push_front(45);
  163|      1|  average.print();
  164|      1|  average.resize(s);
  165|       |
  166|      1|  EXPECT_EQ(average.getSize(),static_cast<double>(s));
  167|       |
  168|      1|  auto data = average.getLast2();
  169|      1|  average.print();
  170|       |
  171|      1|  EXPECT_EQ(data.first,4.0);
  172|      1|  EXPECT_EQ(data.second,5.0);
  173|      1|}
  174|       |
  175|       |TEST(StatisticClass, getLast2_empty)
  176|      1|{
  177|      1|  unsigned int s = 1;
  178|      1|  STATISTIC<double> average(12);
  179|      1|  average.push_back(1);
  180|      1|  average.push_back(2);
  181|      1|  average.push_back(3);
  182|      1|  average.push_back(4);
  183|      1|  average.push_back(5);
  184|      1|  average.push_front(44);
  185|      1|  average.push_front(45);
  186|      1|  average.print();
  187|      1|  average.resize(s);
  188|      1|  average.push_front(33);
  189|       |
  190|      1|  EXPECT_EQ(average.getSize(),static_cast<double>(s));
  191|       |
  192|      1|  auto data = average.getLast2();
  193|      1|  average.print();
  194|       |
  195|      1|  EXPECT_EQ(data.first,0.0);
  196|      1|  EXPECT_EQ(data.second,0.0);
  197|      1|}
  198|       |
  199|       |TEST(StatisticClass, moreDiff)
  200|      1|{
  201|      1|  STATISTIC<double> average(12);
  202|      1|  average.push_back(1);
  203|      1|  average.push_back(2);
  204|      1|  average.push_back(30);
  205|      1|  average.push_back(4);
  206|      1|  average.push_back(5);
  207|      1|  average.push_front(44);
  208|      1|  average.push_front(45);
  209|      1|  average.print();
  210|       |
  211|      1|  EXPECT_FALSE(average.isMoreDiff(2.2));
  212|       |
  213|      1|  average.push_back(7.3);
  214|      1|  average.print();
  215|       |
  216|      1|  EXPECT_TRUE(average.isMoreDiff(2.2));
  217|      1|}
  218|       |
  219|       |TEST(StatisticClass, moreDiff_wrong)
  220|      1|{
  221|      1|  STATISTIC<double> average(1);
  222|      1|  average.push_back(1);
  223|       |
  224|      1|  average.print();
  225|       |
  226|      1|  EXPECT_FALSE(average.isMoreDiff(2.2));
  227|       |
  228|      1|  average.push_back(7.3);
  229|      1|  average.print();
  230|       |
  231|      1|  EXPECT_FALSE(average.isMoreDiff(2.2));
  232|      1|}
  233|       |
  234|       |TEST(StatisticClass, noMoreDiff)
  235|      1|{
  236|      1|  STATISTIC<double> average(12);
  237|      1|  average.push_back(1);
  238|      1|  average.push_back(2);
  239|      1|  average.push_back(30);
  240|      1|  average.push_back(4);
  241|      1|  average.push_back(5);
  242|      1|  average.push_front(44);
  243|      1|  average.push_front(45);
  244|      1|  average.print();
  245|       |
  246|      1|  EXPECT_FALSE(average.isMoreDiff(6.2));
  247|       |
  248|      1|  average.push_back(7.3);
  249|      1|  average.print();
  250|       |
  251|      1|  EXPECT_FALSE(average.isMoreDiff(9.2));
  252|      1|}
  253|       |
  254|       |TEST(StatisticClass, mode)
  255|      1|{
  256|      1|  STATISTIC<double> average(22);
  257|      1|  average.push_back(29.62);
  258|      1|  average.push_back(29.71);
  259|      1|  average.push_back(30.19);
  260|      1|  average.push_back(33.5);
  261|      1|  average.push_back(30.31);
  262|      1|  average.push_back(30.81);
  263|      1|  average.push_back(30.87);
  264|      1|  average.push_back(31.25);
  265|      1|  average.push_back(31.31);
  266|      1|  average.push_back(31.56);
  267|      1|  average.push_back(31.87);
  268|      1|  average.push_back(31.94);
  269|      1|  average.push_back(32.13);
  270|      1|  average.push_back(32.13);  //to
  271|      1|  average.push_back(32.63);
  272|       |
  273|      1|  average.print();
  274|      1|  std::cout << "1 MODE: " << average.mode() << std::endl;
  275|      2|  EXPECT_DOUBLE_EQ(32.13,average.mode()) << "ZLA DOMINANTA 32.13";
  276|      1|  average.push_back(33.5);
  277|      1|  average.push_back(33.5);
  278|      1|  std::cout << "2 MODE: " << average.mode() << std::endl;
  279|      2|  EXPECT_DOUBLE_EQ(33.5,average.mode()) << "ZLA DOMINANTA 33.5";
  280|      1|}
  281|       |
  282|       |TEST(StatisticClass, modeZero)
  283|      1|{
  284|      1|  STATISTIC<double> average(1);
  285|       |
  286|      1|  std::cout << "0 MODE: " << average.mode() << std::endl;
  287|      1|  EXPECT_DOUBLE_EQ(average.mode(), 0) ;
  288|      1|}
  289|       |
  290|       |TEST(StatisticClass, modeOne)
  291|      1|{
  292|      1|  STATISTIC<double> average(1);
  293|      1|  average.push_back(29.62);
  294|      1|  average.print();
  295|      1|  std::cout << "1 MODE: " << average.mode() << std::endl;
  296|      2|  EXPECT_DOUBLE_EQ(29.62,average.mode()) << "ZLA DOMINANTA 32.13";
  297|      1|}
  298|       |
  299|       |TEST(StatisticClass, modeTwo)
  300|      1|{
  301|      1|  STATISTIC<double> average(10);
  302|      1|  average.push_back(29.62);
  303|      1|  average.push_back(28.62);
  304|      1|  average.print();
  305|      1|  std::cout << "1 MODE: " << average.mode() << std::endl;
  306|      2|  EXPECT_DOUBLE_EQ(28.62,average.mode()) << "ZLA DOMINANTA 32.13";
  307|      1|}
  308|       |TEST(StatisticClass, modeThree)
  309|      1|{
  310|      1|  STATISTIC<double> average(10);
  311|      1|  average.push_back(29.62);
  312|      1|  average.push_back(28.62);
  313|      1|  average.push_back(29.63);
  314|      1|  average.print();
  315|      1|  std::cout << "1 MODE: " << average.mode() << std::endl;
  316|      2|  EXPECT_DOUBLE_EQ(28.62,average.mode()) << "ZLA DOMINANTA 32.13";
  317|      1|}
  318|       |
  319|       |TEST(StatisticClass, coefficientOfVariation)
  320|      1|{
  321|      1|  int i = 270;
  322|      1|  STATISTIC<int> testDB(i);
  323|       |
  324|    101|  for (int j = 0; j < 100; ++j)
  325|    100|    {
  326|    100|      testDB.push_back(77);
  327|    100|    }
  328|       |
  329|    101|  for (int j = 0; j < 100; ++j)
  330|    100|    {
  331|    100|      testDB.push_back(83);
  332|    100|    }
  333|    101|  for (int j = 0; j < 100; ++j)
  334|    100|    {
  335|    100|      testDB.push_back(95);
  336|    100|    }
  337|       |
  338|      1|  EXPECT_NE(testDB.coefficientOfVariation(),0);
  339|      1|}
  340|       |
  341|       |TEST(StatisticClass, getPrintout)
  342|      1|{
  343|      1|  STATISTIC<double> data(10);
  344|       |
  345|      1|  EXPECT_NO_THROW(data.print());
  346|      1|}
  347|       |
  348|       |TEST(StatisticClass, statsZero)
  349|      1|{
  350|      1|  STATISTIC<double>db(1);
  351|      1|  db.stats();
  352|       |
  353|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/TEST/testif.cpp:
    1|       |#include <iostream>
    2|       |#include <gmock/gmock.h>
    3|       |#include <gtest/gtest.h>
    4|       |#include <memory>
    5|       |
    6|       |class TestIf
    7|       |{
    8|       |public:
    9|      0|  virtual ~TestIf() = default;
   10|       |  virtual void method(int i) = 0;
   11|       |};
   12|       |
   13|       |class test : public TestIf
   14|       |{
   15|       |public:
   16|       |  test() = default;
   17|       |  ~test() = default;
   18|      0|  void method(int i) override{
   19|      0|    std::cout << "cyniu " << std::to_string(i)<< std::endl;
   20|      0|  }
   21|       |};
   22|       |
   23|       |class mockTest : public TestIf , public testing::Mock
   24|       |{
   25|       |public:
   26|      0|  ~mockTest() = default;
   27|       |  MOCK_METHOD1(method, void(int i));
   28|       |
   29|       |};
   30|       |
   31|       |class testHandler
   32|       |{
   33|       |public:
   34|       |  ~testHandler() = default;
   35|       |  static std::shared_ptr<TestIf> tt;
   36|      1|  void print(int i){
   37|      1|    tt->method(i);
   38|      1|  }
   39|       |};
   40|       | std::shared_ptr<TestIf> testHandler::tt;
   41|       |
   42|       |class testTest : public testing::Test
   43|       |{
   44|       |public:
   45|      1|  testTest(){
   46|      1|    ptr = std::make_shared<mockTest>();
   47|      1|    t.tt = ptr;
   48|      1|  }
   49|       |  testHandler t;
   50|       |  std::shared_ptr<TestIf> ptr;
   51|       |
   52|       |};
   53|       |
   54|       |TEST_F(testTest, main)
   55|      1|{
   56|       |  //testHandler::tt = ptr;
   57|       |  //EXPECT_CALL(*testHandler::tt.get(), method(testing::_));
   58|      1|  t.print(67);
   59|       |
   60|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/alarm/TEST/alarm_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include "../alarm.h"
    3|       |
    4|       |TEST(alarm_BT, main)
    5|      1|{
    6|      1|    alarm_C  a;
    7|      1|    EXPECT_EQ(a.alarmSize(), 0);
    8|       |
    9|      1|    a.raiseAlarm(22, "TEST Alarm1");
   10|      1|    std::cout << "alarm: " << a.showAlarm() << std::endl;
   11|      1|    EXPECT_EQ(a.alarmSize(), 1);
   12|       |
   13|      1|    a.raiseAlarm(33, "TEST Alarm2");
   14|      1|    std::cout << "alarm: " << a.showAlarm() << std::endl;
   15|      1|    EXPECT_EQ(a.alarmSize(), 2);
   16|       |
   17|      1|    a.clearAlarm(33);
   18|      1|    std::cout << "alarm: " << a.showAlarm() << std::endl;
   19|      1|    EXPECT_EQ(a.alarmSize(), 1);
   20|       |
   21|      1|    a.clearAlarm(3003);
   22|      1|    std::cout << "alarm: " << a.showAlarm() << std::endl;
   23|      1|    EXPECT_EQ(a.alarmSize(), 1);
   24|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/alarm/alarm.cpp:
    1|       |#include "alarm.h"
    2|       |#include <sstream>
    3|       |
    4|       |alarm_C::alarm_C()
    5|    230|{
    6|    230|}
    7|       |
    8|       |void alarm_C::raiseAlarm(int id, const std::string &txt)
    9|     21|{
   10|     21|    std::lock_guard <std::mutex> lock(mutex_alarm);
   11|     21|    m_alarmMap[id] = txt;
   12|     21|}
   13|       |
   14|       |void alarm_C::clearAlarm(int id)
   15|      2|{
   16|      2|    std::lock_guard <std::mutex> lock(mutex_alarm);
   17|      2|    m_alarmMap.erase(id);
   18|      2|}
   19|       |
   20|       |std::string alarm_C::showAlarm()
   21|     10|{
   22|     10|    std::lock_guard <std::mutex> lock(mutex_alarm);
   23|     10|    std::stringstream ret;
   24|       |
   25|     10|    if(m_alarmMap.empty())
   26|      1|        ret << " no alarms!";
   27|      9|    else{
   28|     10|        for (const auto& s: m_alarmMap) {
   29|     10|            ret << s.first << ": " << s.second << std::endl;
   30|     10|        }
   31|      9|    }
   32|     10|    return ret.str();
   33|     10|}
   34|       |
   35|       |std::size_t alarm_C::alarmSize()
   36|      5|{
   37|      5|    std::lock_guard <std::mutex> lock(mutex_alarm);
   38|      5|    return m_alarmMap.size();
   39|      5|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/backTrace/backTrace.h:
    1|       |#pragma once
    2|       |
    3|       |#include <execinfo.h>
    4|       |#include <signal.h>
    5|       |#include <cxxabi.h> // demangle
    6|       |#include <iostream>
    7|       |
    8|       |/// add link option ADD_LINK_OPTIONS(-rdynamic)  to cmake file
    9|       |namespace cyniu
   10|       |{
   11|       |
   12|       |  namespace BACKTRACE
   13|       |  {
   14|       |    void handleCrash(int sig)
   15|      0|    {
   16|       |
   17|      0|      void *array[100];
   18|       |
   19|       |      // Signal catched
   20|      0|      fprintf(stderr, "handleCrash() signal received is: %d\n", sig);
   21|       |
   22|       |      // Backtrace available
   23|      0|      int n_addresses = backtrace(array, 100);
   24|      0|      fprintf(stderr, "backtrace() returned addresses: %d\n", n_addresses);
   25|       |
   26|       |      // Instead of 'backtrace_symbols_fd(array, n_addresses, STDERR_FILENO)', we will iterate to demangle symbols:
   27|      0|      char **addresses = backtrace_symbols(array, n_addresses);
   28|       |
   29|      0|      if (addresses == NULL)
   30|      0|      {
   31|      0|        perror("backtrace_symbols");
   32|      0|        exit(EXIT_FAILURE);
   33|      0|      }
   34|       |
   35|       |      // Demangle backtrace addresses:
   36|      0|      std::string address, symbol;
   37|       |      // This check is removed.
   38|       |      // cppcheck-suppress variableScope
   39|      0|      size_t openPos, closePos, plusPos;
   40|      0|      char *demangledName;
   41|      0|      int status;
   42|       |
   43|      0|      for (int k = 0; k < n_addresses; k++)
   44|      0|      {
   45|       |        // Address example: ./a.out(_Z16displayBacktracev) [0x556df272d3f6]
   46|       |        // Need to extract the symbol within brackets:
   47|      0|        address = addresses[k];
   48|      0|        openPos = address.find("(") + 1;
   49|      0|        closePos = address.find(")");
   50|       |
   51|      0|        if (closePos > openPos)
   52|      0|        {
   53|      0|          symbol = address.substr(openPos, closePos - openPos);
   54|      0|          plusPos = symbol.find("+");
   55|       |
   56|      0|          if (plusPos > 1)
   57|      0|          {
   58|      0|            symbol = symbol.substr(0, plusPos);
   59|      0|          }
   60|       |
   61|      0|          status = -1;
   62|      0|          demangledName = abi::__cxa_demangle(symbol.c_str(), NULL, NULL, &status);
   63|       |
   64|      0|          if (status == 0)
   65|      0|          {
   66|      0|            fprintf(stderr, "%s\n", demangledName);
   67|      0|          }
   68|      0|          else
   69|      0|          {
   70|      0|            fprintf(stderr, "%s\n", address.c_str());
   71|      0|          }
   72|       |
   73|      0|          free(demangledName);
   74|      0|        }
   75|      0|        else
   76|      0|        {
   77|      0|          fprintf(stderr, "%s\n", address.c_str());
   78|      0|        }
   79|      0|      }
   80|       |
   81|      0|      free(addresses);
   82|       |
   83|      0|      exit(1);
   84|      0|    }
   85|       |  } // BACKTRACE
   86|       |} // cyniu
   87|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/blocking_queue/blocking_queue.h:
    1|       |#ifndef BLOCKING_QUEUE_H
    2|       |#define BLOCKING_QUEUE_H
    3|       |
    4|       |#include <assert.h>
    5|       |#include <condition_variable>
    6|       |#include <iostream>
    7|       |#include <queue>
    8|       |#include <vector>
    9|       |
   10|       |template<class T>
   11|       |class BlockingQueue{
   12|       |public:
   13|       |
   14|    326|    BlockingQueue() :mtx(), full_(), empty_(), capacity_(MAX_CAPACITY) { }
  ------------------
  | _ZN13BlockingQueueISt3anyEC2Ev:
  |   14|    229|    BlockingQueue() :mtx(), full_(), empty_(), capacity_(MAX_CAPACITY) { }
  ------------------
  | _ZN13BlockingQueueI11BULB_STATUSEC2Ev:
  |   14|     97|    BlockingQueue() :mtx(), full_(), empty_(), capacity_(MAX_CAPACITY) { }
  ------------------
   15|     14|    void Put(const T& task){
   16|     14|        std::unique_lock<std::mutex> lock(mtx);
   17|     14|        if (queue_.size() > capacity_ - 2){
   18|       |
   19|      0|            return;
   20|      0|        }
   21|     14|        full_.wait(lock, [this]{return (queue_.size() < capacity_);} );
  ------------------
  | Unexecuted instantiation: _ZZN13BlockingQueueISt3anyE3PutERKS0_ENKUlvE_clEv
  ------------------
  | _ZZN13BlockingQueueI11BULB_STATUSE3PutERKS0_ENKUlvE_clEv:
  |   21|     14|        full_.wait(lock, [this]{return (queue_.size() < capacity_);} );
  ------------------
   22|       |        //assert(queue_.size() < capacity_);
   23|     14|        queue_.push(task);
   24|     14|        empty_.notify_all();
   25|     14|    }
  ------------------
  | Unexecuted instantiation: _ZN13BlockingQueueISt3anyE3PutERKS0_
  ------------------
  | _ZN13BlockingQueueI11BULB_STATUSE3PutERKS0_:
  |   15|     14|    void Put(const T& task){
  |   16|     14|        std::unique_lock<std::mutex> lock(mtx);
  |   17|     14|        if (queue_.size() > capacity_ - 2){
  |   18|       |
  |   19|      0|            return;
  |   20|      0|        }
  |   21|     14|        full_.wait(lock, [this]{return (queue_.size() < capacity_);} );
  |   22|       |        //assert(queue_.size() < capacity_);
  |   23|     14|        queue_.push(task);
  |   24|     14|        empty_.notify_all();
  |   25|     14|    }
  ------------------
   26|       |
   27|       |    T Take(){
   28|       |        std::unique_lock<std::mutex> lock(mtx);
   29|       |        empty_.wait(lock, [this]{return !queue_.empty();} );
   30|       |        assert(!queue_.empty());
   31|       |        T front(queue_.front());
   32|       |        queue_.pop();
   33|       |        full_.notify_all();
   34|       |        return front;
   35|       |    }
   36|       |
   37|       |    size_t Size(){
   38|       |        std::lock_guard<std::mutex> lock(mtx);
   39|       |        return queue_.size();
   40|       |    }
   41|       |
   42|       |    T Front(){
   43|       |        std::unique_lock<std::mutex> lock(mtx);
   44|       |        empty_.wait(lock, [this]{return !queue_.empty();} );
   45|       |        assert(!queue_.empty());
   46|       |        T front(queue_.front());
   47|       |        return front;
   48|       |    }
   49|       |
   50|       |    T Back(){
   51|       |        std::unique_lock<std::mutex> lock(mtx);
   52|       |        empty_.wait(lock, [this]{return !queue_.empty();} );
   53|       |        assert(!queue_.empty());
   54|       |        T back(queue_.back());
   55|       |        return back;
   56|       |    }
   57|       |
   58|       |    bool Empty(){
   59|       |        std::unique_lock<std::mutex> lock(mtx);
   60|       |        return queue_.empty();
   61|       |    }
   62|       |
   63|     97|    void SetCapacity(const size_t capacity){
   64|     97|        capacity_ = (capacity > 0 ? capacity : MAX_CAPACITY);
   65|     97|    }
   66|       |
   67|       |private:
   68|       |    BlockingQueue(const BlockingQueue& rhs);
   69|       |    BlockingQueue& operator= (const BlockingQueue& rhs);
   70|       |
   71|       |private:
   72|       |    mutable std::mutex mtx;
   73|       |    std::condition_variable full_;
   74|       |    std::condition_variable empty_;
   75|       |    std::queue<T> queue_;
   76|       |    size_t capacity_;
   77|       |    static constexpr int MAX_CAPACITY = 200;
   78|       |};
   79|       |
   80|       |#endif

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/circular_buffer/circular_buffer.cpp:
    1|       |#include "circular_buffer.h"
    2|       |
    3|       |Circular_buffer::Circular_buffer()
    4|     98|{
    5|       |
    6|     98|}
    7|       |
    8|       |void Circular_buffer::put(std::any item)
    9|     27|{
   10|     27|    m_buffor[m_index] = item;
   11|     27|    ++m_index;
   12|     27|    if(m_index == m_max)
   13|      2|        m_index = 0;
   14|     27|}
   15|       |/*
   16|       |template<typename T> std::string Circular_buffer::dump() const
   17|       |{
   18|       |    std::stringstream ss;
   19|       |    for(std::size_t i = 0; i < m_max; ++i){
   20|       |        if (m_buffor.at(i).has_value())
   21|       |        {
   22|       |            ss << i << ": " << std::any_cast<T>(m_buffor.at(i)) << std::endl;
   23|       |        }
   24|       |    }
   25|       |    return ss.str();
   26|       |}
   27|       |*/

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/circular_buffer/circular_buffer.h:
    1|       |#ifndef CIRCULAR_BUFFER_H
    2|       |#define CIRCULAR_BUFFER_H
    3|       |
    4|       |#include <memory>
    5|       |#include <any>
    6|       |#include <atomic>
    7|       |#include <sstream>
    8|       |#include <array>
    9|       |
   10|       |class Circular_buffer
   11|       |{
   12|       |    static constexpr std::size_t m_max = 10;
   13|       |    std::array<std::any, m_max> m_buffor;
   14|       |    std::atomic<std::size_t> m_index = 0;
   15|       |public:
   16|       |    Circular_buffer();
   17|       |    void put(std::any item);
   18|       |
   19|       |    template<typename T2>
   20|       |    std::array<T2, m_max> getDatabase() const{
   21|       |        std::array<T2, m_max> data;
   22|       |        for(std::size_t i = m_index,j =0; i < m_max; ++i, ++j){
   23|       |            if (m_buffor.at(i).has_value())
   24|       |            {
   25|       |                data[j] =  std::any_cast<T2>(m_buffor.at(i)) ;
   26|       |            }
   27|       |        }
   28|       |        return data;
   29|       |    }
   30|       |
   31|       |    template<typename T>
   32|      2|    std::string dump() const {
   33|      2|        std::stringstream ss;
   34|     22|        for(std::size_t i = 0; i < m_max; ++i){
   35|     20|            if (m_buffor.at(i).has_value())
   36|     10|            {
   37|     10|                ss << i << ": " << std::any_cast<T>(m_buffor.at(i)) << std::endl;
   38|     10|            }
   39|     20|        }
   40|      2|        return ss.str();
   41|      2|    }
  ------------------
  | _ZNK15Circular_buffer4dumpIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv:
  |   32|      1|    std::string dump() const {
  |   33|      1|        std::stringstream ss;
  |   34|     11|        for(std::size_t i = 0; i < m_max; ++i){
  |   35|     10|            if (m_buffor.at(i).has_value())
  |   36|      0|            {
  |   37|      0|                ss << i << ": " << std::any_cast<T>(m_buffor.at(i)) << std::endl;
  |   38|      0|            }
  |   39|     10|        }
  |   40|      1|        return ss.str();
  |   41|      1|    }
  ------------------
  | _ZNK15Circular_buffer4dumpIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv:
  |   32|      1|    std::string dump() const {
  |   33|      1|        std::stringstream ss;
  |   34|     11|        for(std::size_t i = 0; i < m_max; ++i){
  |   35|     10|            if (m_buffor.at(i).has_value())
  |   36|     10|            {
  |   37|     10|                ss << i << ": " << std::any_cast<T>(m_buffor.at(i)) << std::endl;
  |   38|     10|            }
  |   39|     10|        }
  |   40|      1|        return ss.str();
  |   41|      1|    }
  ------------------
   42|       |
   43|       |};
   44|       |
   45|       |#endif // CIRCULAR_BUFFER_H

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/circular_buffer/test/BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../circular_buffer.h"
    4|       |///////////////////////////////////////////////////// TEST ///////////////////////////////////////////////////////
    5|       |
    6|       |TEST(Circural_buffer_bt, main)
    7|      1|{
    8|      1|    Circular_buffer testBuffer;
    9|     26|    for (char i = 40; i < 65; ++i){
   10|     25|        testBuffer.put(i);
   11|     25|    }
   12|      1|    std::cout << testBuffer.dump<char>();
   13|       |
   14|       |
   15|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/emoji/emoji.cpp:
    1|       |#include <sstream>
    2|       |#include "emoji.h"
    3|       |
    4|       |EMOJI::EMOJI()
    5|      0|{
    6|       |
    7|      0|}
    8|       |
    9|       |std::string EMOJI::emoji(E_emoji e)
   10|     50|{
   11|     50|    switch (e) {
   12|     14|    case E_emoji::NORTH_EAST_ARROW:
   13|     14|        return HEX_STR::hexToStr("E28697");
   14|      2|    case E_emoji::SOUTH_EAST_ARROW:
   15|      2|        return HEX_STR::hexToStr("E28698");
   16|      0|    case E_emoji::NORTH_WEST_ARROW:
   17|      0|        return HEX_STR::hexToStr("E28696");
   18|      0|    case E_emoji::SOUTH_WEST_ARROW:
   19|      0|        return HEX_STR::hexToStr("E28699");
   20|      0|    case E_emoji::LEFT_RIGHT_ARROW:
   21|      0|        return HEX_STR::hexToStr("E28694");
   22|      0|    case E_emoji::UP_DOWN_ARROW:
   23|      0|        return HEX_STR::hexToStr("E28695");
   24|      0|    case E_emoji::ALARM_CLOCK:
   25|      0|        return HEX_STR::hexToStr("E28FB0");
   26|      0|    case E_emoji::SUN_WITH_FACE:
   27|      0|        return HEX_STR::hexToStr("F09F8C9E");
   28|      0|    case E_emoji::SNOWFLAKE:
   29|      0|        return HEX_STR::hexToStr("E29D84");
   30|      0|    case E_emoji::HEAVY_BLACK_HEART:
   31|      0|        return HEX_STR::hexToStr("E29DA4");
   32|     30|    case E_emoji::WARNING_SIGN:
   33|     30|        return HEX_STR::hexToStr("E29AA0");
   34|      2|    case E_emoji::CHART_WITH_DOWNWARDS_TREND:
   35|      2|        return HEX_STR::hexToStr("F09F9389");
   36|      2|    case E_emoji::CHART_WITH_UPWARDS_TREND:
   37|      2|        return HEX_STR::hexToStr("F09F9388");
   38|      0|    case E_emoji::THUNDER_CLOUD_AND_RAIN:
   39|      0|        return HEX_STR::hexToStr("E29B88");
   40|      0|    case E_emoji::THERMOMETER:
   41|      0|        return HEX_STR::hexToStr("F09F8CA1");
   42|      0|    case E_emoji::BULB:
   43|      0|        return HEX_STR::hexToStr("F09F92A1");
   44|       |
   45|     50|    }
   46|      0|    return"ok";
   47|     50|}
   48|       |
   49|       |std::string HEX_STR::hexToStr(const std::string& hex)
   50|     50|{
   51|     50|    std::string res;
   52|     50|    res.reserve(hex.size() / 2);
   53|    204|    for (unsigned int i = 0; i < hex.size(); i += 2)
   54|    154|    {
   55|    154|        std::istringstream iss(hex.substr(i, 2));
   56|    154|        int temp;
   57|    154|        iss >> std::hex >> temp;
   58|    154|        res.push_back(static_cast<char>(temp));
   59|    154|    }
   60|     50|    return res;
   61|     50|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event/event_command.cpp:
    1|       |#include "event_command.h"
    2|       |
    3|       |event_command::event_command(const std::string& name):  event_counters(name)
    4|    239|{
    5|       |
    6|    239|}
    7|       |
    8|       |std::string event_command::help() const
    9|      3|{
   10|      3|    return "event command";
   11|      3|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event/event_mpd.cpp:
    1|       |#include "event_mpd.h"
    2|       |
    3|       |event_mpd::event_mpd(const std::string& name): event_counters(name)
    4|    239|{
    5|       |
    6|    239|}
    7|       |
    8|       |std::string event_mpd::help() const
    9|      2|{
   10|      2|    return "event from MPD";
   11|      2|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event/event_pilot.cpp:
    1|       |#include "event_pilot.h"
    2|       |
    3|       |event_pilot::event_pilot(const std::string& name): event_counters(name)
    4|    239|{
    5|       |
    6|    239|}
    7|       |
    8|       |std::string event_pilot::help() const
    9|      3|{
   10|      3|    return "pilot events";
   11|      3|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event/event_unknown.cpp:
    1|       |#include "event_unknown.h"
    2|       |
    3|       |event_unknown::event_unknown(const std::string& name) : event_counters(name), name(name)
    4|    268|{
    5|       |
    6|    268|}
    7|       |
    8|       |std::string event_unknown::help() const
    9|     25|{
   10|     25|    return  name + " event";
   11|     25|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event/new_connect_event.cpp:
    1|       |#include "new_connect_event.h"
    2|       |
    3|       |new_Connect_Event::new_Connect_Event(const std::string& name) : event_counters(name)
    4|    239|{}
    5|       |
    6|       |std::string new_Connect_Event::help() const
    7|      3|{
    8|      3|    return "connection start event";
    9|      3|}
   10|       |
   11|       |
   12|       |
   13|       |
   14|       |
   15|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event_counters.cpp:
    1|       |#include "event_counters.h"
    2|       |#include <iomanip>
    3|       |
    4|       |event_counters::event_counters(std::string name) : eventName(std::move(name))
    5|  1.22k|{
    6|       |
    7|  1.22k|}
    8|       |
    9|       |int event_counters::howManyEvent() const
   10|     50|{
   11|     50|    std::lock_guard<std::mutex> lock(eventMutex);
   12|     50|    return static_cast<int>(eventList.size());
   13|     50|}
   14|       |
   15|       |void event_counters::addEvent(const std::string& note)
   16|  14.0k|{
   17|  14.0k|    eventStruct d;
   18|  14.0k|    std::ostringstream oss;
   19|       |
   20|  14.0k|    auto t = std::time(nullptr);
   21|  14.0k|    auto tm = *std::localtime(&t);
   22|  14.0k|    oss << std::put_time(&tm, "%d-%m-%Y %H:%M:%S");
   23|       |
   24|  14.0k|    d.date = oss.str();
   25|  14.0k|    d.note = note;
   26|  14.0k|    d.posixTime = static_cast<unsigned int> (std::time(nullptr));
   27|  14.0k|    std::lock_guard < std::mutex > lock ( eventMutex);
   28|  14.0k|    eventList.push_back(d);
   29|  14.0k|}
   30|       |
   31|       |std::string event_counters::getEvent() const
   32|     24|{
   33|     24|    std::stringstream ret;
   34|     24|    ret << "Event: " << help() << "\n";
   35|     24|    std::lock_guard <std::mutex> lock(eventMutex);
   36|     24|    int k = 0;
   37|  18.2k|    for (const auto& i : eventList){
   38|  18.2k|        ret << ++k << "\t" << i.date << "     " <<  i.note << "\n";
   39|  18.2k|    }
   40|     24|    ret << "\n event per last minute: " << getLast1minNumberEvent_NO_Mutex() << "\n------------------------------";
   41|     24|    return ret.str();
   42|     24|}
   43|       |
   44|       |void event_counters::clearEvent()
   45|      3|{
   46|      3|    std::lock_guard <std::mutex> lock(eventMutex);
   47|      3|    eventList.clear();
   48|      3|}
   49|       |
   50|       |void event_counters::clearEvent(int from, int to)
   51|      6|{
   52|      6|    if (to < from){
   53|      1|        return;
   54|      1|    }
   55|      5|    auto max = static_cast<int>( eventList.size() );
   56|       |
   57|      5|    if (max < to){
   58|      2|        to = max;
   59|      2|    }
   60|      5|    if(max<from){
   61|      1|        from = max;
   62|      1|        to = max;
   63|      1|    }
   64|      5|    std::lock_guard <std::mutex> lock(eventMutex);
   65|      5|    eventList.erase(eventList.begin() + from, eventList.begin() + to);
   66|      5|}
   67|       |
   68|       |unsigned int event_counters::getLast1minNumberEvent() const
   69|      3|{
   70|      3|    std::lock_guard <std::mutex> lock(eventMutex);
   71|      3|    return getLast1minNumberEvent_NO_Mutex();
   72|      3|}
   73|       |
   74|       |std::string event_counters::getEventName() const
   75|  1.22k|{
   76|  1.22k|    return eventName;
   77|  1.22k|}
   78|       |
   79|       |unsigned int event_counters::getLast1minNumberEvent_NO_Mutex() const
   80|     27|{
   81|     27|    unsigned int k = 0;
   82|     27|    if (eventList.empty())
   83|      2|        return k;
   84|     25|    unsigned int lastPosix = static_cast<unsigned int> (std::time(nullptr));
   85|       |
   86|  18.7k|    for (int i = static_cast<int>(eventList.size())-1; i not_eq -1; i--)
   87|  18.7k|    {
   88|  18.7k|        if(eventList.at(static_cast<std::size_t>(i)).posixTime + 60 > lastPosix)
   89|  18.7k|            k++;
   90|      1|        else
   91|      1|            break;
   92|  18.7k|    }
   93|     25|    return k;
   94|     27|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event_counters.h:
    1|       |#ifndef EVENT_COUNTERS_H
    2|       |#define EVENT_COUNTERS_H
    3|       |
    4|       |#include <mutex>
    5|       |#include <string>
    6|       |#include <vector>
    7|       |
    8|       |struct eventStruct{
    9|       |    std::string date = "";
   10|       |    std::string note = "";
   11|       |    unsigned int posixTime = 0;
   12|       |};
   13|       |
   14|       |class event_counters
   15|       |{
   16|       |   mutable std::mutex eventMutex;
   17|       |
   18|       |protected:
   19|       |#ifdef BT_TEST
   20|       |public:
   21|       |#endif
   22|       |    std::string eventName;
   23|       |    std::vector <eventStruct> eventList;
   24|       |
   25|       |public:
   26|       |    event_counters(std::string name);
   27|  1.22k|    virtual ~event_counters() = default;
   28|       |    virtual std::string help() const = 0;
   29|       |    virtual int howManyEvent() const;
   30|       |    virtual void addEvent(const std::string &note = "");
   31|       |    virtual std::string getEvent() const;
   32|       |    virtual void clearEvent();
   33|       |    virtual void clearEvent(int from, int to);
   34|       |    virtual unsigned int getLast1minNumberEvent() const;
   35|       |    std::string getEventName() const;
   36|       |private:
   37|       |    virtual unsigned int getLast1minNumberEvent_NO_Mutex() const;
   38|       |};
   39|       |
   40|       |#endif // EVENT_COUNTERS_H

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/event_counters_handler.cpp:
    1|       |#include "event_counters_handler.h"
    2|       |#include "event/new_connect_event.h"
    3|       |#include "event/event_unknown.h"
    4|       |#include "event/event_mpd.h"
    5|       |#include "event/event_pilot.h"
    6|       |#include "event/event_command.h"
    7|       |
    8|       |
    9|       |event_counters_handler::event_counters_handler()
   10|    239|{
   11|    239|    std::shared_ptr <event_counters> newConnectEvent (new new_Connect_Event("connections") );
   12|    239|    eventCountersMap.insert( std::make_pair( newConnectEvent->getEventName(), newConnectEvent ) );
   13|       |
   14|    239|    std::shared_ptr <event_counters> newUnknownEvent (new event_unknown("unknown") );
   15|    239|    eventCountersMap.insert( std::make_pair( newUnknownEvent->getEventName(), newUnknownEvent ) );
   16|       |
   17|    239|    std::shared_ptr <event_counters> eventMPD (new event_mpd("mpd") );
   18|    239|    eventCountersMap.insert( std::make_pair( eventMPD->getEventName(), eventMPD ) );
   19|       |
   20|    239|    std::shared_ptr <event_counters> eventPilot (new event_pilot("pilot") );
   21|    239|    eventCountersMap.insert( std::make_pair( eventPilot->getEventName(), eventPilot ) );
   22|       |
   23|    239|    std::shared_ptr <event_counters> eventCommand (new event_command("command") );
   24|    239|    eventCountersMap.insert( std::make_pair( eventCommand->getEventName(), eventCommand ) );
   25|    239|}
   26|       |
   27|       |std::shared_ptr<event_counters> event_counters_handler::run(const std::string& name)
   28|  14.1k|{
   29|       |
   30|  14.1k|    if (eventCountersMap.find(name) == eventCountersMap.end()){
   31|     29|        addEvent(name);
   32|     29|    }
   33|  14.1k|    return eventCountersMap[name];
   34|  14.1k|}
   35|       |
   36|       |std::string event_counters_handler::getListPossibleEvents()
   37|      2|{
   38|      2|    std::string result;
   39|       |
   40|     13|    for( auto iter= eventCountersMap.begin();iter not_eq eventCountersMap.end(); ++iter ) {
   41|     11|        result.append(iter->first);
   42|     11|        result.push_back('\n');
   43|     11|    }
   44|      2|    return result;
   45|      2|}
   46|       |
   47|       |std::string event_counters_handler::help(const std::string& name)
   48|      3|{
   49|      3|    std::string result;
   50|       |
   51|      3|    if (name.empty()){
   52|     13|        for( auto iter = eventCountersMap.begin();iter not_eq eventCountersMap.end(); ++iter ) {
   53|     11|            result.append(iter->second->help());
   54|     11|            result.append("\n------------------------------\n");
   55|     11|        }
   56|      2|    }
   57|      1|    else{
   58|      1|        result = eventCountersMap[name]->help();
   59|      1|    }
   60|       |
   61|      3|    return result;
   62|      3|}
   63|       |std::mutex event_counters_handler::echMutex;
   64|       |
   65|       |void event_counters_handler::addEvent(const std::string& name)
   66|     29|{
   67|     29|    std::lock_guard <std::mutex> lock(event_counters_handler::echMutex);
   68|     29|    std::shared_ptr <event_counters> newUnknownEvent (new event_unknown(name) );
   69|     29|    eventCountersMap.insert( std::make_pair( newUnknownEvent->getEventName(), newUnknownEvent ) );
   70|     29|}
   71|       |
   72|       |void event_counters_handler::clearOld(int moreThan, int last, std::function<void (std::string& )> logger)
   73|       |
   74|      1|{
   75|      7|    for( auto iter = eventCountersMap.begin();iter not_eq eventCountersMap.end(); ++iter ) {
   76|       |
   77|      6|        auto i = iter->second->howManyEvent();
   78|      6|        if(i > moreThan){
   79|      1|            iter->second->clearEvent(0, i - last ) ;
   80|      1|            auto name = iter->second->getEventName();
   81|      1|            logger(name);
   82|      1|        }
   83|      6|    }
   84|      1|}
   85|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/event_counters/test/event_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "test_data.h"
    4|       |#include "../event_counters_handler.h"
    5|       |#include "../../iDom_server_OOP/src/iDom_server_OOP.h"
    6|       |
    7|       |class event_counter_fixture: public testing::Test
    8|       |{
    9|       |public:
   10|       |     event_counters_handler mainEvent;
   11|       |     std::string msg = "info";
   12|       |     std::string testEvent = "testEvent";
   13|      1|     void preper9000Event(){
   14|      1|         int counter = 9000;
   15|      1|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),0);
   16|      1|         mainEvent.run(testEvent)->addEvent(msg);
   17|      1|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1);
   18|      1|         std::string returnedString = mainEvent.run(testEvent)->getEvent();
   19|      1|         EXPECT_THAT(returnedString, testing::HasSubstr(msg));
   20|      1|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1);
   21|       |
   22|  9.00k|         for (int i = 1; i not_eq counter; counter--)
   23|  8.99k|         {
   24|  8.99k|             mainEvent.run(testEvent)->addEvent(msg);
   25|  8.99k|             if(counter == 500){}
   26|  8.99k|         }
   27|      1|         mainEvent.run(testEvent)->addEvent("cyniu");
   28|      1|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),9001);
   29|      1|         returnedString = mainEvent.run(testEvent)->getEvent();
   30|      1|         EXPECT_THAT(returnedString, testing::HasSubstr("cyniu"));
   31|      1|     }
   32|       |
   33|      5|     void preper1001Event(){
   34|      5|         int counter = 1000;
   35|      5|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),0);
   36|      5|         mainEvent.run(testEvent)->addEvent(msg);
   37|      5|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1);
   38|      5|         std::string returnedString = mainEvent.run(testEvent)->getEvent();
   39|      5|         EXPECT_THAT(returnedString, testing::HasSubstr(msg));
   40|      5|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1);
   41|       |
   42|  5.00k|         for (int i = 1; i not_eq counter; counter--)
   43|  4.99k|         {
   44|  4.99k|             mainEvent.run(testEvent)->addEvent(msg);
   45|  4.99k|             if(counter == 500)
   46|      5|                 mainEvent.run(testEvent)->addEvent("cyniu");
   47|  4.99k|         }
   48|      5|         EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1001);
   49|      5|         returnedString = mainEvent.run(testEvent)->getEvent();
   50|      5|         EXPECT_THAT(returnedString, testing::HasSubstr("cyniu"));
   51|      5|     }
   52|       |};
   53|       |
   54|       |TEST_F(event_counter_fixture, add_get_clear_event)
   55|      1|{
   56|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),0);
   57|      1|    mainEvent.run(testEvent)->addEvent(msg);
   58|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1);
   59|      1|    std::string returnedString = mainEvent.run(testEvent)->getEvent();
   60|      1|    EXPECT_THAT(returnedString, testing::HasSubstr(msg));
   61|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1);
   62|      1|    mainEvent.run(testEvent)->clearEvent();
   63|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),0);
   64|      1|}
   65|       |
   66|       |TEST_F(event_counter_fixture, clear_middle_part_of_event_small_big)
   67|      1|{
   68|      1|    preper1001Event();
   69|      1|    mainEvent.run(testEvent)->clearEvent(400,600);
   70|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),801);
   71|      1|    std::string returnedString = mainEvent.run(testEvent)->getEvent();
   72|      1|    EXPECT_THAT(returnedString, testing::Not(testing::HasSubstr("cyniu")));
   73|      1|}
   74|       |
   75|       |TEST_F(event_counter_fixture, clear_middle_part_of_event_big_small)
   76|      1|{
   77|      1|    preper1001Event();
   78|      1|    mainEvent.run(testEvent)->clearEvent(600,400);
   79|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1001);
   80|      1|    std::string returnedString = mainEvent.run(testEvent)->getEvent();
   81|      1|    EXPECT_THAT(returnedString,testing::HasSubstr("cyniu"));
   82|      1|}
   83|       |
   84|       |TEST_F(event_counter_fixture, clear_middle_part_of_event_to_max)
   85|      1|{
   86|      1|    preper1001Event();
   87|      1|    mainEvent.run(testEvent)->clearEvent(400,1600);
   88|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),400);
   89|      1|    std::string returnedString = mainEvent.run(testEvent)->getEvent();
   90|      1|    EXPECT_THAT(returnedString, testing::Not(testing::HasSubstr("cyniu")));
   91|      1|}
   92|       |
   93|       |TEST_F(event_counter_fixture, clear_middle_part_of_event_from_max)
   94|      1|{
   95|      1|    preper1001Event();
   96|      1|    mainEvent.run(testEvent)->clearEvent(1400,1600);
   97|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1001);
   98|      1|    std::string returnedString = mainEvent.run(testEvent)->getEvent();
   99|      1|    EXPECT_THAT(returnedString, testing::HasSubstr("cyniu") );
  100|      1|}
  101|       |
  102|       |TEST_F(event_counter_fixture, getListPossibleEvents)
  103|      1|{
  104|      1|    mainEvent.run("INFO")->addEvent("kokolino");
  105|      1|   std::string returnedString = mainEvent.getListPossibleEvents();
  106|      1|   std::cout << "wynik: " << returnedString << std::endl;
  107|      1|   EXPECT_THAT(returnedString, testing::HasSubstr("INFO") );
  108|      1|}
  109|       |
  110|       |TEST_F(event_counter_fixture, getHelp)
  111|      1|{
  112|      1|   mainEvent.run("INFO")->addEvent("kokolino");
  113|      1|   std::string returnedString = mainEvent.help("connections");
  114|      1|   std::cout << "wynik: " << returnedString << std::endl;
  115|      1|   EXPECT_THAT(returnedString, testing::HasSubstr("start") );
  116|      1|   returnedString = mainEvent.help("");
  117|      1|   std::cout << "wynik: " << returnedString << std::endl;
  118|      1|   EXPECT_THAT(returnedString, testing::HasSubstr("pilot") );
  119|      1|}
  120|       |
  121|       |TEST_F(event_counter_fixture, getLast1minNumberEvent)
  122|      1|{
  123|      1|    preper1001Event();
  124|      1|    mainEvent.run(testEvent)->eventList.at(500).posixTime -= 65;
  125|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1001);
  126|      1|    EXPECT_EQ(mainEvent.run(testEvent)->getLast1minNumberEvent(),500);
  127|      1|}
  128|       |
  129|       |TEST_F(event_counter_fixture, getLast1minNumberEventWhenEmpty)
  130|      1|{
  131|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),0);
  132|      1|    EXPECT_EQ(mainEvent.run(testEvent)->getLast1minNumberEvent(),0);
  133|      1|}
  134|       |
  135|       |
  136|       |TEST_F(event_counter_fixture, clearOldEvent)
  137|      1|{
  138|      1|    preper9000Event();
  139|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),9001);
  140|       |
  141|      1|    mainEvent.clearOld(8000, 1000, [](const std::string& name){
  142|      1|        log_file_mutex.mutex_lock();
  143|      1|        log_file_cout << INFO << "skasowanao nadmarowe eventy w: "<< name << std::endl;
  144|      1|        log_file_mutex.mutex_unlock();
  145|      1|    });
  146|       |
  147|      1|    EXPECT_EQ(mainEvent.run(testEvent)->howManyEvent(),1000);
  148|      1|    auto returnedString = mainEvent.run(testEvent)->getEvent();
  149|      1|    EXPECT_THAT(returnedString, testing::HasSubstr("cyniu"));
  150|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/generator/TEST/generator_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include "test_data.h"
    3|       |#include "../generator.h"
    4|       |
    5|       |TEST(generator_BT, string256)
    6|      1|{
    7|      1|    size_t sizeTest = 256;
    8|      1|    generator g;
    9|      1|    auto str = g.random_string(sizeTest);
   10|      1|    auto str2 = g.random_string(sizeTest);
   11|      1|    EXPECT_EQ(str.size(), sizeTest);
   12|      1|    EXPECT_STRNE(str.c_str(),str2.c_str());
   13|      1|    std::cout << str << std::endl;
   14|      1|}
   15|       |
   16|       |TEST(generator_BT, string10)
   17|      1|{
   18|      1|    size_t sizeTest = 10;
   19|      1|    generator g;
   20|      1|    auto str = g.random_string(sizeTest);
   21|      1|    auto str2 = g.random_string(sizeTest);
   22|      1|    EXPECT_EQ(str.size(), sizeTest);
   23|      1|    EXPECT_STRNE(str.c_str(),str2.c_str());
   24|      1|    std::cout << str << std::endl;
   25|      1|}
   26|       |
   27|       |TEST(generator_BT, hex)
   28|      1|{
   29|      1|    size_t sizeTest = 255;
   30|      1|    generator g;
   31|      1|    auto str = g.generate_hex(sizeTest);
   32|      1|    EXPECT_EQ(str.size(), sizeTest*2);
   33|      1|    std::cout << str << std::endl;
   34|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/generator/generator.cpp:
    1|       |#include "generator.h"
    2|       |#include <sstream>
    3|       |
    4|       |generator::generator()
    5|  1.99k|{
    6|       |
    7|  1.99k|}
    8|       |
    9|       |std::string generator::random_string(size_t length)
   10|  1.81k|{
   11|  1.81k|    const std::vector<char> char_array =
   12|  1.81k|        {'0','1','2','3','4',
   13|  1.81k|         '5','6','7','8','9',
   14|  1.81k|         'A','B','C','D','E','F',
   15|  1.81k|         'G','H','I','J','K',
   16|  1.81k|         'L','M','N','O','P',
   17|  1.81k|         'Q','R','S','T','U',
   18|  1.81k|         'V','W','X','Y','Z',
   19|  1.81k|         'a','b','c','d','e','f',
   20|  1.81k|         'g','h','i','j','k',
   21|  1.81k|         'l','m','n','o','p',
   22|  1.81k|         'q','r','s','t','u',
   23|  1.81k|         'v','w','x','y','z'
   24|  1.81k|        };
   25|       |    //1) create a non-deterministic random number generator
   26|  1.81k|    std::default_random_engine rng(std::random_device{}());
   27|       |
   28|       |    //2) create a random number "shaper" that will give
   29|       |    //   us uniformly distributed indices into the character set
   30|  1.81k|    std::uniform_int_distribution<> dist(0, char_array.size()-1);
   31|       |
   32|       |    //3) create a function that ties them together, to get:
   33|       |    //   a non-deterministic uniform distribution from the
   34|       |    //   character set of your choice.
   35|  18.7k|    auto randchar = [ char_array,&dist,&rng ](){return char_array[ dist(rng) ];};
   36|       |
   37|  1.81k|    std::string str(length,0);
   38|  1.81k|    std::generate_n( str.begin(), length, randchar );
   39|  1.81k|    return str;
   40|  1.81k|}
   41|       |
   42|    255|unsigned char generator::random_char() {
   43|    255|    std::random_device rd;
   44|    255|    std::mt19937 gen(rd());
   45|    255|    std::uniform_int_distribution<> dis(0, 255);
   46|    255|    return static_cast<unsigned char>(dis(gen));
   47|    255|}
   48|       |std::string generator::generate_hex(size_t len)
   49|      1|{
   50|      1|    std::stringstream ss;
   51|    256|    for(size_t i = 0; i < len; i++) {
   52|    255|        auto rc = random_char();
   53|    255|        std::stringstream hexstream;
   54|    255|        hexstream << std::hex << int(rc);
   55|    255|        auto hex = hexstream.str();
   56|    255|        ss << (hex.length() < 2 ? '0' + hex : hex);
   57|    255|    }
   58|      1|    return ss.str();
   59|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/httpStatusCode/httpStatusCode.hpp:
    1|       |/*! \file
    2|       | *
    3|       | * HTTP Status Codes - C++ Variant
    4|       | *
    5|       | * https://github.com/j-ulrich/http-status-codes-cpp
    6|       | *
    7|       | * \version 1.5.0
    8|       | * \author Jochen Ulrich <jochenulrich@t-online.de>
    9|       | * \copyright Licensed under Creative Commons CC0 (http://creativecommons.org/publicdomain/zero/1.0/)
   10|       | */
   11|       |
   12|       |#ifndef HTTPSTATUSCODES_CPP_H_
   13|       |#define HTTPSTATUSCODES_CPP_H_
   14|       |
   15|       |#include <string>
   16|       |
   17|       |/*! Namespace for HTTP status codes and reason phrases.
   18|       | */
   19|       |namespace HttpStatus
   20|       |{
   21|       |
   22|       |
   23|       |/*! Enum for the HTTP status codes.
   24|       | */
   25|       |enum Code
   26|       |{
   27|       |	/*####### 1xx - Informational #######*/
   28|       |	/* Indicates an interim response for communicating connection status
   29|       |	 * or request progress prior to completing the requested action and
   30|       |	 * sending a final response.
   31|       |	 */
   32|       |	Continue           = 100, //!< Indicates that the initial part of a request has been received and has not yet been rejected by the server.
   33|       |	SwitchingProtocols = 101, //!< Indicates that the server understands and is willing to comply with the client's request, via the Upgrade header field, for a change in the application protocol being used on this connection.
   34|       |	Processing         = 102, //!< Is an interim response used to inform the client that the server has accepted the complete request, but has not yet completed it.
   35|       |	EarlyHints         = 103, //!< Indicates to the client that the server is likely to send a final response with the header fields included in the informational response.
   36|       |
   37|       |	/*####### 2xx - Successful #######*/
   38|       |	/* Indicates that the client's request was successfully received,
   39|       |	 * understood, and accepted.
   40|       |	 */
   41|       |	OK                          = 200, //!< Indicates that the request has succeeded.
   42|       |	Created                     = 201, //!< Indicates that the request has been fulfilled and has resulted in one or more new resources being created.
   43|       |	Accepted                    = 202, //!< Indicates that the request has been accepted for processing, but the processing has not been completed.
   44|       |	NonAuthoritativeInformation = 203, //!< Indicates that the request was successful but the enclosed payload has been modified from that of the origin server's 200 (OK) response by a transforming proxy.
   45|       |	NoContent                   = 204, //!< Indicates that the server has successfully fulfilled the request and that there is no additional content to send in the response payload body.
   46|       |	ResetContent                = 205, //!< Indicates that the server has fulfilled the request and desires that the user agent reset the \"document view\", which caused the request to be sent, to its original state as received from the origin server.
   47|       |	PartialContent              = 206, //!< Indicates that the server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the requests's Range header field.
   48|       |	MultiStatus                 = 207, //!< Provides status for multiple independent operations.
   49|       |	AlreadyReported             = 208, //!< Used inside a DAV:propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly. [RFC 5842]
   50|       |	IMUsed                      = 226, //!< The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.
   51|       |
   52|       |	/*####### 3xx - Redirection #######*/
   53|       |	/* Indicates that further action needs to be taken by the user agent
   54|       |	 * in order to fulfill the request.
   55|       |	 */
   56|       |	MultipleChoices   = 300, //!< Indicates that the target resource has more than one representation, each with its own more specific identifier, and information about the alternatives is being provided so that the user (or user agent) can select a preferred representation by redirecting its request to one or more of those identifiers.
   57|       |	MovedPermanently  = 301, //!< Indicates that the target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.
   58|       |	Found             = 302, //!< Indicates that the target resource resides temporarily under a different URI.
   59|       |	SeeOther          = 303, //!< Indicates that the server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, that is intended to provide an indirect response to the original request.
   60|       |	NotModified       = 304, //!< Indicates that a conditional GET request has been received and would have resulted in a 200 (OK) response if it were not for the fact that the condition has evaluated to false.
   61|       |	UseProxy          = 305, //!< \deprecated \parblock Due to security concerns regarding in-band configuration of a proxy. \endparblock
   62|       |	                         //!< The requested resource MUST be accessed through the proxy given by the Location field.
   63|       |	TemporaryRedirect = 307, //!< Indicates that the target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.
   64|       |	PermanentRedirect = 308, //!< The target resource has been assigned a new permanent URI and any future references to this resource outght to use one of the enclosed URIs. [...] This status code is similar to 301 Moved Permanently (Section 7.3.2 of rfc7231), except that it does not allow rewriting the request method from POST to GET.
   65|       |
   66|       |	/*####### 4xx - Client Error #######*/
   67|       |	/* Indicates that the client seems to have erred.
   68|       |	 */
   69|       |	BadRequest                  = 400, //!< Indicates that the server cannot or will not process the request because the received syntax is invalid, nonsensical, or exceeds some limitation on what the server is willing to process.
   70|       |	Unauthorized                = 401, //!< Indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.
   71|       |	PaymentRequired             = 402, //!< *Reserved*
   72|       |	Forbidden                   = 403, //!< Indicates that the server understood the request but refuses to authorize it.
   73|       |	NotFound                    = 404, //!< Indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
   74|       |	MethodNotAllowed            = 405, //!< Indicates that the method specified in the request-line is known by the origin server but not supported by the target resource.
   75|       |	NotAcceptable               = 406, //!< Indicates that the target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.
   76|       |	ProxyAuthenticationRequired = 407, //!< Is similar to 401 (Unauthorized), but indicates that the client needs to authenticate itself in order to use a proxy.
   77|       |	RequestTimeout              = 408, //!< Indicates that the server did not receive a complete request message within the time that it was prepared to wait.
   78|       |	Conflict                    = 409, //!< Indicates that the request could not be completed due to a conflict with the current state of the resource.
   79|       |	Gone                        = 410, //!< Indicates that access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.
   80|       |	LengthRequired              = 411, //!< Indicates that the server refuses to accept the request without a defined Content-Length.
   81|       |	PreconditionFailed          = 412, //!< Indicates that one or more preconditions given in the request header fields evaluated to false when tested on the server.
   82|       |	ContentTooLarge             = 413, //!< Indicates that the server is refusing to process a request because the request payload is larger than the server is willing or able to process.
   83|       |	PayloadTooLarge             = 413, //!< Alias for ContentTooLarge for backward compatibility.
   84|       |	URITooLong                  = 414, //!< Indicates that the server is refusing to service the request because the request-target is longer than the server is willing to interpret.
   85|       |	UnsupportedMediaType        = 415, //!< Indicates that the origin server is refusing to service the request because the payload is in a format not supported by the target resource for this method.
   86|       |	RangeNotSatisfiable         = 416, //!< Indicates that none of the ranges in the request's Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.
   87|       |	ExpectationFailed           = 417, //!< Indicates that the expectation given in the request's Expect header field could not be met by at least one of the inbound servers.
   88|       |	ImATeapot                   = 418, //!< Any attempt to brew coffee with a teapot should result in the error code 418 I'm a teapot.
   89|       |	MisdirectedRequest          = 421, //!< Indicates that the request was directed at a server that is unable or unwilling to produce an authoritative response for the target URI.
   90|       |	UnprocessableContent        = 422, //!< Means the server understands the content type of the request entity (hence a 415(Unsupported Media Type) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions.
   91|       |	UnprocessableEntity         = 422, //!< Alias for UnprocessableContent for backward compatibility.
   92|       |	Locked                      = 423, //!< Means the source or destination resource of a method is locked.
   93|       |	FailedDependency            = 424, //!< Means that the method could not be performed on the resource because the requested action depended on another action and that action failed.
   94|       |	TooEarly                    = 425, //!< Indicates that the server is unwilling to risk processing a request that might be replayed.
   95|       |	UpgradeRequired             = 426, //!< Indicates that the server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.
   96|       |	PreconditionRequired        = 428, //!< Indicates that the origin server requires the request to be conditional.
   97|       |	TooManyRequests             = 429, //!< Indicates that the user has sent too many requests in a given amount of time (\"rate limiting\").
   98|       |	RequestHeaderFieldsTooLarge = 431, //!< Indicates that the server is unwilling to process the request because its header fields are too large.
   99|       |	UnavailableForLegalReasons  = 451, //!< This status code indicates that the server is denying access to the resource in response to a legal demand.
  100|       |
  101|       |	/*####### 5xx - Server Error #######*/
  102|       |	/* Indicates that the server is aware that it has erred
  103|       |	 * or is incapable of performing the requested method.
  104|       |	 */
  105|       |	InternalServerError           = 500, //!< Indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
  106|       |	NotImplemented                = 501, //!< Indicates that the server does not support the functionality required to fulfill the request.
  107|       |	BadGateway                    = 502, //!< Indicates that the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.
  108|       |	ServiceUnavailable            = 503, //!< Indicates that the server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
  109|       |	GatewayTimeout                = 504, //!< Indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.
  110|       |	HTTPVersionNotSupported       = 505, //!< Indicates that the server does not support, or refuses to support, the protocol version that was used in the request message.
  111|       |	VariantAlsoNegotiates         = 506, //!< Indicates that the server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.
  112|       |	InsufficientStorage           = 507, //!< Means the method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.
  113|       |	LoopDetected                  = 508, //!< Indicates that the server terminated an operation because it encountered an infinite loop while processing a request with "Depth: infinity". [RFC 5842]
  114|       |	NotExtended                   = 510, //!< \deprecated \parblock Obsoleted as the experiment has ended and there is no evidence of widespread use. \endparblock
  115|       |	                                     //!< The policy for accessing the resource has not been met in the request. [RFC 2774]
  116|       |	NetworkAuthenticationRequired = 511, //!< Indicates that the client needs to authenticate to gain network access.
  117|       |
  118|       |	xxx_max = 1023
  119|       |};
  120|       |
  121|      0|inline bool isInformational(int code) { return (code >= 100 && code < 200); } //!< \returns \c true if the given \p code is an informational code.
  122|      0|inline bool isSuccessful(int code)    { return (code >= 200 && code < 300); } //!< \returns \c true if the given \p code is a successful code.
  123|      0|inline bool isRedirection(int code)   { return (code >= 300 && code < 400); } //!< \returns \c true if the given \p code is a redirectional code.
  124|      0|inline bool isClientError(int code)   { return (code >= 400 && code < 500); } //!< \returns \c true if the given \p code is a client error code.
  125|      0|inline bool isServerError(int code)   { return (code >= 500 && code < 600); } //!< \returns \c true if the given \p code is a server error code.
  126|      0|inline bool isError(int code)         { return (code >= 400); }               //!< \returns \c true if the given \p code is any type of error code.
  127|       |
  128|       |/*! Returns the standard HTTP reason phrase for a HTTP status code.
  129|       | * \param code An HTTP status code.
  130|       | * \return The standard HTTP reason phrase for the given \p code or an empty \c std::string()
  131|       | * if no standard phrase for the given \p code is known.
  132|       | */
  133|       |inline std::string reasonPhrase(int code)
  134|      0|{
  135|      0|	switch (code)
  136|      0|	{
  137|       |
  138|       |	//####### 1xx - Informational #######
  139|      0|	case 100: return "Continue";
  140|      0|	case 101: return "Switching Protocols";
  141|      0|	case 102: return "Processing";
  142|      0|	case 103: return "Early Hints";
  143|       |
  144|       |	//####### 2xx - Successful #######
  145|      0|	case 200: return "OK";
  146|      0|	case 201: return "Created";
  147|      0|	case 202: return "Accepted";
  148|      0|	case 203: return "Non-Authoritative Information";
  149|      0|	case 204: return "No Content";
  150|      0|	case 205: return "Reset Content";
  151|      0|	case 206: return "Partial Content";
  152|      0|	case 207: return "Multi-Status";
  153|      0|	case 208: return "Already Reported";
  154|      0|	case 226: return "IM Used";
  155|       |
  156|       |	//####### 3xx - Redirection #######
  157|      0|	case 300: return "Multiple Choices";
  158|      0|	case 301: return "Moved Permanently";
  159|      0|	case 302: return "Found";
  160|      0|	case 303: return "See Other";
  161|      0|	case 304: return "Not Modified";
  162|      0|	case 305: return "Use Proxy";
  163|      0|	case 307: return "Temporary Redirect";
  164|      0|	case 308: return "Permanent Redirect";
  165|       |
  166|       |	//####### 4xx - Client Error #######
  167|      0|	case 400: return "Bad Request";
  168|      0|	case 401: return "Unauthorized";
  169|      0|	case 402: return "Payment Required";
  170|      0|	case 403: return "Forbidden";
  171|      0|	case 404: return "Not Found";
  172|      0|	case 405: return "Method Not Allowed";
  173|      0|	case 406: return "Not Acceptable";
  174|      0|	case 407: return "Proxy Authentication Required";
  175|      0|	case 408: return "Request Timeout";
  176|      0|	case 409: return "Conflict";
  177|      0|	case 410: return "Gone";
  178|      0|	case 411: return "Length Required";
  179|      0|	case 412: return "Precondition Failed";
  180|      0|	case 413: return "Content Too Large";
  181|      0|	case 414: return "URI Too Long";
  182|      0|	case 415: return "Unsupported Media Type";
  183|      0|	case 416: return "Range Not Satisfiable";
  184|      0|	case 417: return "Expectation Failed";
  185|      0|	case 418: return "I'm a teapot";
  186|      0|	case 421: return "Misdirected Request";
  187|      0|	case 422: return "Unprocessable Content";
  188|      0|	case 423: return "Locked";
  189|      0|	case 424: return "Failed Dependency";
  190|      0|	case 425: return "Too Early";
  191|      0|	case 426: return "Upgrade Required";
  192|      0|	case 428: return "Precondition Required";
  193|      0|	case 429: return "Too Many Requests";
  194|      0|	case 431: return "Request Header Fields Too Large";
  195|      0|	case 451: return "Unavailable For Legal Reasons";
  196|       |
  197|       |	//####### 5xx - Server Error #######
  198|      0|	case 500: return "Internal Server Error";
  199|      0|	case 501: return "Not Implemented";
  200|      0|	case 502: return "Bad Gateway";
  201|      0|	case 503: return "Service Unavailable";
  202|      0|	case 504: return "Gateway Timeout";
  203|      0|	case 505: return "HTTP Version Not Supported";
  204|      0|	case 506: return "Variant Also Negotiates";
  205|      0|	case 507: return "Insufficient Storage";
  206|      0|	case 508: return "Loop Detected";
  207|      0|	case 510: return "Not Extended";
  208|      0|	case 511: return "Network Authentication Required";
  209|       |
  210|      0|	default: return std::string();
  211|      0|	}
  212|      0|}
  213|       |
  214|       |} // namespace HttpStatus
  215|       |
  216|       |
  217|       |#endif /* HTTPSTATUSCODES_CPP_H_ */

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/influxm/client.h:
    1|       |//
    2|       |// Created by Myriad-Dreamin on 2021/8/13.
    3|       |//
    4|       |
    5|       |#pragma once
    6|       |
    7|       |
    8|       |#include "http.h"
    9|       |#include "macro.h"
   10|       |#include <cassert>
   11|       |#include <chrono>
   12|       |#include <tuple>
   13|       |#include <type_traits>
   14|       |#include <vector>
   15|       |
   16|       |#ifndef influxdb_if_inline
   17|       |#define influxdb_if_inline inline
   18|       |#endif
   19|       |
   20|       |namespace influx_client {
   21|       |struct kv_t;
   22|       |using tag = kv_t;
   23|       |using field = kv_t;
   24|       |using point_vec = std::vector<influx_client::detail::string_view_t>;
   25|       |
   26|       |namespace detail {
   27|       |template <typename T, typename X = void>
   28|       |using is_influx_string_t = typename std::enable_if<
   29|       |    std::is_same<T, detail::string_view_ref>::value ||
   30|       |        std::is_same<T, std::string>::value ||
   31|       |        std::is_same<const char *, T>::value || std::is_same<char *, T>::value,
   32|       |    X>::type;
   33|       |
   34|       |template <typename T, typename X = void>
   35|       |using is_influx_boolean_t =
   36|       |    typename std::enable_if<std::is_same<T, bool>::value, X>::type;
   37|       |
   38|       |template <typename T, typename X = void>
   39|       |using is_influx_integer_t = typename std::enable_if<
   40|       |    std::is_arithmetic<T>::value && !std::is_same<T, bool>::value, X>::type;
   41|       |
   42|       |} // namespace detail
   43|       |
   44|       |struct kv_t {
   45|       |  std::string k;
   46|       |  std::string v;
   47|       |  bool q;
   48|       |  template <typename T>
   49|       |  kv_t(
   50|       |      detail::string_view_ref k, T v,
   51|       |      macroPAssert(detail::is_influx_string_t, T))
   52|       |      : k(k), v(v), q(true) {}
   53|       |  template <typename T>
   54|       |  kv_t(
   55|       |      detail::string_view_ref k, T v,
   56|       |      macroPAssert(detail::is_influx_boolean_t, T))
   57|      0|      : k(k), v(v ? "true" : "false"), q(false) {}
   58|       |  template <typename T>
   59|       |  kv_t(
   60|       |      detail::string_view_ref k, T v,
   61|       |      macroPAssert(detail::is_influx_integer_t, T))
   62|      0|      : k(k), v(std::to_string(v)), q(false) {}
  ------------------
  | Unexecuted instantiation: _ZN13influx_client4kv_tC2IfEESt17basic_string_viewIcSt11char_traitsIcEET_NSt9enable_ifIXaasr3std13is_arithmeticIS6_EE5valuentsr3std7is_sameIS6_bEE5valueEPvE4typeE
  ------------------
  | Unexecuted instantiation: _ZN13influx_client4kv_tC2IdEESt17basic_string_viewIcSt11char_traitsIcEET_NSt9enable_ifIXaasr3std13is_arithmeticIS6_EE5valuentsr3std7is_sameIS6_bEE5valueEPvE4typeE
  ------------------
   63|       |};
   64|       |
   65|       |namespace flux {
   66|       |struct Client {
   67|       |  using timestamp_t = uint64_t;
   68|       |
   69|       |  struct sockaddr_in addr {};
   70|       |  std::string host;
   71|       |  std::string bucket;
   72|       |  std::string organization;
   73|       |  std::string token;
   74|       |  std::string precision;
   75|       |  std::string write_v2_header;
   76|       |  int port;
   77|       |
   78|       |  Client(
   79|       |      detail::string_view_ref host, int port, detail::string_view_ref token,
   80|       |      detail::string_view_ref org, detail::string_view_ref bucket)
   81|       |      // detail::string_view precision = "ns"
   82|       |      : host(host), port(port), token(token), organization(org), bucket(bucket),
   83|      1|        precision("ns") {
   84|      1|    reset_network_data();
   85|      1|  }
   86|       |
   87|      1|  void reset_network_data() {
   88|      1|    write_v2_header.resize(400);
   89|      1|    int res = (snprintf(
   90|      1|        &write_v2_header[0], write_v2_header.size(),
   91|      1|        "%s /%s?bucket=%s&org=%s&precision=%s HTTP/1.1\r\n"
   92|      1|        "Host: %s\r\nAuthorization: Token %s\r\n",
   93|      1|        "POST", "api/v2/write", bucket.c_str(), organization.c_str(),
   94|      1|        precision.c_str(), host.c_str(), token.c_str()));
   95|      1|    assert(res <= 400);
   96|      0|    write_v2_header.resize(res);
   97|       |
   98|      1|    addr.sin_family = AF_INET;
   99|      1|    addr.sin_port = htons(port);
  100|      1|    if ((addr.sin_addr.s_addr = inet_addr(host.c_str())) == INADDR_NONE) {
  101|      0|      abort();
  102|      0|    }
  103|      1|  }
  104|       |
  105|       |  template <typename T, typename F>
  106|       |  int createPoint(
  107|       |      detail::string_view_ref measurement, T tags_begin, T tags_end,
  108|       |      F fields_begin, F fields_end, char *buf, int bufSize, timestamp_t t = 0);
  109|       |
  110|       |  int write(detail::string_view_ref point, std::string *resp = nullptr);
  111|       |  template <typename T> int writes(T points, std::string *resp = nullptr);
  112|       |
  113|       |  template <typename T, typename F>
  114|       |  int writes(
  115|       |      std::initializer_list<
  116|       |          std::tuple<detail::string_view_ref, T, T, F, F, timestamp_t>>
  117|       |          points,
  118|       |      char *buf, int bufSize, std::string *resp = nullptr);
  119|       |  template <typename T> int writeIter(T pb, T pe, std::string *resp = nullptr);
  120|       |
  121|       |  template <typename T, typename F>
  122|       |  int writeIter(
  123|       |      detail::string_view_ref measurement, T tb, T te, F fb, F fe,
  124|       |      timestamp_t t = 0, std::string *resp = nullptr);
  125|       |
  126|       |#define macroWriteImpl(T, F)                                                   \
  127|       |  int write(                                                                   \
  128|       |      detail::string_view_ref measurement, T tags, F fields,                   \
  129|      0|      timestamp_t t = 0, std::string *resp = nullptr) {                        \
  130|      0|    return writeIter(                                                          \
  131|      0|        measurement, tags.begin(), tags.end(), fields.begin(), fields.end(),   \
  132|      0|        t, resp);                                                              \
  133|      0|  }
  ------------------
  | Unexecuted instantiation: _ZN13influx_client4flux6Client5writeESt17basic_string_viewIcSt11char_traitsIcEESt16initializer_listINS_4kv_tEES8_mPNSt7__cxx1112basic_stringIcS4_SaIcEEE
  ------------------
  | Unexecuted instantiation: _ZN13influx_client4flux6Client5writeISt6vectorINS_4kv_tESaIS4_EES6_EEiSt17basic_string_viewIcSt11char_traitsIcEET_T0_mPNSt7__cxx1112basic_stringIcS9_SaIcEEE
  ------------------
  134|       |
  135|       |  template <typename T, typename F> macroWriteImpl(T, F);
  136|       |  template <typename T> macroWriteImpl(T, std::initializer_list<kv_t>);
  137|       |  template <typename T> macroWriteImpl(std::initializer_list<kv_t>, T);
  138|       |  macroWriteImpl(std::initializer_list<kv_t>, std::initializer_list<kv_t>);
  139|       |#undef macroWriteImpl
  140|       |
  141|       |#define macroCratePointImpl(T, F)                                              \
  142|       |  int createPoint(                                                             \
  143|       |      detail::string_view_ref measurement, T tags, F fields, char *buf,        \
  144|      0|      int bufSize, timestamp_t t = 0) {                                        \
  145|      0|    return createPoint(                                                        \
  146|      0|        measurement, tags.begin(), tags.end(), fields.begin(), fields.end(),   \
  147|      0|        buf, bufSize, t);                                                      \
  148|      0|  }
  149|       |
  150|       |  template <typename T, typename F> macroCratePointImpl(T, F);
  151|       |  template <typename T> macroCratePointImpl(T, std::initializer_list<kv_t>);
  152|       |  template <typename T> macroCratePointImpl(std::initializer_list<kv_t>, T);
  153|       |  macroCratePointImpl(std::initializer_list<kv_t>, std::initializer_list<kv_t>);
  154|       |#undef macroCratePointImpl
  155|       |
  156|       |#define macroWritesImpl(T, F)                                                  \
  157|       |  int writes(                                                                  \
  158|       |      std::initializer_list<                                                   \
  159|       |          std::tuple<detail::string_view_t, T, F, timestamp_t>>                \
  160|       |          raw_points,                                                          \
  161|      0|      char *buf, int bufSize, std::string *resp = nullptr) {                   \
  162|      0|    int code, offset = 0;                                                      \
  163|      0|    point_vec Vec;                                                             \
  164|      0|    for (auto &p : raw_points) {                                               \
  165|      0|      code = createPoint(                                                      \
  166|      0|          std::get<0>(p), std::get<1>(p).begin(), std::get<1>(p).end(),        \
  167|      0|          std::get<2>(p).begin(), std::get<2>(p).end(), buf + offset,          \
  168|      0|          bufSize - offset, std::get<3>(p));                                   \
  169|      0|      if (code < 0) {                                                          \
  170|      0|        return code;                                                           \
  171|      0|      }                                                                        \
  172|      0|      Vec.emplace_back(buf + offset, code);                                    \
  173|      0|      offset += code;                                                          \
  174|      0|    }                                                                          \
  175|      0|    return writes(Vec, resp);                                                  \
  176|      0|  }
  177|       |
  178|       |  template <typename T, typename F> macroWritesImpl(T, F);
  179|       |  template <typename T> macroWritesImpl(T, std::initializer_list<kv_t>);
  180|       |  template <typename T> macroWritesImpl(std::initializer_list<kv_t>, T);
  181|       |  macroWritesImpl(std::initializer_list<kv_t>, std::initializer_list<kv_t>);
  182|       |#undef macroWritesImpl
  183|       |};
  184|       |} // namespace flux
  185|       |
  186|       |namespace detail {
  187|       |
  188|       |template <typename B, typename T>
  189|      0|int putKVSeq(B &buf, int64_t &q, int64_t bufSize, T b, T e) {
  190|      0|  for (auto v = b; v != e; v++) {
  191|      0|    macroMemoryPutC(buf, ',', q, bufSize);
  192|      0|    macroMemoryPutStdStr(buf, v->k, q, bufSize);
  193|      0|    macroMemoryPutC(buf, '=', q, bufSize);
  194|      0|    if (v->q) {
  195|      0|      macroMemoryPutC(buf, '"', q, bufSize);
  196|      0|      size_t pos, start = 0;
  197|      0|      while ((pos = v->v.find_first_of('\"', start)) != std::string::npos) {
  198|      0|        macroMemoryCopyN(buf, v->v.c_str() + start, pos - start, q, bufSize);
  199|      0|        macroMemoryPutC(buf, '\\', q, bufSize);
  200|      0|        macroMemoryPutC(buf, v->v[pos], q, bufSize);
  201|      0|        start = ++pos;
  202|      0|      }
  203|      0|      macroMemoryCopyN(
  204|      0|          buf, v->v.c_str() + start, v->v.length() - start, q, bufSize);
  205|      0|      macroMemoryPutC(buf, '"', q, bufSize);
  206|      0|    } else {
  207|      0|      macroMemoryPutStdStr(buf, v->v, q, bufSize);
  208|      0|    }
  209|      0|  }
  210|      0|  return 0;
  211|      0|}
  ------------------
  | Unexecuted instantiation: _ZN13influx_client6detail8putKVSeqIPcPKNS_4kv_tEEEiRT_RllT0_S9_
  ------------------
  | Unexecuted instantiation: _ZN13influx_client6detail8putKVSeqIPcN9__gnu_cxx17__normal_iteratorIPNS_4kv_tESt6vectorIS5_SaIS5_EEEEEEiRT_RllT0_SE_
  ------------------
  212|       |
  213|       |} // namespace detail
  214|       |
  215|      0|int flux::Client::write(detail::string_view_ref point, std::string *resp) {
  216|      0|  return detail::http_request(&addr, write_v2_header, point, resp);
  217|      0|}
  218|       |
  219|       |template <typename T, typename F>
  220|       |int flux::Client::createPoint(
  221|       |    detail::string_view_ref measurement, T tags_begin, T tags_end,
  222|       |    F fields_begin, F fields_end, char *buf, int bufSize,
  223|      0|    flux::Client::timestamp_t t) {
  224|      0|  int64_t q = 0;
  225|      0|  int code;
  226|      0|  macroMemoryPutStdStr(buf, measurement, q, bufSize);
  227|       |
  228|      0|  if (tags_begin != tags_end) {
  229|      0|    code = detail::putKVSeq(buf, q, bufSize, tags_begin, tags_end);
  230|      0|    if (code) {
  231|      0|      return code;
  232|      0|    }
  233|      0|  }
  234|       |
  235|      0|  if (fields_begin == fields_end) {
  236|      0|    assert(false);
  237|      0|  }
  238|      0|  int b = q;
  239|      0|  code = detail::putKVSeq(buf, q, bufSize, fields_begin, fields_end);
  240|      0|  buf[b] = ' ';
  241|      0|  if (code) {
  242|      0|    return code;
  243|      0|  }
  244|      0|  macroMemoryPutC(buf, ' ', q, bufSize);
  245|       |
  246|      0|  if (!t) {
  247|      0|    t = std::chrono::duration_cast<std::chrono::nanoseconds>(
  248|      0|            std::chrono::high_resolution_clock::now().time_since_epoch())
  249|      0|            .count();
  250|      0|  }
  251|      0|  std::string ts = std::to_string(t);
  252|      0|  macroMemoryPutStdStr(buf, ts, q, bufSize);
  253|      0|  return q;
  254|      0|}
  ------------------
  | Unexecuted instantiation: _ZN13influx_client4flux6Client11createPointIPKNS_4kv_tES5_EEiSt17basic_string_viewIcSt11char_traitsIcEET_SA_T0_SB_Pcim
  ------------------
  | Unexecuted instantiation: _ZN13influx_client4flux6Client11createPointIN9__gnu_cxx17__normal_iteratorIPNS_4kv_tESt6vectorIS5_SaIS5_EEEESA_EEiSt17basic_string_viewIcSt11char_traitsIcEET_SF_T0_SG_Pcim
  ------------------
  255|      0|template <typename T> int flux::Client::writes(T points, std::string *resp) {
  256|      0|  return writeIter(points.begin(), points.end(), resp);
  257|      0|}
  258|       |
  259|       |template <typename T, typename F>
  260|       |int flux::Client::writeIter(
  261|       |    detail::string_view_ref measurement, T tb, T te, F fb, F fe, timestamp_t t,
  262|      0|    std::string *resp) {
  263|      0|  macroAllocBuffer(buf, bufSize);
  264|      0|  int code = createPoint(measurement, tb, te, fb, fe, buf, bufSize, t);
  265|      0|  if (code < 0) {
  266|      0|    return code;
  267|      0|  }
  268|      0|  code = detail::http_request(
  269|      0|      &addr, write_v2_header, detail::string_view_t(buf, code), resp);
  270|      0|  macroFreeBuffer(buf, bufSize);
  271|      0|  return code;
  272|      0|}
  ------------------
  | Unexecuted instantiation: _ZN13influx_client4flux6Client9writeIterIPKNS_4kv_tES5_EEiSt17basic_string_viewIcSt11char_traitsIcEET_SA_T0_SB_mPNSt7__cxx1112basic_stringIcS8_SaIcEEE
  ------------------
  | Unexecuted instantiation: _ZN13influx_client4flux6Client9writeIterIN9__gnu_cxx17__normal_iteratorIPNS_4kv_tESt6vectorIS5_SaIS5_EEEESA_EEiSt17basic_string_viewIcSt11char_traitsIcEET_SF_T0_SG_mPNSt7__cxx1112basic_stringIcSD_SaIcEEE
  ------------------
  273|       |
  274|       |template <typename T>
  275|      0|int flux::Client::writeIter(T pb, T pe, std::string *resp) {
  276|      0|  int sock = detail::create_socket(&addr);
  277|      0|  if (sock < 0) {
  278|      0|    return sock;
  279|      0|  }
  280|      0|  std::vector<iovec> Iov;
  281|      0|  Iov.resize(4);
  282|      0|  Iov.reserve(7);
  283|      0|  int body_size = 0;
  284|      0|  for (auto p = pb; p != pe; p++) {
  285|      0|    if (p->size() > 65535) {
  286|      0|      return -1;
  287|      0|    }
  288|      0|    if (body_size) {
  289|      0|      Iov.emplace_back(iovec{(void *)"\n", 1});
  290|      0|      body_size++;
  291|      0|    }
  292|      0|    Iov.emplace_back(iovec{
  293|      0|        reinterpret_cast<void *>(const_cast<char *>(&(*p)[0])), p->size()});
  294|      0|    body_size += p->size();
  295|      0|    if (body_size > 65535) {
  296|      0|      return -1;
  297|      0|    }
  298|      0|  }
  299|      0|
  300|      0|  int ret = detail::http_request_v_(
  301|      0|      sock, write_v2_header, &Iov[0], Iov.size(), body_size, resp);
  302|      0|  closesocket(sock);
  303|      0|  return ret;
  304|      0|}
  305|       |template <typename T, typename F>
  306|       |int flux::Client::writes(
  307|       |    std::initializer_list<
  308|       |        std::tuple<detail::string_view_ref, T, T, F, F, timestamp_t>>
  309|       |        points,
  310|       |    char *buf, int bufSize, std::string *resp) {
  311|       |  int code, offset = 0;
  312|       |  point_vec Vec;
  313|       |  for (auto p : points) {
  314|       |    code = createPoint(
  315|       |        std::get<0>(p), std::get<1>(p), std::get<2>(p), std::get<3>(p),
  316|       |        std::get<4>(p), buf + offset, bufSize - offset, std::get<5>(p));
  317|       |    if (code < 0) {
  318|       |      return code;
  319|       |    }
  320|       |    Vec.emplace_back(points + offset, code);
  321|       |    offset += code;
  322|       |  }
  323|       |  return writes(Vec, resp);
  324|       |}
  325|       |
  326|       |} // namespace influx_client
  327|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/influxm/http.h:
    1|       |//
    2|       |// Created by Myriad-Dreamin on 2021/8/13.
    3|       |//
    4|       |#pragma once
    5|       |
    6|       |#include "macro.h"
    7|       |#include <algorithm>
    8|       |
    9|       |#ifdef _WIN32
   10|       |#define NOMINMAX
   11|       |#include <windows.h>
   12|       |#pragma comment(lib, "ws2_32")
   13|       |typedef struct iovec {
   14|       |  void *iov_base;
   15|       |  size_t iov_len;
   16|       |} iovec;
   17|       |#ifndef writev
   18|       |#define writev writev
   19|       |influxdb_if_inline uint64_t writev(int sock, struct iovec *iov, int cnt) {
   20|       |  uint64_t r = send(sock, (const char *)iov->iov_base, iov->iov_len, 0);
   21|       |  return (r < 0 || cnt == 1) ? r : r + writev(sock, iov + 1, cnt - 1);
   22|       |}
   23|       |#endif
   24|       |
   25|       |#else
   26|       |
   27|       |extern "C" {
   28|       |#include <arpa/inet.h>
   29|       |#include <netinet/in.h>
   30|       |#include <sys/socket.h>
   31|       |#include <sys/types.h>
   32|       |#include <sys/uio.h>
   33|       |#include <unistd.h>
   34|       |}
   35|       |
   36|      0|#define closesocket close
   37|       |#endif
   38|       |
   39|       |namespace influx_client {
   40|       |namespace detail {
   41|       |
   42|      0|influxdb_if_inline constexpr uint8_t bit_swap8(uint8_t n) { return n & 0xff; }
   43|      0|influxdb_if_inline constexpr uint16_t bit_swap16(uint16_t n) {
   44|      0|  return bit_swap8(n) << 8 | bit_swap8(n >> 8);
   45|      0|}
   46|      0|influxdb_if_inline constexpr uint32_t bit_swap32(uint32_t n) {
   47|      0|  return bit_swap16(n) << 16 | bit_swap16(n >> 16);
   48|      0|}
   49|       |
   50|       |static constexpr int http_iv_reserve = 4;
   51|       |influxdb_if_inline int http_request_v_(
   52|      0|    int sock, string_view_ref pref_header, struct iovec *iv, int iv_length, int body_size, std::string *resp) {
   53|      0|  static const uint32_t rn = uint32_t('\r') << 8 | uint32_t('\n');
   54|      0|  static const uint32_t rn_rn = rn << 16 | rn;
   55|      0|  static const uint32_t rn_co = rn << 16 | uint32_t('C') << 8 | uint32_t('o');
   56|      0|  static const uint32_t rn_tr = rn << 16 | uint32_t('T') << 8 | uint32_t('r');
   57|      0|  static const int max_length = 128;
   58|      0|  ssize_t recv_res = 0;
   59|      0|  int ret_code = 0, pref = pref_header.size(), content_length = body_size;
   60|      0|  int target, rn_co_pos = 0, rn_tr_pos = 0;
   61|      0|  char buf[max_length];
   62|       |
   63|       |  // send data
   64|      0|  std::string content_length_s = std::to_string(content_length);
   65|      0|  iv[0].iov_base = (void *)(&pref_header[0]);
   66|      0|  iv[0].iov_len = size_t(pref);
   67|      0|  iv[1].iov_base = (void *)("Content-Length: ");
   68|      0|  iv[1].iov_len = size_t(sizeof("Content-Length: ") - 1);
   69|      0|  iv[2].iov_base = (void *)(&content_length_s[0]);
   70|      0|  iv[2].iov_len = content_length_s.size();
   71|      0|  iv[3].iov_base = (void *)("\r\n\r\n");
   72|      0|  iv[3].iov_len = size_t(4);
   73|      0|  int r = influx_http_writev(sock, iv, iv_length);
   74|      0|  if (r < ssize_t(
   75|      0|              iv[0].iov_len + iv[1].iov_len + iv[2].iov_len + iv[3].iov_len + body_size)) {
   76|      0|    return -6;
   77|      0|  }
   78|       |
   79|      0|  uint32_t window4 = 0;
   80|      0|  int i = 0, j = 0, recv_rest = max_length;
   81|      0|  auto getOnce = [&] {
   82|      0|    return (recv_res = influx_http_recv(
   83|      0|                sock, &buf[0], std::min(max_length, recv_rest), 0)) > 0;
   84|      0|  };
   85|       |
   86|       |  /**
   87|       |   * http message parser status:
   88|       |   *   0: skip http version
   89|       |   *   1: get status code
   90|       |   *   2: walk through header
   91|       |   *   3: parse header
   92|       |   *   4: get body
   93|       |   */
   94|      0|  int status = 0;
   95|      0|  if (resp) { // need http response
   96|      0|    resp->clear();
   97|      0|    target = 5;
   98|      0|  } else {
   99|      0|    target = 2;
  100|      0|  }
  101|      0|  while (status != target) {
  102|      0|    if (recv_res == 0 && !getOnce()) {
  103|      0|      break;
  104|      0|    }
  105|      0|    switch (status) {
  106|      0|    default:
  107|      0|      status = target;
  108|      0|      break;
  109|      0|    case 0:
  110|      0|      for (i = 0; i < recv_res;) {
  111|      0|        if (buf[i++] == ' ') {
  112|      0|          goto status1;
  113|      0|        }
  114|      0|      }
  115|      0|      recv_res = 0;
  116|      0|      break;
  117|      0|    case 1:
  118|      0|      for (i = 0; i < recv_res; i++) {
  119|      0|      status1:
  120|      0|        if (std::isdigit(buf[i])) {
  121|      0|          ret_code = ret_code * 10 + buf[i] - '0';
  122|      0|        } else {
  123|      0|          status = 2;
  124|      0|          if (resp) {
  125|      0|            resp->append(buf + i, recv_res - i);
  126|      0|            i = 0;
  127|      0|            goto status2;
  128|      0|          }
  129|      0|          recv_res -= i;
  130|      0|          break;
  131|      0|        }
  132|      0|      }
  133|      0|      recv_res = 0;
  134|      0|      break;
  135|      0|    case 2:
  136|      0|      resp->append(buf, recv_res);
  137|      0|    status2:
  138|      0|      while (i < resp->size()) {
  139|      0|        window4 = (window4 << 8) + (*resp)[i++];
  140|      0|        switch (window4) {
  141|      0|        case rn_rn:
  142|      0|          status = 3;
  143|      0|          pref = i;
  144|      0|          goto status3;
  145|      0|        case rn_co:
  146|      0|          *(int32_t *)(&(*resp)[i - 4]) = rn_co_pos;
  147|      0|          rn_co_pos = i;
  148|      0|          break;
  149|      0|        case rn_tr:
  150|      0|          *(int32_t *)(&(*resp)[i - 4]) = rn_tr_pos;
  151|      0|          rn_tr_pos = i;
  152|      0|          break;
  153|      0|        default:
  154|      0|          break;
  155|      0|        }
  156|      0|      }
  157|      0|      recv_res = 0;
  158|      0|      break;
  159|      0|    case 3:
  160|      0|    status3 : {
  161|      0|      const char *resp_addr = resp->c_str();
  162|      0|      auto clearChain = [&resp_addr](int i, uint32_t val) {
  163|      0|        while (i) {
  164|      0|          auto pos = (int32_t *)&resp_addr[i - 4];
  165|      0|          i = *pos;
  166|      0|          *pos = val;
  167|      0|        }
  168|      0|      };
  169|      0|      if (ret_code == 204) {
  170|      0|        status = 5;
  171|      0|      } else {
  172|      0|        content_length = 0;
  173|      0|        i = rn_co_pos;
  174|      0|        while (i) {
  175|      0|          if (macroConstStrCmpN(resp_addr + i, "ntent-Length: ") == 0) {
  176|      0|            j = i + int(sizeof("ntent-Length: ")) - 1;
  177|      0|            while (isdigit(resp_addr[j])) {
  178|      0|              content_length = content_length * 10 + resp_addr[j++] - '0';
  179|      0|            }
  180|      0|          }
  181|      0|          auto pos = (int32_t *)&resp_addr[i - 4];
  182|      0|          i = *pos;
  183|      0|        }
  184|      0|        i = rn_tr_pos;
  185|      0|        while (i) {
  186|      0|          printf("%d\n", i);
  187|      0|          auto pos = (int32_t *)&resp_addr[i - 4];
  188|      0|          i = *pos;
  189|      0|          abort();
  190|      0|        }
  191|      0|        if (content_length) {
  192|      0|          recv_rest = content_length - int(resp->size()) + pref;
  193|      0|          status = recv_rest ? 4 : 5;
  194|      0|        } else {
  195|      0|          status = 5;
  196|      0|        }
  197|      0|      }
  198|      0|      clearChain(rn_co_pos, bit_swap32(rn_co));
  199|      0|      clearChain(rn_tr_pos, bit_swap32(rn_tr));
  200|      0|      (*resp)[pref - 2] = 0;
  201|      0|      (*resp)[pref - 1] = 0;
  202|      0|      printf("%s\n", resp_addr);
  203|      0|      recv_res = 0;
  204|      0|      break;
  205|      0|    }
  206|      0|    case 4:
  207|      0|      if (recv_rest < recv_res) {
  208|      0|        abort();
  209|      0|      }
  210|      0|      resp->append(buf, recv_res);
  211|      0|      recv_rest -= recv_res;
  212|      0|      if (recv_rest == 0) {
  213|      0|        status = 0;
  214|      0|      }
  215|      0|      break;
  216|      0|    }
  217|      0|  }
  218|      0|  return recv_res < 0 ? int(recv_res) : ret_code;
  219|      0|}
  220|       |
  221|       |influxdb_if_inline int http_request_(
  222|      0|    int sock, string_view_ref pref_header, string_view_ref body, std::string *resp) {
  223|      0|  struct iovec iv[1+http_iv_reserve]{};
  224|      0|  iv[4].iov_len = body.size();
  225|      0|  iv[4].iov_base = (void*)&body[0];
  226|      0|  return http_request_v_(sock, pref_header, iv, 5, body.size(), resp);
  227|      0|}
  228|       |
  229|      0|influxdb_if_inline int create_socket(const struct sockaddr_in *addr) {
  230|      0|  int sock;
  231|      0|  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
  232|      0|    return -2;
  233|       |
  234|      0|  if (connect(sock, (struct sockaddr *)(addr), sizeof(*addr)) < 0) {
  235|      0|    closesocket(sock);
  236|      0|    return -3;
  237|      0|  }
  238|      0|  return sock;
  239|      0|}
  240|       |
  241|       |influxdb_if_inline int http_request(
  242|       |    const struct sockaddr_in *addr, string_view_ref pref_header,
  243|       |    string_view_ref body,
  244|      0|    std::string *resp) {
  245|      0|  int sock = create_socket(addr);
  246|      0|  if (sock < 0) {
  247|      0|    return sock;
  248|      0|  }
  249|      0|  int ret = http_request_(sock, pref_header, body, resp);
  250|      0|  closesocket(sock);
  251|      0|  return ret;
  252|      0|}
  253|       |
  254|      0|influxdb_if_inline unsigned char to_hex(unsigned char x) {
  255|      0|  return x > 9 ? x + 55 : x + 48;
  256|      0|}
  257|       |
  258|      0|influxdb_if_inline void url_encode(std::string &out, const std::string &src) {
  259|      0|  size_t pos, start = 0;
  260|      0|  while (
  261|      0|      (pos = src.find_first_not_of(
  262|      0|           "abcdefghijklmnopqrstuvwxyqABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~",
  263|      0|           start)) != std::string::npos) {
  264|      0|    out.append(src.c_str() + start, pos - start);
  265|      0|    if (src[pos] == ' ')
  266|      0|      out += "+";
  267|      0|    else {
  268|      0|      out += '%';
  269|      0|      out += to_hex((unsigned char)src[pos] >> 4);
  270|      0|      out += to_hex((unsigned char)src[pos] & 0xF);
  271|      0|    }
  272|      0|    start = ++pos;
  273|      0|  }
  274|      0|  out.append(src.c_str() + start, src.length() - start);
  275|      0|}
  276|       |
  277|       |} // namespace detail
  278|       |} // namespace influx_client
  279|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/influxm/macro.h:
    1|       |//
    2|       |// Created by Myriad-Dreamin on 2021/8/13.
    3|       |//
    4|       |
    5|       |#ifndef INFLUXDBM_ALLOC_H
    6|       |#define INFLUXDBM_ALLOC_H
    7|       |
    8|       |#include <cstring>
    9|       |#include <string>
   10|       |
   11|       |#define macroAllocBuffer(name, size)                                           \
   12|      0|  char name[4096];                                                             \
   13|      0|  const int size = 4096
   14|       |#define macroMemoryCopyN(target, src, src_size, current_size, guard_size)      \
   15|      0|  do {                                                                         \
   16|      0|    if ((src_size) + (current_size) > (guard_size))                            \
   17|      0|      return -1;                                                               \
   18|      0|    memcpy(target + (current_size), src, (src_size));                          \
   19|      0|    current_size += (src_size);                                                \
   20|      0|  } while (0)
   21|       |#define macroMemoryPutConst(target, src, current_size, guard_size)             \
   22|       |  macroMemoryCopyN(target, src, (sizeof((src)) - 1), current_size, guard_size)
   23|       |#define macroMemoryPutStdStr(target, src, current_size, guard_size)            \
   24|      0|  macroMemoryCopyN(target, (&src[0]), src.size(), current_size, guard_size)
   25|       |#define macroMemoryPutC(target, ch, current_size, guard_size)                  \
   26|      0|  do {                                                                         \
   27|      0|    if (current_size + 1 > guard_size)                                         \
   28|      0|      return -1;                                                               \
   29|      0|    target[current_size] = ch;                                                 \
   30|      0|    current_size++;                                                            \
   31|      0|  } while (0)
   32|      0|#define macroFreeBuffer(name, size) (void *)(0)
   33|       |#define macroConstStrCmpN(target, prefix) \
   34|      0|  strncmp(target, prefix, sizeof(prefix)-1)
   35|       |
   36|       |namespace influx_client { // NOLINT(modernize-concat-nested-namespaces)
   37|       |namespace detail {
   38|       |#if __cplusplus < 201700L
   39|       |using string_view_ref = const std::string &;
   40|       |using string_view_t = std::string;
   41|       |#else
   42|       |#include <string_view>
   43|       |using string_view_ref = std::string_view;
   44|       |using string_view_t = std::string_view;
   45|       |#endif
   46|       |} // namespace detail
   47|       |} // namespace influx_client
   48|       |
   49|       |#ifndef influxdb_if_inline
   50|       |#define influxdb_if_inline inline
   51|       |#endif
   52|       |
   53|       |#ifndef influx_http_recv
   54|      0|#define influx_http_recv recv
   55|       |#endif
   56|       |
   57|       |#ifndef influx_http_writev
   58|      0|#define influx_http_writev writev
   59|       |#endif
   60|       |
   61|       |#define macroPAssert(P, T) P<T, void *> _PA = nullptr
   62|       |
   63|       |#endif // INFLUXDBM_ALLOC_H

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/sunrise-sunset/sunriseset.cpp:
    1|       |#include "sunriseset.h"
    2|       |
    3|       |double SunRiseSet::FNday(int y, int m, int d, float h)
    4|     26|{
    5|     26|    long int luku = - 7 * (y + (m + 9)/12)/4 + 275*m/9 + d;
    6|       |
    7|       |    // Typecasting needed for TClite on PC DOS at least, to avoid product overflow
    8|     26|    luku+= (long int)y*367;
    9|       |
   10|     26|    return (double)luku - 730531.5 + h/24.0;
   11|     26|}
   12|       |double SunRiseSet::FNrange(double x)
   13|     78|{
   14|     78|    double b = x / tpi;
   15|     78|    double a = tpi * (b - (long)(b));
   16|     78|    if (a < 0) a = tpi + a;
   17|     78|    return a;
   18|     78|}
   19|       |
   20|       |double SunRiseSet::f0(double lat, double declin)
   21|     26|{
   22|     26|    double fo,dfo;
   23|       |    // Correction: different sign at S HS
   24|     26|    dfo = rads*(0.5*SunDia + AirRefr); if (lat < 0.0) dfo = -dfo;
   25|     26|    fo = tan(declin + dfo) * tan(lat*rads);
   26|       |
   27|     26|    if (fo > 0.99999) fo = 1.0; // to avoid overflow //
   28|     26|    fo = asin(fo) + pi/2.0;
   29|     26|    return fo;
   30|     26|}
   31|       |
   32|       |double SunRiseSet::f1(double lat, double declin)
   33|      0|{
   34|      0|    double fi,df1;
   35|       |    // Correction: different sign at S HS
   36|      0|    df1 = rads * 6.0; if (lat < 0.0) df1 = -df1;
   37|      0|    fi = tan(declin + df1) * tan(lat*rads);
   38|       |
   39|      0|    if (fi > 0.99999) fi = 1.0; // to avoid overflow //
   40|      0|    fi = asin(fi) + pi/2.0;
   41|      0|    return fi;
   42|      0|}
   43|       |
   44|       |double SunRiseSet::FNsun(double d)
   45|     26|{
   46|       |    // mean longitude of the Sun
   47|     26|    L = FNrange(280.461 * rads + .9856474 * rads * d);
   48|       |
   49|       |    // mean anomaly of the Sun
   50|     26|    g = FNrange(357.528 * rads + .9856003 * rads * d);
   51|       |
   52|       |    // Ecliptic longitude of the Sun
   53|     26|    return FNrange(L + 1.915 * rads * sin(g) + .02 * rads * sin(2 * g));
   54|     26|}
   55|       |
   56|       |Clock SunRiseSet::gethrmn(double dhr)
   57|     31|{
   58|       |
   59|     31|    int hr,mn;
   60|       |
   61|     31|    hr = (int) dhr;
   62|     31|    mn = (dhr - (double) hr)*60;
   63|       |
   64|     31|    Clock ret(hr,mn);
   65|       |
   66|     31|    return ret;
   67|     31|}
   68|       |
   69|       |int SunRiseSet::isItWinterTime()
   70|     19|{
   71|     19|    time_t sekunnit;
   72|     19|    struct tm *p;
   73|       |
   74|       |    // get the date and time from the user
   75|       |    // read system date and extract the year
   76|       |
   77|       |    /** First get current time **/
   78|     19|    time(&sekunnit);
   79|       |
   80|       |    /** Next get localtime **/
   81|       |
   82|     19|    p = localtime(&sekunnit);
   83|       |
   84|     19|    if(p->tm_isdst == 0)
   85|      0|        return 1;
   86|     19|    else if (p->tm_isdst == 1)
   87|     19|        return 2;
   88|      0|    else
   89|      0|        return -1;
   90|     19|}
   91|       |
   92|       |SunRiseSet::SunRiseSet()
   93|     85|{
   94|       |
   95|     85|}
   96|       |
   97|       |std::string SunRiseSet::getAllData()
   98|      1|{
   99|      1|    double y,m,day,h,latit,longit;
  100|       |
  101|      1|    time_t sekunnit;
  102|      1|    struct tm *p;
  103|       |
  104|       |    // get the date and time from the user
  105|       |    // read system date and extract the year
  106|       |
  107|       |    /** First get current time **/
  108|      1|    time(&sekunnit);
  109|       |
  110|       |    /** Next get localtime **/
  111|       |
  112|      1|    p = localtime(&sekunnit);
  113|       |    // this is Y2K compliant algorithm
  114|      1|    y = 1900 + p->tm_year;
  115|       |
  116|      1|    m = p->tm_mon + 1;
  117|      1|    day = p->tm_mday;
  118|      1|    h = 12;
  119|       |
  120|      1|    std::cout << "Input latitude, longitude and timezone\n";
  121|      1|    latit = LATITUDE;
  122|      1|    longit = LONGITUDE;
  123|       |    // Timezone hours
  124|      1|    double tzone= isItWinterTime();
  125|      1|    double d = FNday(y, m, day, h);
  126|       |
  127|       |    // Use FNsun to find the ecliptic longitude of the
  128|       |    // Sun
  129|      1|    double lambda = FNsun(d);
  130|       |
  131|       |    // Obliquity of the ecliptic
  132|      1|    double obliq = 23.439 * rads - .0000004 * rads * d;
  133|       |
  134|       |    // Find the RA and DEC of the Sun
  135|      1|    double alpha = atan2(cos(obliq) * sin(lambda), cos(lambda));
  136|      1|    double delta = asin(sin(obliq) * sin(lambda));
  137|       |
  138|       |    // Find the Equation of Time in minutes
  139|       |    // Correction suggested by David Smith
  140|      1|    double LL = L - alpha;
  141|      1|    if (L < pi) LL += tpi;
  142|      1|    double equation = 1440.0 * (1.0 - LL / tpi);
  143|      1|    double ha = f0(latit,delta);
  144|       |   // double hb = f1(latit,delta);
  145|       |   // double twx = hb - ha;   // length of twilight in radians
  146|       |   // twx = 12.0*twx/pi;      // length of twilight in degrees
  147|       |
  148|       |    // Conversion of angle to hours and minutes //
  149|      1|    daylen = degs * ha / 7.5;
  150|      1|    if (daylen<0.0001) {daylen = 0.0;}
  151|       |    // arctic winter   //
  152|       |
  153|      1|    double riset = 12.0 - 12.0 * ha/pi + tzone - longit/15.0 + equation/60.0;
  154|      1|    double settm = 12.0 + 12.0 * ha/pi + tzone - longit/15.0 + equation/60.0;
  155|       |    //double noont = riset + 12.0 * ha/pi;
  156|       |    //double altmax = 90.0 + delta * degs - latit;
  157|       |    // Correction suggested by David Smith
  158|       |    // to express as degrees from the N horizon
  159|       |
  160|       |    //if (delta * degs > latit ) altmax = 90.0 + latit - delta * degs;
  161|       |
  162|       |   // double twam = riset - twx;    // morning twilight begin
  163|       |   // double twpm = settm + twx;      // evening twilight end
  164|       |
  165|      1|    if (riset > 24.0) riset-= 24.0;
  166|      1|    if (settm > 24.0) settm-= 24.0;
  167|       |
  168|      1|    std::stringstream ss;
  169|      1|    ss << "\n Sunrise and set\n";
  170|      1|    ss << "===============\n";
  171|      1|    ss << "  year  : " << y << '\n';
  172|      1|    ss << "  month : " << m << '\n';
  173|      1|    ss << "  day   : " << day << "\n\n";
  174|      1|    ss << "Days until Y2K :  " << d << '\n';
  175|      1|    ss << "Latitude :  " << latit << ", longitude:  " << longit << '\n';
  176|      1|    ss << "Timezone :  " << tzone << "\n\n";
  177|      1|    ss << "Declination : " << delta * degs << '\n';
  178|      1|    ss << "Daylength   : "<< gethrmn(daylen).m_h << ":" << gethrmn(daylen).m_min << " hours \n";
  179|       |  //  ss << "Begin civil twilight: "<<
  180|       |  //        gethrmn(twam).m_h << ":" << gethrmn(twam).m_min  << '\n';
  181|       |
  182|      1|    ss << "Sunrise     : " << gethrmn(riset).m_h << ":" << gethrmn(riset).m_min << '\n';
  183|      1|    ss << "Sun altitude at noontime ";
  184|       |
  185|       | //   std::cout << "Cyniu twpm: " << gethrmn(twpm).getString() << std::endl;
  186|       | //   std::cout << "Cyniu settm: " << gethrmn(settm).getString() << std::endl;
  187|      1|    ss << "Sunset      : " <<
  188|      1|          gethrmn(settm).m_h << ":" << gethrmn(settm).m_min << '\n';
  189|       |   // ss << "Civil twilight: " <<
  190|       |   //       gethrmn(twpm).m_h << ":"  << gethrmn(twpm).m_min << '\n';
  191|      1|    return ss.str();
  192|      1|}
  193|       |
  194|       |void SunRiseSet::setPosition(double LATITUDE, double LONGITUDE)
  195|      0|{
  196|      0|    this->LATITUDE = LATITUDE;
  197|      0|    this->LONGITUDE = LONGITUDE;
  198|      0|}
  199|       |
  200|       |Clock SunRiseSet::getSunRise()
  201|     10|{
  202|     10|    double y,m,day,h,latit,longit;
  203|     10|    time_t sekunnit;
  204|     10|    struct tm *p;
  205|       |    // get the date and time from the user
  206|       |    // read system date and extract the year
  207|       |
  208|       |    /** First get current time **/
  209|     10|    time(&sekunnit);
  210|       |
  211|       |    /** Next get localtime **/
  212|     10|    p = localtime(&sekunnit);
  213|       |    // this is Y2K compliant algorithm
  214|     10|    y = 1900 + p->tm_year;
  215|     10|    m = p->tm_mon + 1;
  216|     10|    day = p->tm_mday;
  217|     10|    h = 12;
  218|     10|    latit = LATITUDE;
  219|     10|    longit = LONGITUDE;
  220|       |    // Timezone hours
  221|     10|    double tzone = isItWinterTime();
  222|     10|    double d = FNday(y, m, day, h);
  223|       |    // Use FNsun to find the ecliptic longitude of the
  224|       |    // Sun
  225|     10|    double lambda = FNsun(d);
  226|       |    // Obliquity of the ecliptic
  227|     10|    double obliq = 23.439 * rads - .0000004 * rads * d;
  228|       |    // Find the RA and DEC of the Sun
  229|     10|    double alpha = atan2(cos(obliq) * sin(lambda), cos(lambda));
  230|     10|    double delta = asin(sin(obliq) * sin(lambda));
  231|     10|    double LL = L - alpha;
  232|     10|    if (L < pi) LL += tpi;
  233|     10|    double equation = 1440.0 * (1.0 - LL / tpi);
  234|     10|    double ha = f0(latit,delta);
  235|       |    // Conversion of angle to hours and minutes //
  236|     10|    daylen = degs * ha / 7.5;
  237|     10|    if (daylen<0.0001) {daylen = 0.0;}
  238|       |    // arctic winter   //
  239|     10|    double riset = 12.0 - 12.0 * ha/pi + tzone - longit/15.0 + equation/60.0;
  240|       |
  241|     10|    if (riset > 24.0) riset-= 24.0;
  242|     10|    return  gethrmn(riset);
  243|     10|}
  244|       |
  245|       |Clock SunRiseSet::getDayLength()
  246|      7|{
  247|      7|    double y,m,day,h,latit;
  248|      7|    time_t sekunnit;
  249|      7|    struct tm *p;
  250|       |
  251|       |    // get the date and time from the user
  252|       |    // read system date and extract the year
  253|       |
  254|       |    /** First get current time **/
  255|      7|    time(&sekunnit);
  256|       |
  257|       |    /** Next get localtime **/
  258|      7|    p = localtime(&sekunnit);
  259|       |    // this is Y2K compliant algorithm
  260|      7|    y = 1900 + p->tm_year;
  261|      7|    m = p->tm_mon + 1;
  262|      7|    day = p->tm_mday;
  263|      7|    h = 12;
  264|      7|    latit = LATITUDE;
  265|      7|    double d = FNday(y, m, day, h);
  266|       |
  267|       |    // Use FNsun to find the ecliptic longitude of the
  268|       |    // Sun
  269|      7|    double lambda = FNsun(d);
  270|       |    // Obliquity of the ecliptic
  271|      7|    double obliq = 23.439 * rads - .0000004 * rads * d;
  272|      7|    double delta = asin(sin(obliq) * sin(lambda));
  273|       |    // Find the Equation of Time in minutes
  274|       |    // Correction suggested by David Smith
  275|      7|    double ha = f0(latit,delta);
  276|       |    // Conversion of angle to hours and minutes //
  277|      7|    daylen = degs * ha / 7.5;
  278|      7|    if (daylen<0.0001) {daylen = 0.0;}
  279|       |    // arctic winter   //
  280|       |
  281|      7|    return  gethrmn(daylen);
  282|      7|}
  283|       |
  284|       |Clock SunRiseSet::getSunSet()
  285|      8|{
  286|      8|    double y,m,day,h,latit,longit;
  287|       |
  288|      8|    time_t sekunnit;
  289|      8|    struct tm *p;
  290|       |
  291|       |    // get the date and time from the user
  292|       |    // read system date and extract the year
  293|       |
  294|       |    /** First get current time **/
  295|      8|    time(&sekunnit);
  296|       |
  297|       |    /** Next get localtime **/
  298|       |
  299|      8|    p = localtime(&sekunnit);
  300|       |    // this is Y2K compliant algorithm
  301|      8|    y = 1900 + p->tm_year;
  302|       |
  303|      8|    m = p->tm_mon + 1;
  304|      8|    day = p->tm_mday;
  305|      8|    h = 12;
  306|       |
  307|      8|    latit = LATITUDE;
  308|      8|    longit = LONGITUDE;
  309|       |    // Timezone hours
  310|      8|    double tzone = isItWinterTime();
  311|       |
  312|      8|    double d = FNday(y, m, day, h);
  313|       |
  314|       |    // Use FNsun to find the ecliptic longitude of the
  315|       |    // Sun
  316|       |
  317|      8|    double lambda = FNsun(d);
  318|       |
  319|       |    // Obliquity of the ecliptic
  320|       |
  321|      8|    double obliq = 23.439 * rads - .0000004 * rads * d;
  322|       |
  323|       |    // Find the RA and DEC of the Sun
  324|       |
  325|      8|    double alpha = atan2(cos(obliq) * sin(lambda), cos(lambda));
  326|      8|    double delta = asin(sin(obliq) * sin(lambda));
  327|       |
  328|       |
  329|       |    // Find the Equation of Time in minutes
  330|       |    // Correction suggested by David Smith
  331|       |
  332|      8|    double LL = L - alpha;
  333|      8|    if (L < pi) LL += tpi;
  334|      8|    double equation = 1440.0 * (1.0 - LL / tpi);
  335|       |
  336|       |
  337|      8|    double ha = f0(latit,delta);
  338|       |
  339|       |    // Conversion of angle to hours and minutes //
  340|      8|    daylen = degs * ha / 7.5;
  341|      8|    if (daylen<0.0001) {daylen = 0.0;}
  342|       |    // arctic winter   //
  343|       |
  344|       |    //double riset = 12.0 - 12.0 * ha/pi + tzone - longit/15.0 + equation/60.0;
  345|      8|    double settm = 12.0 + 12.0 * ha/pi + tzone - longit/15.0 + equation/60.0;
  346|       |
  347|       |    //if (riset > 24.0) riset-= 24.0;
  348|      8|    if (settm > 24.0) settm-= 24.0;
  349|      8|    return  gethrmn(settm);
  350|      8|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/useful/test/useful_bt.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <sys/types.h>
    3|       |#include <sys/stat.h>
    4|       |#include <stdio.h>
    5|       |#include <string.h>
    6|       |#include <fcntl.h>
    7|       |#include <unistd.h>
    8|       |#include "../useful.h"
    9|       |///////////////////////////////////////////////////// TEST ///////////////////////////////////////////////////////\
   10|       |
   11|       |TEST(ClockClass, AddTwoHours)
   12|      1|{
   13|      1|    Clock f(13,57);
   14|      1|    Clock g(23,59);
   15|      1|    Clock r = f + g;
   16|      1|    EXPECT_EQ(r.getString(), "13:56");
   17|      1|}
   18|       |
   19|       |TEST(ClockClass, lessThen_Hours)
   20|      1|{
   21|      1|    Clock f(13,57);
   22|      1|    Clock g(23,59);
   23|      1|    EXPECT_EQ(f<g, true);
   24|      1|}
   25|       |
   26|       |TEST(ClockClass, plus_operator)
   27|      1|{
   28|      1|    Clock f(13,57);
   29|      1|    f += Clock("04:04");
   30|      1|    EXPECT_EQ(f.getString(),"18:01");
   31|      1|}
   32|       |
   33|       |TEST(ClockClass, _operator)
   34|      1|{
   35|      1|    EXPECT_FALSE(Clock("04:04") == Clock("04:05"));
   36|      1|    EXPECT_FALSE(Clock("05:05") == Clock("04:05"));
   37|      1|    EXPECT_TRUE(Clock("05:05") == Clock("05:05"));
   38|      1|    EXPECT_FALSE(Clock("05:05") not_eq Clock("05:05"));
   39|      1|    EXPECT_TRUE(Clock("04:05") not_eq Clock("05:05"));
   40|      1|    EXPECT_TRUE(Clock("04:05") not_eq Clock("04:04"));
   41|      1|    EXPECT_TRUE(Clock("04:05") > Clock("04:04"));
   42|      1|    EXPECT_FALSE(Clock("03:05") > Clock("04:04"));
   43|      1|    EXPECT_TRUE(Clock("04:05") >= Clock("04:04"));
   44|      1|    EXPECT_FALSE(Clock("04:05") <= Clock("04:04"));
   45|      1|    EXPECT_FALSE(Clock("05:05") <= Clock("04:05"));
   46|      1|    EXPECT_TRUE(Clock("03:05") <= Clock("04:05"));
   47|      1|    EXPECT_TRUE(Clock("04:05") <= Clock("04:06"));
   48|      1|    EXPECT_FALSE(Clock("05:05") < Clock("04:06"));
   49|      1|    EXPECT_TRUE(Clock("04:05") < Clock("04:06"));
   50|      1|    EXPECT_TRUE(Clock("08:05") > Clock("04:06"));
   51|       |
   52|      1|    std::stringstream s;
   53|      1|    Clock f("00:00");
   54|      1|    s << f;
   55|      1|    EXPECT_STREQ("00:00", s.str().c_str());
   56|       |
   57|      1|    Clock g("20:00");
   58|      1|    g += Clock("23:43");
   59|      1|    EXPECT_STREQ("19:43", g.getString().c_str());
   60|      1|}
   61|       |
   62|       |TEST(ClockClass, periodOfTime)
   63|      1|{
   64|      1|    Clock f(13,57);
   65|      1|    Clock g(22,22);
   66|      1|    Clock r = Clock::periodOfTime(f,g);
   67|      1|    EXPECT_EQ(r.getString(),"08:25");
   68|      1|    r = Clock::periodOfTime(g,f);
   69|      1|    EXPECT_EQ(r.getString(),"15:35");
   70|      1|}
   71|       |
   72|       |TEST(ClockClass, from_to_second)
   73|      1|{
   74|      1|    Clock f;
   75|      1|    f.set(13,57);
   76|      1|    unsigned int sec = f.toSeconds();
   77|      1|    Clock g = Clock::fromSeconds(sec);
   78|      1|    EXPECT_EQ(f.getString(),g.getString());
   79|      1|}
   80|       |
   81|       |TEST(ClockClass, stopwatch)
   82|      1|{
   83|      1|    Clock f;
   84|      1|    f.stopwatchStart();
   85|      1|    sleep(1);
   86|      1|    EXPECT_EQ(1,f.stopwatchStopAndGetResult());
   87|      1|}
   88|       |
   89|       |TEST(ClockClass, wrongSet)
   90|      1|{
   91|      1|    Clock f;
   92|      1|    EXPECT_ANY_THROW(f.set(99,99));
   93|      1|}
   94|       |
   95|       |TEST(ClockClass, to_string_with_precision_TC)
   96|      1|{
   97|      1|    double d = 1.0/3.0;
   98|      1|    EXPECT_STREQ("0.33", to_string_with_precision(d,2).c_str() );
   99|      1|}
  100|       |
  101|       |TEST(JSON, getJSON)
  102|      1|{
  103|      1|    nlohmann::json test_JSON = useful_F_libs::getJson("http://45.90.3.84/test/json/on_lightning.json");
  104|      1|    auto testKey = test_JSON["success"].get<bool>();
  105|       |
  106|      1|    std::cout << " JSON JEST" << std::endl << test_JSON.dump(4) << std::endl;
  107|       |
  108|      1|    EXPECT_TRUE(testKey);
  109|      1|}
  110|       |
  111|       |TEST(usefull_libs, gtoLower)
  112|      1|{
  113|      1|    std::string testU("teST");
  114|      1|    std::string testL("test");
  115|       |
  116|      1|    useful_F_libs::toLower(testU);
  117|       |
  118|      1|    EXPECT_STREQ(testU.c_str(), testL.c_str());
  119|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/useful/useful.h:
    1|       |#pragma once
    2|       |
    3|       |#include <iomanip>
    4|       |#include <sstream>
    5|       |#include <string>
    6|       |#include <vector>
    7|       |#include <chrono>
    8|       |
    9|       |#ifndef ANDROID
   10|       |#include "json.hpp"
   11|       |#endif
   12|       |
   13|       |std::vector<std::string> split_string(const std::string& s, char separator );
   14|       |
   15|       |class useful_F_libs {
   16|       |public:
   17|       |
   18|       |    ///////////////////// string ////////////////////////////////////////////////
   19|       |    static void toLower(std::string& str);
   20|       |    static bool hasSubstring(const std::string& _str, const std::string& _substring);
   21|       |    static void write_to_mkfifo(const std::string& path, const std::string &msg);
   22|       |    static std::string read_from_mkfifo(const std::string &path);
   23|       |    static size_t  WriteCallback(void *contents, size_t size, size_t nmemb, void *userp);
   24|       |    static std::string find_tag (const std::string &temp);
   25|       |    static std::string stringToHex(const std::string& input);
   26|       |    //////////////////// HTTP req //////////////////////////
   27|       |    static std::string httpPost(const std::string &url, int timeoutSeconds);
   28|       |    static std::string httpPost(const std::string &url);
   29|       |    static void downloadFile(const std::string &url, const std::string &path, int timeoutSeconds);
   30|       |    static std::string replaceAll(std::string str, const std::string& from, const std::string& to);
   31|       |    static std::string removeHtmlTag(std::string &data);
   32|       |    /////////////////////  JSON ////////////////////////////
   33|       |
   34|       |#ifndef ANDROID
   35|       |    static nlohmann::json getJson(const std::string &url);
   36|       |#endif
   37|       |};
   38|       |namespace std
   39|       |{
   40|       |
   41|       |#ifdef ANDROID
   42|       |template <typename T>
   43|       |int stoi(T s){
   44|       |    return atoi(s.c_str());
   45|       |}
   46|       |#endif
   47|       |
   48|       |template <typename T>
   49|       |std::string to_string(T value)
   50|       |{
   51|       |    std::stringstream os;
   52|       |    os << value;
   53|       |    return os.str();
   54|       |}
   55|       |} // namespace std
   56|       |
   57|       |template <typename T>
   58|       |std::string to_string_with_precision(const T a_value, const int n = 4)
   59|    109|{
   60|    109|    std::ostringstream out;
   61|    109|    out << std::setprecision(n) << a_value;
   62|    109|    return out.str();
   63|    109|}
  ------------------
  | _Z24to_string_with_precisionIdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEET_i:
  |   59|     93|{
  |   60|     93|    std::ostringstream out;
  |   61|     93|    out << std::setprecision(n) << a_value;
  |   62|     93|    return out.str();
  |   63|     93|}
  ------------------
  | _Z24to_string_with_precisionIiENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEET_i:
  |   59|     16|{
  |   60|     16|    std::ostringstream out;
  |   61|     16|    out << std::setprecision(n) << a_value;
  |   62|     16|    return out.str();
  |   63|     16|}
  ------------------
   64|       |
   65|       |struct Clock{
   66|       |private:
   67|       |    std::time_t m_time;
   68|       |#ifdef BT_TEST
   69|       |    static unsigned int m_BT_H;
   70|       |    static unsigned int m_BT_M;
   71|       |#endif
   72|       |public:
   73|       |    unsigned int m_h = 0;
   74|       |    unsigned int m_min = 0;
   75|    385|    Clock () {}
   76|     38|    explicit Clock(const std::string& t){
   77|     38|        std::vector<std::string> vt = split_string(t,':');
   78|     38|        int h = std::stoi(vt.at(0));
   79|     38|        int m = std::stoi(vt.at(1));
   80|     38|        set(static_cast <unsigned int>(h),static_cast <unsigned int>(m));
   81|     38|    }
   82|       |
   83|    652|    Clock(unsigned int h, unsigned int m) {
   84|    652|        set(h,m);
   85|    652|    }
   86|       |    /////////////////////////////////////////////////////////////////////////////////////
   87|    692|    void set(unsigned int h, unsigned int m){
   88|    692|        if (h<24 && m <60){
   89|    691|            this->m_h = h;
   90|    691|            this->m_min = m;
   91|    691|        }
   92|      1|        else {
   93|      1|            throw 0;
   94|      1|        }
   95|    692|    }
   96|       |
   97|       |    /////////////////////////////////////////////////////////////////////////////////////
   98|    158|    std::string getString() const{
   99|    158|        std::stringstream ret;
  100|    158|        if (m_h < 10) {
  101|    137|            ret << "0";
  102|    137|        }
  103|    158|        ret << m_h;
  104|    158|        ret << ":";
  105|    158|        if (m_min < 10) {
  106|    115|            ret << "0";
  107|    115|        }
  108|    158|        ret << m_min;
  109|    158|        return ret.str();
  110|    158|    }
  111|       |    /////////////////////////////////////////////////////////////////////////////////////
  112|     13|    bool operator == (const Clock & c) const {
  113|     13|        if ((this->m_h == c.m_h) && (this->m_min == c.m_min)){
  114|     11|            return true;
  115|     11|        }
  116|      2|        else{
  117|      2|            return false;
  118|      2|        }
  119|     13|    }
  120|       |    /////////////////////////////////////////////////////////////////////////////////////
  121|      3|    bool operator != (const Clock & c) const {
  122|      3|        if ((this->m_h != c.m_h) || (this->m_min != c.m_min)){
  123|      2|            return true;
  124|      2|        }
  125|      1|        else{
  126|      1|            return false;
  127|      1|        }
  128|      3|    }
  129|       |    /////////////////////////////////////////////////////////////////////////////////////
  130|      1|    friend std::ostream & operator<< (std::ostream &w , const Clock &c) {
  131|      1|        return w << c.getString();
  132|      1|    }
  133|       |    /////////////////////////////////////////////////////////////////////////////////////
  134|      6|    bool operator < (const Clock& c) const {
  135|      6|        if (this->m_h < c.m_h){
  136|      3|            return true;
  137|      3|        }
  138|      3|        else{
  139|      3|            if (this->m_h == c.m_h && this->m_min < c.m_min){
  140|      1|                return true;
  141|      1|            }
  142|      3|        }
  143|      2|        return false;
  144|      6|    }
  145|       |    /////////////////////////////////////////////////////////////////////////////////////
  146|      4|    bool operator > (const Clock& c) const {
  147|      4|        if (this->m_h > c.m_h){
  148|      1|            return true;
  149|      1|        }
  150|      3|        else{
  151|      3|            if (this->m_h == c.m_h && this->m_min > c.m_min){
  152|      1|                return true;
  153|      1|            }
  154|      3|        }
  155|      2|        return false;
  156|      4|    }
  157|       |    /////////////////////////////////////////////////////////////////////////////////////
  158|      6|    bool operator >= (const Clock& c) const {
  159|      6|        if (this->m_h > c.m_h){
  160|      1|            return true;
  161|      1|        }
  162|      5|        else if (this->m_h == c.m_h){
  163|       |
  164|      4|            if (this->m_min >= c.m_min){
  165|      4|                return true;
  166|      4|            }
  167|      4|        }
  168|      1|        return false;
  169|      6|    }
  170|       |    /////////////////////////////////////////////////////////////////////////////////////
  171|      4|    bool operator <= (const Clock& c) const {
  172|      4|        if (this->m_h < c.m_h){
  173|      1|            return true;
  174|      1|        }
  175|      3|        else if (this->m_h == c.m_h){
  176|       |
  177|      2|            if (this->m_min <= c.m_min){
  178|      1|                return true;
  179|      1|            }
  180|      2|        }
  181|      2|        return false;
  182|      4|    }
  183|       |    /////////////////////////////////////////////////////////////////////////////////////
  184|     86|    Clock  operator + (const Clock& c){
  185|     86|        unsigned int minutes, hours;
  186|     86|        minutes = m_min+ c.m_min;
  187|     86|        hours = m_h + c.m_h;
  188|     86|        if (minutes >59){
  189|     59|            minutes =  minutes % 60;
  190|     59|            hours+=1;
  191|     59|        }
  192|     86|        if (hours >= 24){
  193|     59|            hours-=24;
  194|     59|        }
  195|     86|        return  Clock(hours, minutes);
  196|       |
  197|     86|    }
  198|       |    /////////////////////////////////////////////////////////////////////////////////////
  199|      2|    Clock&  operator += (const Clock& c){
  200|      2|        unsigned int minutes, hours;
  201|      2|        minutes = m_min+ c.m_min;
  202|      2|        hours = m_h + c.m_h;
  203|      2|        if (minutes >59){
  204|      1|            minutes =  minutes % 60;
  205|      1|            hours+=1;
  206|      1|        }
  207|      2|        if (hours >= 24){
  208|      1|            hours-=24;
  209|      1|        }
  210|      2|        this->m_h = hours;
  211|      2|        this->m_min = minutes;
  212|      2|        return *this;
  213|       |
  214|      2|    }
  215|       |    /////////////////////////////////////////////////////////////////////////////////////
  216|       |
  217|     11|    unsigned int toSeconds() {
  218|     11|        return toSeconds(Clock(this->m_h, this->m_min) );
  219|     11|    }
  220|       |    /////////////////////////////////////////////////////////////////////////////////////
  221|       |
  222|     12|    static unsigned int toSeconds(Clock t) {
  223|     12|        return ((t.m_h*60) + t.m_min)*60;
  224|     12|    }
  225|       |    /////////////////////////////////////////////////////////////////////////////////////
  226|       |
  227|      6|    static Clock fromSeconds(unsigned int sec) {
  228|      6|        unsigned int h = sec/3600;
  229|      6|        unsigned int min = sec%3600;
  230|      6|        min = min/60;
  231|      6|        return Clock(h,min);
  232|      6|    }
  233|       |    /////////////////////////////////////////////////////////////////////////////////////
  234|       |
  235|       |    static Clock periodOfTime(Clock start, Clock end)
  236|      5|    {
  237|      5|        if (end >= start){
  238|      4|            return Clock::fromSeconds(end.toSeconds() - start.toSeconds()  );
  239|      4|        }
  240|      1|        return Clock::fromSeconds(end.toSeconds() + ( Clock::toSeconds(Clock(23,59))+ 60 - start.toSeconds() ) );
  241|      5|    }
  242|       |    ////////////////////////////////////////////////////////////////////////////////////
  243|       |    static unsigned int getUnixTime()
  244|     46|    {
  245|     46|        return static_cast<unsigned int> (std::time(nullptr));
  246|     46|    }
  247|       |    ////////////////////////////////////////////////////////////////////////////////////
  248|       |    static uint64_t getTimestamp()
  249|     14|    {
  250|     14|        return duration_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
  251|     14|    }
  252|       |    ////////////////////////////////////////////////////////////////////////////////////
  253|       |    static std::string unixTimeToString(unsigned int t)
  254|    101|    {
  255|    101|        std::time_t result = static_cast<std::time_t>(t);
  256|       |
  257|    101|        std::stringstream g;
  258|    101|        g << std::asctime(std::localtime(&result));
  259|       |
  260|    101|        return g.str();
  261|    101|    }
  262|       |    /////////////////////////////////////////////////////////////////////////////////////
  263|       |#ifdef BT_TEST
  264|       |    static void setTime_forBT_usage(int h, int m)
  265|      3|    {
  266|      3|        m_BT_H = h;
  267|      3|        m_BT_M = m;
  268|      3|    }
  269|       |#endif
  270|       |    /////////////////////////////////////////////////////////////////////////////////////
  271|       |    static Clock getTime()
  272|    318|    {
  273|    318|#ifdef BT_TEST
  274|    318|        return Clock(m_BT_H,m_BT_M);
  275|       |#else
  276|       |        time_t now = time(0);
  277|       |        tm *ltm = localtime(&now);
  278|       |        return Clock( static_cast <unsigned int>(ltm->tm_hour),static_cast <unsigned int>(ltm->tm_min) );
  279|       |#endif
  280|    318|    }
  281|       |    /////////////////////////////////////////////////////////////////////////////////////
  282|       |    void stopwatchStart()
  283|      1|    {
  284|      1|        m_time = std::time(nullptr);
  285|      1|    }
  286|       |    /////////////////////////////////////////////////////////////////////////////////////
  287|       |    unsigned int  stopwatchStopAndGetResult() const 
  288|      1|    {
  289|      1|        return static_cast<unsigned int>(std::time(nullptr) - m_time);
  290|      1|    }
  291|       |};
  292|       |
  293|       |enum class STATE {
  294|       |    OFF,
  295|       |    ON,
  296|       |    UNKNOWN,
  297|       |    PLAY,
  298|       |    PAUSE,
  299|       |    STOP,
  300|       |    ACTIVE,
  301|       |    DEACTIVE,
  302|       |    WORKING,
  303|       |    DEFINE,
  304|       |    UNDEFINE,
  305|       |    LOCK,
  306|       |    UNLOCK,
  307|       |    EMPTY,
  308|       |    FULL,
  309|       |    SEND_OK,
  310|       |    SEND_NOK,
  311|       |    TEMPORARY,
  312|       |    ENABLED,
  313|       |    DISABLED,
  314|       |    CONNECTED,
  315|       |    DISCONNECTED,
  316|       |    ARMED,
  317|       |    DISARMED
  318|       |    //WARNING remember add new state to stateToString() usefull.cpp
  319|       |};
  320|       |
  321|       |std::string stateToString(STATE s);
  322|       |STATE stringToState(const std::string& s);
  323|       |
  324|       |std::ostream &operator<<(std::ostream &os, const STATE &v);
  325|       |std::ostream &operator>>(std::ostream &os,  STATE &v);
  326|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/libs/useful/usefull.cpp:
    1|       |#include "useful.h"
    2|       |
    3|       |#include <fcntl.h>
    4|       |#include <fstream>
    5|       |#include <sstream>
    6|       |#include <unistd.h>
    7|       |
    8|       |#ifndef IDOM
    9|       |#include <curl/curl.h>
   10|       |#endif
   11|       |
   12|       |void useful_F_libs::toLower(std::string &str)
   13|     76|{
   14|     76|    std::transform(str.cbegin(), str.cend(), str.begin(),
   15|     76|                   [](unsigned char c)
   16|    468|                   { return std::tolower(c); });
   17|     76|}
   18|       |std::vector<std::string> split_string(const std::string &s, char separator)
   19|     38|{
   20|     38|    std::vector<std::string> output;
   21|     38|    std::string::size_type prev_pos = 0, pos = 0;
   22|       |
   23|     76|    while ((pos = s.find(separator, pos)) not_eq std::string::npos)
   24|     38|    {
   25|     38|        std::string substring(s.substr(prev_pos, pos - prev_pos));
   26|     38|        output.push_back(substring);
   27|     38|        prev_pos = ++pos;
   28|     38|    }
   29|     38|    try
   30|     38|    {
   31|     38|        output.push_back(s.substr(prev_pos, pos - prev_pos)); // Last word
   32|     38|    }
   33|     38|    catch (...)
   34|     38|    {
   35|      0|    }
   36|     38|    return output;
   37|     38|}
   38|       |
   39|       |std::string stateToString(STATE s)
   40|    475|{
   41|    475|    switch (s)
   42|    475|    {
   43|      4|    case STATE::OFF:
   44|      4|        return "OFF";
   45|     17|    case STATE::ON:
   46|     17|        return "ON";
   47|      7|    case STATE::PLAY:
   48|      7|        return "PLAY";
   49|      0|    case STATE::PAUSE:
   50|      0|        return "PAUSE";
   51|      0|    case STATE::STOP:
   52|      0|        return "STOP";
   53|     59|    case STATE::ACTIVE:
   54|     59|        return "ACTIVE";
   55|     15|    case STATE::DEACTIVE:
   56|     15|        return "DEACTIVE";
   57|      1|    case STATE::WORKING:
   58|      1|        return "WORKING";
   59|      0|    case STATE::DEFINE:
   60|      0|        return "DEFINE";
   61|    249|    case STATE::UNDEFINE:
   62|    249|        return "UNDEFINE";
   63|     15|    case STATE::LOCK:
   64|     15|        return "LOCK";
   65|    107|    case STATE::UNLOCK:
   66|    107|        return "UNLOCK";
   67|      0|    case STATE::EMPTY:
   68|      0|        return "EMPTY";
   69|      0|    case STATE::FULL:
   70|      0|        return "FULL";
   71|      0|    case STATE::SEND_OK:
   72|      0|        return "SEND_OK";
   73|      0|    case STATE::SEND_NOK:
   74|      0|        return "SEND_NOK";
   75|      0|    case STATE::ENABLED:
   76|      0|        return "ENABLED";
   77|      0|    case STATE::DISABLED:
   78|      0|        return "DISABLED";
   79|      0|    case STATE::CONNECTED:
   80|      0|        return "CONNECTED";
   81|      0|    case STATE::DISCONNECTED:
   82|      0|        return "DISCONNECTED";
   83|      0|    case STATE::ARMED:
   84|      0|        return "ARMED";
   85|      0|    case STATE::DISARMED:
   86|      0|        return "DISARMED";
   87|      1|    default:
   88|      1|        return "UNKNOWN";
   89|    475|    }
   90|    475|}
   91|       |
   92|       |STATE stringToState(const std::string &s)
   93|    196|{
   94|    196|    if (s == "OFF")
   95|      0|        return STATE::OFF;
   96|    196|    else if (s == "ON")
   97|      0|        return STATE::ON;
   98|    196|    else if (s == "PLAY")
   99|      0|        return STATE::PLAY;
  100|    196|    else if (s == "PAUSE")
  101|      0|        return STATE::PAUSE;
  102|    196|    else if (s == "STOP")
  103|      0|        return STATE::STOP;
  104|    196|    else if (s == "ACTIVE")
  105|     84|        return STATE::ACTIVE;
  106|    112|    else if (s == "DEACTIVE")
  107|      0|        return STATE::DEACTIVE;
  108|    112|    else if (s == "WORKING")
  109|      0|        return STATE::WORKING;
  110|    112|    else if (s == "DEFINE")
  111|      0|        return STATE::DEFINE;
  112|    112|    else if (s == "UNDEFINE")
  113|      0|        return STATE::UNDEFINE;
  114|    112|    else if (s == "LOCK")
  115|      0|        return STATE::LOCK;
  116|    112|    else if (s == "UNLOCK")
  117|      0|        return STATE::UNLOCK;
  118|    112|    else if (s == "EMPTY")
  119|      0|        return STATE::EMPTY;
  120|    112|    else if (s == "FULL")
  121|      0|        return STATE::FULL;
  122|    112|    else if (s == "SEND_OK")
  123|      0|        return STATE::SEND_OK;
  124|    112|    else if (s == "SEND_NOK")
  125|      0|        return STATE::SEND_NOK;
  126|    112|    else if (s == "ENABLED")
  127|      0|        return STATE::ENABLED;
  128|    112|    else if (s == "DISABLED")
  129|      0|        return STATE::DISABLED;
  130|    112|    else if (s == "CONNECTED")
  131|      0|        return STATE::CONNECTED;
  132|    112|    else if (s == "DISCONNECTED")
  133|      0|        return STATE::DISCONNECTED;
  134|    112|    else if (s == "ARMED")
  135|      0|        return STATE::ARMED;
  136|    112|    else if (s == "DISARMED")
  137|      0|        return STATE::DISARMED;
  138|    112|    else if (s == "null")
  139|    112|        return STATE::UNDEFINE;
  140|      0|    else
  141|      0|        return STATE::UNKNOWN;
  142|    196|}
  143|       |
  144|       |std::ostream &operator<<(std::ostream &os, const STATE &v)
  145|    113|{
  146|    113|    os << stateToString(v);
  147|    113|    return os;
  148|    113|}
  149|       |
  150|       |std::ostream &operator>>(std::ostream &os, STATE &v)
  151|      0|{
  152|      0|    std::stringstream ss;
  153|      0|    ss << os.rdbuf();
  154|      0|    v = stringToState(ss.str());
  155|      0|    return os;
  156|      0|}
  157|       |
  158|       |bool useful_F_libs::hasSubstring(const std::string &_str, const std::string &_substring)
  159|    429|{
  160|    429|    if (_str.find(_substring) not_eq std::string::npos)
  161|     11|        return true;
  162|    418|    return false;
  163|    429|}
  164|       |
  165|       |#ifndef IDOM
  166|       |
  167|       |void useful_F_libs::write_to_mkfifo(const std::string &path, const std::string &msg)
  168|      0|{
  169|      0|    errno = 0;
  170|      0|    int fd = open(path.c_str(), O_RDWR | O_NONBLOCK);
  171|       |    // std::cout << "write open file: " << fd << " path " << path.c_str() << " msg: " << msg <<std::endl;
  172|       |    // std::cout << "write_to_mkfifo( error - " << strerror(  errno ) <<   std::endl;
  173|      0|    write(fd, msg.c_str(), msg.size());
  174|      0|    close(fd);
  175|      0|}
  176|       |
  177|       |std::string useful_F_libs::read_from_mkfifo(const std::string &path)
  178|      0|{
  179|       |    /* char buf[10];
  180|       |    //open, read, and display the message from the FIFO
  181|       |    int fd = open(path.c_str(), O_RDONLY | O_NONBLOCK);
  182|       |    std::cout <<"read open file: " << fd <<std::endl;
  183|       |    read(fd, buf, sizeof (buf));
  184|       |    std::cout << "buf: " << buf << std::endl;
  185|       |    close(fd);
  186|       |    return (std::string(buf));
  187|      0|*/ std::string buf = "NULL";
  188|      0|    std::fstream fd;
  189|      0|    fd.open(path.c_str(), std::fstream::in | std::fstream::out | std::fstream::app);
  190|       |
  191|      0|    std::getline(fd, buf);
  192|      0|    return buf;
  193|      0|}
  194|       |
  195|       |size_t useful_F_libs::WriteCallback(void *contents, size_t size, size_t nmemb, void *userp)
  196|      2|{
  197|      2|    ((std::string *)userp)->append((char *)contents, size * nmemb);
  198|      2|    return size * nmemb;
  199|      2|}
  200|       |
  201|       |std::string useful_F_libs::find_tag(const std::string &temp)
  202|      0|{
  203|      0|    std::string value = "";
  204|      0|    for (unsigned int i = 0; i < temp.size(); ++i)
  205|      0|    {
  206|       |
  207|      0|        if (temp.at(i) == '>')
  208|      0|        {
  209|      0|            unsigned int z = i + 1;
  210|      0|            while (temp.at(z) not_eq '<')
  211|      0|            {
  212|      0|                value.push_back(temp.at(z));
  213|      0|                ++z;
  214|      0|            }
  215|      0|            break;
  216|      0|        }
  217|      0|    }
  218|      0|    return value;
  219|      0|}
  220|       |
  221|       |std::string useful_F_libs::stringToHex(const std::string &input)
  222|     13|{
  223|     13|    static const char hex_digits[] = "0123456789ABCDEF";
  224|       |
  225|     13|    std::string output;
  226|     13|    output.reserve(input.length() * 2);
  227|     13|    for (unsigned char c : input)
  228|     29|    {
  229|     29|        output.push_back(hex_digits[c >> 4]);
  230|     29|        output.push_back(hex_digits[c & 15]);
  231|     29|    }
  232|     13|    return output;
  233|     13|}
  234|       |
  235|       |#ifndef BT_TEST
  236|       |std::string useful_F_libs::httpPost(const std::string &url, int timeoutSeconds)
  237|       |{
  238|       |    CURL *curl;
  239|       |    CURLcode res;
  240|       |    std::string readBuffer;
  241|       |    curl = curl_easy_init();
  242|       |
  243|       |    if (curl)
  244|       |    {
  245|       |        curl_easy_setopt(curl, CURLOPT_TIMEOUT, timeoutSeconds);
  246|       |        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
  247|       |        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, useful_F_libs::WriteCallback);
  248|       |        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);
  249|       |        res = curl_easy_perform(curl);
  250|       |        /* Check for errors */
  251|       |        if (res not_eq CURLE_OK)
  252|       |            fprintf(stderr, "curl_easy_perform() failed: %s\n",
  253|       |                    curl_easy_strerror(res));
  254|       |
  255|       |        /* always cleanup */
  256|       |        curl_easy_cleanup(curl);
  257|       |    }
  258|       |    curl_global_cleanup();
  259|       |
  260|       |    return readBuffer;
  261|       |}
  262|       |
  263|       |std::string useful_F_libs::httpPost(const std::string &url)
  264|       |{
  265|       |    return useful_F_libs::httpPost(url, 10);
  266|       |}
  267|       |#endif
  268|       |
  269|       |void useful_F_libs::downloadFile(const std::string &url, const std::string &path, int timeoutSeconds)
  270|      0|{
  271|      0|    CURL *curl;
  272|       |    // CURLcode res;
  273|       |
  274|      0|    curl = curl_easy_init();
  275|      0|    if (curl)
  276|      0|    {
  277|      0|        FILE *fp = fopen(path.c_str(), "wb");
  278|      0|        curl_easy_setopt(curl, CURLOPT_TIMEOUT, timeoutSeconds);
  279|      0|        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
  280|      0|        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, NULL);
  281|      0|        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);
  282|       |        // res = curl_easy_perform(curl);
  283|       |        /* always cleanup */
  284|      0|        curl_easy_cleanup(curl);
  285|      0|        curl_global_cleanup();
  286|      0|        fclose(fp);
  287|      0|    }
  288|      0|}
  289|       |
  290|       |std::string useful_F_libs::replaceAll(std::string str, const std::string &from, const std::string &to)
  291|      3|{
  292|      3|    size_t start_pos = 0;
  293|     11|    while ((start_pos = str.find(from, start_pos)) not_eq std::string::npos)
  294|      8|    {
  295|      8|        str.replace(start_pos, from.length(), to);
  296|      8|        start_pos += to.length(); // Handles case where 'to' is a substring of 'from'
  297|      8|    }
  298|      3|    return str;
  299|      3|}
  300|       |std::string useful_F_libs::removeHtmlTag(std::string &data)
  301|      2|{
  302|      2|    data = useful_F_libs::replaceAll(data, "</dl>", "\n");
  303|       |
  304|       |    // data = useful_F::replaceAll(data,"    "," ");
  305|      2|    bool copy = true;
  306|      2|    std::string plainString = "";
  307|      2|    std::stringstream convertStream;
  308|       |
  309|       |    // remove all xml tags
  310|  1.58k|    for (unsigned int i = 0; i < data.length(); i++)
  311|  1.58k|    {
  312|  1.58k|        convertStream << data[i];
  313|       |
  314|  1.58k|        if (convertStream.str().compare("<") == 0)
  315|     19|            copy = false;
  316|  1.56k|        else if (convertStream.str().compare(">") == 0)
  317|     19|        {
  318|     19|            copy = true;
  319|     19|            convertStream.str(std::string());
  320|     19|            continue;
  321|     19|        }
  322|       |
  323|  1.56k|        if (copy)
  324|    248|            plainString.append(convertStream.str());
  325|       |
  326|  1.56k|        convertStream.str(std::string());
  327|  1.56k|    }
  328|       |
  329|      2|    return plainString;
  330|      2|}
  331|       |
  332|       |nlohmann::json useful_F_libs::getJson(const std::string &url)
  333|      1|{
  334|      1|    std::string str = useful_F_libs::httpPost(url);
  335|      1|    return nlohmann::json::parse(str);
  336|      1|}
  337|       |#endif

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/mqtt_mosquitto/MQTT_mosquitto/TEST/mqtt_stub.cpp:
    1|       |#include "../mqtt.h"
    2|       |#include <iostream>
    3|       |#include <unistd.h>
    4|       |
    5|       |
    6|       |
    7|       |MQTT_mosquitto::MQTT_mosquitto(const std::string& username,
    8|       |                               bool clean_session): _clean_session(clean_session)
    9|    143|{
   10|    143|    puts("MQTT_mosquitto::MQTT_mosquitto()");
   11|    143|}
   12|       |
   13|       |
   14|       |
   15|       |void MQTT_mosquitto::connect(const std::string& topic,
   16|       |                             const std::string& host,
   17|       |                             int port,
   18|       |                             int qos,
   19|       |                             int keepalive)
   20|      0|{
   21|       |
   22|      0|}
   23|       |
   24|       |MQTT_mosquitto::~MQTT_mosquitto()
   25|    143|{
   26|    143|    puts("MQTT_mosquitto::~MQTT_mosquitto()");
   27|    143|}
   28|       |
   29|       |int MQTT_mosquitto::setLoginAndPass(const std::string &username, const std::string &pass)
   30|      0|{
   31|      0|        return 0;
   32|      0|}
   33|       |
   34|       |int MQTT_mosquitto::publish(const std::string &topic, const std::string &msg, int qos, bool retained)
   35|     88|{
   36|     88|    std::cout << "MQTT_mosquitto::publish topic: " << topic << " msg: " << msg << std::endl;
   37|     88|    return 0;
   38|     88|}
   39|       |
   40|       |int MQTT_mosquitto::publishRetained(const std::string &topic, const std::string &msg, int qos)
   41|      5|{
   42|      5|    std::cout << "MQTT_mosquitto::publishRatained topic: " << topic << " msg: " << msg << std::endl;
   43|      5|    return 0;
   44|      5|}
   45|       |
   46|       |void MQTT_mosquitto::disconnect()
   47|      0|{
   48|       |
   49|      0|}
   50|       |
   51|       |void MQTT_mosquitto::turnOnDebugeMode()
   52|      0|{
   53|      0|    _debugeMode = true;
   54|      0|    puts("MQTT debuge monde ON");
   55|      0|}
   56|       |
   57|       |void MQTT_mosquitto::turnOffDebugeMode()
   58|      0|{
   59|      0|    _debugeMode = false;
   60|      0|    puts("MQTT debuge mode OFF");
   61|      0|}
   62|       |
   63|       |void MQTT_mosquitto::putToReceiveQueue(const std::string &topic, const std::string &msg)
   64|     11|{
   65|     11|    auto p = std::make_pair(topic,msg);
   66|     11|    _receivQueue.push(p);
   67|     11|}
   68|       |
   69|       |int MQTT_mosquitto::getReceiveQueueSize()
   70|     66|{
   71|     66|    return static_cast<int>(_receivQueue.size());
   72|     66|}
   73|       |
   74|       |std::pair<std::string, std::string> MQTT_mosquitto::getMessage()
   75|     11|{
   76|     11|    if (_receivQueue.empty() == true)
   77|      0|        throw std::string("Queue is empty");
   78|     11|    auto _return = _receivQueue.front();
   79|     11|    _receivQueue.pop();
   80|     11|    return _return;
   81|     11|}
   82|       |
   83|       |void MQTT_mosquitto::subscribeHandlerRunInThread(MQTT_mosquitto* ptrMQTT)
   84|      0|{
   85|       |
   86|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/433MHz/RFLink/TEST/rflinkhandler_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../rflinkhandler.h"
    4|       |#include "test_data.h"
    5|       |
    6|       |class RFLinkHandler_Class_fixture : public ::testing::Test
    7|       |{
    8|       |public:
    9|       |    thread_context test_context;
   10|       |    CONFIG_JSON test_server_set;
   11|       |    std::unique_ptr<RFLinkHandler> test_RFLink;
   12|       |
   13|       |    RFLinkHandler_Class_fixture()
   14|      5|    {
   15|      5|        test_server_set._server.TS_KEY = "key test";
   16|      5|        test_server_set._rflink.RFLinkBaudRate = 57600;
   17|      5|        test_server_set._rflink.RFLinkPort = "/dev/fakePortRS232";
   18|      5|        test_context.server_settings = &test_server_set;
   19|      5|        test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   20|       |
   21|      5|        test_RFLink = std::make_unique<RFLinkHandler>(&test_context);
   22|      5|    }
   23|       |};
   24|       |
   25|       |TEST_F(RFLinkHandler_Class_fixture, sendCommandAndWaitForReceive)
   26|      1|{
   27|      1|    test_RFLink->init();
   28|      1|    std::string k("msg_test;\n a=4:b=10;\n");
   29|      1|    SerialPi_set_recv_msg(k);
   30|      1|    std::string r = test_RFLink->sendCommandAndWaitForReceive("test command");
   31|       |
   32|      1|    EXPECT_STREQ(r.c_str(),"msg_test;");
   33|      1|    r = test_RFLink->sendCommandAndWaitForReceive("ok");
   34|      1|    EXPECT_STREQ(r.c_str()," a=4:b=10;");
   35|      1|}
   36|       |
   37|       |TEST_F(RFLinkHandler_Class_fixture, port_does_not_exist)
   38|      1|{
   39|      1|    bool result = test_RFLink->init();
   40|      1|    EXPECT_FALSE(result);
   41|      1|}
   42|       |
   43|       |TEST_F(RFLinkHandler_Class_fixture, port_exist)
   44|      1|{
   45|      1|    test_server_set._rflink.RFLinkPort = "/dev/tty0";
   46|      1|    bool result = test_RFLink->init();
   47|      1|    EXPECT_TRUE(result);
   48|      1|}
   49|       |
   50|       |TEST_F(RFLinkHandler_Class_fixture, getValue)
   51|      1|{
   52|      1|    std::string m = "20;90;Alecto V4;ID=557a;TEMP=0057;HUM=25;";
   53|      1|    EXPECT_STREQ(test_RFLink->getArgumentValueFromRFLinkMSG(m,"ID").c_str(),"557a");
   54|      1|    EXPECT_STREQ(test_RFLink->getArgumentValueFromRFLinkMSG(m,"TEMP").c_str(),"0057");
   55|      1|    EXPECT_THROW(test_RFLink->getArgumentValueFromRFLinkMSG(m,"test"),std::string);
   56|      1|}
   57|       |
   58|       |TEST_F(RFLinkHandler_Class_fixture, readAndFlush)
   59|      1|{
   60|      1|    SerialPi_set_recv_msg("doTest;\n");
   61|      1|    std::string retStr = test_RFLink->readFromRS232();
   62|      1|    EXPECT_STREQ(retStr.c_str(), "doTest;");
   63|       |
   64|      1|    SerialPi_set_recv_msg("doTest2;\n");
   65|      1|    test_RFLink->flush();
   66|      1|    retStr = test_RFLink->readFromRS232();
   67|      1|    EXPECT_EQ(retStr.size(), 0);
   68|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/433MHz/RFLink/rflinkhandler.cpp:
    1|       |#include <unistd.h>
    2|       |
    3|       |#include "rflinkhandler.h"
    4|       |
    5|       |std::mutex RFLinkHandler::sm_RFLink_MUTEX;
    6|       |std::string RFLinkHandler::sm_RFLink_BUFOR;
    7|       |
    8|       |RFLinkHandler::RFLinkHandler(thread_context *context):
    9|       |    m_serial_RFLink(context->server_settings->_rflink.RFLinkPort)
   10|     42|{
   11|     42|    this->context = context;
   12|     42|    m_className.insert(0, typeid(this).name());
   13|     42|    addToMap(m_className, this);
   14|     42|#ifdef BT_TEST
   15|     42|    std::cout << "RFLinkHandler::RFLinkHandler()"<<std::endl;
   16|     42|#endif
   17|     42|}
   18|       |
   19|       |RFLinkHandler::~RFLinkHandler()
   20|     42|{
   21|     42|    removeFromMap(m_className);
   22|     42|#ifdef BT_TEST
   23|     42|    std::cout << "RFLinkHandler::~RFLinkHandler()"<<std::endl;
   24|     42|#endif
   25|     42|}
   26|       |
   27|       |bool RFLinkHandler::init()
   28|      3|{
   29|      3|    if(access( context->server_settings->_rflink.RFLinkPort.c_str(), F_OK ) not_eq -1 )
   30|      1|    {
   31|      1|        m_serial_RFLink.begin(context->server_settings->_rflink.RFLinkBaudRate);
   32|      1|        log_file_mutex.mutex_lock();
   33|      1|        log_file_cout << INFO <<"otwarcie portu RS232 RFLink " << context->server_settings->_rflink.RFLinkPort << "  "
   34|      1|                      <<context->server_settings->_rflink.RFLinkBaudRate<<std::endl;
   35|      1|        log_file_mutex.mutex_unlock();
   36|      1|        return true;
   37|      1|    }
   38|      2|    else
   39|      2|    {
   40|      2|        log_file_mutex.mutex_lock();
   41|      2|        log_file_cout << ERROR <<"brak portu RS232 RFLink " << context->server_settings->_rflink.RFLinkPort<<std::endl;
   42|      2|        log_file_mutex.mutex_unlock();
   43|      2|        return false;
   44|      2|    }
   45|      3|}
   46|       |
   47|       |void RFLinkHandler::flush()
   48|      1|{
   49|      1|    m_serial_RFLink.flush();
   50|      1|}
   51|       |
   52|       |void RFLinkHandler::sendCommand(std::string cmd)
   53|      4|{
   54|      4|    std::lock_guard<std::mutex> m_lock(sm_RFLink_MUTEX);
   55|      4|    cmd.append("\n\r"); // add NL & CR
   56|      4|    m_serial_RFLink.print(cmd);
   57|      4|}
   58|       |
   59|       |std::string RFLinkHandler::sendCommandAndWaitForReceive(std::string cmd)
   60|      2|{
   61|      2|    std::lock_guard<std::mutex> m_lock(sm_RFLink_MUTEX);
   62|      2|    cmd.append("\n\r"); // add NL & CR
   63|      2|    m_serial_RFLink.print(cmd);
   64|      2|    return internalReadFromRS232();
   65|      2|}
   66|       |
   67|       |std::string RFLinkHandler::readFromRS232()
   68|      2|{
   69|      2|    std::lock_guard<std::mutex> m_lock(sm_RFLink_MUTEX);
   70|      2|    return internalReadFromRS232();
   71|      2|}
   72|       |
   73|       |std::string RFLinkHandler::dump() const
   74|      0|{
   75|      0|    std::stringstream ret;
   76|       |
   77|      0|    ret << "m_pingTime: " << this->m_pingTime << std::endl;
   78|      0|    ret << "m_pingTime: " << Clock::unixTimeToString( this->m_pingTime )<< std::endl;
   79|      0|    ret << "m_okTime: " << this->m_okTime << std::endl;
   80|      0|    ret << "sm_RFLink_BUFOR: " << this->sm_RFLink_BUFOR << std::endl;
   81|      0|    return ret.str();
   82|      0|}
   83|       |
   84|       |std::string RFLinkHandler::internalReadFromRS232()
   85|      4|{
   86|      4|    std::string buf;
   87|      4|    if(m_serial_RFLink.available() > 0){
   88|     29|        while (true){
   89|       |
   90|     29|            char b = m_serial_RFLink.read();
   91|     29|            if (b == '\n'){
   92|      3|                break;
   93|      3|            }
   94|     26|            buf.push_back(b);
   95|     26|        }
   96|      3|    }
   97|      4|    return buf;
   98|      4|}
   99|       |
  100|       |std::string RFLinkHandler::getArgumentValueFromRFLinkMSG(const std::string& msg, const std::string& var)
  101|     52|{
  102|     52|    std::string id;
  103|     52|    int pos = msg.find(var + "=");
  104|     52|    if (pos == -1 ){
  105|     19|        throw R"(argument ")" + var + R"(" not found)";
  106|     19|    }
  107|     33|    if (msg.at(0) not_eq '2' or msg.at(1) not_eq '0'){
  108|      1|        log_file_mutex.mutex_lock();
  109|      1|        log_file_cout << CRITICAL <<"throw RFLinkHandler::getArgumentValueFromRFLinkMSG()-2"<<std::endl;
  110|      1|        log_file_mutex.mutex_unlock();
  111|      1|        throw WRONG_FORMAT();
  112|      1|    }
  113|     32|#ifdef BT_TEST
  114|     32|    std::cout << "znaleziono " << var <<" na pozycji " << pos <<std::endl;
  115|     32|#endif
  116|       |
  117|    151|    for (unsigned int i = 1 + pos + var.size();;++i ){
  118|    151|        char t = msg.at(i);
  119|    151|        if (t == ';'){
  120|     32|            break;
  121|     32|        }
  122|    119|        id.push_back(t);
  123|    119|    }
  124|     32|    return id;
  125|     33|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/433MHz/RFLink/rflinkhandler.h:
    1|       |#pragma once
    2|       |
    3|       |
    4|       |#include <map>
    5|       |#include <exception>
    6|       |#include "../../SerialPi/serialpi.h"
    7|       |#include "../../iDom_server_OOP.h"
    8|       |
    9|       |class WRONG_FORMAT : public std::exception{
   10|       |
   11|       |};
   12|       |
   13|       |struct RFLink_DEV{
   14|       |    int m_counter = 0;
   15|       |    std::string msg;
   16|      4|    void counter(){
   17|      4|        ++m_counter;
   18|      4|    }
   19|       |
   20|      2|    std::string read(){
   21|      2|        std::stringstream ret;
   22|      2|        ret << m_counter << " \t" << msg << std::endl;
   23|      2|        return ret.str();
   24|      2|    }
   25|       |};
   26|       |
   27|       |class RFLinkHandler : public iDom_API
   28|       |{
   29|       |    thread_context *context;
   30|       |    SerialPi m_serial_RFLink;
   31|       |
   32|       |public:
   33|       |
   34|       |    static std::mutex sm_RFLink_MUTEX;
   35|       |    static std::string sm_RFLink_BUFOR;
   36|       |
   37|       |    unsigned int m_okTime = 0;
   38|       |    unsigned int m_pingTime = 0;
   39|       |    ////// temporarnie //////
   40|       |    std::unordered_map<std::string, RFLink_DEV> m_rflinkMAP;
   41|       |    /////////////////////////////
   42|       |    explicit RFLinkHandler(thread_context *context);
   43|       |    ~RFLinkHandler();
   44|       |    bool init();
   45|       |    // void run();
   46|       |    void flush();
   47|       |    void sendCommand(std::string cmd);
   48|       |    std::string sendCommandAndWaitForReceive(std::string cmd);
   49|       |    std::string readFromRS232();
   50|       |
   51|       |    std::string dump() const override;
   52|       |
   53|       |private:
   54|       |    std::string internalReadFromRS232();
   55|       |    //#ifdef BT_TEST
   56|       |public:
   57|       |    //#endif
   58|       |    static std::string getArgumentValueFromRFLinkMSG(const std::string &msg, const std::string &var);
   59|       |};
   60|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/BIT_TEST/bit_main.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include <thread>
    4|       |
    5|       |#include "../iDomTools/test/iDomTools_fixture.h"
    6|       |#include "../TASKER/tasker.h"
    7|       |#include "../src/thread_functions/iDom_thread.h"
    8|       |#include "../src/blockQueue/blockqueue.h"
    9|       |
   10|       |class bit_fixture : public iDomTOOLS_ClassTest
   11|       |{
   12|       |protected:
   13|       |    struct sockaddr_in server;
   14|       |    int v_socket;
   15|       |    CONFIG_JSON testCS;
   16|       |    const char *ipAddress = "127.0.0.1";
   17|       |    void start_iDomServer();
   18|       |    void crypto(std::string &toEncrypt, std::string &key, bool encrypted);
   19|       |
   20|       |    std::unique_ptr<TASKER> bit_Tasker;
   21|       |    std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> thread_array;
   22|       |    std::string send_receive(int socket, std::string msg, std::string key, bool crypt = true);
   23|       |
   24|       |    bit_fixture() : v_socket(0),
   25|       |                    bit_Tasker(std::make_unique<TASKER>(&test_context))
   26|       |
   27|     17|    {
   28|     17|        test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("cyniu-BIT");
   29|     17|        test_context.ptr_buderus = std::make_unique<BUDERUS>();
   30|    187|        for (size_t i = 0; i < thread_array.size(); ++i)
   31|    170|        {
   32|    170|            thread_array[i].thread_name = "  -empty-  ";
   33|    170|            thread_array[i].thread_socket = 0;
   34|    170|        }
   35|     17|        test_context.ptr_MPD_info = std::make_unique<MPD_info>();
   36|     17|        test_context.main_THREAD_arr = &thread_array;
   37|     17|        test_context.server_settings = &testCS;
   38|     17|        test_context.server_settings->_server.encrypted = true;
   39|     17|        test_context.server_settings->_fb_viber.viberReceiver = {"test1", "test2};"};
   40|     17|        test_context.server_settings->_fb_viber.viberSender = "testViberSender";
   41|       |
   42|     17|        test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   43|     17|        test_context.main_REC = std::make_shared<RADIO_EQ_CONTAINER>(&test_context);
   44|     17|        test_context.main_iDomTools = std::make_shared<iDomTOOLS>(&test_context);
   45|     17|        test_context.server_settings->_server.PORT = 8833;
   46|     17|        test_context.server_settings->_server.SERVER_IP = "127.0.0.1";
   47|     17|        test_context.server_settings->_runThread.SATEL = true;
   48|     17|        test_context.server_settings->_command = nlohmann::json::parse(R"({
   49|     17|        "lock":["jedna komenda", "druga komenda"],
   50|     17|        "unlock":["jedna komenda unlock", "druga komenda unlock"],
   51|     17|        "sunrise":{
   52|     17|            "lock": ["sjedna komenda sunrise lock", "sdruga komenda sunrise lock"],
   53|     17|            "unlock": ["sjedna komenda sunrise unlock", "sdruga komenda sunrise unlock"]
   54|     17|        },
   55|     17|        "sunset":{
   56|     17|            "unlock": ["sjedna komenda sunset unlock", "sdruga komenda sunset unlock"],
   57|     17|            "lock": ["sjedna komenda sunset lock", "sdruga komenda sunset lock"]
   58|     17|        }
   59|     17|    })");
   60|     17|    }
   61|       |};
   62|       |
   63|       |void bit_fixture::crypto(std::string &toEncrypt, std::string &key, bool encrypted)
   64|    105|{
   65|    105|    if (!encrypted)
   66|      0|    {
   67|      0|        return;
   68|      0|    }
   69|    105|    unsigned int keySize = key.size() - 1;
   70|       |
   71|    105|    for (char &i : toEncrypt)
   72|  17.1k|    {
   73|  17.1k|        if (keySize == 0)
   74|  1.81k|            keySize = key.size() - 1;
   75|  15.3k|        else
   76|  15.3k|            --keySize;
   77|  17.1k|        i ^= key[keySize];
   78|  17.1k|    }
   79|    105|}
   80|       |void bit_fixture::start_iDomServer()
   81|     11|{
   82|     11|    useful_F::workServer = true; // włącz nasluchwianie servera
   83|     11|    useful_F::go_while = true;
   84|     11|    auto t = std::thread(&useful_F::startServer, &test_context, bit_Tasker.get());
   85|     11|    t.detach();
   86|     11|    std::cout << "EXIT bit_fixture::start_iDomServer()" << std::endl;
   87|     11|}
   88|       |
   89|       |std::string bit_fixture::send_receive(int socket, std::string msg, std::string key, bool crypt)
   90|     27|{
   91|     27|    char buffer_new[10000];
   92|     27|    std::string ret;
   93|     27|    std::string ok = "ok";
   94|       |
   95|     27|    std::cout << " wysłałem: " << msg << std::endl;
   96|     27|    crypto(msg, key, crypt);
   97|     27|    send(socket, msg.c_str(), msg.size(), 0);
   98|     27|    ssize_t size = recv(socket, buffer_new, sizeof(buffer_new), 0);
   99|     94|    for (ssize_t i = 0; i < size; ++i)
  100|     67|    {
  101|     67|        ret.push_back(buffer_new[i]);
  102|     67|    }
  103|     27|    crypto(ret, key, crypt);
  104|     27|    std::cout << " w połowie " << ret << std::endl;
  105|     27|    ssize_t sizeRec = static_cast<ssize_t>(std::stoul(ret));
  106|     27|    ret.clear();
  107|       |
  108|     27|    crypto(ok, key, crypt);
  109|     27|    send(socket, ok.c_str(), ok.size(), 0);
  110|       |
  111|     27|    size = recv(socket, buffer_new, sizeof(buffer_new), 0);
  112|       |
  113|     27|    while (size not_eq sizeRec)
  114|      0|    {
  115|      0|        std::cout << " w while: " << size << " recSize: " << sizeRec << std::endl;
  116|      0|        size += recv(socket, buffer_new, sizeof(buffer_new), 0);
  117|      0|    }
  118|       |
  119|     27|    EXPECT_EQ(size, sizeRec);
  120|  16.8k|    for (ssize_t i = 0; i < size; ++i)
  121|  16.8k|    {
  122|  16.8k|        ret.push_back(buffer_new[i]);
  123|  16.8k|    }
  124|     25|    crypto(ret, key, crypt);
  125|     25|    std::cout << " kończymy z " << ret << std::endl;
  126|     25|    return ret;
  127|     27|}
  128|       |
  129|       |TEST_F(bit_fixture, socket_heandle_command)
  130|      1|{
  131|      1|    start_iDomServer();
  132|      1|    struct sockaddr_in serwer =
  133|      1|        {
  134|      1|            .sin_family = AF_INET,
  135|      1|            .sin_port = htons(8833)};
  136|       |
  137|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  138|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  139|      1|    sleep(1);
  140|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  141|      1|    ASSERT_EQ(connectStatus, 0);
  142|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  143|       |
  144|      1|    auto key = useful_F::RSHash();
  145|      1|    std::string toCheck;
  146|       |
  147|      1|    send_receive(s, key, key);
  148|      1|    toCheck = send_receive(s, "ROOT", key);
  149|      1|    EXPECT_STREQ(toCheck.c_str(), "OK you are ROOT");
  150|       |
  151|      1|    std::cout << "odebrano4: " << toCheck << std::endl;
  152|      1|    std::cout << "odebrano5: " << send_receive(s, "help", key) << std::endl;
  153|       |
  154|      1|    toCheck = send_receive(s, "exit", key);
  155|       |
  156|      1|    std::cout << "odebrano8: " << toCheck << std::endl;
  157|      1|    EXPECT_THAT(toCheck.c_str(), testing::HasSubstr("END"));
  158|       |
  159|      1|    close(s);
  160|       |
  161|      1|    useful_F::workServer = false;
  162|      1|    shutdown(s, SHUT_RDWR);
  163|       |
  164|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  165|       |
  166|      1|    toCheck = test_context.iDomAlarm.showAlarm();
  167|      1|    EXPECT_STREQ(toCheck.c_str(), "88756: 433MHz equipment not found first\n");
  168|      1|}
  169|       |
  170|       |TEST_F(bit_fixture, socket_heandle_command_lock)
  171|      1|{
  172|      1|    start_iDomServer();
  173|      1|    struct sockaddr_in serwer =
  174|      1|        {
  175|      1|            .sin_family = AF_INET,
  176|      1|            .sin_port = htons(8833)};
  177|       |
  178|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  179|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  180|      1|    sleep(1);
  181|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  182|      1|    ASSERT_EQ(connectStatus, 0);
  183|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  184|       |
  185|      1|    auto key = useful_F::RSHash();
  186|      1|    std::string toCheck;
  187|       |
  188|      1|    send_receive(s, key, key);
  189|      1|    toCheck = send_receive(s, "ROOT", key);
  190|      1|    EXPECT_STREQ(toCheck.c_str(), "OK you are ROOT");
  191|       |
  192|      1|    std::cout << "odebrano4: " << toCheck << std::endl;
  193|      1|    std::cout << "odebrano5: " << send_receive(s, "iDom lock", key) << std::endl;
  194|       |
  195|      1|    toCheck = send_receive(s, "exit", key);
  196|       |
  197|      1|    std::cout << "odebrano8: " << toCheck << std::endl;
  198|      1|    EXPECT_THAT(toCheck.c_str(), testing::HasSubstr("END"));
  199|       |
  200|      1|    close(s);
  201|       |
  202|      1|    useful_F::workServer = false;
  203|      1|    shutdown(s, SHUT_RDWR);
  204|       |
  205|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  206|       |
  207|      1|    toCheck = test_context.iDomAlarm.showAlarm();
  208|      1|    EXPECT_STREQ(toCheck.c_str(), "88756: 433MHz equipment not found first\n");
  209|      1|}
  210|       |
  211|       |TEST_F(bit_fixture, socket_close_server_command)
  212|      1|{
  213|       |
  214|      1|    start_iDomServer();
  215|       |
  216|      1|    struct sockaddr_in serwer =
  217|      1|        {
  218|      1|            .sin_family = AF_INET,
  219|      1|            .sin_port = htons(8833)};
  220|       |
  221|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  222|       |
  223|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  224|       |
  225|      1|    sleep(1);
  226|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  227|      1|    ASSERT_EQ(connectStatus, 0);
  228|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  229|       |
  230|      1|    auto key = useful_F::RSHash();
  231|      1|    std::string toCheck;
  232|       |
  233|      1|    send_receive(s, key, key);
  234|      1|    toCheck = send_receive(s, "ROOT", key);
  235|      1|    EXPECT_STREQ(toCheck.c_str(), "OK you are ROOT");
  236|       |
  237|      1|    std::cout << "odebrano4: " << toCheck << std::endl;
  238|       |
  239|      1|    EXPECT_TRUE(useful_F::workServer);
  240|      1|    toCheck = send_receive(s, "program stop", key);
  241|       |
  242|      1|    std::cout << "odebrano8: " << toCheck << std::endl;
  243|      1|    EXPECT_THAT(toCheck.c_str(), testing::HasSubstr("CLOSE"));
  244|       |
  245|      1|    close(s);
  246|      1|    shutdown(s, SHUT_RDWR);
  247|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  248|      1|    EXPECT_FALSE(useful_F::workServer);
  249|      1|    EXPECT_EQ(test_context.iDomProgramState, iDomStateEnum::CLOSE);
  250|      1|}
  251|       |
  252|       |TEST_F(bit_fixture, socket_reload_server_command)
  253|      1|{
  254|       |
  255|      1|    start_iDomServer();
  256|       |
  257|      1|    struct sockaddr_in serwer =
  258|      1|        {
  259|      1|            .sin_family = AF_INET,
  260|      1|            .sin_port = htons(8833)};
  261|       |
  262|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  263|       |
  264|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  265|       |
  266|      1|    sleep(1);
  267|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  268|      1|    ASSERT_EQ(connectStatus, 0);
  269|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  270|       |
  271|      1|    auto key = useful_F::RSHash();
  272|      1|    std::string toCheck;
  273|       |
  274|      1|    send_receive(s, key, key);
  275|      1|    toCheck = send_receive(s, "ROOT", key);
  276|      1|    EXPECT_STREQ(toCheck.c_str(), "OK you are ROOT");
  277|       |
  278|      1|    std::cout << "odebrano4: " << toCheck << std::endl;
  279|       |
  280|      1|    EXPECT_TRUE(useful_F::workServer);
  281|      1|    toCheck = send_receive(s, "program reload hard", key);
  282|       |
  283|      1|    std::cout << "odebrano8: " << toCheck << std::endl;
  284|      1|    EXPECT_THAT(toCheck.c_str(), testing::HasSubstr("CLOSE"));
  285|       |
  286|      1|    close(s);
  287|      1|    shutdown(s, SHUT_RDWR);
  288|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  289|      1|    EXPECT_FALSE(useful_F::workServer);
  290|      1|    EXPECT_EQ(test_context.iDomProgramState, iDomStateEnum::HARD_RELOAD);
  291|      1|}
  292|       |
  293|       |TEST_F(bit_fixture, socket_reboot_rasp_command)
  294|      1|{
  295|       |
  296|      1|    start_iDomServer();
  297|       |
  298|      1|    struct sockaddr_in serwer =
  299|      1|        {
  300|      1|            .sin_family = AF_INET,
  301|      1|            .sin_port = htons(8833)};
  302|       |
  303|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  304|       |
  305|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  306|       |
  307|      1|    sleep(1);
  308|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  309|      1|    ASSERT_EQ(connectStatus, 0);
  310|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  311|       |
  312|      1|    auto key = useful_F::RSHash();
  313|      1|    std::string toCheck;
  314|       |
  315|      1|    send_receive(s, key, key);
  316|      1|    toCheck = send_receive(s, "ROOT", key);
  317|      1|    EXPECT_STREQ(toCheck.c_str(), "OK you are ROOT");
  318|       |
  319|      1|    std::cout << "odebrano4: " << toCheck << std::endl;
  320|       |
  321|      1|    EXPECT_TRUE(useful_F::workServer);
  322|      1|    toCheck = send_receive(s, "program raspberry reboot", key);
  323|       |
  324|      1|    std::cout << "odebrano8: " << toCheck << std::endl;
  325|      1|    EXPECT_THAT(toCheck.c_str(), testing::HasSubstr("command done with exitcode: 0"));
  326|       |
  327|      1|    close(s);
  328|      1|    shutdown(s, SHUT_RDWR);
  329|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  330|      1|    EXPECT_FALSE(useful_F::workServer);
  331|      1|}
  332|       |
  333|       |TEST_F(bit_fixture, socket_wrong_key_after_while)
  334|      1|{
  335|       |
  336|      1|    start_iDomServer();
  337|       |
  338|      1|    struct sockaddr_in serwer =
  339|      1|        {
  340|      1|            .sin_family = AF_INET,
  341|      1|            .sin_port = htons(8833)};
  342|       |
  343|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  344|       |
  345|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  346|       |
  347|      1|    sleep(1);
  348|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  349|      1|    ASSERT_EQ(connectStatus, 0);
  350|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  351|       |
  352|      1|    auto key = useful_F::RSHash();
  353|      1|    std::string toCheck;
  354|       |
  355|      1|    send_receive(s, key, key);
  356|      1|    toCheck = send_receive(s, "ROOT", key);
  357|      1|    EXPECT_STREQ(toCheck.c_str(), "OK you are ROOT");
  358|       |
  359|      1|    std::cout << "odebrano4: " << toCheck << std::endl;
  360|      1|    std::cout << "odebrano5: " << send_receive(s, "help", key) << std::endl;
  361|       |
  362|      1|    EXPECT_ANY_THROW(send_receive(s, "test", "fake"));
  363|       |
  364|      1|    close(s);
  365|       |
  366|      1|    useful_F::workServer = false;
  367|      1|    shutdown(s, SHUT_RDWR);
  368|       |
  369|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  370|      1|}
  371|       |
  372|       |TEST_F(bit_fixture, socket_no_space_left_on_server)
  373|      1|{
  374|       |
  375|      1|    for (auto &i : *test_context.main_THREAD_arr)
  376|     10|    {
  377|     10|        i.thread_socket = 1;
  378|     10|    }
  379|      1|    start_iDomServer();
  380|       |
  381|      1|    struct sockaddr_in serwer =
  382|      1|        {
  383|      1|            .sin_family = AF_INET,
  384|      1|            .sin_port = htons(8833)};
  385|       |
  386|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  387|       |
  388|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  389|       |
  390|      1|    sleep(1);
  391|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  392|      1|    ASSERT_EQ(connectStatus, 0);
  393|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  394|       |
  395|      1|    auto key = useful_F::RSHash();
  396|      1|    std::string toCheck;
  397|       |
  398|      1|    EXPECT_ANY_THROW(send_receive(s, key, key));
  399|       |    ////////////////////////////////////////////////// one free slot
  400|      1|    test_context.main_THREAD_arr->at(3).thread_socket = 0;
  401|      1|    const int s2 = socket(serwer.sin_family, SOCK_STREAM, 0);
  402|      1|    connectStatus = connect(s2, (struct sockaddr *)&serwer, sizeof(serwer));
  403|      1|    ASSERT_EQ(connectStatus, 0);
  404|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  405|       |
  406|      1|    EXPECT_NO_THROW(send_receive(s2, key, key));
  407|       |
  408|      1|    toCheck = send_receive(s2, "ROOT", key);
  409|      1|    EXPECT_STREQ(toCheck.c_str(), "OK you are ROOT");
  410|       |
  411|      1|    std::cout << "odebrano4: " << toCheck << std::endl;
  412|      1|    std::cout << "odebrano5: " << send_receive(s2, "help", key) << std::endl;
  413|       |
  414|      1|    toCheck = send_receive(s2, "exit", key);
  415|       |
  416|      1|    std::cout << "odebrano8: " << toCheck << std::endl;
  417|      1|    EXPECT_THAT(toCheck.c_str(), testing::HasSubstr("END"));
  418|       |
  419|      1|    useful_F::workServer = false;
  420|      1|    close(s);
  421|      1|    close(s2);
  422|      1|    shutdown(s, SHUT_RDWR);
  423|      1|    shutdown(s2, SHUT_RDWR);
  424|      1|    for (auto &i : *test_context.main_THREAD_arr)
  425|     10|    {
  426|     10|        i.thread_socket = 0;
  427|     10|    }
  428|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  429|      1|}
  430|       |
  431|       |TEST_F(bit_fixture, socket_send_key_fast_disconnect)
  432|      1|{
  433|      1|    start_iDomServer();
  434|       |
  435|      1|    struct sockaddr_in serwer =
  436|      1|        {
  437|      1|            .sin_family = AF_INET,
  438|      1|            .sin_port = htons(8833)};
  439|       |
  440|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  441|       |
  442|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  443|       |
  444|      1|    sleep(1);
  445|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  446|      1|    ASSERT_EQ(connectStatus, 0);
  447|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  448|       |
  449|      1|    std::string key = useful_F::RSHash();
  450|      1|    std::string msgKey(key);
  451|      1|    crypto(msgKey, key, true);
  452|      1|    int r = send(s, msgKey.c_str(), msgKey.size(), 0);
  453|       |
  454|      1|    close(s);
  455|       |
  456|      1|    useful_F::workServer = false;
  457|      1|    shutdown(s, SHUT_RDWR);
  458|       |
  459|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  460|      1|    EXPECT_EQ(r, key.size());
  461|      1|}
  462|       |
  463|       |TEST_F(bit_fixture, socket_connection_wrong_key_fast_disconnect)
  464|      1|{
  465|      1|    start_iDomServer();
  466|       |
  467|      1|    struct sockaddr_in serwer =
  468|      1|        {
  469|      1|            .sin_family = AF_INET,
  470|      1|            .sin_port = htons(8833)};
  471|       |
  472|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  473|       |
  474|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  475|       |
  476|      1|    sleep(1);
  477|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  478|      1|    ASSERT_EQ(connectStatus, 0);
  479|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  480|       |
  481|      1|    std::string fakeKey = "fake";
  482|      1|    int r = send(s, fakeKey.c_str(), fakeKey.size(), 0);
  483|      1|    EXPECT_EQ(r, 4);
  484|      1|    close(s);
  485|       |
  486|      1|    useful_F::workServer = false;
  487|      1|    shutdown(s, SHUT_RDWR);
  488|       |
  489|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  490|      1|}
  491|       |
  492|       |TEST_F(bit_fixture, socket_connection_wrong_key)
  493|      1|{
  494|      1|    start_iDomServer();
  495|       |
  496|      1|    struct sockaddr_in serwer =
  497|      1|        {
  498|      1|            .sin_family = AF_INET,
  499|      1|            .sin_port = htons(8833)};
  500|       |
  501|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  502|       |
  503|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  504|       |
  505|      1|    sleep(1);
  506|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  507|      1|    ASSERT_EQ(connectStatus, 0);
  508|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  509|       |
  510|      1|    auto key = useful_F::RSHash();
  511|      1|    std::string fakeKey = key + "fake";
  512|      1|    std::string toCheck = send_receive(s, fakeKey, key);
  513|      1|    std::cout << "odebrano: " << toCheck << std::endl;
  514|      1|    EXPECT_STREQ(toCheck.c_str(), "\nFAIL\n");
  515|       |
  516|      1|    close(s);
  517|       |
  518|      1|    useful_F::workServer = false;
  519|      1|    shutdown(s, SHUT_RDWR);
  520|       |
  521|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  522|      1|}
  523|       |
  524|       |TEST_F(bit_fixture, socket_connection_http)
  525|      1|{
  526|      1|    start_iDomServer();
  527|       |
  528|      1|    struct sockaddr_in serwer =
  529|      1|        {
  530|      1|            .sin_family = AF_INET,
  531|      1|            .sin_port = htons(8833)};
  532|       |
  533|      1|    inet_pton(serwer.sin_family, ipAddress, &serwer.sin_addr);
  534|       |
  535|      1|    const int s = socket(serwer.sin_family, SOCK_STREAM, 0);
  536|       |
  537|      1|    sleep(1);
  538|      1|    int connectStatus = connect(s, (struct sockaddr *)&serwer, sizeof(serwer));
  539|      1|    ASSERT_EQ(connectStatus, 0);
  540|      1|    std::cout << "connect status: " << connectStatus << std::endl;
  541|       |
  542|      1|    std::string httpMsg = R"(
  543|      1| POST /dupa HTTP/1.1
  544|      1|Host: cyniu88.no-ip.pl:8833
  545|      1|User-Agent: ESP8266HTTPClient
  546|      1|Accept-Encoding: identity;q=1,chunked;q=0.1,*;q=0
  547|      1|Connection: keep-alive
  548|      1|Content-Type: iDom/logging
  549|      1|Content-Length: 43
  550|      1|
  551|      1|{"msg":"start Rolet Rydzyka","millis":9899}
  552|      1|
  553|      1|)";
  554|      1|    send(s, httpMsg.c_str(), httpMsg.size(), 0);
  555|       |
  556|      1|    std::this_thread::sleep_for(100ms);
  557|      1|    char buffer_new[10000];
  558|      1|    auto recC = recv(s, buffer_new, sizeof(buffer_new), 0);
  559|      1|    std::cout << "!!! odebrano: size " << recC << "###" << std::endl;
  560|       |
  561|      1|    std::string toCheck;
  562|  1.99k|    for (int i = 0; i < recC; ++i)
  563|  1.99k|    {
  564|  1.99k|        toCheck.push_back(buffer_new[i]);
  565|  1.99k|    }
  566|      1|    std::cout << "odebrano: " << toCheck << std::endl;
  567|      1|    EXPECT_THAT(toCheck, ::testing::HasSubstr("HTTP/1.1 200 OK"));
  568|       |
  569|      1|    close(s);
  570|       |
  571|      1|    useful_F::workServer = false;
  572|      1|    shutdown(s, SHUT_RDWR);
  573|       |
  574|      1|    iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  575|      1|}
  576|       |
  577|       |TEST_F(bit_fixture, buderus_mqtt_command_from_boiler)
  578|      1|{
  579|       |
  580|      1|    EXPECT_FALSE(test_context.ptr_buderus->isHeatingActiv());
  581|       |
  582|      1|    test_context.mqttHandler->putToReceiveQueue("iDom-client/buderus/ems-esp/heating_active", "1");
  583|      1|    bit_Tasker->runTasker();
  584|      1|    EXPECT_TRUE(test_context.ptr_buderus->isHeatingActiv());
  585|       |
  586|      1|    test_context.mqttHandler->putToReceiveQueue("iDom-client/buderus/ems-esp/heating_active", "0");
  587|      1|    bit_Tasker->runTasker();
  588|      1|    EXPECT_FALSE(test_context.ptr_buderus->isHeatingActiv());
  589|       |
  590|      1|    test_context.mqttHandler->putToReceiveQueue("iDom-client/buderus/ems-esp/heating_active", "1");
  591|      1|    bit_Tasker->runTasker();
  592|      1|    EXPECT_TRUE(test_context.ptr_buderus->isHeatingActiv());
  593|       |
  594|      1|    test_context.mqttHandler->putToReceiveQueue("iDom-client/buderus/ems-esp/heating_active", "offline");
  595|      1|    bit_Tasker->runTasker();
  596|      1|    EXPECT_FALSE(test_context.ptr_buderus->isHeatingActiv());
  597|       |    /////////////////////////////////  boiler data //////////////////////////////////////////////////////
  598|      1|     std::string test_boilerData = R"({"heatingActive":"off","tapwaterActive":"off","selFlowTemp":5,"selBurnPow":0,"curBurnPow":0,"heatingPumpMod":0,"outdoorTemp":11.9,"curFlowTemp":23.5,"burnGas":"off","flameCurr":0,"heatingPump":"off","fanWork":"off","ignWork":"off","heatingActivated":"on","heatingTemp":35,"pumpModMax":100,"pumpModMin":10,"pumpDelay":3,"burnMinPeriod":10,"burnMinPower":0,"burnMaxPower":71,"boilHystOn":-6,"boilHystOff":6,"burnStarts":3721,"burnWorkMin":372217,"heatWorkMin":337732,"UBAuptime":1683134,"serviceCode":"0H","serviceCodeNumber":203,"lastCode":"6L(229) 23.12.2021 20:24","maintenanceMessage":"-","maintenance":"off"})";
  599|       |
  600|      1|    test_context.mqttHandler->putToReceiveQueue("iDom-client/buderus/ems-esp/boiler_data", test_boilerData);
  601|      1|    bit_Tasker->runTasker();
  602|      1|    auto ret = test_context.ptr_buderus->getDump();
  603|      1|    std::cout << ret << std::endl;
  604|      1|    EXPECT_EQ(test_context.ptr_buderus->getOutdoorTemp(), 11.9);
  605|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("1683134"));
  606|       |
  607|       |
  608|       |    /////////////////////////////////  boiler data ww //////////////////////////////////////////////////////
  609|      1|    std::string test_boilerData_ww = R"({"wWComfort":"Eco","wWSelTemp":60,"wWSetTemp":10,"wWDisinfectionTemp":70,"wWType":"buffer","wWChargeType":"3-way valve","wWCircPump":"on","wWCircPumpMode":"continuous","wWCirc":"off","wWCurTemp":64,"wWCurTemp2":64,"wWCurFlow":0,"wWStorageTemp2":64,"wWActivated":"on","wWOneTime":"off","wWDisinfecting":"off","wWCharging":"off","wWRecharging":"off","wWTempOK":"on","wWActive":"off","wWHeat":"off","wWStarts":1762,"wWMaxPower":100,"wWWorkM":34502})";
  610|       |
  611|      1|    test_context.mqttHandler->putToReceiveQueue("iDom-client/buderus/ems-esp/boiler_data_ww", test_boilerData_ww);
  612|      1|    bit_Tasker->runTasker();
  613|      1|    ret = test_context.ptr_buderus->getDump();
  614|      1|    std::cout << ret << std::endl;
  615|      1|    EXPECT_EQ(test_context.ptr_buderus->getBoilerTemp(), 64);
  616|       |
  617|      1|    test_context.mqttHandler->putToReceiveQueue("iDom-client/buderus/ems-esp/thermostat_data",
  618|      1|                                                R"({"some":"data"})");
  619|      1|    bit_Tasker->runTasker();
  620|      1|    ret = test_context.ptr_buderus->getDump();
  621|      1|    std::cout << ret << std::endl;
  622|      1|    EXPECT_THAT(ret, ::testing::HasSubstr(R"(some":)"));
  623|      1|}
  624|       |
  625|       |TEST_F(bit_fixture, buderus_mqtt_command_from_boiler_wrong_json_format)
  626|      1|{
  627|       |    /////////////////////////////////  boiler data //////////////////////////////////////////////////////
  628|      1|    std::string test_boilerData = "not json";
  629|      1|    test_context.mqttHandler->putToReceiveQueue("iDom-client/buderus/ems-esp/boiler_data", test_boilerData);
  630|      1|    bit_Tasker->runTasker();
  631|      1|    auto ret = test_context.ptr_buderus->getDump();
  632|      1|    std::cout << ret << std::endl;
  633|      1|    ret = test_context.iDomAlarm.showAlarm();
  634|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("buderus boile_data - wrong JSON format!"));
  635|      1|}
  636|       |
  637|       |TEST_F(bit_fixture, tasker_no_action)
  638|      1|{
  639|      1|    EXPECT_EQ(256, bit_Tasker->runTasker());
  640|      1|}
  641|       |
  642|       |TEST_F(bit_fixture, mqtt_command)
  643|      1|{
  644|      1|    blockQueue testMPD_Q;
  645|      1|    testMPD_Q._clearAll();
  646|      1|    test_context.mqttHandler->putToReceiveQueue("iDom-client/command", "MPD volume up");
  647|      1|    bit_Tasker->runTasker();
  648|      1|    EXPECT_EQ(1, testMPD_Q._size());
  649|      1|    EXPECT_EQ(testMPD_Q._get(), MPD_COMMAND::VOLUP);
  650|      1|}
  651|       |
  652|       |TEST_F(bit_fixture, mqtt_command_shed)
  653|      1|{
  654|      1|    test_context.lusina.shedConfJson = nlohmann::json::parse(R"({
  655|      1|    "deepSleep":true,
  656|      1|    "howLongDeepSleep":177,
  657|      1|    "fanON":false})");
  658|      1|    test_context.mqttHandler->putToReceiveQueue("shed/put", "MPD volume up");
  659|      1|    bit_Tasker->runTasker();
  660|      1|    test_context.mqttHandler->putToReceiveQueue("shed/put", R"({"temperatura":20.85000038,"ciśnienie":971.899231,"wilgotność":53.17382813,"millis":15273,"bateria":3.896484375,"log":"Found BME280 sensor! Couldn't find PCF8574","fanON":false})");
  661|      1|    bit_Tasker->runTasker();
  662|      1|}
  663|       |
  664|       |TEST_F(bit_fixture, start_iDom_unlock_lock)
  665|      1|{
  666|      1|    EXPECT_FALSE(test_context.satelIntegraHandler->getSatelPTR()->isAlarmArmed());
  667|      1|    test_context.main_iDomTools->unlockHome();
  668|      1|    EXPECT_FALSE(test_context.satelIntegraHandler->getSatelPTR()->isAlarmArmed());
  669|      1|    test_context.main_iDomTools->lockHome();
  670|      1|    EXPECT_TRUE(test_context.satelIntegraHandler->getSatelPTR()->isAlarmArmed());
  671|      1|    test_context.main_iDomTools->unlockHome();
  672|      1|    EXPECT_FALSE(test_context.satelIntegraHandler->getSatelPTR()->isAlarmArmed());
  673|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/HOUSE/TEST/BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |
    4|       |#include "../house_room_handler.h"
    5|       |#include "../../iDom_server_OOP.h"
    6|       |#include "../../functions/functions.h"
    7|       |#include "../../RADIO_433_eq/radio_433_eq.h"
    8|       |#include "../../iDomTools/mock/iDomToolsMock.h"
    9|       |
   10|       |class house_fixture : public testing::Test
   11|       |{
   12|       |public:
   13|       |    house_fixture():testRoomHandler(std::make_unique<house_room_handler>(&test_context)),
   14|       |        test_rec(std::make_shared<RADIO_EQ_CONTAINER>(&test_context)),
   15|       |        main_iDomTools(std::make_shared<iDomToolsMock>())
   16|       |
   17|     12|    {
   18|     12|        std::string cfg("../config/bulb_config.json");
   19|     12|        testRoomHandler->loadConfig(cfg);
   20|       |
   21|     12|        test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("iDomSERVER test");
   22|     12|        test_context.mqttHandler->_subscribed = true;
   23|     12|        useful_F::setStaticData(&test_context);
   24|     12|        test_context.main_iDomTools  = main_iDomTools;
   25|     12|        test_context.main_REC = test_rec;
   26|     12|        test_context.server_settings = &test_server_settings;
   27|     12|        test_context.server_settings->_fb_viber.viberSender = "test sender";
   28|     12|        test_context.server_settings->_fb_viber.viberReceiver = {"R1","R2"};
   29|     12|        test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   30|     12|    }
   31|       |    std::unique_ptr<house_room_handler> testRoomHandler;
   32|       |    thread_context test_context;
   33|       |    std::shared_ptr<RADIO_EQ_CONTAINER> test_rec;
   34|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   35|       |    CONFIG_JSON test_server_settings;
   36|       |
   37|       |};
   38|       |
   39|       |TEST_F(house_fixture, load_config_bulb)
   40|      1|{
   41|      1|    std::string ret = testRoomHandler->getAllInfoJSON().dump(4);
   42|       |
   43|      1|    EXPECT_THAT(ret, testing::HasSubstr(R"(room": "lazienka)"));
   44|      1|}
   45|       |
   46|       |TEST_F(house_fixture, all_on_all_off_in_room)
   47|      1|{
   48|      1|    std::string ret = testRoomHandler->getAllInfoJSON().dump(4);
   49|      1|    EXPECT_THAT(ret, testing::HasSubstr(R"(STATUS": "UNDEFINE")"));
   50|       |
   51|      1|    testRoomHandler->turnOnAllInRoom("pokoj dzieci");
   52|       |
   53|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[226]->getStatus() , STATE::ACTIVE);
   54|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[227]->getStatus() , STATE::ACTIVE);
   55|      1|    ret = testRoomHandler->getAllInfoJSON().dump(4);
   56|      1|    EXPECT_THAT(ret, testing::HasSubstr(R"(STATUS": "ACTIVE")"));
   57|       |
   58|      1|    testRoomHandler->turnOffAllInRoom("pokoj dzieci");
   59|       |
   60|      1|    ret = testRoomHandler->getAllInfoJSON().dump(4);
   61|      1|    EXPECT_THAT(ret, testing::HasSubstr(R"(STATUS": "DEACTIVE")"));
   62|      1|}
   63|       |
   64|       |TEST_F(house_fixture, all_on_all_off_in_unexist_room)
   65|      1|{
   66|      1|    std::string ret = testRoomHandler->getAllInfoJSON().dump(4);
   67|      1|    EXPECT_THAT(ret, testing::HasSubstr(R"(STATUS": "UNDEFINE")"));
   68|       |
   69|      1|    testRoomHandler->turnOnAllInRoom("nie ma go");
   70|      1|}
   71|       |
   72|       |TEST_F(house_fixture, bulb_on_bulb_off)
   73|      1|{
   74|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[226]->getStatus() , STATE::UNDEFINE);
   75|       |
   76|      1|    testRoomHandler->turnOnBulb(226);
   77|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[226]->getStatus() , STATE::ACTIVE);
   78|       |
   79|      1|    testRoomHandler->turnOffBulb(226);
   80|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[226]->getStatus() , STATE::DEACTIVE);
   81|      1|}
   82|       |
   83|      1|TEST_F(house_fixture, bulb_status_from_mqtt) {
   84|       |
   85|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap.at(226)->getStatus(), STATE::UNDEFINE);
   86|       |
   87|      1|    EXPECT_CALL(*main_iDomTools.get(), sendViberMsg("zmiana statusu lampy jedna w pomieszczeniu: pokoj dzieci na ON przyciskiem: -1 czas trwania: 00:00",
   88|      1|                                                    "R1",
   89|      1|                                                    "test sender-light",
   90|      1|                                                    "NULL",
   91|      1|                                                    "NULL"));
   92|      1|    std::string mqttMSG("state;226;-1;1;");
   93|      1|    testRoomHandler->executeCommandFromMQTT(mqttMSG);
   94|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap.at(226)->getStatus(), STATE::ON);
   95|       |
   96|      1|    mqttMSG = "state;226;44;0;";
   97|      1|    testRoomHandler->executeCommandFromMQTT(mqttMSG);
   98|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap.at(226)->getStatus(), STATE::OFF);
   99|       |
  100|      1|    mqttMSG = "state;226;44;1;";
  101|      1|    testRoomHandler->executeCommandFromMQTT(mqttMSG);
  102|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap.at(226)->getStatus(), STATE::ON);
  103|       |
  104|      1|    mqttMSG = "state;226;-1;0;";
  105|      1|    testRoomHandler->executeCommandFromMQTT(mqttMSG);
  106|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap.at(226)->getStatus(), STATE::OFF);
  107|      1|}
  108|       |
  109|       |TEST_F(house_fixture, dingDong)
  110|      1|{
  111|       |   // EXPECT_CALL(*main_iDomTools.get(), sendViberPicture(testing::_,testing::_,testing::_,testing::_,testing::_,testing::_)).Times(2);
  112|      1|    EXPECT_CALL(*main_iDomTools.get(), sendViberMsg("zmiana statusu lampy bulbName w pomieszczeniu: roomName na ON przyciskiem: -1 czas trwania: 00:00",
  113|      1|                                                    "R1",
  114|      1|                                                    "test sender-light",
  115|      1|                                                    "NULL",
  116|      1|                                                    "NULL"));
  117|      1|    EXPECT_CALL(*main_iDomTools.get(), doorbellDingDong());
  118|      1|    std::string mqttMSG("state;88;-1;1;");
  119|      1|    testRoomHandler->executeCommandFromMQTT(mqttMSG);
  120|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap.at(88)->getStatus(), STATE::ON);
  121|      1|}
  122|       |
  123|       |TEST_F(house_fixture, satelSensor)
  124|      1|{
  125|      1|    int bulbID = 127;
  126|      1|    int satelSensorID = 33;
  127|      1|    EXPECT_CALL(*main_iDomTools.get(), isItDay());
  128|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[bulbID]->getStatus() , STATE::UNDEFINE);
  129|       |
  130|      1|    testRoomHandler->turnOffBulb(bulbID);
  131|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[bulbID]->getStatus() , STATE::DEACTIVE);
  132|       |
  133|      1|    testRoomHandler->satelSensorActive(satelSensorID);
  134|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[bulbID]->getStatus() , STATE::ACTIVE);
  135|      1|}
  136|       |
  137|       |TEST_F(house_fixture, satelSensorDouble)
  138|      1|{
  139|      1|    int bulbID = 327;
  140|      1|    int satelSensorID = 37;
  141|      1|    EXPECT_CALL(*main_iDomTools.get(), isItDay()).Times(2);
  142|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[bulbID]->getStatus() , STATE::UNDEFINE);
  143|       |
  144|      1|    testRoomHandler->turnOffBulb(bulbID);
  145|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[bulbID]->getStatus() , STATE::DEACTIVE);
  146|       |
  147|      1|    testRoomHandler->satelSensorActive(satelSensorID);
  148|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[bulbID]->getStatus() , STATE::ACTIVE);
  149|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap[326]->getStatus() , STATE::ACTIVE);
  150|      1|}
  151|       |
  152|       |TEST_F(house_fixture, dump)
  153|      1|{
  154|      1|    std::cout << iDom_API::getDump() << std::endl;
  155|      1|}
  156|       |
  157|       |TEST_F(house_fixture, getStats)
  158|      1|{
  159|      3|    for(auto&a : testRoomHandler->m_roomMap){
  160|      3|        std::cout << a.second->getStatsJSON().dump(4) << std::endl;
  161|      3|    }
  162|      1|}
  163|       |
  164|       |TEST_F(house_fixture, load_config_button)
  165|      1|{
  166|      1|    std::string cfg("../config/button_config.json");
  167|      1|    auto testRoomHandler = std::make_unique<house_room_handler>(&test_context);
  168|      1|    testRoomHandler->loadButtonConfig(cfg);
  169|      1|    CommandHandlerMQTT testCmdHandler;
  170|      1|    testRoomHandler->executeButtonComand(2, "long", &testCmdHandler);
  171|      1|}
  172|       |
  173|       |TEST_F(house_fixture, satelSensorActive)
  174|      1|{
  175|      1|    testRoomHandler->turnOffAllInRoom("lazienka");
  176|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap.at(127)->getStatus(), STATE::DEACTIVE);
  177|       |
  178|      1|    test_context.idom_all_state.houseState = STATE::LOCK;
  179|      1|    EXPECT_CALL(*main_iDomTools.get(), isItDay()).WillOnce(testing::Return(false));
  180|      1|    EXPECT_CALL(*main_iDomTools.get(), sendViberMsg("alarm w pokoju lazienka",
  181|      1|                                                    "R1",
  182|      1|                                                    "Satel Alarm",
  183|      1|                                                    "NULL",
  184|      1|                                                    "NULL"));
  185|      1|    testRoomHandler->m_roomMap.at("lazienka")->satelSensorActive();
  186|      1|    EXPECT_EQ(testRoomHandler->m_lightingBulbMap.at(127)->getStatus(), STATE::ACTIVE);
  187|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/HOUSE/TEST/house_room_handler_stub.h:
    1|       |#include "../house_room_handler.h"
    2|       |
    3|       |class house_room_handler_stub : public house_room_handler
    4|       |
    5|       |{
    6|       |public:
    7|       |    explicit house_room_handler_stub(thread_context *k)
    8|     68|        : house_room_handler(k){};
    9|      0|    void onLock(){};
   10|      0|    void onUnlock(){};
   11|      0|    void onSunset(){};
   12|      0|    void onSunrise(){};
   13|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/HOUSE/house_room_handler.cpp:
    1|       |#include <fstream>
    2|       |
    3|       |#include "house_room_handler.h"
    4|       |#include "json.hpp"
    5|       |#include "../functions/functions.h"
    6|       |#include "../iDomTools/idomtools_interface.h"
    7|       |
    8|       |std::string house_room_handler::m_mqttPublishTopic = "swiatlo/output/";
    9|       |
   10|       |house_room_handler::house_room_handler(thread_context *context)
   11|     97|{
   12|     97|    m_bulbStatus.SetCapacity(100);
   13|     97|    m_className.insert(0, typeid(this).name());
   14|     97|    this->context = context;
   15|     97|    iDom_API::addToMap(m_className, this);
   16|     97|}
   17|       |
   18|       |house_room_handler::~house_room_handler()
   19|     97|{
   20|     97|    iDom_API::removeFromMap(m_className);
   21|     97|}
   22|       |
   23|       |void house_room_handler::loadConfig(const std::string &configPath)
   24|     28|{
   25|     28|    std::ifstream i(configPath);
   26|     28|    nlohmann::json j;
   27|     28|    i >> j;
   28|     28|    for (const auto &element : j)
   29|     84|    {
   30|     84|        std::string roomName = element.at("name").get<std::string>();
   31|     84|        std::vector<int> satelSensorID = element.at("satelSensorID").get<std::vector<int>>();
   32|     84|        std::map<int, std::shared_ptr<light_bulb>> lightingBulbMap;
   33|       |
   34|     84|        for (const auto &jj : element.at("bulb"))
   35|    196|        {
   36|    196|            std::string bulbName = jj.at("bulbName").get<std::string>();
   37|    196|            int bulbID = jj.at("bulbID").get<int>();
   38|    196|            lightingBulbMap.emplace(bulbID, std::make_shared<light_bulb>(roomName, bulbName, bulbID));
   39|    196|            lightingBulbMap[bulbID]->m_satelAlarm = stringToState(jj.at("satelAlarm").get<std::string>());
   40|    196|            lightingBulbMap[bulbID]->m_satelAlarmHowLong = jj.at("howLong").get<int>();
   41|       |
   42|    196|            for (const auto &kk : jj.at("switchID"))
   43|    196|            {
   44|    196|                lightingBulbMap.at(bulbID)->addBulbPin(kk.get<int>());
   45|    196|            }
   46|    196|            if (not m_lightingBulbMap.contains(bulbID))
   47|    196|            {
   48|    196|                m_lightingBulbMap[bulbID] = lightingBulbMap[bulbID];
   49|    196|            }
   50|      0|            else
   51|      0|            {
   52|      0|                log_file_mutex.mutex_lock();
   53|      0|                log_file_cout << ERROR << "sprawdz konfig zarowek! " << bulbID << " już istnieje" << std::endl;
   54|      0|                log_file_mutex.mutex_unlock();
   55|      0|            }
   56|    196|        }
   57|     84|        m_roomMap.emplace(roomName, std::make_shared<ROOM>(satelSensorID, roomName, lightingBulbMap));
   58|     84|        for (auto number : satelSensorID)
   59|    112|        {
   60|    112|            m_satelIdMap[number] = m_roomMap[roomName];
   61|    112|        }
   62|     84|    }
   63|     28|}
   64|       |
   65|       |void house_room_handler::loadButtonConfig(const std::string &configPath)
   66|      1|{
   67|      1|    nlohmann::json jj;
   68|      1|    std::ifstream i(configPath);
   69|      1|    i >> jj;
   70|       |
   71|      1|    for (const auto &element : jj)
   72|      2|    {
   73|      2|        auto buttonID = element.at("buttonID").get<int>();
   74|      2|        if (element.contains("long"))
   75|      2|        {
   76|      2|            for (const auto &kk : element.at("long"))
   77|      6|            {
   78|      6|                m_buttonConfig[buttonID]["long"].push_back(kk.get<std::string>());
   79|      6|            }
   80|      2|        }
   81|      2|        if (element.contains("double"))
   82|      1|        {
   83|      1|            for (const auto &kk : element.at("double"))
   84|      3|            {
   85|      3|                m_buttonConfig[buttonID]["double"].push_back(kk.get<std::string>());
   86|      3|            }
   87|      1|        }
   88|      2|    }
   89|      1|}
   90|       |
   91|       |void house_room_handler::turnOnAllInRoom(const std::string &roomName)
   92|      6|{
   93|      6|    if (not m_roomMap.contains(roomName))
   94|      1|    {
   95|      1|        log_file_mutex.mutex_lock();
   96|      1|        log_file_cout << ERROR << "sprawdz konfig zarowek! Pokój \"" << roomName << "\" nie istnieje" << std::endl;
   97|      1|        log_file_mutex.mutex_unlock();
   98|      1|        return;
   99|      1|    }
  100|      5|    for (auto &a : m_roomMap[roomName]->m_lightingBulbMap)
  101|     12|    {
  102|     12|        a.second->on([](const std::string &name)
  103|     12|                     { useful_F::myStaticCtx->mqttHandler->publish(m_mqttPublishTopic, name); });
  104|     12|    }
  105|      5|}
  106|       |
  107|       |void house_room_handler::turnOffAllInRoom(const std::string &roomName)
  108|      9|{
  109|      9|    if (not m_roomMap.contains(roomName))
  110|      0|    {
  111|      0|        log_file_mutex.mutex_lock();
  112|      0|        log_file_cout << ERROR << "sprawdz konfig zarowek! Pokój \"" << roomName << "\" nie istnieje" << std::endl;
  113|      0|        log_file_mutex.mutex_unlock();
  114|      0|        return;
  115|      0|    }
  116|      9|    for (auto &a : m_roomMap[roomName]->m_lightingBulbMap)
  117|     22|    {
  118|     22|        a.second->off([](const std::string &name)
  119|     22|                      { useful_F::myStaticCtx->mqttHandler->publish(m_mqttPublishTopic, name); });
  120|     22|    }
  121|      9|}
  122|       |
  123|       |void house_room_handler::changeAllInRoom(const std::string &roomName)
  124|      0|{
  125|      0|    if (not m_roomMap.contains(roomName))
  126|      0|    {
  127|      0|        log_file_mutex.mutex_lock();
  128|      0|        log_file_cout << ERROR << "sprawdz konfig zarowek! Pokój \"" << roomName << "\" nie istnieje" << std::endl;
  129|      0|        log_file_mutex.mutex_unlock();
  130|      0|        return;
  131|      0|    }
  132|      0|    for (auto &a : m_roomMap[roomName]->m_lightingBulbMap)
  133|      0|    {
  134|      0|        a.second->change([](const std::string &name)
  135|      0|                         { useful_F::myStaticCtx->mqttHandler->publish(m_mqttPublishTopic, name); });
  136|      0|    }
  137|      0|}
  138|       |
  139|       |void house_room_handler::turnOnAllBulb()
  140|      1|{
  141|      1|    for (auto &b : m_roomMap)
  142|      3|    {
  143|      3|        turnOnAllInRoom(b.second->m_name);
  144|      3|    }
  145|      1|}
  146|       |
  147|       |void house_room_handler::turnOffAllBulb()
  148|      2|{
  149|      2|    for (auto &b : m_roomMap)
  150|      6|    {
  151|      6|        turnOffAllInRoom(b.second->m_name);
  152|      6|    }
  153|      2|}
  154|       |
  155|       |void house_room_handler::turnOnBulb(const int bulbID)
  156|      3|{
  157|      3|    m_lightingBulbMap.at(bulbID)->on([](const std::string &name)
  158|      3|                                     { useful_F::myStaticCtx->mqttHandler->publish(m_mqttPublishTopic, name); });
  159|      3|}
  160|       |
  161|       |void house_room_handler::turnOffBulb(const int bulbID)
  162|      4|{
  163|      4|    m_lightingBulbMap.at(bulbID)->off([](const std::string &name)
  164|      4|                                      { useful_F::myStaticCtx->mqttHandler->publish(m_mqttPublishTopic, name); });
  165|      4|}
  166|       |
  167|       |void house_room_handler::turnChangeBulb(const int bulbID)
  168|      2|{
  169|      2|    m_lightingBulbMap.at(bulbID)->change([](const std::string &name)
  170|      2|                                         { useful_F::myStaticCtx->mqttHandler->publish(m_mqttPublishTopic, name); });
  171|      2|}
  172|       |
  173|       |void house_room_handler::lockAllRoom()
  174|      0|{
  175|       |    //  context->mqttHandler->publish("lkoko","kokok");
  176|      0|}
  177|       |
  178|       |void house_room_handler::unlockAllRoom()
  179|      0|{
  180|       |    //    for(auto& a : m_roomMap){
  181|       |    //        a.second->unlock();
  182|       |    //    }
  183|      0|}
  184|       |
  185|       |nlohmann::json house_room_handler::getAllInfoJSON()
  186|     14|{
  187|     14|    nlohmann::json jj;
  188|     14|#ifdef BT_TEST
  189|     14|    std::cout << "mapa m_lightingBulbMap size: " << m_lightingBulbMap.size() << std::endl;
  190|     14|#endif
  191|       |
  192|     14|    for (auto &a : m_lightingBulbMap)
  193|     99|    {
  194|     99|        nlohmann::json roomJJ;
  195|     99|        roomJJ["STATE"] = stateToString(a.second->getLockState());
  196|     99|        roomJJ["STATUS"] = stateToString(a.second->getStatus());
  197|     99|        roomJJ["room"] = a.second->getRoomName();
  198|     99|        roomJJ["bulb ID"] = a.second->getID();
  199|     99|        roomJJ["bulb name"] = a.second->getBulbName();
  200|     99|        roomJJ["bulb counter"] = a.second->getBulbCounter();
  201|     99|        roomJJ["switch"] = a.second->getBulbPin();
  202|     99|        roomJJ["last working time"] = a.second->howLongBulbOn().getString();
  203|     99|        roomJJ["satelAlarm"] = stateToString(a.second->m_satelAlarm);
  204|     99|        roomJJ["howLong"] = a.second->m_satelAlarmHowLong;
  205|     99|        roomJJ["satelSensorAlarmUnixTime"] = Clock::unixTimeToString(a.second->getSatelSensorAlarmUnixTime());
  206|     99|        try
  207|     99|        {
  208|     99|            roomJJ["satelCounter"] = m_roomMap.at(a.second->getRoomName())->satelSensorCounter;
  209|     99|        }
  210|     99|        catch (...)
  211|     99|        {
  212|      1|            roomJJ["satelCounter"] = -1;
  213|      1|            log_file_mutex.mutex_lock();
  214|      1|            log_file_cout << ERROR << "sprawdz konfig pokojow! " << a.second->getRoomName() << " nie istnieje" << std::endl;
  215|      1|            log_file_mutex.mutex_unlock();
  216|      1|        }
  217|     99|        jj.push_back(roomJJ);
  218|     99|    }
  219|     14|    return jj;
  220|     14|}
  221|       |
  222|       |nlohmann::json house_room_handler::getInfoJSON_allON()
  223|      1|{
  224|      1|    nlohmann::json jj;
  225|       |
  226|      1|#ifdef BT_TEST
  227|      1|    std::cout << "mapa m_lightingBulbMap size: " << m_lightingBulbMap.size() << std::endl;
  228|      1|#endif
  229|       |
  230|      1|    for (auto &a : m_lightingBulbMap)
  231|      7|    {
  232|      7|        if (a.second->getStatus() == STATE::ON or a.second->getStatus() == STATE::ACTIVE)
  233|      1|        {
  234|      1|            nlohmann::json roomJJ;
  235|      1|            roomJJ["STATE"] = stateToString(a.second->getLockState());
  236|      1|            roomJJ["STATUS"] = stateToString(a.second->getStatus());
  237|      1|            roomJJ["room"] = a.second->getRoomName();
  238|      1|            roomJJ["bulb ID"] = a.second->getID();
  239|      1|            roomJJ["bulb name"] = a.second->getBulbName();
  240|      1|            roomJJ["bulb counter"] = a.second->getBulbCounter();
  241|      1|            roomJJ["switch"] = a.second->getBulbPin();
  242|      1|            roomJJ["last working time"] = a.second->howLongBulbOn().getString();
  243|      1|            roomJJ["satelSensorAlarmUnixTime"] = Clock::unixTimeToString(a.second->getSatelSensorAlarmUnixTime());
  244|      1|            try
  245|      1|            {
  246|      1|                roomJJ["satelCounter"] = m_roomMap.at(a.second->getRoomName())->satelSensorCounter;
  247|      1|            }
  248|      1|            catch (...)
  249|      1|            {
  250|      0|                roomJJ["satelCounter"] = -1;
  251|      0|                log_file_mutex.mutex_lock();
  252|      0|                log_file_cout << ERROR << "sprawdz konfig pokojow! " << a.second->getRoomName() << " nie istnieje" << std::endl;
  253|      0|                log_file_mutex.mutex_unlock();
  254|      0|            }
  255|      1|            jj.push_back(roomJJ);
  256|      1|        }
  257|      7|    }
  258|      1|    return jj;
  259|      1|}
  260|       |
  261|       |void house_room_handler::executeCommandFromMQTT(const std::string &msg)
  262|     15|{
  263|     15|    try
  264|     15|    {
  265|     15|        auto vv = useful_F::split(msg, ';');
  266|     15|        int bulbID = std::stoi(vv.at(1));
  267|     15|        int bulbState = std::stoi(vv.at(3));
  268|       |        // DingDong  dzownek
  269|     15|        if (bulbID == 88 and bulbState == 1)
  270|      1|        {
  271|      1|            context->main_iDomTools->doorbellDingDong();
  272|      1|            useful_F_libs::httpPost("http://cyniu88.no-ip.pl/cgi-bin/dzwonek.sh", 10);
  273|       |            // context->main_iDomTools->sendViberPicture("DZWONEK do drzwi!",
  274|       |            //                                           "https://cyniu88.no-ip.pl/dzwonek/wejscie.jpg",
  275|       |            //                                           context->server_settings->_fb_viber.viberReceiver.at(0),
  276|       |            //                                           context->server_settings->_fb_viber.viberSender); // inform  door bell has been pressed
  277|       |
  278|       |            // context->main_iDomTools->sendViberPicture("wjazd",
  279|       |            //                                           "https://cyniu88.no-ip.pl/dzwonek/wjazd.jpg",
  280|       |            //                                           context->server_settings->_fb_viber.viberReceiver.at(0),
  281|       |            //                                           context->server_settings->_fb_viber.viberSender); // inform  door bell has been pressed
  282|      1|        }
  283|     15|        if (vv.at(0) == "state")
  284|     14|        {
  285|     14|            if (not m_lightingBulbMap.contains(bulbID))
  286|      2|            {
  287|      2|                m_lightingBulbMap.emplace(bulbID, std::make_shared<light_bulb>("roomName", "bulbName", bulbID));
  288|      2|            }
  289|       |
  290|     14|            STATE state;
  291|     14|            bool bState;
  292|       |
  293|     14|            if (bulbState == 1)
  294|      8|            {
  295|      8|                state = STATE::ON;
  296|      8|                bState = true;
  297|      8|            }
  298|      6|            else
  299|      6|            {
  300|      6|                state = STATE::OFF;
  301|      6|                bState = false;
  302|      6|            }
  303|       |
  304|     14|            m_lightingBulbMap.at(bulbID)->setStatus(state);
  305|       |            // set state
  306|     14|            std::string name = m_lightingBulbMap.at(bulbID)->getRoomName();
  307|     14|            name.append("_");
  308|     14|            name.append(m_lightingBulbMap.at(bulbID)->getBulbName());
  309|       |
  310|       |            // put info about bulb
  311|     14|            m_bulbStatus.Put({name, bState, Clock::getTimestamp()});
  312|       |            
  313|     14|            context->main_iDomStatus->setObjectState(name, state);
  314|       |
  315|       |            // TODO temporary added viber notifiction
  316|     14|            auto time = Clock::getUnixTime() - m_lastNotifyUnixTime;
  317|     14|            if (context->idom_all_state.alarmSatelState == STATE::ARMED or
  318|     14|                time > 600)
  319|      7|            {
  320|      7|                m_lastNotifyUnixTime += time;
  321|      7|                std::stringstream str_buf;
  322|      7|                str_buf << "zmiana statusu lampy " << m_lightingBulbMap.at(bulbID)->getBulbName()
  323|      7|                        << " w pomieszczeniu: " << m_lightingBulbMap.at(bulbID)->getRoomName()
  324|      7|                        << " na " << state
  325|      7|                        << " przyciskiem: " << vv.at(2)
  326|      7|                        << " czas trwania: " << m_lightingBulbMap.at(bulbID)->howLongBulbOn().getString();
  327|      7|                context->main_iDomTools->sendViberMsg(str_buf.str(), context->server_settings->_fb_viber.viberReceiver.at(0),
  328|      7|                                                      context->server_settings->_fb_viber.viberSender + "-light");
  329|      7|            }
  330|     14|        }
  331|     15|    }
  332|     15|    catch (...)
  333|     15|    {
  334|      1|        std::stringstream ret;
  335|      1|        ret << "bład odbioru mqtt light: " << msg;
  336|      1|        context->iDomAlarm.raiseAlarm(122333, ret.str());
  337|       |
  338|      1|        log_file_mutex.mutex_lock();
  339|      1|        log_file_cout << WARNING << ret.str() << std::endl;
  340|      1|        log_file_mutex.mutex_unlock();
  341|      1|    }
  342|     15|}
  343|       |
  344|       |void house_room_handler::executeButtonComand(const unsigned int buttonID,
  345|       |                                             const std::string &action,
  346|       |                                             CommandHandlerMQTT *commandMQTTptr)
  347|      1|{
  348|      1|    if (not m_buttonConfig.contains(buttonID))
  349|      0|    {
  350|      0|        log_file_mutex.mutex_lock();
  351|      0|        log_file_cout << WARNING << "unconfgured button: " << buttonID
  352|      0|                      << " action: " << action << std::endl;
  353|      0|        log_file_mutex.mutex_unlock();
  354|      0|        return; // button not used
  355|      0|    }
  356|      1|    if (not m_buttonConfig.at(buttonID).contains(action))
  357|      0|        return; // action not used
  358|      1|    for (const auto &element : m_buttonConfig.at(buttonID).find(action)->second)
  359|      3|    {
  360|      3|        auto v = useful_F::split(element, ' ');
  361|      3|        commandMQTTptr->run(v, context);
  362|      3|    }
  363|      1|}
  364|       |
  365|       |void house_room_handler::satelSensorActive(int sensorID)
  366|      2|{
  367|      2|    if (sensorID == 1 or sensorID == 10 or sensorID == 3 or sensorID == 2)
  368|      0|    {
  369|      0|        return;
  370|      0|    }
  371|      2|    if (m_satelIdMap.find(sensorID) == m_satelIdMap.end())
  372|      0|    {
  373|      0|        log_file_mutex.mutex_lock();
  374|      0|        log_file_cout << WARNING << "unsupported  satel sensor " << sensorID << std::endl;
  375|      0|        log_file_cout << WARNING << "restart satel connections " << std::endl;
  376|      0|        log_file_mutex.mutex_unlock();
  377|      0|        context->main_iDomTools->sendViberMsg("restart polaczenia satel",
  378|      0|                                              context->server_settings->_fb_viber.viberReceiver.at(0),
  379|      0|                                              context->server_settings->_fb_viber.viberSender + "SATEL");
  380|      0|        context->satelIntegraHandler->getSatelPTR()->reconnectIntegra();
  381|       |
  382|      0|        return;
  383|      0|    }
  384|       |
  385|      2|    m_satelIdMap.at(sensorID)->satelSensorActive();
  386|      2|    m_circBuffSatelSensorId.put(sensorID);
  387|      2|}
  388|       |
  389|       |void house_room_handler::turnOffUnexpectedBulb()
  390|      0|{
  391|      0|    auto time = Clock::getUnixTime();
  392|       |
  393|      0|    for (const auto &jj : m_lightingBulbMap)
  394|      0|    {
  395|      0|        if (jj.second->m_satelAlarmHowLong not_eq -1 && jj.second->getStatus() == STATE::ON)
  396|      0|        {
  397|      0|            auto actualTime = time - jj.second->getSatelSensorAlarmUnixTime();
  398|      0|            unsigned int expectTime = static_cast<unsigned int>(jj.second->m_satelAlarmHowLong * 60);
  399|      0|            if (actualTime > expectTime)
  400|      0|            {
  401|      0|                jj.second->off([](const std::string &name)
  402|      0|                               { useful_F::myStaticCtx->mqttHandler->publish(m_mqttPublishTopic, name); });
  403|      0|            }
  404|      0|        }
  405|      0|    }
  406|      0|}
  407|       |
  408|       |std::string house_room_handler::dump() const
  409|      1|{
  410|      1|    std::stringstream str;
  411|       |
  412|      1|    for (auto &a : m_lightingBulbMap)
  413|      7|        str << "light " << a.first << " name " << a.second->getBulbName() << std::endl;
  414|       |
  415|      1|    str << "m_mqttPublishTopic: " << m_mqttPublishTopic << std::endl;
  416|      1|    str << "m_lastNotifyUnixTime: " << m_lastNotifyUnixTime << std::endl;
  417|      1|    str << "m_buttonConfig: " << m_buttonConfig.size() << std::endl;
  418|      1|    str << "m_circBuffSatelSensorId: " << std::endl
  419|      1|        << m_circBuffSatelSensorId.dump<int>() << std::endl;
  420|       |
  421|      1|    for (auto &a : m_satelIdMap)
  422|      4|        str << "m_satelIdMap " << a.first << " name " << a.second->m_name << std::endl;
  423|      1|    return str.str();
  424|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/HOUSE/house_room_handler.h:
    1|       |#pragma once
    2|       |
    3|       |#include <map>
    4|       |#include <memory>
    5|       |#include <optional>
    6|       |
    7|       |#include "../idom_api.h"
    8|       |#include "json.hpp"
    9|       |#include "light_bulb.h"
   10|       |#include "room.h"
   11|       |#include "../libs/circular_buffer/circular_buffer.h"
   12|       |#include "../libs/blocking_queue/blocking_queue.h"
   13|       |
   14|       |class CommandHandlerMQTT;
   15|       |struct thread_context;
   16|       |
   17|       |struct BULB_STATUS
   18|       |{
   19|     14|    BULB_STATUS(const std::string& _name, bool _state, std::optional<uint64_t> _timestamp = std::nullopt):name(_name), state(_state), timestamp(_timestamp){};
   20|       |    bool state = 0;
   21|       |    std::string name;
   22|       |    std::optional<uint64_t> timestamp;
   23|       |    int ttl = 100;
   24|       |};
   25|       |
   26|       |class house_room_handler : public iDom_API
   27|       |{
   28|       |    thread_context *context;
   29|       |    unsigned int m_lastNotifyUnixTime = 0;
   30|       |
   31|       |    Circular_buffer m_circBuffSatelSensorId;
   32|       |
   33|       |public:
   34|       |    BlockingQueue<BULB_STATUS> m_bulbStatus;
   35|       |
   36|       |    std::map<int, std::map<std::string, std::vector<std::string>>> m_buttonConfig;
   37|       |    static std::string m_mqttPublishTopic;
   38|       |
   39|       |    std::map<int, std::shared_ptr<light_bulb>> m_lightingBulbMap;
   40|       |    std::map<std::string, std::shared_ptr<ROOM>> m_roomMap;
   41|       |    std::map<int, std::shared_ptr<ROOM>> m_satelIdMap;
   42|       |
   43|       |    explicit house_room_handler(thread_context *context);
   44|       |    ~house_room_handler();
   45|       |
   46|       |    void loadConfig(const std::string &configPath);
   47|       |    void loadButtonConfig(const std::string &configPath);
   48|       |
   49|       |    void turnOnAllInRoom(const std::string &roomName);
   50|       |    void turnOffAllInRoom(const std::string &roomName);
   51|       |    void changeAllInRoom(const std::string &roomName);
   52|       |
   53|       |    void turnOnAllBulb();
   54|       |    void turnOffAllBulb();
   55|       |
   56|       |    void turnOnBulb(const int bulbID);
   57|       |    void turnOffBulb(const int bulbID);
   58|       |    void turnChangeBulb(const int bulbID);
   59|       |
   60|       |    void lockAllRoom();
   61|       |    void unlockAllRoom();
   62|       |
   63|       |    nlohmann::json getAllInfoJSON();
   64|       |    nlohmann::json getInfoJSON_allON();
   65|       |
   66|       |    void executeCommandFromMQTT(const std::string &msg);
   67|       |    void executeButtonComand(const unsigned int buttonID, const std::string &action, CommandHandlerMQTT *commandMQTTptr);
   68|       |
   69|       |    void satelSensorActive(int sensorID);
   70|       |
   71|       |    void turnOffUnexpectedBulb();
   72|       |
   73|       |    std::string dump() const override;
   74|       |};
   75|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/HOUSE/light_bulb.cpp:
    1|       |#include "light_bulb.h"
    2|       |
    3|       |light_bulb::light_bulb(const std::string &roomName, const std::string &bulbName, int id) : m_roomName(roomName),
    4|       |                                                                                           m_bulbName(bulbName),
    5|       |                                                                                           m_ID(id),
    6|       |                                                                                           m_onTime(Clock::getTime()),
    7|       |                                                                                           m_offTime(m_onTime)
    8|    198|{
    9|    198|#ifdef BT_TEST
   10|    198|    std::cout << "light_bulb::light_bulb()" << std::endl;
   11|    198|#endif
   12|    198|    m_className.insert(0, typeid(this).name());
   13|    198|    iDom_API::addToMap(m_className, this);
   14|    198|}
   15|       |
   16|       |light_bulb::~light_bulb()
   17|    198|{
   18|    198|#ifdef BT_TEST
   19|    198|    std::cout << "~light_bulb::light_bulb()" << std::endl;
   20|    198|#endif
   21|    198|    iDom_API::removeFromMap(m_className);
   22|    198|}
   23|       |
   24|       |light_bulb::light_bulb(const light_bulb &a) : m_status(a.m_status),
   25|       |                                              m_bulbName(a.m_bulbName),
   26|       |                                              m_ID(a.m_ID),
   27|       |                                              m_onTime(a.m_onTime),
   28|       |                                              m_satelAlarmUnixTime(a.m_satelAlarmUnixTime),
   29|       |                                              m_bulbCounter(a.m_bulbCounter)
   30|      0|{
   31|      0|#ifdef BT_TEST
   32|      0|    std::cout << "light_bulb::light_bulb(&)" << std::endl;
   33|      0|#endif
   34|      0|}
   35|       |
   36|       |light_bulb::light_bulb(const light_bulb &&a)
   37|       |
   38|      0|{
   39|      0|#ifdef BT_TEST
   40|      0|    std::cout << "light_bulb::light_bulb(&&)" << std::endl;
   41|      0|#endif
   42|      0|    assert(this not_eq &a);
   43|      0|    *this = std::move(a);
   44|      0|}
   45|       |
   46|       |light_bulb &light_bulb::operator=(const light_bulb &a)
   47|      0|{
   48|      0|#ifdef BT_TEST
   49|      0|    std::cout << "operator=(&)" << std::endl;
   50|      0|#endif
   51|      0|    m_status = a.m_status;
   52|      0|    m_ID = a.m_ID;
   53|      0|    m_bulbName = a.m_bulbName;
   54|      0|    m_onTime = a.m_onTime;
   55|      0|    m_satelAlarmUnixTime = a.m_satelAlarmUnixTime;
   56|      0|    m_bulbCounter = a.m_bulbCounter;
   57|      0|    m_satelAlarmHowLong = a.m_satelAlarmHowLong;
   58|      0|    m_satelAlarm = a.m_satelAlarm;
   59|      0|    return *this;
   60|      0|}
   61|       |
   62|       |light_bulb &light_bulb::operator=(light_bulb &&a)
   63|      0|{
   64|      0|#ifdef BT_TEST
   65|      0|    std::cout << "operator=(&&)" << std::endl;
   66|      0|#endif
   67|      0|    assert(this not_eq &a);
   68|      0|    m_status = std::move(a.m_status);
   69|      0|    m_bulbName = std::move(a.m_bulbName);
   70|      0|    m_ID = std::move(a.m_ID);
   71|      0|    m_onTime = std::move(a.m_onTime);
   72|      0|    m_satelAlarmUnixTime = std::move(a.m_satelAlarmUnixTime);
   73|      0|    m_bulbCounter = std::move(a.m_bulbCounter);
   74|      0|    m_satelAlarmHowLong = std::move(a.m_satelAlarmHowLong);
   75|      0|    m_satelAlarm = std::move(a.m_satelAlarm);
   76|      0|    return *this;
   77|      0|}
   78|       |
   79|       |void light_bulb::on(std::function<void(std::string s)> onOn)
   80|     19|{
   81|     19|    if (m_lock not_eq STATE::UNLOCK)
   82|      0|        return;
   83|     19|    std::lock_guard<std::mutex> lock(m_operationMutex);
   84|     19|    std::stringstream ss;
   85|     19|    ss << "0;" << m_ID << ";1;0;2;" << ON;
   86|     19|    onOn(ss.str());
   87|     19|    m_status = STATE::ACTIVE;
   88|     19|}
   89|       |
   90|       |void light_bulb::off(std::function<void(std::string s)> onOff)
   91|     26|{
   92|     26|    if (m_lock not_eq STATE::UNLOCK)
   93|      0|        return;
   94|     26|    std::lock_guard<std::mutex> lock(m_operationMutex);
   95|     26|    std::stringstream ss;
   96|     26|    ss << "0;" << m_ID << ";1;0;2;" << OFF;
   97|     26|    onOff(ss.str());
   98|     26|    m_status = STATE::DEACTIVE;
   99|     26|}
  100|       |
  101|       |void light_bulb::change(std::function<void(std::string)> changeF)
  102|      2|{
  103|      2|    if (m_lock not_eq STATE::UNLOCK)
  104|      0|        return;
  105|      2|    std::lock_guard<std::mutex> lock(m_operationMutex);
  106|      2|    std::stringstream ss;
  107|       |
  108|      2|    if (m_status == STATE::ON)
  109|      1|    {
  110|      1|        ss << "0;" << m_ID << ";1;0;2;" << OFF;
  111|      1|    }
  112|      1|    else
  113|      1|    {
  114|      1|        ss << "0;" << m_ID << ";1;0;2;" << ON;
  115|      1|    }
  116|       |
  117|      2|    changeF(ss.str());
  118|      2|}
  119|       |
  120|       |STATE light_bulb::getStatus()
  121|    153|{
  122|    153|    std::lock_guard<std::mutex> lock(m_operationMutex);
  123|    153|    return m_status;
  124|    153|}
  125|       |
  126|       |void light_bulb::setStatus(STATE s)
  127|     14|{
  128|     14|    std::lock_guard<std::mutex> lock(m_operationMutex);
  129|     14|    if (s == STATE::ON)
  130|      8|    {
  131|      8|        m_onTime = Clock::getTime();
  132|      8|        satelSensorAlarm(); // simulating motion sensor activation so as not to turn off the light immediately in the absence of motion
  133|      8|        ++m_bulbCounter;
  134|      8|    }
  135|      6|    else if (s == STATE::OFF)
  136|      6|    {
  137|      6|        m_offTime = Clock::getTime();
  138|      6|    }
  139|       |
  140|     14|    m_status = s;
  141|     14|}
  142|       |
  143|       |std::string light_bulb::getBulbName() const
  144|    128|{
  145|    128|    return m_bulbName;
  146|    128|}
  147|       |
  148|       |std::string light_bulb::getRoomName() const
  149|    222|{
  150|    222|    return m_roomName;
  151|    222|}
  152|       |
  153|       |int light_bulb::getID() const
  154|    100|{
  155|    100|    return m_ID;
  156|    100|}
  157|       |
  158|       |void light_bulb::lock()
  159|      0|{
  160|      0|    m_lock = STATE::LOCK;
  161|      0|}
  162|       |
  163|       |void light_bulb::unlock()
  164|      0|{
  165|      0|    m_lock = STATE::UNLOCK;
  166|      0|}
  167|       |
  168|       |STATE light_bulb::getLockState() const
  169|    100|{
  170|    100|    return m_lock;
  171|    100|}
  172|       |
  173|       |void light_bulb::addBulbPin(int i)
  174|    196|{
  175|    196|    m_pins.push_back(i);
  176|    196|}
  177|       |
  178|       |std::string light_bulb::getBulbPin()
  179|    100|{
  180|    100|    std::stringstream str;
  181|    100|    for (const auto &a : m_pins)
  182|     99|    {
  183|     99|        str << a << ",";
  184|     99|    }
  185|    100|    return str.str();
  186|    100|}
  187|       |
  188|       |unsigned int light_bulb::getBulbCounter()
  189|    100|{
  190|    100|    return m_bulbCounter;
  191|    100|}
  192|       |
  193|       |nlohmann::json light_bulb::getStatsJSON()
  194|     14|{
  195|     14|    nlohmann::json jj;
  196|       |
  197|     14|    jj["bulb name"] = m_bulbName;
  198|     14|    jj["counter"] = m_bulbCounter;
  199|     14|    jj["state"] = stateToString(m_status);
  200|       |
  201|     14|    return jj;
  202|     14|}
  203|       |
  204|       |Clock light_bulb::howLongBulbOn()
  205|    107|{
  206|    107|    Clock ret(0, 0);
  207|    107|    if (m_status == STATE::OFF)
  208|      3|        ret = Clock::periodOfTime(m_onTime, m_offTime);
  209|    107|    return ret;
  210|    107|}
  211|       |
  212|       |void light_bulb::satelSensorAlarm()
  213|     16|{
  214|     16|    m_satelAlarmUnixTime = Clock::getUnixTime();
  215|     16|}
  216|       |
  217|       |unsigned int light_bulb::getSatelSensorAlarmUnixTime()
  218|    100|{
  219|    100|    return m_satelAlarmUnixTime;
  220|    100|}
  221|       |
  222|       |std::string light_bulb::dump() const
  223|      7|{
  224|      7|    std::stringstream str;
  225|      7|    str << "bulb name: " << m_bulbName << std::endl;
  226|      7|    str << "bulb ID: " << m_ID << std::endl;
  227|      7|    str << "bulb status: " << m_status << std::endl;
  228|      7|    str << "bulb in room: " << m_roomName << std::endl;
  229|      7|    str << "switch pin: ";
  230|      7|    for (const auto &a : m_pins)
  231|      7|    {
  232|      7|        str << a << ",";
  233|      7|    }
  234|      7|    str << std::endl;
  235|      7|    str << "bulb m_onTime: " << m_onTime.getString() << std::endl;
  236|      7|    str << "bulb m_offTime: " << m_offTime.getString() << std::endl;
  237|      7|    str << "bulb m_satelAlarmUnixTime: " << m_satelAlarmUnixTime << std::endl;
  238|      7|    str << "m_bulbCounter: " << m_bulbCounter << std::endl;
  239|      7|    return str.str();
  240|      7|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/HOUSE/room.cpp:
    1|       |#include "room.h"
    2|       |#include "house_room_handler.h"
    3|       |#include "../functions/functions.h"
    4|       |#include "../iDomTools/idomtools_interface.h"
    5|       |
    6|       |ROOM::ROOM(const std::vector<int> &satelSensorID, const std::string &name, const std::map<int, std::shared_ptr<light_bulb>> &lightingBulbMap) : m_satelSensorID(satelSensorID),
    7|       |                                                                                                                                                m_name(name),
    8|       |                                                                                                                                                m_lightingBulbMap(lightingBulbMap)
    9|     84|{
   10|     84|#ifdef BT_TEST
   11|     84|    std::cout << "ROOM::ROOM() " << name << std::endl;
   12|     84|#endif
   13|     84|}
   14|       |
   15|       |void ROOM::satelSensorActive()
   16|      3|{
   17|      3|    ++satelSensorCounter;
   18|       |
   19|      3|    if (useful_F::myStaticCtx->idom_all_state.houseState == STATE::LOCK)
   20|      1|    {
   21|      1|        log_file_mutex.mutex_lock();
   22|      1|        log_file_cout << WARNING << "ALARM !  w pokoju " << m_name << std::endl;
   23|      1|        log_file_mutex.mutex_unlock();
   24|       |
   25|      1|        if (useful_F::myStaticCtx->idom_all_state.counter++ < 10)
   26|      1|        {
   27|      1|            useful_F::myStaticCtx->main_iDomTools->sendViberMsg("alarm w pokoju " + m_name,
   28|      1|                                                                 useful_F::myStaticCtx->server_settings->_fb_viber.viberReceiver.at(0),
   29|      1|                                                                 "Satel Alarm");
   30|      1|        }
   31|      1|    }
   32|      3|    for (const auto &bulb : m_lightingBulbMap)
   33|      8|    {
   34|      8|        bulb.second->satelSensorAlarm();
   35|      8|        if (bulb.second->m_satelAlarm == STATE::ACTIVE &&
   36|      8|            useful_F::myStaticCtx->main_iDomTools->isItDay() == false &&
   37|      8|            bulb.second->getStatus() not_eq STATE::ON)
   38|      4|        {
   39|      4|            bulb.second->on([](const std::string &name)
   40|      4|                            { useful_F::myStaticCtx->mqttHandler->publish(house_room_handler::m_mqttPublishTopic, name); });
   41|      4|        } // if
   42|      8|    }     // for
   43|      3|}
   44|       |
   45|       |nlohmann::json ROOM::getStatsJSON()
   46|      6|{
   47|      6|    nlohmann::json jj, kk;
   48|      6|    jj["room name"] = m_name;
   49|      6|    jj["satel activatet counter"] = satelSensorCounter;
   50|       |
   51|      6|    std::transform(m_lightingBulbMap.cbegin(),
   52|      6|                   m_lightingBulbMap.cend(),
   53|      6|                   std::back_inserter(kk),
   54|      6|                   [](std::pair<int, std::shared_ptr<light_bulb>> c)
   55|     14|                   { return c.second->getStatsJSON(); });
   56|       |
   57|      6|    jj["z bulb"] = kk;
   58|       |    // jj.push_back(kk);
   59|      6|    return jj;
   60|      6|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/HTTP/http.cpp:
    1|       |#include "http.h"
    2|       |#include "../functions/functions.h"
    3|       |#include <algorithm>
    4|       |#include <experimental/source_location>
    5|       |
    6|       |std::string Http::getContent(const std::string &msg)
    7|      1|{
    8|      1|    std::cout << "cyniu: " << std::experimental::fundamentals_v2::source_location::current().file_name() << std::endl;
    9|      1|    return msg.substr(msg.length() - Http::getContentLength(msg));
   10|      1|}
   11|       |
   12|       |int Http::getContentLength(const std::string &msg)
   13|      2|{
   14|      2|    int size = 0;
   15|      2|    std::string cl{"Content-Length:"};
   16|      2|    auto pos = msg.find(cl);
   17|      2|    size = std::stoi(msg.substr(pos + cl.length(), 3));
   18|      2|    return size;
   19|      2|}
   20|       |
   21|       |Content_Type Http::getContentType(const std::string &msg)
   22|      2|{
   23|      2|    if (useful_F_libs::hasSubstring(msg, "iDom/logging"))
   24|      1|        return Content_Type::iDom_logging;
   25|      1|    else if (useful_F_libs::hasSubstring(msg, "application/json"))
   26|      1|        return Content_Type::ApplicationJSON;
   27|      0|    else if (useful_F_libs::hasSubstring(msg, "text/html"))
   28|      0|        return Content_Type::TextHtml;
   29|       |
   30|      0|    return Content_Type::unknonwn;
   31|      2|}
   32|       |
   33|       |METHOD_HTTP Http::getMethod(const std::string &msg)
   34|      2|{
   35|      2|    METHOD_HTTP method{METHOD_HTTP::GET};
   36|      2|    auto firstLine = msg.substr(0, msg.find("Host"));
   37|      2|    if (firstLine.find("GET") != std::string::npos)
   38|      1|        method = METHOD_HTTP::GET;
   39|      1|    else if (firstLine.find("POST") != std::string::npos)
   40|      1|        method = METHOD_HTTP::POST;
   41|      0|    else
   42|      0|        method = METHOD_HTTP::UNDEF;
   43|       |
   44|      2|    return method;
   45|      2|}
   46|       |
   47|       |std::string Http::getUrl(const std::string &msg)
   48|      5|{
   49|      5|    auto endPos = msg.find_first_of("\r\n");
   50|      5|    if (endPos == std::string::npos)
   51|      0|    {
   52|      0|        return "null";
   53|      0|    }
   54|       |
   55|      5|    std::string str = msg.substr(0, endPos);
   56|      5|    auto pos = str.find_first_of("?");
   57|      5|    if (pos == std::string::npos)
   58|      4|        pos = str.find_last_of(" ");
   59|      5|    auto first = str.find_first_of("/");
   60|      5|    if (first == std::string::npos)
   61|      2|    {
   62|      2|        return "null";
   63|      2|    }
   64|       |
   65|      3|    str = msg.substr(first, pos - first);
   66|      3|    str.erase(std::remove(str.begin(), str.end(), ' '), str.end());
   67|      3|    return str;
   68|      5|}
   69|       |
   70|       |std::unordered_map<std::string, std::string> Http::getQuery(const std::string &msg)
   71|      1|{
   72|       |    /// api/gate_open.html?kkk=999&uu=88&lolo
   73|      1|    std::unordered_map<std::string, std::string> mapa;
   74|       |
   75|      1|    std::string str = msg.substr(0, msg.find_first_of("\r\n"));
   76|      1|    auto first = str.find_first_of("?") + 1;
   77|      1|    auto sec = str.find_last_of(" ");
   78|      1|    str = msg.substr(first, sec - first);
   79|      1|    auto v1 = useful_F::split(str, '&');
   80|       |
   81|      1|    for (const auto &vv : v1)
   82|      3|    {
   83|      3|        std::string::size_type pos{0};
   84|      3|        if ((pos = vv.find('=')) not_eq std::string::npos)
   85|      2|        {
   86|      2|            mapa[vv.substr(0, pos)] = vv.substr(pos + 1);
   87|      2|        }
   88|      1|        else
   89|      1|        {
   90|      1|            mapa[vv.substr(0, pos)] = "";
   91|      1|        }
   92|      3|    }
   93|       |
   94|      1|    return mapa;
   95|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/HTTP/http.h:
    1|       |#pragma once
    2|       |
    3|       |#include <string>
    4|       |#include <unordered_map>
    5|       |
    6|       |enum class METHOD_HTTP
    7|       |{
    8|       |    GET,
    9|       |    POST,
   10|       |    UNDEF
   11|       |};
   12|       |
   13|       |enum class Content_Type
   14|       |{
   15|       |    ApplicationJSON,
   16|       |    TextHtml,
   17|       |    iDom_logging,
   18|       |    unknonwn
   19|       |};
   20|       |struct QUERY
   21|       |{
   22|      0|    QUERY(const std::string &_key, const std::string &_value) : key(_key), value(_value){};
   23|       |    std::string key;
   24|       |    std::string value;
   25|       |};
   26|       |
   27|       |class Http
   28|       |{
   29|       |public:
   30|       |    static std::string getContent(const std::string &msg);
   31|       |    static int getContentLength(const std::string &msg);
   32|       |    static Content_Type getContentType(const std::string &msg);
   33|       |    static METHOD_HTTP getMethod(const std::string &msg);
   34|       |    static std::string getUrl(const std::string &msg);
   35|       |    static std::unordered_map<std::string, std::string> getQuery(const std::string &msg);
   36|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/HTTP/test/http_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |
    4|       |#include "../http.h"
    5|       |
    6|       |class http_class_fixture : public testing::Test
    7|       |{
    8|       |public:
    9|       |    const std::string content{R"({"msg":"test viber msg","millis":529443897})"};
   10|       |    std::string msgPOST = R"(POST /iDom/log HTTP/1.1
   11|       |Host: cyniu88.no-ip.pl:48833
   12|       |User-Agent: ESP8266HTTPClient
   13|       |Accept-Encoding: identity;q=1,chunked;q=0.1,*;q=0
   14|       |Connection: keep-alive
   15|       |Content-Type: application/json
   16|       |Content-Length: 43\r\n\r\n)" + content;
   17|       |
   18|       |    std::string msgGET = R"(HTTP GET /api/gate_open.html?kkk=999&uu=88&lolo HTTP/1.1
   19|       |Host: cyniu88.no-ip.pl:48833
   20|       |User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0
   21|       |Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
   22|       |Accept-Language: pl,en-US;q=0.7,en;q=0.3
   23|       |Accept-Encoding: gzip, deflate
   24|       |DNT: 1
   25|       |Connection: keep-alive
   26|       |Referer: http://cyniu88.no-ip.pl:48833/?kkk&uu
   27|       |Upgrade-Insecure-Requests: 1
   28|       |)";
   29|       |    std::string msgGET2 = R"(HTTP GET /api/gate_open.html HTTP/1.1
   30|       |Host: cyniu88.no-ip.pl:48833
   31|       |User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0
   32|       |Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
   33|       |Accept-Language: pl,en-US;q=0.7,en;q=0.3
   34|       |Accept-Encoding: gzip, deflate
   35|       |DNT: 1
   36|       |Connection: keep-alive
   37|       |Referer: http://cyniu88.no-ip.pl:48833/?kkk&uu
   38|       |Upgrade-Insecure-Requests: 1
   39|       |)";
   40|       |};
   41|       |
   42|       |TEST_F(http_class_fixture, baseTestPOST)
   43|      1|{
   44|      1|    EXPECT_EQ(Http::getContentLength(msgPOST), 43);
   45|      1|    ASSERT_EQ(Http::getContentType(msgPOST), Content_Type::ApplicationJSON);
   46|      1|    EXPECT_STREQ(Http::getContent(msgPOST).c_str(), content.c_str());
   47|      1|    EXPECT_EQ(Http::getMethod(msgPOST), METHOD_HTTP::POST);
   48|      1|}
   49|       |
   50|       |TEST_F(http_class_fixture, baseTestGET)
   51|      1|{
   52|      1|    ASSERT_EQ(Http::getMethod(msgGET), METHOD_HTTP::GET);
   53|      1|}
   54|       |
   55|       |TEST_F(http_class_fixture, getURL)
   56|      1|{
   57|      1|    EXPECT_STREQ( Http::getUrl(msgGET2).c_str(), "/api/gate_open.html" );
   58|      1|    EXPECT_STREQ( Http::getUrl(msgGET).c_str(), "/api/gate_open.html" );
   59|      1|    EXPECT_STREQ( Http::getUrl(msgPOST).c_str(), "/iDom/log" );
   60|      1|}
   61|       |
   62|       |TEST_F(http_class_fixture, getQuery)
   63|      1|{
   64|      1|   auto ov = Http::getQuery(msgGET);
   65|       |
   66|      1|   for(const auto& o : ov)
   67|      3|   {
   68|      3|       std::cout << "key: " << o.first << ", value: " << o.second << std::endl;
   69|      3|   }
   70|       |
   71|      1|   EXPECT_EQ(ov.at("kkk"), "999");
   72|      1|   EXPECT_EQ(ov.at("lolo"), "");
   73|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/LCD_c/test/lcd_c_stub.cpp:
    1|       |#include <iostream>
    2|       |#include "../lcd_c.h"
    3|       |
    4|       |LCD_c::LCD_c(uint8_t lcd_Addr, uint8_t lcd_cols, uint8_t lcd_rows) 
    5|      5|{
    6|      5|    std::cout << "LCD_c::LCD_c()" << std::endl;
    7|      5|}
    8|       |
    9|       |LCD_c::~LCD_c()
   10|      5|{
   11|      5|    std::cout << "LCD_c::~LCD_c()" << std::endl;
   12|      5|}
   13|       |
   14|       |void LCD_c::noBacklight()
   15|      5|{
   16|      5|    std::cout << "LCD_c::noBacklight()" << std::endl;
   17|      5|}
   18|       |
   19|       |void LCD_c::clear()
   20|     32|{
   21|     32|    std::cout << "LCD_c::clear()" << std::endl;
   22|     32|}
   23|       |
   24|       |void LCD_c::scrollLeft()
   25|      0|{
   26|      0|    std::cout << "LCD_c::scrollLeft()" << std::endl;
   27|      0|}
   28|       |
   29|       |void LCD_c::scrollRight()
   30|      0|{
   31|      0|    std::cout << "LCD_c::scrollRight()" << std::endl;
   32|      0|}
   33|       |
   34|       |void LCD_c::printString(const std::string &row1, const std::string &row2, bool clear)
   35|     32|{
   36|     32|    std::cout << "Wyświetlam na LCD: " << std::endl
   37|     32|              << row1 << std::endl
   38|     32|              << row2 << std::endl;
   39|     32|}
   40|       |
   41|       |std::string LCD_c::getData() const
   42|      0|{
   43|      0|    return " data test";
   44|      0|}
   45|       |
   46|       |std::string LCD_c::dump() const
   47|      0|{
   48|      0|    return "LCD STUB DUMP";
   49|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/TEST/menu_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include <memory>
    4|       |
    5|       |#include "../../iDom_server_OOP.h"
    6|       |#include "../../functions/functions.h"
    7|       |#include "../../iDomTools/mock/iDomToolsMock.h"
    8|       |#include "../../buderus/mock/buderus_mock.h"
    9|       |#include "../menu_base.h"
   10|       |#include "../menu_root.h"
   11|       |#include "../menu_light.h"
   12|       |
   13|       |class menu_state_machine_fixture: public testing::Test
   14|       |{
   15|       |protected:
   16|       |    menu_state_machine_fixture(): main_iDomTools(std::make_shared<iDomToolsMock>()),
   17|       |                                    buderusMock(std::make_shared<BUDERUS_MOCK>())
   18|      6|    {
   19|      6|        test_context.main_iDomTools = main_iDomTools;
   20|      6|        test_context.ptr_buderus = buderusMock;
   21|      6|        test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("cyniu");
   22|      6|        test_context.main_Rs232 = std::make_unique<SerialPi>("cyniu");
   23|      6|    }
   24|       |    thread_context test_context;
   25|       |    std::shared_ptr<iDomToolsMock>main_iDomTools;
   26|       |    std::shared_ptr<BUDERUS_MOCK> buderusMock;
   27|       |};
   28|       |
   29|       |TEST_F(menu_state_machine_fixture, containerMenuMap)
   30|      1|{
   31|      1|    cyniu::ContainerMenuMap<std::string, std::string> testMenuMap;
   32|      1|    testMenuMap.insert(std::pair<std::string, std::string>("a jeden","1"));
   33|      1|    testMenuMap.insert(std::pair<std::string, std::string>("b dwa","2"));
   34|      1|    testMenuMap.insert(std::pair<std::string, std::string>("c trzy","3"));
   35|      1|    testMenuMap.begin();
   36|       |
   37|      1|    {auto para = testMenuMap.getCurrent();
   38|      1|        EXPECT_THAT(para->second, "1");}
   39|      1|    testMenuMap.up();
   40|       |
   41|      1|    {auto para = testMenuMap.getCurrent();
   42|      1|        EXPECT_THAT(para->second, "2");}
   43|      1|    testMenuMap.up();
   44|       |
   45|      1|    {auto para = testMenuMap.getCurrent();
   46|      1|        EXPECT_THAT(para->second, "3");}
   47|       |
   48|      1|    testMenuMap.down();
   49|      1|    {auto para = testMenuMap.getCurrent();
   50|      1|        EXPECT_THAT(para->second, "2");}
   51|       |
   52|      1|    testMenuMap.down();
   53|      1|    {auto para = testMenuMap.getCurrent();
   54|      1|        EXPECT_THAT(para->second, "1");}
   55|       |
   56|      1|    testMenuMap.down();
   57|      1|    {auto para = testMenuMap.getCurrent();
   58|      1|        EXPECT_THAT(para->second, "3");}
   59|      1|}
   60|       |
   61|       |TEST_F(menu_state_machine_fixture, containerMenuMapSignle)
   62|      1|{
   63|      1|    cyniu::ContainerMenuMap<std::string, std::string> testMenuMap;
   64|      1|    testMenuMap.insert(std::pair<std::string, std::string>("a jeden","1"));
   65|      1|    testMenuMap.begin();
   66|       |
   67|      1|    {auto para = testMenuMap.getCurrent();
   68|      1|        EXPECT_THAT(para->second, "1");}
   69|      1|    testMenuMap.up();
   70|       |
   71|      1|    {auto para = testMenuMap.getCurrent();
   72|      1|        EXPECT_THAT(para->second, "1");}
   73|      1|    testMenuMap.up();
   74|       |
   75|      1|    {auto para = testMenuMap.getCurrent();
   76|      1|        EXPECT_THAT(para->second, "1");}
   77|      1|}
   78|       |
   79|       |TEST_F(menu_state_machine_fixture, main)
   80|      1|{
   81|      1|    test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   82|      1|    test_context.main_iDomStatus->addObject("music", STATE::STOP);
   83|      1|    LCD_c lcd(0x27,16,2);
   84|      1|    MENU_STATE_MACHINE stateMechine;
   85|      1|    auto ptr = std::make_unique<MENU_ROOT>(&test_context, &lcd, &stateMechine);
   86|      1|    stateMechine.setStateMachine(std::move(ptr));
   87|      1|    auto main_key_menu_handler = std::make_unique<KEY_HANDLER>(&stateMechine);
   88|       |
   89|      1|    auto res = stateMechine.currentState->getStateName();
   90|      1|    EXPECT_THAT(res, ::testing::HasSubstr("MENU_ROOT"));
   91|       |
   92|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::MENU);
   93|      1|    res = stateMechine.currentState->getStateName();
   94|      1|    EXPECT_THAT(res, ::testing::HasSubstr("MENU_MAIN"));
   95|       |
   96|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::UP);
   97|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::UP);
   98|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::UP);
   99|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::UP);
  100|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::UP);
  101|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::UP);
  102|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  103|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  104|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  105|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  106|       |
  107|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::RES);
  108|      1|    res = stateMechine.currentState->getStateName();
  109|      1|    EXPECT_THAT(res, ::testing::HasSubstr("MENU_ROOT"));
  110|      1|}
  111|       |
  112|      1|TEST_F(menu_state_machine_fixture, MENU_LIGHT){
  113|      1|    test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("test");
  114|      1|    useful_F::myStaticCtx = &test_context;
  115|      1|    LCD_c lcd(0x27,16,2);
  116|      1|    MENU_STATE_MACHINE stateMechine;
  117|       |    //////// bulb config
  118|      1|    std::string cfg("../config/bulb_config.json");
  119|      1|    test_context.main_house_room_handler = std::make_shared<house_room_handler>(&test_context);
  120|      1|    test_context.main_house_room_handler->loadConfig(cfg);
  121|       |
  122|      1|    auto ptr = std::make_unique<MENU_LIGHT>(&test_context, &lcd, &stateMechine);
  123|      1|    ptr->entry();
  124|      1|    ptr->keyPadDown();
  125|      1|    ptr->keyPadLeft();
  126|      1|    ptr->keyPadLeft();
  127|      1|    ptr->keyPadLeft();
  128|      1|    ptr->keyPadRight();
  129|      1|    ptr->keyPadOk();
  130|      1|}
  131|       |
  132|       |TEST_F(menu_state_machine_fixture, MENU_BUDERUS)
  133|      1|{
  134|      1|    test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("test");
  135|      1|    test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
  136|      1|    test_context.main_iDomStatus->addObject("music", STATE::STOP);
  137|      1|    LCD_c lcd(0x27,16,2);
  138|      1|    MENU_STATE_MACHINE stateMechine;
  139|      1|    auto ptr = std::make_unique<MENU_ROOT>(&test_context, &lcd, &stateMechine);
  140|      1|    stateMechine.setStateMachine(std::move(ptr));
  141|      1|    auto main_key_menu_handler = std::make_unique<KEY_HANDLER>(&stateMechine);
  142|       |
  143|      1|    auto res = stateMechine.currentState->getStateName();
  144|      1|    EXPECT_THAT(res, ::testing::HasSubstr("MENU_ROOT"));
  145|       |
  146|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::MENU);
  147|      1|    res = stateMechine.currentState->getStateName();
  148|      1|    EXPECT_THAT(res, ::testing::HasSubstr("MENU_MAIN"));
  149|       |
  150|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::UP);
  151|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::UP);
  152|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::UP);
  153|      1|    EXPECT_CALL(*main_iDomTools.get(), getSmog());
  154|      1|    EXPECT_CALL(*main_iDomTools.get(), getDayLenght(false));
  155|      1|    EXPECT_CALL(*main_iDomTools.get(), getSunrise(false));
  156|      1|    EXPECT_CALL(*main_iDomTools.get(), getSunset(false));
  157|      1|    EXPECT_CALL(*buderusMock.get(), getCurFlowTemp());
  158|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::OK);
  159|      1|}
  160|       |
  161|       |TEST_F(menu_state_machine_fixture, MENU_KODI)
  162|      1|{
  163|      1|    test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
  164|      1|    test_context.main_iDomStatus->addObject("music", STATE::STOP);
  165|      1|    LCD_c lcd(0x27,16,2);
  166|      1|    MENU_STATE_MACHINE stateMechine;
  167|      1|    auto ptr = std::make_unique<MENU_ROOT>(&test_context, &lcd, &stateMechine);
  168|      1|    stateMechine.setStateMachine(std::move(ptr));
  169|      1|    auto main_key_menu_handler = std::make_unique<KEY_HANDLER>(&stateMechine);
  170|       |
  171|      1|    auto res = stateMechine.currentState->getStateName();
  172|      1|    EXPECT_THAT(res, ::testing::HasSubstr("MENU_ROOT"));
  173|       |
  174|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::MENU);
  175|      1|    res = stateMechine.currentState->getStateName();
  176|      1|    EXPECT_THAT(res, ::testing::HasSubstr("MENU_MAIN"));
  177|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  178|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  179|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  180|       | //   main_key_menu_handler->recKeyEvent(KEY_PAD::OK);
  181|       |
  182|       |    // kodi menu
  183|       |
  184|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  185|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  186|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  187|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::DOWN);
  188|       |
  189|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_play(testing::_)).Times(2);
  190|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::OK);
  191|       |
  192|      1|    main_key_menu_handler->recKeyEvent(KEY_PAD::POWER);
  193|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/libs/container_menu.h:
    1|       |#pragma once
    2|       |
    3|       |#include <vector>
    4|       |#include <string>
    5|       |#include <functional>
    6|       |#include <map>
    7|       |
    8|       |namespace cyniu
    9|       |{
   10|       |
   11|       |    template <class T_NAME, class T_FUNC>
   12|       |    struct MenuStruct
   13|       |    {
   14|       |        T_NAME name;
   15|       |        T_FUNC function;
   16|       |    };
   17|       |
   18|       |    // using DataBase = MenuStruct<std::string,std::function<void()>>;
   19|       |
   20|       |    template <class T_NAME, class T_FUNC>
   21|       |    class ContainerMenu
   22|       |    {
   23|       |        std::vector<MenuStruct<T_NAME, T_FUNC>> database;
   24|       |        int counter = 0;
   25|       |
   26|       |    public:
   27|      7|        ContainerMenu() = default;
  ------------------
  | Unexecuted instantiation: _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFS6_vEEEC2Ev
  ------------------
  | _ZN5cyniu13ContainerMenuI4BULBiEC2Ev:
  |   27|      4|        ContainerMenu() = default;
  ------------------
  | _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFvvEEEC2Ev:
  |   27|      3|        ContainerMenu() = default;
  ------------------
   28|      7|        ~ContainerMenu() = default;
  ------------------
  | Unexecuted instantiation: _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFS6_vEEED2Ev
  ------------------
  | _ZN5cyniu13ContainerMenuI4BULBiED2Ev:
  |   28|      4|        ~ContainerMenu() = default;
  ------------------
  | _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFvvEEED2Ev:
  |   28|      3|        ~ContainerMenu() = default;
  ------------------
   29|     12|        auto size() { return database.size(); }
  ------------------
  | Unexecuted instantiation: _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFS6_vEEE4sizeEv
  ------------------
  | _ZN5cyniu13ContainerMenuI4BULBiE4sizeEv:
  |   29|      2|        auto size() { return database.size(); }
  ------------------
  | _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFvvEEE4sizeEv:
  |   29|     10|        auto size() { return database.size(); }
  ------------------
   30|     33|        void pushBack(MenuStruct<T_NAME, T_FUNC> data) { database.push_back(data); }
  ------------------
  | Unexecuted instantiation: _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFS6_vEEE8pushBackENS_10MenuStructIS6_S9_EE
  ------------------
  | _ZN5cyniu13ContainerMenuI4BULBiE8pushBackENS_10MenuStructIS1_iEE:
  |   30|     12|        void pushBack(MenuStruct<T_NAME, T_FUNC> data) { database.push_back(data); }
  ------------------
  | _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFvvEEE8pushBackENS_10MenuStructIS6_S9_EE:
  |   30|     21|        void pushBack(MenuStruct<T_NAME, T_FUNC> data) { database.push_back(data); }
  ------------------
   31|       |        void up()
   32|     10|        {
   33|     10|            if (++counter == size())
   34|      0|                counter = 0;
   35|     10|        }
  ------------------
  | Unexecuted instantiation: _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFS6_vEEE2upEv
  ------------------
  | _ZN5cyniu13ContainerMenuI4BULBiE2upEv:
  |   32|      1|        {
  |   33|      1|            if (++counter == size())
  |   34|      0|                counter = 0;
  |   35|      1|        }
  ------------------
  | _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFvvEEE2upEv:
  |   32|      9|        {
  |   33|      9|            if (++counter == size())
  |   34|      0|                counter = 0;
  |   35|      9|        }
  ------------------
   36|       |        void down()
   37|     14|        {
   38|     14|            if (--counter < 0)
   39|      2|                counter = size() - 1;
   40|     14|        }
  ------------------
  | Unexecuted instantiation: _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFS6_vEEE4downEv
  ------------------
  | _ZN5cyniu13ContainerMenuI4BULBiE4downEv:
  |   37|      3|        {
  |   38|      3|            if (--counter < 0)
  |   39|      1|                counter = size() - 1;
  |   40|      3|        }
  ------------------
  | _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFvvEEE4downEv:
  |   37|     11|        {
  |   38|     11|            if (--counter < 0)
  |   39|      1|                counter = size() - 1;
  |   40|     11|        }
  ------------------
   41|       |        auto getCurrent()
   42|     32|        {
   43|     32|            return database.at(counter);
   44|     32|        }
  ------------------
  | Unexecuted instantiation: _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFS6_vEEE10getCurrentEv
  ------------------
  | _ZN5cyniu13ContainerMenuI4BULBiE10getCurrentEv:
  |   42|      7|        {
  |   43|      7|            return database.at(counter);
  |   44|      7|        }
  ------------------
  | _ZN5cyniu13ContainerMenuINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFvvEEE10getCurrentEv:
  |   42|     25|        {
  |   43|     25|            return database.at(counter);
  |   44|     25|        }
  ------------------
   45|       |    };
   46|       |
   47|       |    template <class T_KEY, class T_VALUE>
   48|       |    class ContainerMenuMap
   49|       |    {
   50|       |        typedef typename std::map<T_KEY, T_VALUE>::iterator IteratorDatabaseMap;
   51|       |        IteratorDatabaseMap it;
   52|       |
   53|       |    public:
   54|       |        std::map<T_KEY, T_VALUE> databaseMap;
   55|      4|        ContainerMenuMap() = default;
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EC2Ev:
  |   55|      3|        ContainerMenuMap() = default;
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13ContainerMenuI4BULBiEEEC2Ev:
  |   55|      1|        ContainerMenuMap() = default;
  ------------------
   56|      4|        ~ContainerMenuMap() = default;
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ED2Ev:
  |   56|      3|        ~ContainerMenuMap() = default;
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13ContainerMenuI4BULBiEEED2Ev:
  |   56|      1|        ~ContainerMenuMap() = default;
  ------------------
   57|       |        void insert(std::pair<T_KEY, T_VALUE> data)
   58|      9|        {
   59|      9|            databaseMap.insert(data);
   60|      9|        }
   61|       |        void begin()
   62|      4|        {
   63|      4|            it = databaseMap.begin();
   64|      4|        }
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_E5beginEv:
  |   62|      3|        {
  |   63|      3|            it = databaseMap.begin();
  |   64|      3|        }
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13ContainerMenuI4BULBiEEE5beginEv:
  |   62|      1|        {
  |   63|      1|            it = databaseMap.begin();
  |   64|      1|        }
  ------------------
   65|       |        void up()
   66|      4|        {
   67|      4|            if (++it == databaseMap.end())
   68|      2|                it = databaseMap.begin();
   69|      4|        }
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_E2upEv:
  |   66|      4|        {
  |   67|      4|            if (++it == databaseMap.end())
  |   68|      2|                it = databaseMap.begin();
  |   69|      4|        }
  ------------------
  | Unexecuted instantiation: _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13ContainerMenuI4BULBiEEE2upEv
  ------------------
   70|       |        void down()
   71|      4|        {
   72|      4|            if (it == databaseMap.begin())
   73|      2|            {
   74|      2|                it = databaseMap.end();
   75|      2|                --it;
   76|      2|            }
   77|      2|            else
   78|      2|                --it;
   79|      4|        }
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_E4downEv:
  |   71|      3|        {
  |   72|      3|            if (it == databaseMap.begin())
  |   73|      1|            {
  |   74|      1|                it = databaseMap.end();
  |   75|      1|                --it;
  |   76|      1|            }
  |   77|      2|            else
  |   78|      2|                --it;
  |   79|      3|        }
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13ContainerMenuI4BULBiEEE4downEv:
  |   71|      1|        {
  |   72|      1|            if (it == databaseMap.begin())
  |   73|      1|            {
  |   74|      1|                it = databaseMap.end();
  |   75|      1|                --it;
  |   76|      1|            }
  |   77|      0|            else
  |   78|      0|                --it;
  |   79|      1|        }
  ------------------
   80|       |        IteratorDatabaseMap &getCurrent()
   81|     17|        {
   82|     17|            return it;
   83|     17|        }
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_E10getCurrentEv:
  |   81|     10|        {
  |   82|     10|            return it;
  |   83|     10|        }
  ------------------
  | _ZN5cyniu16ContainerMenuMapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_13ContainerMenuI4BULBiEEE10getCurrentEv:
  |   81|      7|        {
  |   82|      7|            return it;
  |   83|      7|        }
  ------------------
   84|       |    };
   85|       |
   86|       |} // end namespace cyniu

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_base.cpp:
    1|       |#include "menu_base.h"
    2|       |
    3|       |MENU_STATE_BASE::MENU_STATE_BASE(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED) : lcdLED(lcdLED)
    4|     11|{
    5|     11|    this->contextPTR = context;
    6|     11|    this->lcdPTR = lcdPTR;
    7|     11|    this->stateMachinePTR = msm;
    8|       |    // std::cout << "MENU_STATE_BASE::MENU_STATE_BASE()" << std::endl;
    9|     11|}
   10|       |
   11|       |MENU_STATE_BASE::MENU_STATE_BASE(const MENU_STATE_BASE &base) : contextPTR(base.contextPTR), lcdPTR(base.lcdPTR), stateMachinePTR(base.stateMachinePTR)
   12|      0|{
   13|       |    // std::cout << "MENU_STATE_BASE::MENU_STATE_BASE() kopiujacy" << std::endl;
   14|      0|}
   15|       |
   16|       |MENU_STATE_BASE::MENU_STATE_BASE(const MENU_STATE_BASE &&base)
   17|      0|{
   18|       |    // std::cout << "MENU_STATE_BASE::MENU_STATE_BASE() przenoszacy" << std::endl;
   19|      0|    contextPTR = std::move(base.contextPTR);
   20|      0|    lcdPTR = std::move(base.lcdPTR);
   21|      0|    stateMachinePTR = std::move(base.stateMachinePTR);
   22|      0|}
   23|       |
   24|       |MENU_STATE_BASE &MENU_STATE_BASE::operator=(const MENU_STATE_BASE &base)
   25|      0|{
   26|       |    // std::cout << "MENU_STATE_BASE::operator = kopiujacy" << std::endl;
   27|      0|    if (&base not_eq this)
   28|      0|    {
   29|      0|        contextPTR = base.contextPTR;
   30|      0|        lcdPTR = base.lcdPTR;
   31|      0|        stateMachinePTR = base.stateMachinePTR;
   32|      0|    }
   33|      0|    return *this;
   34|      0|}
   35|       |
   36|       |MENU_STATE_BASE::~MENU_STATE_BASE()
   37|     11|{
   38|       |    // std::cout << "MENU_STATE_BASE::~MENU_STATE_BASE()" << std::endl;
   39|     11|}
   40|       |
   41|       |MENU_STATE_BASE &MENU_STATE_BASE::operator=(MENU_STATE_BASE &&base)
   42|      0|{
   43|       |    // std::cout << "MENU_STATE_BASE::operator = przenoszacy" << std::endl;
   44|      0|    if (&base not_eq this)
   45|      0|    {
   46|      0|        contextPTR = std::move(base.contextPTR);
   47|      0|        lcdPTR = std::move(base.lcdPTR);
   48|      0|        stateMachinePTR = std::move(base.stateMachinePTR);
   49|      0|    }
   50|      0|    return *this;
   51|      0|}
   52|       |
   53|       |KEY_HANDLER::KEY_HANDLER(MENU_STATE_MACHINE *msm)
   54|      4|{
   55|      4|    this->stateMachinePtr = msm;
   56|      4|}
   57|       |
   58|       |void KEY_HANDLER::recKeyEvent(KEY_PAD eventId)
   59|     27|{
   60|     27|    std::lock_guard<std::mutex> guard(lock);
   61|     27|    switch (eventId)
   62|     27|    {
   63|      2|    case KEY_PAD::OK:
   64|      2|        stateMachinePtr->currentState->keyPadOk();
   65|      2|        break;
   66|      3|    case KEY_PAD::MENU:
   67|      3|        stateMachinePtr->currentState->keyPadMenu();
   68|      3|        break;
   69|      1|    case KEY_PAD::POWER:
   70|      1|        stateMachinePtr->currentState->keyPadPower();
   71|      1|        break;
   72|      1|    case KEY_PAD::RES:
   73|      1|        stateMachinePtr->currentState->keyPadRes();
   74|      1|        break;
   75|      0|    case KEY_PAD::EPG:
   76|      0|        stateMachinePtr->currentState->keyPadEpg();
   77|      0|        break;
   78|      9|    case KEY_PAD::UP:
   79|      9|        stateMachinePtr->currentState->keyPadUp();
   80|      9|        break;
   81|     11|    case KEY_PAD::DOWN:
   82|     11|        stateMachinePtr->currentState->keyPadDown();
   83|     11|        break;
   84|      0|    case KEY_PAD::RIGHT:
   85|      0|        stateMachinePtr->currentState->keyPadRight();
   86|      0|        break;
   87|      0|    case KEY_PAD::LEFT:
   88|      0|        stateMachinePtr->currentState->keyPadLeft();
   89|      0|        break;
   90|      0|    case KEY_PAD::REBOOT:
   91|      0|        stateMachinePtr->currentState->reboot();
   92|      0|        break;
   93|      0|    case KEY_PAD::OFF_LCD:
   94|      0|        stateMachinePtr->currentState->offLcd();
   95|      0|        break;
   96|      0|    case KEY_PAD::TIMEOUT:
   97|      0|        stateMachinePtr->currentState->timeout();
   98|      0|        break;
   99|      0|    default:
  100|      0|        log_file_mutex.mutex_lock();
  101|      0|        log_file_cout << DEBUG << "KEY_HANDLER::recKeyEvent received: " << static_cast<std::underlying_type_t<KEY_PAD>>(eventId) << std::endl;
  102|      0|        log_file_mutex.mutex_unlock();
  103|     27|    }
  104|     27|}
  105|       |
  106|       |void KEY_HANDLER::recIrdaEvent(PILOT_KEY eventId)
  107|      0|{
  108|      0|    std::lock_guard<std::mutex> guard(lock);
  109|      0|    switch (eventId)
  110|      0|    {
  111|      0|    case PILOT_KEY::KEY_MENU:
  112|      0|        stateMachinePtr->currentState->keyPadMenu();
  113|      0|        break;
  114|      0|    default:
  115|      0|        log_file_mutex.mutex_lock();
  116|      0|        log_file_cout << DEBUG << "KEY_HANDLER::recIrdaEvent received: " << static_cast<std::underlying_type_t<PILOT_KEY>>(eventId) << std::endl;
  117|      0|        log_file_mutex.mutex_unlock();
  118|       |        // TODO  add more event
  119|      0|    }
  120|      0|}
  121|       |
  122|       |void KEY_HANDLER::timeout()
  123|      1|{
  124|      1|    std::lock_guard<std::mutex> guard(lock);
  125|      1|    stateMachinePtr->currentState->timeout();
  126|      1|}
  127|       |
  128|       |void KEY_HANDLER::quickPrint(const std::string &row1, const std::string &row2 = "")
  129|      0|{
  130|      0|    std::lock_guard<std::mutex> guard(lock);
  131|      0|    stateMachinePtr->currentState->quickPrint(row1, row2);
  132|      0|}
  133|       |
  134|       |void KEY_HANDLER::scrollText()
  135|      0|{
  136|      0|    std::lock_guard<std::mutex> guard(lock);
  137|      0|    stateMachinePtr->currentState->scrollText();
  138|      0|}
  139|       |
  140|       |void MENU_STATE_MACHINE::setStateMachine(std::unique_ptr<MENU_STATE_BASE> ptr)
  141|     10|{
  142|     10|    currentState = std::move(ptr);
  143|     10|    currentState->entry();
  144|     10|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_base.h:
    1|       |#pragma once
    2|       |
    3|       |#include "../LCD_c/lcd_c.h"
    4|       |#include "../iDom_server_OOP.h"
    5|       |
    6|       |class MENU_STATE_BASE;
    7|       |class MENU_STATE_MACHINE
    8|       |{
    9|       |public:
   10|       |    std::unique_ptr<MENU_STATE_BASE> currentState;
   11|      5|    ~MENU_STATE_MACHINE() = default;
   12|       |    void setStateMachine(std::unique_ptr<MENU_STATE_BASE> ptr);
   13|       |};
   14|       |
   15|       |
   16|       |class MENU_STATE_BASE
   17|       |{
   18|       |protected:
   19|       |    thread_context *contextPTR;
   20|       |    LCD_c *lcdPTR;
   21|       |    MENU_STATE_MACHINE *stateMachinePTR;
   22|       |    const std::string arrow = std::string(1, (char)8) + "              " + std::string(1, (char)9);
   23|       |    STATE lcdLED = STATE::OFF;
   24|       |    const std::string celsiusDegrees = std::string(1, (char)223) + "c";
   25|       |
   26|       |    std::string _row1;
   27|       |    std::string _row2;
   28|       |
   29|       |public:
   30|       |    MENU_STATE_BASE(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED = STATE::OFF);
   31|       |    MENU_STATE_BASE(const MENU_STATE_BASE &base);
   32|       |    MENU_STATE_BASE(const MENU_STATE_BASE &&base);
   33|       |    MENU_STATE_BASE &operator=(const MENU_STATE_BASE &base);
   34|       |    MENU_STATE_BASE &operator=(MENU_STATE_BASE &&base);
   35|       |    virtual ~MENU_STATE_BASE();
   36|       |    virtual void entry() = 0;
   37|       |    virtual void exit() = 0;
   38|       |    virtual std::string getStateName() const = 0;
   39|      0|    virtual void keyPadPower() { std::cout << __func__ << " pressed" << std::endl; };
   40|      0|    virtual void keyPadOk() { std::cout << __func__ << " pressed" << std::endl; };
   41|      0|    virtual void keyPadRes() { std::cout << __func__ << " pressed" << std::endl; };
   42|      0|    virtual void keyPadUp() { std::cout << __func__ << " pressed" << std::endl; };
   43|      0|    virtual void keyPadDown() { std::cout << __func__ << " pressed" << std::endl; };
   44|      0|    virtual void keyPadLeft() { std::cout << __func__ << " pressed" << std::endl; };
   45|      0|    virtual void keyPadRight() { std::cout << __func__ << " pressed" << std::endl; };
   46|      0|    virtual void keyPadMenu() { std::cout << __func__ << " pressed" << std::endl; };
   47|      0|    virtual void keyPadEpg() { std::cout << __func__ << " pressed" << std::endl; };
   48|      0|    virtual void reboot() { std::cout << __func__ << " pressed" << std::endl; };
   49|      0|    virtual void offLcd() { std::cout << __func__ << " pressed" << std::endl; };
   50|      0|    virtual void scrollText(){};
   51|       |    virtual void print(const std::string &row1, const std::string &row2 = "") const
   52|     30|    {
   53|     30|        lcdPTR->clear();
   54|     30|        lcdPTR->printString(row1, row2);
   55|     30|    };
   56|      0|    virtual void timeout(std::function<void()> function = std::nullptr_t()){};
   57|      0|    virtual void quickPrint(const std::string &row1, const std::string &row2){};
   58|       |
   59|       |    template <class State>
   60|       |    void changeStateTo(STATE lcdLED = STATE::OFF)
   61|      6|    {
   62|      6|        this->stateMachinePTR->currentState->exit();
   63|      6|        auto ptr = std::make_unique<State>(contextPTR, lcdPTR, stateMachinePTR, lcdLED);
   64|      6|        this->stateMachinePTR->setStateMachine(std::move(ptr));
   65|      6|    }
  ------------------
  | _ZN15MENU_STATE_BASE13changeStateToI9MENU_ROOTEEv5STATE:
  |   61|      2|    {
  |   62|      2|        this->stateMachinePTR->currentState->exit();
  |   63|      2|        auto ptr = std::make_unique<State>(contextPTR, lcdPTR, stateMachinePTR, lcdLED);
  |   64|      2|        this->stateMachinePTR->setStateMachine(std::move(ptr));
  |   65|      2|    }
  ------------------
  | _ZN15MENU_STATE_BASE13changeStateToI9MENU_MAINEEv5STATE:
  |   61|      3|    {
  |   62|      3|        this->stateMachinePTR->currentState->exit();
  |   63|      3|        auto ptr = std::make_unique<State>(contextPTR, lcdPTR, stateMachinePTR, lcdLED);
  |   64|      3|        this->stateMachinePTR->setStateMachine(std::move(ptr));
  |   65|      3|    }
  ------------------
  | Unexecuted instantiation: _ZN15MENU_STATE_BASE13changeStateToI10MENU_LIGHTEEv5STATE
  ------------------
  | Unexecuted instantiation: _ZN15MENU_STATE_BASE13changeStateToI9MENU_KODIEEv5STATE
  ------------------
  | _ZN15MENU_STATE_BASE13changeStateToI9MENU_INFOEEv5STATE:
  |   61|      1|    {
  |   62|      1|        this->stateMachinePTR->currentState->exit();
  |   63|      1|        auto ptr = std::make_unique<State>(contextPTR, lcdPTR, stateMachinePTR, lcdLED);
  |   64|      1|        this->stateMachinePTR->setStateMachine(std::move(ptr));
  |   65|      1|    }
  ------------------
  | Unexecuted instantiation: _ZN15MENU_STATE_BASE13changeStateToI12MENU_BUDERUSEEv5STATE
  ------------------
  | Unexecuted instantiation: _ZN15MENU_STATE_BASE13changeStateToI16MENU_MAINTENANCEEEv5STATE
  ------------------
   66|       |};
   67|       |
   68|       |class KEY_HANDLER: public KEY_HANDLER_BASE
   69|       |{
   70|       |protected:
   71|       |    MENU_STATE_MACHINE *stateMachinePtr;
   72|       |    std::mutex lock;
   73|       |
   74|       |public:
   75|       |    KEY_HANDLER() = default;
   76|       |    explicit KEY_HANDLER(MENU_STATE_MACHINE *msm);
   77|       |    ~KEY_HANDLER() = default;
   78|       |    void recKeyEvent(KEY_PAD eventId) override;
   79|       |    void recIrdaEvent(PILOT_KEY eventId) override;
   80|       |    void timeout() override;
   81|       |    void quickPrint(const std::string &row1, const std::string &row2) override;
   82|       |    void scrollText() override;
   83|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_buderus.cpp:
    1|       |#include "menu_buderus.h"
    2|       |#include "menu_root.h"
    3|       |#include "menu_main.h"
    4|       |
    5|       |MENU_BUDERUS::MENU_BUDERUS(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED) : MENU_STATE_BASE(context, lcdPTR, msm, lcdLED)
    6|      0|{
    7|      0|}
    8|       |
    9|       |MENU_BUDERUS::MENU_BUDERUS(const MENU_BUDERUS &base) : MENU_STATE_BASE(base)
   10|      0|{
   11|      0|}
   12|       |
   13|       |MENU_BUDERUS::MENU_BUDERUS(MENU_BUDERUS &&base) : MENU_STATE_BASE(std::move(base))
   14|      0|{
   15|      0|}
   16|       |
   17|       |MENU_BUDERUS &MENU_BUDERUS::operator=(const MENU_BUDERUS &base)
   18|      0|{
   19|      0|    if (&base not_eq this)
   20|      0|    {
   21|      0|        contextPTR = base.contextPTR;
   22|      0|        lcdPTR = base.lcdPTR;
   23|      0|        stateMachinePTR = base.stateMachinePTR;
   24|      0|    }
   25|      0|    return *this;
   26|      0|}
   27|       |
   28|       |MENU_BUDERUS &MENU_BUDERUS::operator=(MENU_BUDERUS &&base)
   29|      0|{
   30|      0|    if (&base not_eq this)
   31|      0|    {
   32|      0|        contextPTR = base.contextPTR;
   33|      0|        lcdPTR = base.lcdPTR;
   34|      0|        stateMachinePTR = base.stateMachinePTR;
   35|      0|    }
   36|      0|    return *this;
   37|      0|}
   38|       |
   39|       |void MENU_BUDERUS::entry()
   40|      0|{
   41|      0|    menuDatabase.pushBack({"RUN CIRCLE PUMP", [=, this]()
   42|      0|                           {contextPTR->ptr_buderus->runCirclePompForWhile();  changeStateTo<MENU_ROOT>(); return "done"; }});
   43|      0|    menuDatabase.pushBack({"TEMP INSIDE", [=, this]()
   44|      0|                           { return to_string_with_precision(contextPTR->ptr_buderus->getInsideTemp()) + celsiusDegrees; }});
   45|      0|    menuDatabase.pushBack({"TEMP OUTDOOR", [=, this]()
   46|      0|                           { return to_string_with_precision(contextPTR->ptr_buderus->getOutdoorTemp()) + celsiusDegrees; }});
   47|      0|    menuDatabase.pushBack({"   EXIT", [=, this]()
   48|      0|                           { changeStateTo<MENU_ROOT>(); return "done"; }});
   49|      0|    print(menuDatabase.getCurrent().name, arrow);
   50|      0|}
   51|       |
   52|       |void MENU_BUDERUS::exit()
   53|      0|{
   54|      0|}
   55|       |
   56|       |void MENU_BUDERUS::keyPadOk()
   57|      0|{
   58|      0|    auto str = menuDatabase.getCurrent().function();
   59|      0|    lcdPTR->printString("", str);
   60|      0|}
   61|       |
   62|       |void MENU_BUDERUS::keyPadUp()
   63|      0|{
   64|      0|    menuDatabase.up();
   65|      0|    print(menuDatabase.getCurrent().name, arrow);
   66|      0|}
   67|       |
   68|       |void MENU_BUDERUS::keyPadDown()
   69|      0|{
   70|      0|    menuDatabase.down();
   71|      0|    print(menuDatabase.getCurrent().name, arrow);
   72|      0|}
   73|       |
   74|       |void MENU_BUDERUS::keyPadRes()
   75|      0|{
   76|      0|    changeStateTo<MENU_MAIN>();
   77|      0|}
   78|       |
   79|       |std::string MENU_BUDERUS::getStateName() const
   80|      0|{
   81|      0|    return typeid(this).name();
   82|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_buderus.h:
    1|       |#pragma once
    2|       |
    3|       |#include "menu_base.h"
    4|       |#include "libs/container_menu.h"
    5|       |
    6|       |class MENU_BUDERUS : public MENU_STATE_BASE
    7|       |{
    8|       |    cyniu::ContainerMenu<std::string, std::function<std::string()>> menuDatabase;
    9|       |
   10|       |public:
   11|       |    MENU_BUDERUS(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED = STATE::OFF);
   12|       |    MENU_BUDERUS(const MENU_BUDERUS &base);
   13|       |    MENU_BUDERUS(MENU_BUDERUS &&base);
   14|       |    MENU_BUDERUS &operator=(const MENU_BUDERUS &base);
   15|       |    MENU_BUDERUS &operator=(MENU_BUDERUS &&base);
   16|      0|    ~MENU_BUDERUS() = default;
   17|       |    void entry() override;
   18|       |    void exit() override;
   19|       |    void keyPadOk() override;
   20|       |    void keyPadUp() override;
   21|       |    void keyPadDown() override;
   22|       |    void keyPadRes() override;
   23|       |    std::string getStateName() const override;
   24|       |};
   25|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_info.cpp:
    1|       |#include "menu_info.h"
    2|       |#include "menu_root.h"
    3|       |#include "menu_main.h"
    4|       |
    5|       |#include "../iDomTools/idomtools_interface.h"
    6|       |
    7|       |MENU_INFO::MENU_INFO(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED) : MENU_STATE_BASE(context, lcdPTR, msm, lcdLED)
    8|      1|{
    9|      1|}
   10|       |
   11|       |MENU_INFO::MENU_INFO(const MENU_INFO &base) : MENU_STATE_BASE(base)
   12|      0|{
   13|      0|}
   14|       |
   15|       |MENU_INFO::MENU_INFO(MENU_INFO &&base) : MENU_STATE_BASE(std::move(base))
   16|      0|{
   17|      0|}
   18|       |
   19|       |MENU_INFO &MENU_INFO::operator=(const MENU_INFO &base)
   20|      0|{ //  std::cout << "MENU_VOLUME::operator = kopiujacy" << std::endl;
   21|      0|    if (&base not_eq this)
   22|      0|    {
   23|      0|        contextPTR = base.contextPTR;
   24|      0|        lcdPTR = base.lcdPTR;
   25|      0|        stateMachinePTR = base.stateMachinePTR;
   26|      0|    }
   27|      0|    return *this;
   28|      0|}
   29|       |
   30|       |MENU_INFO &MENU_INFO::operator=(MENU_INFO &&base)
   31|      0|{ //  std::cout << "MENU_VOLUME::operator = kopiujacy" << std::endl;
   32|      0|    if (&base not_eq this)
   33|      0|    {
   34|      0|        contextPTR = base.contextPTR;
   35|      0|        lcdPTR = base.lcdPTR;
   36|      0|        stateMachinePTR = base.stateMachinePTR;
   37|      0|    }
   38|      0|    return *this;
   39|      0|}
   40|       |
   41|       |void MENU_INFO::entry()
   42|      1|{
   43|      1|    m_infoDatabase.insert(std::pair<std::string, std::string>("smog", contextPTR->main_iDomTools->getSmog().value_or("null")));
   44|      1|    m_infoDatabase.insert(std::pair<std::string, std::string>("temperatura na piecu",
   45|      1|                                                              to_string_with_precision(contextPTR->ptr_buderus->getCurFlowTemp()) + celsiusDegrees));
   46|      1|    m_infoDatabase.insert(std::pair<std::string, std::string>("dlugosc dnia", contextPTR->main_iDomTools->getDayLenght()));
   47|      1|    m_infoDatabase.insert(std::pair<std::string, std::string>("wschod slonca", contextPTR->main_iDomTools->getSunrise()));
   48|      1|    m_infoDatabase.insert(std::pair<std::string, std::string>("zachod slonca", contextPTR->main_iDomTools->getSunset()));
   49|      1|    m_infoDatabase.begin();
   50|      1|    auto p = m_infoDatabase.getCurrent();
   51|      1|    print(p->first, p->second);
   52|      1|}
   53|       |
   54|       |void MENU_INFO::exit()
   55|      0|{
   56|      0|}
   57|       |
   58|       |std::string MENU_INFO::getStateName() const
   59|      0|{
   60|      0|    return typeid(this).name();
   61|      0|}
   62|       |
   63|       |void MENU_INFO::keyPadUp()
   64|      0|{
   65|      0|    m_infoDatabase.up();
   66|      0|    auto p = m_infoDatabase.getCurrent();
   67|      0|    print(p->first, p->second);
   68|      0|    contextPTR->main_Rs232->print("TIMEOUT:30000;");
   69|      0|}
   70|       |
   71|       |void MENU_INFO::keyPadDown()
   72|      0|{
   73|      0|    m_infoDatabase.down();
   74|      0|    auto p = m_infoDatabase.getCurrent();
   75|      0|    print(p->first, p->second);
   76|      0|    contextPTR->main_Rs232->print("TIMEOUT:30000;");
   77|      0|}
   78|       |
   79|       |void MENU_INFO::keyPadRes()
   80|      0|{
   81|      0|    changeStateTo<MENU_MAIN>();
   82|      0|}
   83|       |
   84|       |void MENU_INFO::timeout(std::function<void()> function)
   85|      0|{
   86|      0|    changeStateTo<MENU_ROOT>();
   87|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_info.h:
    1|       |#pragma once
    2|       |
    3|       |#include <vector>
    4|       |
    5|       |#include "menu_base.h"
    6|       |#include "libs/container_menu.h"
    7|       |
    8|       |class MENU_INFO : public MENU_STATE_BASE
    9|       |{
   10|       |    cyniu::ContainerMenuMap<std::string, std::string> m_infoDatabase;
   11|       |
   12|       |public:
   13|       |    MENU_INFO(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED = STATE::OFF);
   14|       |    MENU_INFO(const MENU_INFO &base);
   15|       |    MENU_INFO(MENU_INFO &&base);
   16|       |    MENU_INFO &operator=(const MENU_INFO &base);
   17|       |    MENU_INFO &operator=(MENU_INFO &&base);
   18|      1|    ~MENU_INFO() = default;
   19|       |    void entry() override;
   20|       |    void exit() override;
   21|       |    std::string getStateName() const override;
   22|       |    void keyPadUp() override;
   23|       |    void keyPadDown() override;
   24|       |    void keyPadRes() override;
   25|       |    void timeout(std::function<void()> function = std::nullptr_t()) override;
   26|       |
   27|       |private:
   28|       |    std::vector<nlohmann::json> m_lightData;
   29|       |};
   30|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_kodi.cpp:
    1|       |#include <iostream>
    2|       |#include <curl/curl.h>
    3|       |
    4|       |#include "menu_kodi.h"
    5|       |#include "menu_root.h"
    6|       |#include "../iDomTools/idomtools_interface.h"
    7|       |
    8|       |/*
    9|       |up     [{"jsonrpc":"2.0","method":"Input.Up","params":[],"id":2361}]
   10|       |left   [{"jsonrpc":"2.0","method":"Input.Left","params":[],"id":2460}]
   11|       |right  [{"jsonrpc":"2.0","method":"Input.Right","params":[],"id":2621}]
   12|       |down   [{"jsonrpc":"2.0","method":"Input.Down","params":[],"id":2621}]
   13|       |enter  [{"jsonrpc":"2.0","method":"Input.Select","params":[],"id":2923}]
   14|       |back   [{"jsonrpc":"2.0","method":"Input.Back","params":[],"id":3749}]
   15|       |play   [{"jsonrpc":"2.0","method":"Player.PlayPause","params":[1,"toggle"],"id":3999}]
   16|       |stop   [{"jsonrpc":"2.0","method":"Player.Stop","params":[1],"id":11536}]
   17|       |home   [{"jsonrpc":"2.0","method":"Input.Home","params":[],"id":4405}]
   18|       |set volume [{"jsonrpc":"2.0","method":"Application.SetVolume","params":[80],"id":8033}]
   19|       |get volumr [{"jsonrpc":"2.0","method":"Application.GetProperties","params":[["volume"]],"id":492}]
   20|       |quit [{"jsonrpc":"2.0","method":"Application.Quit","params":[],"id":6}]
   21|       | */
   22|       |
   23|       |std::string MENU_KODI::sendCommandToKodi(const std::string &command, const std::string &param)
   24|      0|{
   25|      0|    std::string readBuffer;
   26|      0|    std::string data = R"({"jsonrpc":"2.0","method":")";
   27|      0|    data.append(command);
   28|      0|    data.append(R"(","params":[)");
   29|      0|    data.append(param);
   30|      0|    data.append(R"(],"id":)");
   31|      0|    data.append(std::to_string(++kodiMsgId));
   32|      0|    data.append("}");
   33|       |
   34|      0|    std::string address = kodiHost;
   35|       |
   36|       |    // CURLcode ret;
   37|      0|    CURL *hnd;
   38|      0|    struct curl_slist *slist1;
   39|      0|    std::string jsonstr = data;
   40|       |
   41|      0|    slist1 = NULL;
   42|      0|    slist1 = curl_slist_append(slist1, "Content-Type: application/json");
   43|       |
   44|      0|    hnd = curl_easy_init();
   45|      0|    curl_easy_setopt(hnd, CURLOPT_URL, address.c_str());
   46|      0|    curl_easy_setopt(hnd, CURLOPT_NOPROGRESS, 1L);
   47|      0|    curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, jsonstr.c_str());
   48|      0|    curl_easy_setopt(hnd, CURLOPT_USERAGENT, "curl/7.38.0");
   49|      0|    curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, slist1);
   50|      0|    curl_easy_setopt(hnd, CURLOPT_MAXREDIRS, 50L);
   51|      0|    curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
   52|      0|    curl_easy_setopt(hnd, CURLOPT_TCP_KEEPALIVE, 1L);
   53|      0|    curl_easy_setopt(hnd, CURLOPT_PORT, 8080);
   54|       |    // curl_easy_setopt(hnd, CURLOPT_WRITEDATA, &readBuffer);
   55|       |
   56|      0|    curl_easy_perform(hnd);
   57|       |
   58|      0|    curl_easy_cleanup(hnd);
   59|      0|    hnd = NULL;
   60|      0|    curl_slist_free_all(slist1);
   61|      0|    slist1 = NULL;
   62|      0|    return readBuffer;
   63|      0|}
   64|       |
   65|       |MENU_KODI::MENU_KODI(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED) : MENU_STATE_BASE(context, lcdPTR, msm, lcdLED)
   66|      0|{
   67|      0|    std::cout << "MENU_KODI::MENU_KODI()" << std::endl;
   68|      0|}
   69|       |
   70|       |MENU_KODI::MENU_KODI(const MENU_KODI &base) : MENU_STATE_BASE(base)
   71|      0|{
   72|       |    // std::cout << "MENU_KODI::MENU_KODI() kopiujacy" << std::endl;
   73|      0|}
   74|       |
   75|       |MENU_KODI::MENU_KODI(MENU_KODI &&base) : MENU_STATE_BASE(std::move(base))
   76|      0|{
   77|       |    //  std::cout << "MENU_KODI::MENU_KODI() przenoszacy" << std::endl;
   78|      0|}
   79|       |
   80|       |MENU_KODI &MENU_KODI::operator=(const MENU_KODI &base)
   81|      0|{
   82|       |    //  std::cout << "MENU_KODI::operator = kopiujacy" << std::endl;
   83|      0|    if (&base not_eq this)
   84|      0|    {
   85|      0|        contextPTR = base.contextPTR;
   86|      0|        lcdPTR = base.lcdPTR;
   87|      0|        stateMachinePTR = base.stateMachinePTR;
   88|      0|        kodiVolume = base.kodiVolume;
   89|      0|    }
   90|      0|    return *this;
   91|      0|}
   92|       |
   93|       |MENU_KODI &MENU_KODI::operator=(MENU_KODI &&base)
   94|      0|{
   95|       |    //  std::cout << "MENU_KODI::operator = przenoszacy" << std::endl;
   96|      0|    if (&base not_eq this)
   97|      0|    {
   98|      0|        contextPTR = base.contextPTR;
   99|      0|        lcdPTR = base.lcdPTR;
  100|      0|        stateMachinePTR = base.stateMachinePTR;
  101|      0|        kodiVolume = base.kodiVolume;
  102|      0|    }
  103|      0|    return *this;
  104|      0|}
  105|       |
  106|       |void MENU_KODI::entry()
  107|      0|{
  108|      0|    contextPTR->main_iDomTools->startKodi_Thread();
  109|       |
  110|      0|    contextPTR->main_Rs232->print("TIMEOUT:0;");
  111|      0|}
  112|       |
  113|       |void MENU_KODI::exit()
  114|      0|{
  115|      0|}
  116|       |
  117|       |void MENU_KODI::keyPadOk()
  118|      0|{
  119|      0|    std::cout << "odebrano: " << sendCommandToKodi("Input.Select", "") << std::endl;
  120|      0|}
  121|       |
  122|       |void MENU_KODI::keyPadUp()
  123|      0|{
  124|      0|    std::cout << "odebrano: " << sendCommandToKodi("Input.Up", "") << std::endl;
  125|      0|}
  126|       |
  127|       |void MENU_KODI::keyPadDown()
  128|      0|{
  129|      0|    std::cout << "odebrano: " << sendCommandToKodi("Input.Down", "") << std::endl;
  130|      0|}
  131|       |
  132|       |void MENU_KODI::keyPadLeft()
  133|      0|{
  134|      0|    std::cout << "odebrano: " << sendCommandToKodi("Input.Left", "") << std::endl;
  135|      0|}
  136|       |
  137|       |void MENU_KODI::keyPadRight()
  138|      0|{
  139|      0|    std::cout << "odebrano: " << sendCommandToKodi("Input.Right", "") << std::endl;
  140|      0|}
  141|       |
  142|       |void MENU_KODI::keyPadRes()
  143|      0|{
  144|      0|    std::cout << "odebrano: " << sendCommandToKodi("Input.Back", "") << std::endl;
  145|      0|}
  146|       |
  147|       |void MENU_KODI::keyPadEpg()
  148|      0|{
  149|      0|    sendCommandToKodi("Player.Stop", "");
  150|      0|}
  151|       |
  152|       |void MENU_KODI::keyPadPower()
  153|      0|{
  154|      0|    std::cout << "odebrano: " << sendCommandToKodi("Application.Quit", "") << std::endl;
  155|      0|}
  156|       |
  157|       |void MENU_KODI::keyPadMenu()
  158|      0|{
  159|      0|    std::cout << "odebrano: " << sendCommandToKodi("Input.Home", "") << std::endl;
  160|      0|}
  161|       |
  162|       |std::string MENU_KODI::getStateName() const
  163|      0|{
  164|      0|    return typeid(this).name();
  165|      0|}
  166|       |
  167|       |void MENU_KODI::timeout(std::function<void()> function)
  168|      0|{
  169|       |    // exit from kodi menu after  off  kodi
  170|      0|    changeStateTo<MENU_ROOT>();
  171|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_kodi.h:
    1|       |#pragma once
    2|       |
    3|       |#include "menu_base.h"
    4|       |
    5|       |class MENU_KODI : public MENU_STATE_BASE
    6|       |{
    7|       |    int kodiVolume = 50;
    8|       |    int kodiMsgId = 8;
    9|       |    std::string kodiHost = "kodi:kodi@192.168.13.181/jsonrpc";
   10|       |    std::string sendCommandToKodi(const std::string &command, const std::string &param);
   11|       |
   12|       |public:
   13|       |    MENU_KODI(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED = STATE::OFF);
   14|       |    MENU_KODI(const MENU_KODI &base);
   15|       |    MENU_KODI(MENU_KODI &&base);
   16|       |    MENU_KODI &operator=(const MENU_KODI &base);
   17|       |    MENU_KODI &operator=(MENU_KODI &&base);
   18|      0|    ~MENU_KODI() = default;
   19|       |    void entry() override;
   20|       |    void exit() override;
   21|       |    void keyPadOk() override;
   22|       |    void keyPadUp() override;
   23|       |    void keyPadDown() override;
   24|       |    void keyPadLeft() override;
   25|       |    void keyPadRight() override;
   26|       |    void keyPadRes() override;
   27|       |    void keyPadEpg() override;
   28|       |    void keyPadPower() override;
   29|       |    void keyPadMenu() override;
   30|       |    std::string getStateName() const override;
   31|       |    void timeout(std::function<void()> function = std::nullptr_t()) override;
   32|       |};
   33|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_light.cpp:
    1|       |#include "menu_light.h"
    2|       |#include "menu_main.h"
    3|       |#include "menu_root.h"
    4|       |
    5|       |MENU_LIGHT::MENU_LIGHT(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED) : MENU_STATE_BASE(context, lcdPTR, msm, lcdLED)
    6|      1|{
    7|       |    // std::cout << "MENU_LIGHT::MENU_LIGHT()" << std::endl;
    8|      1|}
    9|       |
   10|       |MENU_LIGHT::MENU_LIGHT(const MENU_LIGHT &base) : MENU_STATE_BASE(base)
   11|      0|{
   12|       |    // std::cout << "MENU_LIGHT::MENU_LIGHT() kopiujacy" << std::endl;
   13|      0|}
   14|       |
   15|       |MENU_LIGHT::MENU_LIGHT(MENU_LIGHT &&base) : MENU_STATE_BASE(std::move(base)), m_lightDatabase(std::move(base.m_lightDatabase))
   16|      0|{
   17|       |    // std::cout << "MENU_LIGHT::MENU_LIGHT() przenoszacy" << std::endl;
   18|      0|}
   19|       |
   20|       |MENU_LIGHT &MENU_LIGHT::operator=(const MENU_LIGHT &base)
   21|      0|{
   22|      0|    if (&base not_eq this)
   23|      0|    {
   24|      0|        contextPTR = base.contextPTR;
   25|      0|        lcdPTR = base.lcdPTR;
   26|      0|        stateMachinePTR = base.stateMachinePTR;
   27|      0|    }
   28|      0|    return *this;
   29|      0|}
   30|       |
   31|       |MENU_LIGHT &MENU_LIGHT::operator=(MENU_LIGHT &&base)
   32|      0|{
   33|      0|    if (&base not_eq this)
   34|      0|    {
   35|      0|        contextPTR = base.contextPTR;
   36|      0|        lcdPTR = base.lcdPTR;
   37|      0|        stateMachinePTR = base.stateMachinePTR;
   38|      0|        m_lightDatabase = std::move(base.m_lightDatabase);
   39|      0|    }
   40|      0|    return *this;
   41|      0|}
   42|       |
   43|       |void MENU_LIGHT::entry()
   44|      1|{
   45|       |    // std::cout << "MENU_LIGHT::entry()" << std::endl;
   46|      1|    auto jj = contextPTR->main_house_room_handler->getAllInfoJSON();
   47|       |    // std::cout << jj.dump(4) << std::endl;
   48|      1|    for (const auto &data : jj)
   49|      7|    {
   50|      7|        auto name = data.at("room").get<std::string>();
   51|       |
   52|      7|        BULB bulb(data.at("bulb name").get<std::string>(), data.at("bulb ID").get<int>());
   53|      7|        m_lightDatabase.databaseMap[name].pushBack({bulb, 0});
   54|      7|    }
   55|      1|    m_lightDatabase.databaseMap["all"].pushBack({BULB("all", 0), 0});
   56|       |
   57|      1|    for (auto & [key, value] : m_lightDatabase.databaseMap)
   58|      4|    {
   59|      4|        value.pushBack({BULB("all", 0), 0});
   60|      4|    }
   61|       |
   62|      1|    m_lightDatabase.begin();
   63|      1|    auto p = m_lightDatabase.getCurrent();
   64|      1|    print(p->first, p->second.getCurrent().name.name);
   65|      1|}
   66|       |
   67|       |void MENU_LIGHT::exit()
   68|      0|{
   69|       |    // std::cout << "MENU_LIGHT::exit()" << std::endl;
   70|      0|}
   71|       |
   72|       |std::string MENU_LIGHT::getStateName() const
   73|      0|{
   74|      0|    return typeid(this).name();
   75|      0|}
   76|       |
   77|       |void MENU_LIGHT::keyPadRes()
   78|      0|{
   79|      0|    changeStateTo<MENU_MAIN>();
   80|      0|}
   81|       |
   82|       |void MENU_LIGHT::keyPadUp()
   83|      0|{
   84|      0|    m_lightDatabase.up();
   85|      0|    auto p = m_lightDatabase.getCurrent();
   86|      0|    print(p->first, p->second.getCurrent().name.name);
   87|      0|    contextPTR->main_Rs232->print("TIMEOUT:30000;");
   88|      0|}
   89|       |
   90|       |void MENU_LIGHT::keyPadDown()
   91|      1|{
   92|      1|    m_lightDatabase.down();
   93|      1|    auto p = m_lightDatabase.getCurrent();
   94|      1|    print(p->first, p->second.getCurrent().name.name);
   95|      1|    contextPTR->main_Rs232->print("TIMEOUT:30000;");
   96|      1|}
   97|       |
   98|       |void MENU_LIGHT::keyPadLeft()
   99|      3|{
  100|      3|    auto p = m_lightDatabase.getCurrent();
  101|      3|    p->second.down();
  102|      3|    print(p->first, p->second.getCurrent().name.name);
  103|      3|    contextPTR->main_Rs232->print("TIMEOUT:30000;");
  104|      3|}
  105|       |
  106|       |void MENU_LIGHT::keyPadRight()
  107|      1|{
  108|      1|    auto p = m_lightDatabase.getCurrent();
  109|      1|    p->second.up();
  110|      1|    print(p->first, p->second.getCurrent().name.name);
  111|      1|    contextPTR->main_Rs232->print("TIMEOUT:30000;");
  112|      1|}
  113|       |
  114|       |void MENU_LIGHT::keyPadOk()
  115|      1|{
  116|      1|    auto p = m_lightDatabase.getCurrent();
  117|      1|    int id = p->second.getCurrent().name.id;
  118|      1|    if (p->first == "all")
  119|      0|    {
  120|      0|        contextPTR->main_house_room_handler->turnOnAllBulb();
  121|      0|        return;
  122|      0|    }
  123|      1|    else if (id == 0)
  124|      0|    {
  125|      0|        contextPTR->main_house_room_handler->turnOnAllInRoom(p->first);
  126|      0|        return;
  127|      0|    }
  128|      1|    contextPTR->main_house_room_handler->turnOnBulb(id);
  129|      1|}
  130|       |
  131|       |void MENU_LIGHT::keyPadPower()
  132|      0|{
  133|      0|    auto p = m_lightDatabase.getCurrent();
  134|      0|    int id = p->second.getCurrent().name.id;
  135|      0|    if (p->first == "all")
  136|      0|    {
  137|      0|        contextPTR->main_house_room_handler->turnOffAllBulb();
  138|      0|        return;
  139|      0|    }
  140|      0|    else if (id == 0)
  141|      0|    {
  142|      0|        contextPTR->main_house_room_handler->turnOffAllInRoom(p->first);
  143|      0|        return;
  144|      0|    }
  145|      0|    contextPTR->main_house_room_handler->turnOffBulb(id);
  146|      0|}
  147|       |
  148|       |void MENU_LIGHT::timeout(std::function<void()> function)
  149|      0|{
  150|      0|    changeStateTo<MENU_ROOT>();
  151|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_light.h:
    1|       |#pragma once
    2|       |
    3|       |#include "menu_base.h"
    4|       |#include "libs/container_menu.h"
    5|       |
    6|       |struct BULB
    7|       |{
    8|     12|    BULB(const std::string &name, int id) : name(name), id(id) {}
    9|     48|    ~BULB() = default;
   10|       |    std::string name = "NULL";
   11|       |    int id = 0;
   12|       |};
   13|       |
   14|       |class MENU_LIGHT : public MENU_STATE_BASE
   15|       |{
   16|       |    cyniu::ContainerMenuMap<std::string, cyniu::ContainerMenu<BULB, int>> m_lightDatabase;
   17|       |
   18|       |public:
   19|       |    MENU_LIGHT(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED = STATE::OFF);
   20|       |    MENU_LIGHT(const MENU_LIGHT &base);
   21|       |    MENU_LIGHT(MENU_LIGHT &&base);
   22|       |    MENU_LIGHT &operator=(const MENU_LIGHT &base);
   23|       |    MENU_LIGHT &operator=(MENU_LIGHT &&base);
   24|      1|    ~MENU_LIGHT() = default;
   25|       |    void entry() override;
   26|       |    void exit() override;
   27|       |    std::string getStateName() const override;
   28|       |    void keyPadRes() override;
   29|       |    void keyPadUp() override;
   30|       |    void keyPadDown() override;
   31|       |    void keyPadLeft() override;
   32|       |    void keyPadRight() override;
   33|       |    void keyPadOk() override;
   34|       |    void keyPadPower() override;
   35|       |    void timeout(std::function<void()> function = std::nullptr_t()) override;
   36|       |};
   37|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_main.cpp:
    1|       |#include "menu_main.h"
    2|       |#include "menu_light.h"
    3|       |#include "menu_root.h"
    4|       |#include "menu_kodi.h"
    5|       |#include "menu_buderus.h"
    6|       |#include "menu_info.h"
    7|       |#include "menu_maintenance.h"
    8|       |#include "../iDomTools/idomtools_interface.h"
    9|       |
   10|       |MENU_MAIN::MENU_MAIN(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED) : MENU_STATE_BASE(context, lcdPTR, msm, lcdLED)
   11|      3|{
   12|       |    //  std::cout << "MENU_MAIN::MENU_MAIN()" << std::endl;
   13|      3|}
   14|       |
   15|       |MENU_MAIN::MENU_MAIN(const MENU_MAIN &base) : MENU_STATE_BASE(base)
   16|      0|{
   17|       |    // std::cout << "MENU_MAIN::MENU_MAIN() kopiujacy" << std::endl;
   18|      0|}
   19|       |
   20|       |MENU_MAIN::MENU_MAIN(MENU_MAIN &&base) : MENU_STATE_BASE(std::move(base))
   21|      0|{
   22|       |    //  std::cout << "MENU_MAIN::MENU_MAIN() przenoszacy" << std::endl;
   23|      0|}
   24|       |
   25|       |MENU_MAIN &MENU_MAIN::operator=(const MENU_MAIN &base)
   26|      0|{
   27|       |    // std::cout << "MENU_MAIN::operator = kopiujacy" << std::endl;
   28|      0|    if (&base not_eq this)
   29|      0|    {
   30|      0|        contextPTR = base.contextPTR;
   31|      0|        lcdPTR = base.lcdPTR;
   32|      0|        stateMachinePTR = base.stateMachinePTR;
   33|      0|        menuDatabase = base.menuDatabase;
   34|      0|    }
   35|      0|    return *this;
   36|      0|}
   37|       |
   38|       |MENU_MAIN &MENU_MAIN::operator=(MENU_MAIN &&base)
   39|      0|{
   40|      0|    std::cout << "MENU_MAIN::operator = przenoszacy" << std::endl;
   41|      0|    if (&base not_eq this)
   42|      0|    {
   43|      0|        contextPTR = base.contextPTR;
   44|      0|        lcdPTR = base.lcdPTR;
   45|      0|        stateMachinePTR = base.stateMachinePTR;
   46|      0|        menuDatabase = std::move(base.menuDatabase);
   47|      0|    }
   48|      0|    return *this;
   49|      0|}
   50|       |
   51|       |void MENU_MAIN::entry()
   52|      3|{
   53|       |    //  std::cout << "MENU_MAIN::entry()" << std::endl;
   54|      3|    menuDatabase.pushBack({"   MUSIC", [=, this]()
   55|      3|                           { contextPTR->main_iDomTools->MPD_play(contextPTR);
   56|      1|                                                changeStateTo<MENU_ROOT>(); }});
   57|      3|    menuDatabase.pushBack({"   LIGHT", [=, this]()
   58|      3|                           { changeStateTo<MENU_LIGHT>(); }});
   59|      3|    menuDatabase.pushBack({"   KODI", [=, this]()
   60|      3|                           { changeStateTo<MENU_KODI>(); }});
   61|      3|    menuDatabase.pushBack({"   INFO", [=, this]()
   62|      3|                           { changeStateTo<MENU_INFO>(); }});
   63|      3|    menuDatabase.pushBack({"   BUDERUS", [=, this]()
   64|      3|                           { changeStateTo<MENU_BUDERUS>(); }});
   65|      3|    menuDatabase.pushBack({" MAINTENANCE", [=, this]()
   66|      3|                           { changeStateTo<MENU_MAINTENANCE>(); }});
   67|      3|    menuDatabase.pushBack({"   EXIT", [=, this]()
   68|      3|                           { changeStateTo<MENU_ROOT>(); }});
   69|      3|    print(menuDatabase.getCurrent().name, arrow);
   70|      3|    contextPTR->main_Rs232->print("TIMEOUT:30000;");
   71|      3|}
   72|       |
   73|       |void MENU_MAIN::exit()
   74|      3|{
   75|       |    //  std::cout << "MENU_MAIN::exit()" << std::endl;
   76|      3|}
   77|       |
   78|       |std::string MENU_MAIN::getStateName() const
   79|      3|{
   80|      3|    return typeid(this).name();
   81|      3|}
   82|       |
   83|       |void MENU_MAIN::keyPadOk()
   84|      2|{
   85|      2|    menuDatabase.getCurrent().function();
   86|      2|}
   87|       |
   88|       |void MENU_MAIN::keyPadRes()
   89|      1|{
   90|      1|    changeStateTo<MENU_ROOT>();
   91|      1|}
   92|       |
   93|       |void MENU_MAIN::keyPadUp()
   94|      9|{
   95|      9|    menuDatabase.up();
   96|      9|    print(menuDatabase.getCurrent().name, arrow);
   97|      9|}
   98|       |
   99|       |void MENU_MAIN::keyPadDown()
  100|     11|{
  101|     11|    menuDatabase.down();
  102|     11|    print(menuDatabase.getCurrent().name, arrow);
  103|     11|}
  104|       |
  105|       |void MENU_MAIN::timeout(std::function<void()> function)
  106|      0|{
  107|      0|    changeStateTo<MENU_ROOT>();
  108|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_main.h:
    1|       |#pragma once
    2|       |
    3|       |#include <vector>
    4|       |#include <string>
    5|       |#include "menu_base.h"
    6|       |#include "libs/container_menu.h"
    7|       |
    8|       |class MENU_MAIN : public MENU_STATE_BASE
    9|       |{
   10|       |    cyniu::ContainerMenu<std::string, std::function<void()>> menuDatabase;
   11|       |
   12|       |public:
   13|       |    MENU_MAIN(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED = STATE::OFF);
   14|       |    MENU_MAIN(const MENU_MAIN &base);
   15|       |    MENU_MAIN(MENU_MAIN &&base);
   16|       |    MENU_MAIN &operator=(const MENU_MAIN &base);
   17|       |    MENU_MAIN &operator=(MENU_MAIN &&base);
   18|      3|    ~MENU_MAIN() = default;
   19|       |    void entry() override;
   20|       |    void exit() override;
   21|       |    std::string getStateName() const override;
   22|       |    void keyPadOk() override;
   23|       |    void keyPadRes() override;
   24|       |    void keyPadUp() override;
   25|       |    void keyPadDown() override;
   26|       |    void timeout(std::function<void()> function = std::nullptr_t()) override;
   27|       |};
   28|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_maintenance.cpp:
    1|       |#include <sstream>
    2|       |
    3|       |#include "menu_maintenance.h"
    4|       |#include "menu_main.h"
    5|       |#include "menu_root.h"
    6|       |#include "../iDomTools/idomtools_interface.h"
    7|       |
    8|       |MENU_MAINTENANCE::MENU_MAINTENANCE(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED) : MENU_STATE_BASE(context, lcdPTR, msm, lcdLED)
    9|      0|{
   10|      0|}
   11|       |
   12|       |void MENU_MAINTENANCE::entry()
   13|      0|{
   14|      0|    menuDatabase.pushBack({"  HARD RELOAD", [=, this]()
   15|      0|                           {print("iDom RELOAD",""); 
   16|      0|													  contextPTR->main_iDomTools->reloadHard_iDomServer(); }});
   17|      0|    menuDatabase.pushBack({"RASPBERRY RELOAD", [=, this]()
   18|      0|                           {print("Raspberry", "RELOAD");
   19|      0|                                                      contextPTR->main_iDomTools->raspberryReboot(); }});
   20|      0|    print(menuDatabase.getCurrent().name, arrow);
   21|      0|    contextPTR->main_Rs232->print("TIMEOUT:30000;");
   22|      0|}
   23|       |
   24|       |void MENU_MAINTENANCE::exit()
   25|      0|{
   26|      0|}
   27|       |
   28|       |std::string MENU_MAINTENANCE::getStateName() const
   29|      0|{
   30|      0|    return typeid(this).name();
   31|      0|}
   32|       |
   33|       |void MENU_MAINTENANCE::keyPadOk()
   34|      0|{
   35|      0|    menuDatabase.getCurrent().function();
   36|      0|}
   37|       |
   38|       |void MENU_MAINTENANCE::keyPadRes()
   39|      0|{
   40|      0|    changeStateTo<MENU_MAIN>();
   41|      0|}
   42|       |
   43|       |void MENU_MAINTENANCE::keyPadUp()
   44|      0|{
   45|      0|    menuDatabase.up();
   46|      0|    print(menuDatabase.getCurrent().name, arrow);
   47|      0|}
   48|       |
   49|       |void MENU_MAINTENANCE::keyPadDown()
   50|      0|{
   51|      0|    menuDatabase.down();
   52|      0|    print(menuDatabase.getCurrent().name, arrow);
   53|      0|}
   54|       |
   55|       |void MENU_MAINTENANCE::keyPadLeft()
   56|      0|{
   57|      0|    --counter;
   58|      0|    std::stringstream ss;
   59|      0|    ss << counter << " : " << (char)counter;
   60|      0|    print("dane: ", ss.str());
   61|      0|}
   62|       |
   63|       |void MENU_MAINTENANCE::keyPadRight()
   64|      0|{
   65|      0|    ++counter;
   66|      0|    std::stringstream ss;
   67|      0|    ss << counter << " : " << (char)counter;
   68|      0|    print("dane: ", ss.str());
   69|      0|}
   70|       |
   71|       |void MENU_MAINTENANCE::timeout(std::function<void()> function)
   72|      0|{
   73|      0|    changeStateTo<MENU_ROOT>();
   74|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_maintenance.h:
    1|       |#pragma once
    2|       |
    3|       |#include "menu_base.h"
    4|       |#include "libs/container_menu.h"
    5|       |
    6|       |class MENU_MAINTENANCE : public MENU_STATE_BASE
    7|       |{
    8|       |    cyniu::ContainerMenu<std::string, std::function<void()>> menuDatabase;
    9|       |    int counter = 48;
   10|       |
   11|       |public:
   12|       |    MENU_MAINTENANCE(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED);
   13|      0|    ~MENU_MAINTENANCE() = default;
   14|       |    void entry() override;
   15|       |    void exit() override;
   16|       |    std::string getStateName() const override;
   17|       |    void keyPadOk() override;
   18|       |    void keyPadRes() override;
   19|       |    void keyPadUp() override;
   20|       |    void keyPadDown() override;
   21|       |    void keyPadLeft() override;
   22|       |    void keyPadRight() override;
   23|       |    void timeout(std::function<void()> function = std::nullptr_t()) override;
   24|       |};
   25|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_music.cpp:
    1|       |#include "menu_music.h"
    2|       |#include "menu_root.h"
    3|       |#include "../iDomTools/idomtools_interface.h"
    4|       |
    5|       |MENU_MUSIC::MENU_MUSIC(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED) : MENU_STATE_BASE(context, lcdPTR, msm, lcdLED)
    6|      0|{
    7|       |    // std::cout << "MENU_MUSIC::MENU_MUSIC()" << std::endl;
    8|      0|}
    9|       |
   10|       |MENU_MUSIC::MENU_MUSIC(const MENU_MUSIC &base) : MENU_STATE_BASE(base)
   11|      0|{
   12|       |    // std::cout << "MENU_MUSIC::MENU_MUSIC() kopiujacy" << std::endl;
   13|      0|}
   14|       |
   15|       |MENU_MUSIC::MENU_MUSIC(MENU_MUSIC &&base) : MENU_STATE_BASE(std::move(base))
   16|      0|{
   17|       |    //  std::cout << "MENU_MUSIC::MENU_MUSIC() przenoszacy" << std::endl;
   18|      0|}
   19|       |
   20|       |MENU_MUSIC &MENU_MUSIC::operator=(const MENU_MUSIC &base)
   21|      0|{
   22|       |    //  std::cout << "MENU_MUSIC::operator = kopiujacy" << std::endl;
   23|      0|    if (&base not_eq this)
   24|      0|    {
   25|      0|        contextPTR = base.contextPTR;
   26|      0|        lcdPTR = base.lcdPTR;
   27|      0|        stateMachinePTR = base.stateMachinePTR;
   28|      0|    }
   29|      0|    return *this;
   30|      0|}
   31|       |
   32|       |MENU_MUSIC &MENU_MUSIC::operator=(MENU_MUSIC &&base)
   33|      0|{
   34|       |    //  std::cout << "MENU_MUSIC::operator = przenoszacy" << std::endl;
   35|      0|    if (&base not_eq this)
   36|      0|    {
   37|      0|        contextPTR = base.contextPTR;
   38|      0|        lcdPTR = base.lcdPTR;
   39|      0|        stateMachinePTR = base.stateMachinePTR;
   40|      0|    }
   41|      0|    return *this;
   42|      0|}
   43|       |
   44|       |void MENU_MUSIC::entry()
   45|      0|{
   46|      0|    contextPTR->main_iDomTools->MPD_play(contextPTR);
   47|      0|    print("Gram muzyczke");
   48|      0|}
   49|       |
   50|       |void MENU_MUSIC::exit()
   51|      0|{
   52|      0|}
   53|       |
   54|       |void MENU_MUSIC::keyPadPower()
   55|      0|{
   56|      0|    contextPTR->main_iDomTools->MPD_stop();
   57|      0|    changeStateTo<MENU_ROOT>();
   58|      0|}
   59|       |
   60|       |void MENU_MUSIC::keyPadUp()
   61|      0|{
   62|      0|    contextPTR->main_iDomTools->MPD_volumeUp();
   63|      0|}
   64|       |
   65|       |void MENU_MUSIC::keyPadDown()
   66|      0|{
   67|      0|    contextPTR->main_iDomTools->MPD_volumeDown();
   68|      0|}
   69|       |
   70|       |void MENU_MUSIC::keyPadLeft()
   71|      0|{
   72|      0|    contextPTR->main_iDomTools->MPD_prev();
   73|      0|}
   74|       |
   75|       |void MENU_MUSIC::keyPadRight()
   76|      0|{
   77|      0|    contextPTR->main_iDomTools->MPD_next();
   78|      0|}
   79|       |
   80|       |std::string MENU_MUSIC::getStateName() const
   81|      0|{
   82|      0|    return typeid(this).name();
   83|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_root.cpp:
    1|       |#include "menu_root.h"
    2|       |#include "menu_main.h"
    3|       |
    4|       |#include "../RADIO_433_eq/radio_433_eq.h"
    5|       |#include "../iDomTools/idomtools_interface.h"
    6|       |
    7|       |MENU_ROOT::MENU_ROOT(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED) : MENU_STATE_BASE(context, lcdPTR, msm, lcdLED),
    8|       |                                                                                                   tempCounter(0)
    9|      6|{
   10|      6|}
   11|       |
   12|       |MENU_ROOT::MENU_ROOT(const MENU_ROOT &base) : MENU_STATE_BASE(base),
   13|       |                                              tempCounter(base.tempCounter)
   14|      0|{
   15|      0|}
   16|       |
   17|       |MENU_ROOT::MENU_ROOT(MENU_ROOT &&base) : MENU_STATE_BASE(std::move(base)),
   18|       |                                         tempCounter(base.tempCounter)
   19|      0|{
   20|      0|}
   21|       |
   22|       |MENU_ROOT &MENU_ROOT::operator=(const MENU_ROOT &base)
   23|      0|{
   24|      0|    if (&base not_eq this)
   25|      0|    {
   26|      0|        contextPTR = base.contextPTR;
   27|      0|        lcdPTR = base.lcdPTR;
   28|      0|        stateMachinePTR = base.stateMachinePTR;
   29|      0|        tempCounter = base.tempCounter;
   30|      0|        offset = base.offset;
   31|      0|    }
   32|      0|    return *this;
   33|      0|}
   34|       |
   35|       |MENU_ROOT &MENU_ROOT::operator=(MENU_ROOT &&base)
   36|      0|{
   37|      0|    if (&base not_eq this)
   38|      0|    {
   39|      0|        contextPTR = base.contextPTR;
   40|      0|        lcdPTR = base.lcdPTR;
   41|      0|        stateMachinePTR = base.stateMachinePTR;
   42|      0|        tempCounter = base.tempCounter;
   43|      0|        offset = base.offset;
   44|      0|    }
   45|      0|    return *this;
   46|      0|}
   47|       |
   48|       |void MENU_ROOT::entry()
   49|      7|{
   50|      7|    if (contextPTR->main_iDomStatus->getObjectState("music") == STATE::STOP)
   51|      5|    {
   52|      5|        lcdPTR->noBacklight();
   53|      5|    }
   54|      2|    else
   55|      2|    {
   56|      2|        quickPrint(contextPTR->ptr_MPD_info->artist, contextPTR->ptr_MPD_info->radio);
   57|      2|    }
   58|      7|    tempCounter = 0;
   59|      7|}
   60|       |
   61|       |void MENU_ROOT::exit()
   62|      3|{
   63|      3|}
   64|       |
   65|       |std::string MENU_ROOT::getStateName() const
   66|      4|{
   67|      4|    return typeid(this).name();
   68|      4|}
   69|       |
   70|       |void MENU_ROOT::keyPadMenu()
   71|      3|{
   72|      3|    changeStateTo<MENU_MAIN>();
   73|      3|}
   74|       |
   75|       |void MENU_ROOT::keyPadPower()
   76|      1|{
   77|      1|    mpdStartStop();
   78|      1|}
   79|       |
   80|       |void MENU_ROOT::keyPadUp()
   81|      0|{
   82|      0|    volumeUp();
   83|      0|}
   84|       |
   85|       |void MENU_ROOT::keyPadDown()
   86|      0|{
   87|      0|    volumeDown();
   88|      0|}
   89|       |
   90|       |void MENU_ROOT::keyPadLeft()
   91|      0|{
   92|      0|    mpdPrev();
   93|      0|}
   94|       |
   95|       |void MENU_ROOT::keyPadRight()
   96|      0|{
   97|      0|    mpdNext();
   98|      0|}
   99|       |
  100|       |void MENU_ROOT::keyPadEpg()
  101|      0|{
  102|      0|    std::stringstream ss;
  103|      0|    if (tempCounter == 0)
  104|      0|    {
  105|      0|        ss << std::setprecision(4) << contextPTR->ptr_buderus->getInsideTemp()
  106|      0|           << (char)223 << "c  " << contextPTR->lusina.shedTemp.average() << ((char)223) << "c";
  107|      0|        quickPrint("T: salon  biuro", ss.str());
  108|      0|    }
  109|      0|    else if (tempCounter == 1)
  110|      0|    {
  111|      0|        RADIO_WEATHER_STATION *st = static_cast<RADIO_WEATHER_STATION *>(contextPTR->main_REC->getEqPointer("first"));
  112|      0|        auto temp = st->data.getTemperature();
  113|      0|        ss << std::setprecision(4) << temp.value_or(-999) << celsiusDegrees << " " << contextPTR->ptr_buderus->getOutdoorTemp() << celsiusDegrees;
  114|      0|        quickPrint("T: domek   pole", ss.str());
  115|      0|    }
  116|      0|    else if (tempCounter == 2)
  117|      0|    {
  118|      0|        ss << std::setprecision(4) << contextPTR->lusina.shedHum.average() << "%   " << contextPTR->lusina.shedPres.average() << "hPa";
  119|      0|        quickPrint("Wilgoc   Cis", ss.str());
  120|      0|    }
  121|      0|    else if (tempCounter == 3)
  122|      0|    {
  123|      0|        ss << std::setprecision(4) << contextPTR->lusina.shedFloor.average()<< celsiusDegrees;
  124|      0|        quickPrint("Podloga", ss.str());
  125|      0|    }
  126|      0|    else
  127|      0|    {
  128|      0|        ss << std::setprecision(4) << contextPTR->ptr_buderus->getBoilerTemp()
  129|      0|           << celsiusDegrees << "    " << contextPTR->ptr_buderus->getCurFlowTemp() << celsiusDegrees;
  130|      0|        quickPrint("boiler   curFlow", ss.str());
  131|      0|        tempCounter = -1;
  132|      0|    }
  133|      0|    tempCounter++;
  134|      0|    contextPTR->main_Rs232->print("TIMEOUT:9000;");
  135|      0|}
  136|       |
  137|       |void MENU_ROOT::keyPadRes()
  138|      0|{
  139|      0|    this->scrollText();
  140|      0|}
  141|       |
  142|       |void MENU_ROOT::reboot()
  143|      0|{
  144|      0|    contextPTR->main_iDomTools->reloadHard_iDomServer();
  145|      0|}
  146|       |
  147|       |void MENU_ROOT::timeout(std::function<void()> function)
  148|      1|{
  149|      1|    entry();
  150|      1|}
  151|       |
  152|       |void MENU_ROOT::offLcd()
  153|      0|{
  154|      0|    lcdPTR->clear();
  155|      0|    lcdPTR->noBacklight();
  156|      0|}
  157|       |
  158|       |void MENU_ROOT::quickPrint(const std::string &row1, const std::string &row2)
  159|      2|{
  160|      2|    lcdPTR->clear();
  161|      2|    lcdPTR->printString(row1, row2);
  162|      2|    _row1 = row1;
  163|      2|    _row2 = row2;
  164|      2|    numberOfCharCounter = row1.size() - numberOfChar;
  165|      2|}
  166|       |
  167|       |void MENU_ROOT::volumeUp()
  168|      0|{
  169|      0|    contextPTR->main_iDomTools->MPD_volumeUp();
  170|      0|    contextPTR->main_Rs232->print("TIMEOUT:3000;");
  171|      0|}
  172|       |
  173|       |void MENU_ROOT::volumeDown()
  174|      0|{
  175|      0|    contextPTR->main_iDomTools->MPD_volumeDown();
  176|      0|    contextPTR->main_Rs232->print("TIMEOUT:3000;");
  177|      0|}
  178|       |
  179|       |void MENU_ROOT::mpdStartStop()
  180|      1|{
  181|      1|    if (contextPTR->main_iDomStatus->getObjectState("music") == STATE::STOP)
  182|      1|    {
  183|      1|        contextPTR->main_iDomTools->MPD_play(contextPTR);
  184|      1|    }
  185|      0|    else
  186|      0|    {
  187|      0|        contextPTR->main_iDomTools->MPD_stop();
  188|      0|        lcdPTR->clear();
  189|      0|        lcdPTR->noBacklight();
  190|      0|    }
  191|      1|}
  192|       |
  193|       |void MENU_ROOT::mpdNext()
  194|      0|{
  195|      0|    contextPTR->main_iDomTools->MPD_next();
  196|      0|}
  197|       |
  198|       |void MENU_ROOT::mpdPrev()
  199|      0|{
  200|      0|    contextPTR->main_iDomTools->MPD_prev();
  201|      0|}
  202|       |
  203|       |void MENU_ROOT::scrollText()
  204|      0|{
  205|      0|    if ((Clock::getUnixTime() - time) < offset)
  206|      0|        return;
  207|      0|    time = Clock::getUnixTime();
  208|      0|    offset = 1;
  209|      0|    if (_row1.size() > numberOfChar)
  210|      0|    {
  211|      0|        if (numberOfCharCounter != 0)
  212|      0|        {
  213|      0|            lcdPTR->scrollLeft();
  214|      0|            --numberOfCharCounter;
  215|      0|        }
  216|      0|        else
  217|      0|        {
  218|      0|            offset = 4;
  219|      0|            quickPrint(this->_row1, this->_row2);
  220|      0|        }
  221|      0|    }
  222|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/MENU/menu_volume.cpp:
    1|       |#include <iostream>
    2|       |#include "menu_volume.h"
    3|       |
    4|       |MENU_VOLUME::MENU_VOLUME(thread_context *context, LCD_c *lcdPTR, MENU_STATE_MACHINE *msm, STATE lcdLED) : MENU_STATE_BASE(context, lcdPTR, msm, lcdLED)
    5|      0|{
    6|       |    // std::cout << "MENU_VOLUME::MENU_VOLUME()" << std::endl;
    7|      0|}
    8|       |
    9|       |MENU_VOLUME::MENU_VOLUME(const MENU_VOLUME &base) : MENU_STATE_BASE(base)
   10|      0|{
   11|       |    // std::cout << "MENU_VOLUME::MENU_VOLUME() kopiujacy" << std::endl;
   12|      0|}
   13|       |
   14|       |MENU_VOLUME::MENU_VOLUME(MENU_VOLUME &&base) : MENU_STATE_BASE(std::move(base))
   15|      0|{
   16|       |    //  std::cout << "MENU_VOLUME::MENU_VOLUME() przenoszacy" << std::endl;
   17|      0|}
   18|       |
   19|       |MENU_VOLUME &MENU_VOLUME::operator=(const MENU_VOLUME &base)
   20|      0|{
   21|       |    //  std::cout << "MENU_VOLUME::operator = kopiujacy" << std::endl;
   22|      0|    if (&base not_eq this)
   23|      0|    {
   24|      0|        contextPTR = base.contextPTR;
   25|      0|        lcdPTR = base.lcdPTR;
   26|      0|        stateMachinePTR = base.stateMachinePTR;
   27|      0|    }
   28|      0|    return *this;
   29|      0|}
   30|       |
   31|       |MENU_VOLUME &MENU_VOLUME::operator=(MENU_VOLUME &&base)
   32|      0|{
   33|       |    //  std::cout << "MENU_VOLUME::operator = przenoszacy" << std::endl;
   34|      0|    if (&base not_eq this)
   35|      0|    {
   36|      0|        contextPTR = base.contextPTR;
   37|      0|        lcdPTR = base.lcdPTR;
   38|      0|        stateMachinePTR = base.stateMachinePTR;
   39|      0|    }
   40|      0|    return *this;
   41|      0|}
   42|       |
   43|       |void MENU_VOLUME::entry()
   44|      0|{
   45|      0|}
   46|       |
   47|       |void MENU_VOLUME::exit()
   48|      0|{
   49|      0|}
   50|       |
   51|       |std::string MENU_VOLUME::getStateName() const
   52|      0|{
   53|      0|    return typeid(this).name();
   54|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/RADIO_433_eq/radio_433_eq.cpp:
    1|       |#include <iostream>
    2|       |#include <fstream>
    3|       |#include <sstream>
    4|       |
    5|       |#include "radio_433_eq.h"
    6|       |
    7|       |RADIO_SWITCH::RADIO_SWITCH(thread_context *context,
    8|       |                           const RADIO_EQ_CONFIG &cfg,
    9|       |                           RADIO_EQ_TYPE type) : main433MHz(context)
   10|    496|{
   11|    496|    RADIO_EQ::m_context = context;
   12|    496|    RADIO_EQ::m_type = type;
   13|    496|    RADIO_EQ::m_config = cfg;
   14|    496|}
   15|       |
   16|       |void RADIO_SWITCH::on()
   17|      8|{
   18|      8|    if (RADIO_EQ::m_config.onCode not_eq "null")
   19|      7|    {
   20|      7|        main433MHz.sendCode(RADIO_EQ::m_config.onCode);
   21|      7|        m_state = STATE::ON;
   22|      7|        RADIO_EQ::m_context->main_iDomStatus->setObjectState(RADIO_EQ::m_config.name, STATE::ON);
   23|      7|    }
   24|      1|    else
   25|      1|    {
   26|      1|        log_file_mutex.mutex_lock();
   27|      1|        log_file_cout << ERROR << RADIO_EQ::m_config.name << " switch - zla konfiguracja kodu ON" << std::endl;
   28|      1|        log_file_mutex.mutex_unlock();
   29|      1|    }
   30|      8|}
   31|       |
   32|       |void RADIO_SWITCH::off()
   33|      7|{
   34|      7|    if (RADIO_EQ::m_config.offCode not_eq "null")
   35|      6|    {
   36|      6|        main433MHz.sendCode(RADIO_EQ::m_config.offCode);
   37|      6|        m_state = STATE::OFF;
   38|      6|        RADIO_EQ::m_context->main_iDomStatus->setObjectState(RADIO_EQ::m_config.name, STATE::OFF);
   39|      6|    }
   40|      1|    else
   41|      1|    {
   42|      1|        log_file_mutex.mutex_lock();
   43|      1|        log_file_cout << ERROR << RADIO_EQ::m_config.name << " switch - zla konfiguracja kodu OFF" << std::endl;
   44|      1|        log_file_mutex.mutex_unlock();
   45|      1|    }
   46|      7|}
   47|       |
   48|       |void RADIO_SWITCH::on_Off()
   49|      2|{
   50|      2|    if (m_state not_eq STATE::OFF)
   51|      1|    {
   52|      1|        main433MHz.sendCode(RADIO_EQ::m_config.offCode);
   53|      1|        m_state = STATE::OFF;
   54|      1|        RADIO_EQ::m_context->main_iDomStatus->setObjectState(RADIO_EQ::m_config.name, STATE::OFF);
   55|      1|        return;
   56|      1|    }
   57|      1|    if (m_state not_eq STATE::ON)
   58|      1|    {
   59|      1|        main433MHz.sendCode(RADIO_EQ::m_config.onCode);
   60|      1|        m_state = STATE::ON;
   61|      1|        RADIO_EQ::m_context->main_iDomStatus->setObjectState(RADIO_EQ::m_config.name, STATE::ON);
   62|      1|        return;
   63|      1|    }
   64|      1|}
   65|       |
   66|       |void RADIO_SWITCH::onFor15sec()
   67|      2|{
   68|      2|    if (RADIO_EQ::m_config.on15sec not_eq "null")
   69|      1|    {
   70|      1|        main433MHz.sendCode(RADIO_EQ::m_config.on15sec);
   71|      1|        m_state = STATE::TEMPORARY;
   72|      1|        RADIO_EQ::m_context->main_iDomStatus->setObjectState(RADIO_EQ::m_config.name, STATE::TEMPORARY);
   73|      1|    }
   74|      1|    else
   75|      1|    {
   76|      1|        log_file_mutex.mutex_lock();
   77|      1|        log_file_cout << ERROR << RADIO_EQ::m_config.name << " switch - zla konfiguracja kodu ON for 15s" << std::endl;
   78|      1|        log_file_mutex.mutex_unlock();
   79|      1|    }
   80|      2|}
   81|       |
   82|       |STATE RADIO_SWITCH::getState() const
   83|     78|{
   84|     78|    return m_state;
   85|     78|}
   86|       |
   87|       |std::string RADIO_SWITCH::getName() const
   88|    126|{
   89|    126|    return RADIO_EQ::m_config.name;
   90|    126|}
   91|       |
   92|       |std::string RADIO_SWITCH::getID() const
   93|     30|{
   94|     30|    return RADIO_EQ::m_config.ID;
   95|     30|}
   96|       |
   97|       |void RADIO_SWITCH::setCode(RADIO_EQ_CONFIG cfg)
   98|    495|{
   99|    495|    RADIO_EQ::m_config.onCode = cfg.onCode;
  100|    495|    RADIO_EQ::m_config.offCode = cfg.offCode;
  101|    495|    RADIO_EQ::m_config.on15sec = cfg.on15sec;
  102|    495|    RADIO_EQ::m_config.type = cfg.type;
  103|    495|    RADIO_EQ::m_config.name = cfg.name;
  104|    495|}
  105|       |
  106|       |RADIO_EQ_CONTAINER::RADIO_EQ_CONTAINER(thread_context *m_context)
  107|    139|{
  108|    139|    this->context = m_context;
  109|    139|}
  110|       |
  111|       |RADIO_EQ_CONTAINER::~RADIO_EQ_CONTAINER()
  112|    139|{
  113|  1.02k|    for (auto it = m_radioEqMap.begin(); it not_eq m_radioEqMap.end(); ++it)
  114|    888|    {
  115|    888|        delete it->second;
  116|    888|    }
  117|    139|}
  118|       |
  119|       |void RADIO_EQ_CONTAINER::addRadioEq(RADIO_EQ_CONFIG cfg, RADIO_EQ_TYPE type)
  120|    890|{
  121|    890|    switch (type)
  122|    890|    {
  123|    496|    case RADIO_EQ_TYPE::SWITCH:
  124|    496|        m_radioEqMap.insert(std::make_pair(cfg.name, new RADIO_SWITCH(context, cfg, RADIO_EQ_TYPE::SWITCH)));
  125|    496|        break;
  126|    295|    case RADIO_EQ_TYPE::BUTTON:
  127|    295|        m_radioEqMap.insert(std::make_pair(cfg.name, new RADIO_BUTTON(context, cfg, RADIO_EQ_TYPE::BUTTON)));
  128|    295|        break;
  129|     98|    case RADIO_EQ_TYPE::WEATHER_S:
  130|     98|        m_radioEqMap.insert(std::make_pair(cfg.name,
  131|     98|                                           new RADIO_WEATHER_STATION(context, cfg, RADIO_EQ_TYPE::WEATHER_S)));
  132|     98|        break;
  133|      1|    default:
  134|      1|        break;
  135|    890|    }
  136|    890|}
  137|       |
  138|       |void RADIO_EQ_CONTAINER::addRadioEq(RADIO_EQ_CONFIG cfg, const std::string &type)
  139|      1|{
  140|      1|    RADIO_EQ_TYPE ret = RADIO_EQ_TYPE::NONE;
  141|      1|    if (type == "SWITCH")
  142|      0|        ret = RADIO_EQ_TYPE::SWITCH;
  143|      1|    else if (type == "BUTTON")
  144|      0|        ret = RADIO_EQ_TYPE::BUTTON;
  145|      1|    else if (type == "WEATHER")
  146|      0|        ret = RADIO_EQ_TYPE::WEATHER_S;
  147|      1|    else if (type == "PIR")
  148|      1|        ret = RADIO_EQ_TYPE::PIR;
  149|      0|    else if (type == "GATE")
  150|      0|        ret = RADIO_EQ_TYPE::GATE;
  151|      0|    else
  152|      0|    {
  153|      0|        log_file_mutex.mutex_lock();
  154|      0|        log_file_cout << CRITICAL << " throw RADIO_EQ_CONTAINER::addRadioEq()" << std::endl;
  155|      0|        log_file_mutex.mutex_unlock();
  156|      0|        throw WRONG_FORMAT();
  157|      0|    }
  158|      1|    std::cout << " id ma : " << cfg.ID << std::endl;
  159|      1|    (void)std::stoi(cfg.ID); // check ID is number
  160|      1|    addRadioEq(cfg, ret);
  161|      1|}
  162|       |
  163|       |void RADIO_EQ_CONTAINER::deleteRadioEq(const std::string &name)
  164|      1|{
  165|      1|    delete m_radioEqMap[name];
  166|      1|    m_radioEqMap.erase(name);
  167|      1|    saveConfig(context->server_settings->_server.radio433MHzConfigFile);
  168|      1|}
  169|       |
  170|       |RADIO_EQ *RADIO_EQ_CONTAINER::getEqPointer(std::string name)
  171|    554|{
  172|    554|    auto m = m_radioEqMap.find(name);
  173|    554|    if (m not_eq m_radioEqMap.end())
  174|    537|    {
  175|    537|        return (m->second);
  176|    537|    }
  177|     17|    else
  178|     17|    {
  179|     17|        log_file_mutex.mutex_lock();
  180|     17|        log_file_cout << CRITICAL << " throw RADIO_EQ_CONTAINER::getEqPointer()" << std::endl;
  181|     17|        log_file_mutex.mutex_unlock();
  182|     17|        throw std::string("433MHz equipment not found " + name);
  183|     17|    }
  184|    554|}
  185|       |
  186|       |std::vector<RADIO_SWITCH *> RADIO_EQ_CONTAINER::getSwitchPointerVector()
  187|     36|{
  188|     36|    std::vector<RADIO_SWITCH *> switchVector;
  189|     36|    for (const auto &it : m_radioEqMap)
  190|    327|    {
  191|    327|        if (it.second->getType() == RADIO_EQ_TYPE::SWITCH)
  192|    183|        {
  193|    183|            switchVector.push_back(static_cast<RADIO_SWITCH *>(it.second));
  194|    183|        }
  195|    327|    }
  196|     36|    return switchVector;
  197|     36|}
  198|       |
  199|       |std::vector<RADIO_BUTTON *> RADIO_EQ_CONTAINER::getButtonPointerVector()
  200|    112|{
  201|    112|    std::vector<RADIO_BUTTON *> buttonVector{};
  202|    112|    for (const auto &it : m_radioEqMap)
  203|    739|    {
  204|    739|        if (it.second->getType() == RADIO_EQ_TYPE::BUTTON)
  205|    246|        {
  206|    246|            buttonVector.push_back(static_cast<RADIO_BUTTON *>(it.second));
  207|    246|        }
  208|    739|    }
  209|    112|    return buttonVector;
  210|    112|}
  211|       |
  212|       |std::vector<RADIO_WEATHER_STATION *> RADIO_EQ_CONTAINER::getWeather_StationPtrVector()
  213|     26|{
  214|     26|    std::vector<RADIO_WEATHER_STATION *> weatherStVe;
  215|     26|    for (const auto &it : m_radioEqMap)
  216|    118|    {
  217|    118|        if (it.second->getType() == RADIO_EQ_TYPE::WEATHER_S)
  218|     13|        {
  219|     13|            weatherStVe.push_back(static_cast<RADIO_WEATHER_STATION *>(it.second));
  220|     13|        }
  221|    118|    }
  222|     26|    return weatherStVe;
  223|     26|}
  224|       |
  225|       |std::string RADIO_EQ_CONTAINER::listAllName()
  226|      6|{
  227|      6|    std::stringstream allName;
  228|       |
  229|     60|    for (auto it = m_radioEqMap.begin(); it not_eq m_radioEqMap.end(); ++it)
  230|     54|    {
  231|     54|        allName << it->first << "\t ID: " << it->second->getID() << "\t state: " << it->second->getState() << std::endl;
  232|     54|    }
  233|       |
  234|      6|    return allName.str();
  235|      6|}
  236|       |
  237|       |bool RADIO_EQ_CONTAINER::nameExist(const std::string &name)
  238|      4|{
  239|      4|    bool exist = false;
  240|      4|    if (m_radioEqMap.find(name) not_eq m_radioEqMap.end())
  241|      1|    {
  242|      1|        exist = true;
  243|      1|    }
  244|      4|    return exist;
  245|      4|}
  246|       |
  247|       |void RADIO_EQ_CONTAINER::loadConfig(const std::string &filePath)
  248|    100|{
  249|    100|    std::ifstream myfile(filePath);
  250|    100|    if (myfile.is_open())
  251|     99|    {
  252|     99|        m_radioEqMap.clear();
  253|     99|        nlohmann::json j;
  254|     99|        myfile >> j;
  255|     99|        RADIO_EQ_CONFIG cfg;
  256|       |
  257|     99|        try
  258|     99|        {
  259|     99|            nlohmann::json switchJson = j.at("SWITCH");
  260|    594|            for (nlohmann::json::iterator it = switchJson.begin(); it not_eq switchJson.end(); ++it)
  261|    495|            {
  262|    495|                nlohmann::json switchJson_tmp = it.value();
  263|    495|                cfg.name = switchJson_tmp.at("name").get<std::string>();
  264|    495|                cfg.ID = switchJson_tmp.at("id").get<std::string>();
  265|    495|                cfg.offCode = switchJson_tmp.at("OFF").get<std::string>();
  266|    495|                cfg.onCode = switchJson_tmp.at("ON").get<std::string>();
  267|    495|                cfg.on15sec = switchJson_tmp.at("on15sec").get<std::string>();
  268|    495|                cfg.type = switchJson_tmp.at("type").get<std::string>();
  269|    495|                addRadioEq(cfg, RADIO_EQ_TYPE::SWITCH);
  270|    495|                dynamic_cast<RADIO_SWITCH *>(getEqPointer(cfg.name))->setCode(cfg);
  271|    495|            }
  272|     99|        }
  273|     99|        catch (...)
  274|     99|        {
  275|      0|            log_file_mutex.mutex_lock();
  276|      0|            log_file_cout << DEBUG << "no SWITCH equipment in config" << std::endl;
  277|      0|            log_file_mutex.mutex_unlock();
  278|      0|        }
  279|     99|        try
  280|     99|        {
  281|     99|            nlohmann::json buttonJson = j.at("BUTTON");
  282|    394|            for (nlohmann::json::iterator it = buttonJson.begin(); it not_eq buttonJson.end(); ++it)
  283|    295|            {
  284|    295|                nlohmann::json buttonJson_tmp = it.value();
  285|    295|                cfg.name = buttonJson_tmp.at("name").get<std::string>();
  286|    295|                cfg.ID = buttonJson_tmp.at("id").get<std::string>();
  287|    295|                cfg.offCode = buttonJson_tmp.at("OFF").get<std::string>();
  288|    295|                cfg.onCode = buttonJson_tmp.at("ON").get<std::string>();
  289|    295|                cfg.type = buttonJson_tmp.at("type").get<std::string>();
  290|    295|                cfg.commandRun = buttonJson_tmp.at("commandRun").get<std::string>();
  291|    295|                addRadioEq(cfg, RADIO_EQ_TYPE::BUTTON);
  292|    295|            }
  293|     99|        }
  294|     99|        catch (...)
  295|     99|        {
  296|      0|            log_file_mutex.mutex_lock();
  297|      0|            log_file_cout << DEBUG << "no BUTTONs equipment in config" << std::endl;
  298|      0|            log_file_mutex.mutex_unlock();
  299|      0|#ifdef BT_TEST
  300|      0|            std::cout << "no BUTTONs equipment in config" << std::endl;
  301|      0|#endif
  302|      0|        }
  303|       |
  304|     99|        try
  305|     99|        {
  306|     99|            nlohmann::json weatherJson = j.at("WEATHER");
  307|    197|            for (nlohmann::json::iterator it = weatherJson.begin(); it not_eq weatherJson.end(); ++it)
  308|     98|            {
  309|     98|                nlohmann::json weatherJson_tmp = it.value();
  310|     98|                cfg.name = weatherJson_tmp.at("name").get<std::string>();
  311|     98|                cfg.ID = weatherJson_tmp.at("id").get<std::string>();
  312|     98|                cfg.type = weatherJson_tmp.at("type").get<std::string>();
  313|     98|                addRadioEq(cfg, RADIO_EQ_TYPE::WEATHER_S);
  314|     98|            }
  315|     99|        }
  316|     99|        catch (...)
  317|     99|        {
  318|      1|            log_file_mutex.mutex_lock();
  319|      1|            log_file_cout << DEBUG << "no WEATHER STAIONs equipment in config" << std::endl;
  320|      1|            log_file_mutex.mutex_unlock();
  321|      1|#ifdef BT_TEST
  322|      1|            std::cout << "no WEATHER STAIONs equipment in config" << std::endl;
  323|      1|#endif
  324|      1|        }
  325|       |
  326|     99|        myfile.close();
  327|     99|    }
  328|      1|    else
  329|      1|        std::cout << "Unable to open file";
  330|    100|}
  331|       |
  332|       |void RADIO_EQ_CONTAINER::saveConfig(const std::string &filePath)
  333|      4|{
  334|      4|    nlohmann::json switchJson;
  335|      4|    nlohmann::json buttonJson;
  336|      4|    nlohmann::json weatherJson;
  337|       |
  338|      4|    std::vector<RADIO_SWITCH *> vSwitch = getSwitchPointerVector();
  339|      4|    for (auto s : vSwitch)
  340|     21|    {
  341|     21|        switchJson[s->getName()] = s->m_config.getJson();
  342|     21|    }
  343|       |
  344|      4|    std::vector<RADIO_BUTTON *> vButton = getButtonPointerVector();
  345|      4|    for (auto s : vButton)
  346|     12|    {
  347|     12|        buttonJson[s->getName()] = s->m_config.getJson();
  348|     12|    }
  349|       |
  350|      4|    std::vector<RADIO_WEATHER_STATION *> vWeather = getWeather_StationPtrVector();
  351|      4|    for (auto s : vWeather)
  352|      4|    {
  353|      4|        weatherJson[s->getName()] = s->m_config.getJson();
  354|      4|    }
  355|       |
  356|      4|    m_configJson["SWITCH"] = switchJson;
  357|      4|    m_configJson["BUTTON"] = buttonJson;
  358|      4|    m_configJson["WEATHER"] = weatherJson;
  359|       |    // write prettified JSON to another file
  360|      4|    std::ofstream o(filePath);
  361|      4|    o << std::setw(4) << m_configJson << std::endl;
  362|      4|}
  363|       |
  364|       |std::string RADIO_EQ_CONTAINER::showConfig(const std::string &filePath)
  365|      1|{
  366|      1|    std::string ret = "can not open file ";
  367|      1|    ret.append(filePath);
  368|       |
  369|      1|    std::ifstream myfile(filePath);
  370|      1|    if (myfile.is_open())
  371|      1|    {
  372|      1|        nlohmann::json j;
  373|      1|        myfile >> j;
  374|      1|        ret = j.dump(4);
  375|      1|    }
  376|      1|    return ret;
  377|      1|}
  378|       |
  379|       |RADIO_EQ::RADIO_EQ() : m_type(RADIO_EQ_TYPE::NONE)
  380|    889|{
  381|    889|    this->m_context = std::nullptr_t();
  382|    889|}
  383|       |
  384|       |RADIO_EQ_TYPE RADIO_EQ::getType() const
  385|  1.18k|{
  386|  1.18k|    return m_type;
  387|  1.18k|}
  388|       |
  389|       |RADIO_WEATHER_STATION::RADIO_WEATHER_STATION(thread_context *context, const RADIO_EQ_CONFIG &cfg, RADIO_EQ_TYPE type)
  390|     98|{
  391|     98|    RADIO_EQ::m_context = context;
  392|     98|    RADIO_EQ::m_type = type;
  393|     98|    RADIO_EQ::m_config = cfg;
  394|     98|}
  395|       |
  396|       |STATE RADIO_WEATHER_STATION::getState() const
  397|      6|{
  398|      6|    return m_state;
  399|      6|}
  400|       |
  401|       |std::string RADIO_WEATHER_STATION::getName() const
  402|      4|{
  403|      4|    return RADIO_EQ::m_config.name;
  404|      4|}
  405|       |
  406|       |std::string RADIO_WEATHER_STATION::getID() const
  407|     13|{
  408|     13|    return RADIO_EQ::m_config.ID;
  409|     13|}
  410|       |
  411|       |std::string WEATHER_STRUCT::dump() const
  412|      0|{
  413|      0|    std::stringstream ret;
  414|       |
  415|      0|    ret << "m_counter: " << this->m_counter << std::endl;
  416|      0|    ret << "m_humidity: " << this->m_humidity.value_or(-999) << std::endl;
  417|      0|    ret << "m_temperature: " << this->m_temperature.value_or(-999) << std::endl;
  418|      0|    ret << "m_barometricPressure: " << this->m_barometricPressure.value_or(-999) << std::endl;
  419|      0|    ret << "m_map_iDom_API.size() : " << this->m_map_iDom_API.size() << std::endl;
  420|       |
  421|      0|    return ret.str();
  422|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/RADIO_433_eq/radio_433_eq.h:
    1|       |#pragma once
    2|       |
    3|       |#include <map>
    4|       |#include <optional>
    5|       |
    6|       |#include "../433MHz/RFLink/rflinkhandler.h"
    7|       |#include "../433MHz/rc_433mhz.h"
    8|       |#include "json.hpp"
    9|       |
   10|       |struct WEATHER_STRUCT : public iDom_API
   11|       |{
   12|       |private:
   13|       |    unsigned long int m_counter = 0;
   14|       |
   15|       |protected:
   16|       |    std::optional<unsigned int> m_humidity;
   17|       |    std::optional<double> m_temperature;
   18|       |    std::optional<unsigned int> m_barometricPressure;
   19|       |
   20|       |public:
   21|       |    WEATHER_STRUCT()
   22|     99|    {
   23|     99|        m_className.append(typeid(this).name());
   24|     99|        addToMap(m_className, this);
   25|     99|    }
   26|       |    ~WEATHER_STRUCT()
   27|     99|    {
   28|     99|        removeFromMap(m_className);
   29|     99|    }
   30|       |
   31|      4|    std::optional<unsigned int> getHumidity() { return m_humidity; }
   32|     14|    std::optional<double> getTemperature() { return m_temperature; }
   33|      3|    std::optional<unsigned int> getBarometricPressure() { return m_barometricPressure; }
   34|       |    std::string getDataString()
   35|      2|    {
   36|      2|        return "data: " + std::to_string(m_counter) + "\n" + "Humidity=" + std::to_string(getHumidity().value_or(0)) + "%\n" +
   37|      2|               "temperature= " + to_string_with_precision(getTemperature().value_or(0)) + "c\n" +
   38|      2|               "Pressure= " + std::to_string(getBarometricPressure().value_or(0)) + "kPa\n";
   39|      2|    }
   40|       |
   41|       |    void putData(std::string data)
   42|      5|    {
   43|      5|        std::string tempStr;
   44|      5|        ++m_counter;
   45|      5|        try
   46|      5|        {
   47|      5|            m_humidity = std::stoi(RFLinkHandler::getArgumentValueFromRFLinkMSG(data, "HUM"));
   48|      5|        }
   49|      5|        catch (...)
   50|      5|        {
   51|      4|        }
   52|      5|        try
   53|      5|        {
   54|      5|            m_barometricPressure = std::stoi(RFLinkHandler::getArgumentValueFromRFLinkMSG(data, "BARO"));
   55|      5|        }
   56|      5|        catch (...)
   57|      5|        {
   58|      4|        }
   59|      5|        try
   60|      5|        {
   61|      5|            int t = 0;
   62|      5|            tempStr = RFLinkHandler::getArgumentValueFromRFLinkMSG(data, "TEMP");
   63|      5|            std::stringstream ss;
   64|      5|            ss << std::hex << tempStr.substr(tempStr.size() - 3, tempStr.size());
   65|      5|            ss >> t;
   66|      5|            m_temperature = t / 10.0;
   67|      5|            if (tempStr.at(0) == '8')
   68|      2|            {
   69|      2|                m_temperature = m_temperature.value() * -1.0;
   70|      2|            }
   71|      5|        }
   72|      5|        catch (...)
   73|      5|        {
   74|      1|        }
   75|       |        // std::cout << "DUPA: "<<data<<" temp=" << m_temperature<< " hum="<<m_humidity<< std::endl;
   76|      5|    }
   77|       |    std::string dump() const override;
   78|       |};
   79|       |
   80|       |enum class RADIO_EQ_TYPE
   81|       |{
   82|       |    SWITCH = 1,
   83|       |    PIR,
   84|       |    GATE,
   85|       |    BUTTON,
   86|       |    WEATHER_S,
   87|       |    NONE
   88|       |};
   89|       |struct RADIO_EQ_CONFIG
   90|       |{
   91|       |    std::string name = "NULL";
   92|       |    std::string ID = "NULL";
   93|       |    std::string type = "NULL";
   94|       |    std::string onCode = "NULL";
   95|       |    std::string offCode = "NULL";
   96|       |    std::string on15sec = "NULL";
   97|       |    std::string commandRun = "NULL";
   98|       |    void set(const std::string &type,
   99|       |             const std::string &name,
  100|       |             const std::string &ID,
  101|       |             const std::string &onCode = "null",
  102|       |             const std::string &offCode = "null",
  103|       |             const std::string &on15sec = "null",
  104|       |             const std::string &commandRun = "null")
  105|      0|    {
  106|      0|        this->name = name;
  107|      0|        this->ID = ID;
  108|      0|        this->type = type;
  109|      0|        this->onCode = onCode;
  110|      0|        this->offCode = offCode;
  111|      0|        this->on15sec = on15sec;
  112|      0|        this->commandRun = commandRun;
  113|      0|        // add to getJson below
  114|      0|    }
  115|       |
  116|       |    nlohmann::json getJson()
  117|     37|    {
  118|     37|        nlohmann::json jj;
  119|     37|        jj["name"] = name;
  120|     37|        jj["id"] = ID;
  121|     37|        jj["type"] = type;
  122|     37|        jj["ON"] = onCode;
  123|     37|        jj["OFF"] = offCode;
  124|     37|        jj["on15sec"] = on15sec;
  125|     37|        jj["commandRun"] = commandRun;
  126|     37|        return jj;
  127|     37|    }
  128|       |};
  129|       |
  130|       |class RADIO_EQ
  131|       |{
  132|       |public:
  133|       |    RADIO_EQ();
  134|    889|    virtual ~RADIO_EQ() = default;
  135|       |    virtual STATE getState() const = 0;
  136|       |    virtual std::string getName() const = 0;
  137|       |    virtual std::string getID() const = 0;
  138|       |    virtual RADIO_EQ_TYPE getType() const;
  139|       |
  140|       |protected:
  141|       |    thread_context *m_context;
  142|       |    RADIO_EQ_TYPE m_type;
  143|       |
  144|       |public:
  145|       |    RADIO_EQ_CONFIG m_config;
  146|       |};
  147|       |class RADIO_WEATHER_STATION : public RADIO_EQ
  148|       |{
  149|       |    STATE m_state = STATE::UNDEFINE;
  150|       |
  151|       |public:
  152|       |    RADIO_WEATHER_STATION(thread_context *context, const RADIO_EQ_CONFIG &cfg, RADIO_EQ_TYPE type);
  153|     98|    ~RADIO_WEATHER_STATION() = default;
  154|       |    STATE getState() const override;
  155|       |    std::string getName() const override;
  156|       |    std::string getID() const override;
  157|       |    // data
  158|       |    WEATHER_STRUCT data;
  159|       |
  160|       |private:
  161|       |    RADIO_WEATHER_STATION();
  162|       |};
  163|       |class RADIO_BUTTON : public RADIO_EQ
  164|       |{
  165|       |    STATE m_state = STATE::UNDEFINE;
  166|       |
  167|       |public:
  168|       |    RADIO_BUTTON(thread_context *context, const RADIO_EQ_CONFIG &cfg, RADIO_EQ_TYPE type);
  169|       |    ~RADIO_BUTTON() = default;
  170|       |    STATE getState() const override;
  171|       |    void setState(STATE s);
  172|       |    std::string getName() const override;
  173|       |    std::string getID() const override;
  174|       |    std::string getCommandRun() const;
  175|       |
  176|       |private:
  177|       |    RADIO_BUTTON();
  178|       |};
  179|       |
  180|       |class RADIO_SWITCH : public RADIO_EQ
  181|       |{
  182|       |#ifdef BT_TEST
  183|       |public:
  184|       |#endif
  185|       |    RC_433MHz main433MHz;
  186|       |    STATE m_state = STATE::UNDEFINE;
  187|       |
  188|       |public:
  189|       |    RADIO_SWITCH(thread_context *context, const RADIO_EQ_CONFIG &cfg, RADIO_EQ_TYPE type);
  190|       |    ~RADIO_SWITCH() = default;
  191|       |    void on();
  192|       |    void off();
  193|       |    void on_Off();
  194|       |    void onFor15sec();
  195|       |    STATE getState() const override;
  196|       |    std::string getName() const override;
  197|       |    std::string getID() const override;
  198|       |    void setCode(RADIO_EQ_CONFIG cfg);
  199|       |    STATE m_sunrise = STATE::UNDEFINE;
  200|       |    STATE m_sunset = STATE::UNDEFINE;
  201|       |
  202|       |private:
  203|       |    RADIO_SWITCH();
  204|       |};
  205|       |
  206|       |class RADIO_EQ_CONTAINER
  207|       |{
  208|       |    std::map<std::string, RADIO_EQ *> m_radioEqMap;
  209|       |    thread_context *context;
  210|       |    nlohmann::json m_configJson;
  211|       |    RADIO_EQ_CONTAINER();
  212|       |
  213|       |public:
  214|       |    explicit RADIO_EQ_CONTAINER(thread_context *context);
  215|       |    virtual ~RADIO_EQ_CONTAINER();
  216|       |    void addRadioEq(RADIO_EQ_CONFIG cfg, RADIO_EQ_TYPE type);
  217|       |    void addRadioEq(RADIO_EQ_CONFIG cfg, const std::string &type);
  218|       |    void deleteRadioEq(const std::string &name);
  219|       |    virtual RADIO_EQ *getEqPointer(std::string name);
  220|       |    std::vector<RADIO_SWITCH *> getSwitchPointerVector();
  221|       |    std::vector<RADIO_BUTTON *> getButtonPointerVector();
  222|       |    std::vector<RADIO_WEATHER_STATION *> getWeather_StationPtrVector();
  223|       |    std::string listAllName();
  224|       |    bool nameExist(const std::string &name);
  225|       |    void loadConfig(const std::string &filePath);
  226|       |    void saveConfig(const std::string &filePath);
  227|       |    std::string showConfig(const std::string &filePath);
  228|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/RADIO_433_eq/radio_button.cpp:
    1|       |#include "radio_433_eq.h"
    2|       |/*
    3|       | * Najpierw możliwe do uzyskania funkcje załączania
    4|       |
    5|       |    Załączenie chwilowe (momentary) - przekaźnik jest załączony tak długo jak długo naciskany jest klawisz pilota - nadawany kod
    6|       |    Przełącznik (toggle) - przekaźnik jest załączany /wyłączany przy kolejnych naciśnięciach tego samego klawisza - nadajemy ten sam kod
    7|       |    Włącz/wyłącz (latched) - przekaźnik jest załączany jednym kodem a wyłączany innym
    8|       |    Włącznik czasowy 5 sek - po naciśnięciu pilota następuje załączenie przekaźnika na czas 5 sek
    9|       |    Włącznik czasowy 10 sek - załączenie na czas 10 sek
   10|       |    Włącznik czasowy 15 sek - załączenie na czas 15 sek
   11|       |
   12|       |Programowanie
   13|       |Niby opisane jest to na stronach dostawców - ale nie do końca - więc pełen opis programowania. Zalecane rozpoczęcie od punktu 8 - KASOWANIE
   14|       |
   15|       |    Załączenie chwilowe (momentary) - naciskamy 1x przycisk programowania (potwierdzenie naciśnięcia krótkim błyskiem LED). LED po chwili włącza się na stałe na 8-10 sek. W tym czasie układ gotowy jest na przyjęcie nowego kodu. Wysłany kod zapamiętany jest w pamięci a potwierdzeniem tego jest podwójne "mrugnięcie" LEDa. LED gaśnie . Koniec procedury.
   16|       |    Przełącznik (toggle) - naciskamy 2 x przycisk programowania. Dalej jak w pkt. 1
   17|       |    Włącz/wyłącz (latched) - naciskamy 3 x przycisk programowania (potwierdzenie naciśnięcia krótkim błyskiem LED). LED po chwili włącza się na stałe na 8-10 sek. W tym czasie układ gotowy jest na przyjęcie nowego kodu. Wysłany kod zapamiętany jest w pamięci a potwierdzeniem tego jest podwójne "mrugnięcie" LEDa. LED pozostaje włączony Układ czeka na odbiór drugiego kodu. Po jego wysłaniu jest znowu podwójne "mrugnięcie" LEDa. LED gaśnie. Koniec procedury.
   18|       |    Włącznik czasowy 5 sek - naciskamy 4 x przycisk programowania. Dalej jak w pkt. 1
   19|       |    Włącznik czasowy 10 sek - naciskamy 5 x przycisk programowania. Dalej jak w pkt. 1
   20|       |    Włącznik czasowy 15 sek - naciskamy 6 x przycisk programowania. Dalej jak w pkt. 1
   21|       |    Włącznik czasowy 15 sek - naciskamy 7 x przycisk programowania. Dalej jak w pkt. 1
   22|       |     KASOWANIE - usuwanie z pamięci wszystkich kodów. Nacisnąć 8 x przycisk. Każde naciśniecie sygnalizowane jest błyśnięciem. Po 8 naciśnięciu następują trzy mignięcia i pamięć kodów jest wyzerowana. Można też skasować pamięć naciskając przycisk raz przez ok 8 sek . Po puszczeniu przycisku LED zapali się na ok 3-4 sek i zgaśnie. Efekt działania ten sam.
   23|       |
   24|       |Wszystkie te funkcje działają równolegle bo układ może zapamiętać do 50 kodów! Dodatkowo w trybie włącznika czasowego można skrócić czas załączenia poprzez wysłanie kodu WYŁĄCZ z wcześniej ustawionej funkcji latched.
   25|       | */
   26|       |RADIO_BUTTON::RADIO_BUTTON(thread_context *context, const RADIO_EQ_CONFIG &cfg, RADIO_EQ_TYPE type)
   27|    295|{
   28|    295|    RADIO_EQ::m_context = context;
   29|    295|    RADIO_EQ::m_type = type;
   30|    295|    RADIO_EQ::m_config = cfg;
   31|    295|}
   32|       |
   33|       |STATE RADIO_BUTTON::getState() const
   34|     18|{
   35|     18|    return m_state;
   36|     18|}
   37|       |
   38|       |void RADIO_BUTTON::setState(STATE s)
   39|      0|{
   40|      0|    m_state = s;
   41|      0|}
   42|       |
   43|       |std::string RADIO_BUTTON::getName() const
   44|     12|{
   45|     12|    return RADIO_EQ::m_config.name;
   46|     12|}
   47|       |
   48|       |std::string RADIO_BUTTON::getID() const
   49|     33|{
   50|     33|    return RADIO_EQ::m_config.ID;
   51|     33|}
   52|       |
   53|       |std::string RADIO_BUTTON::getCommandRun() const
   54|      1|{
   55|      1|    return RADIO_EQ::m_config.commandRun;
   56|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/RADIO_433_eq/test/radio_433_test.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "../radio_433_eq.h"
    4|       |
    5|       |RC_433MHz::RC_433MHz(thread_context *test_context)
    6|    496|{
    7|    496|    this->m_context = test_context;
    8|    496|}
    9|       |void RC_433MHz::sendCode(const std::string& code)
   10|     16|{
   11|     16|    std::cout << "sendCode(): " << code << std::endl;
   12|     16|}
   13|       |
   14|       |class Switch_Class_fixture : public testing::Test
   15|       |{
   16|       |protected:
   17|     10|    Switch_Class_fixture(){
   18|     10|        test_rec = std::make_shared<RADIO_EQ_CONTAINER>(&test_context);
   19|     10|        test_server_set._server.radio433MHzConfigFile = "/mnt/ramdisk/433_eq_conf.json";
   20|     10|        test_context.server_settings = &test_server_set;
   21|     10|        test_rec->loadConfig(test_server_set._server.radio433MHzConfigFile);
   22|     10|        test_context.main_REC = test_rec;
   23|     10|        test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   24|     10|    }
   25|       |    std::shared_ptr<RADIO_EQ_CONTAINER> test_rec;
   26|       |    thread_context test_context;
   27|       |    CONFIG_JSON test_server_set;
   28|       |};
   29|       |TEST_F(Switch_Class_fixture, getSwitchPointerVector)
   30|      1|{
   31|      1|    auto v = test_rec->getSwitchPointerVector();
   32|      1|    EXPECT_EQ(v.size(),5);
   33|      1|}
   34|       |
   35|       |TEST_F(Switch_Class_fixture, getButtonPointerVector)
   36|      1|{
   37|      1|    auto v = test_rec->getButtonPointerVector();
   38|      1|    EXPECT_EQ(v.size(),3);
   39|      1|}
   40|       |
   41|       |TEST_F(Switch_Class_fixture, switch_alarm_on)
   42|      1|{
   43|      1|    RADIO_SWITCH* ptr = dynamic_cast<RADIO_SWITCH*>(test_rec->getEqPointer("ALARM"));
   44|       |
   45|      1|    EXPECT_EQ(ptr->getType(),RADIO_EQ_TYPE::SWITCH);
   46|      1|    puts("radio switch type");
   47|      1|    EXPECT_EQ(ptr->getState(),STATE::UNDEFINE);
   48|      1|    puts("radio switch state");
   49|      1|    ptr->on();
   50|      1|    EXPECT_EQ(ptr->getState(),STATE::ON);
   51|      1|    ptr->off();
   52|      1|    EXPECT_EQ(ptr->getState(),STATE::OFF);
   53|      1|    EXPECT_EQ(ptr->getState(),STATE::OFF);
   54|      1|}
   55|       |
   56|       |TEST_F(Switch_Class_fixture, weatherStruct)
   57|      1|{
   58|      1|    WEATHER_STRUCT test_WS;
   59|      2|    EXPECT_FALSE(test_WS.getTemperature().has_value()) << "Tempertura zla";
   60|       |
   61|      1|    test_WS.putData("20;03;LaCrosse;ID=0506;TEMP=0137;");
   62|      2|    EXPECT_DOUBLE_EQ(31.1, test_WS.getTemperature().value()) << "Tempertura zla";
   63|       |
   64|      1|    test_WS.putData("20;03;LaCrosse;ID=0506;TEMP=8130;BARO=999;");
   65|      2|    EXPECT_DOUBLE_EQ(-30.4, test_WS.getTemperature().value()) << "Tempertura zla";
   66|       |
   67|      2|    EXPECT_EQ(999, test_WS.getBarometricPressure().value()) << "zle cisneinie";
   68|       |
   69|      1|    std::string retString = test_WS.getDataString();
   70|      1|    EXPECT_THAT(retString, testing::HasSubstr("Pressure= 999kPa"));
   71|      1|}
   72|       |
   73|       |TEST_F(Switch_Class_fixture, read_write_config_json)
   74|      1|{
   75|      1|    auto v = test_rec->getSwitchPointerVector();
   76|      1|    EXPECT_EQ(v.size(),5);
   77|      1|    test_rec->saveConfig(test_server_set._server.radio433MHzConfigFile);
   78|      1|    v = test_rec->getSwitchPointerVector();
   79|      1|    EXPECT_EQ(v.size(),5);
   80|      1|}
   81|       |
   82|       |TEST_F(Switch_Class_fixture, addUnexistsRadioEq)
   83|      1|{
   84|      1|    RADIO_EQ_CONFIG tCfg;
   85|      1|    tCfg.name = "cyniu";
   86|      1|    tCfg.ID = "8899";
   87|      1|    std::string _name = tCfg.name;
   88|      1|    EXPECT_FALSE(test_rec->nameExist(_name));
   89|      1|    test_rec->addRadioEq(tCfg, "PIR");
   90|      1|    EXPECT_FALSE(test_rec->nameExist(_name));
   91|      1|}
   92|       |
   93|       |TEST_F(Switch_Class_fixture, add_and_erase_switch)
   94|      1|{
   95|      1|    RADIO_EQ_CONFIG tCfg;
   96|      1|    tCfg.name = "test";
   97|      1|    test_rec->addRadioEq(tCfg, RADIO_EQ_TYPE::SWITCH);
   98|      1|    auto v = test_rec->getSwitchPointerVector();
   99|      1|    EXPECT_EQ(v.size(),6);
  100|      1|    test_rec->saveConfig(test_server_set._server.radio433MHzConfigFile);
  101|      1|    v = test_rec->getSwitchPointerVector();
  102|      1|    EXPECT_EQ(v.size(),6);
  103|       |
  104|       |    ///////delete
  105|      1|    test_rec->deleteRadioEq(tCfg.name);
  106|      1|    v = test_rec->getSwitchPointerVector();
  107|      1|    EXPECT_EQ(v.size(),5);
  108|      1|    test_rec->saveConfig(test_server_set._server.radio433MHzConfigFile);
  109|      1|    v = test_rec->getSwitchPointerVector();
  110|      1|    EXPECT_EQ(v.size(),5);
  111|      1|}
  112|       |
  113|       |TEST_F(Switch_Class_fixture, loadConfig)
  114|      1|{
  115|      1|    thread_context test_context2;
  116|      1|    auto  test_rec = std::make_shared<RADIO_EQ_CONTAINER>(&test_context2);
  117|      1|    test_rec->loadConfig("/mnt/ramdisk/433_eq_conf_fake.json");
  118|      1|    test_context2.main_REC = test_rec;
  119|      1|    EXPECT_FALSE(test_context2.main_REC->nameExist("firstt"));
  120|      1|    EXPECT_TRUE(test_context2.main_REC->nameExist("listwa"));
  121|      1|}
  122|       |
  123|       |TEST_F(Switch_Class_fixture, getUnexistPtr)
  124|      1|{
  125|      1|    EXPECT_THROW(test_context.main_REC->getEqPointer("kokos"),std::string);
  126|      1|}
  127|       |
  128|       |
  129|       |TEST_F(Switch_Class_fixture, us_wrong_configurated_switch)
  130|      1|{
  131|      1|    auto testRadioS = static_cast<RADIO_SWITCH*>(test_rec->getEqPointer("C"));
  132|      1|    EXPECT_EQ(testRadioS->getState(), STATE::UNDEFINE);
  133|      1|    testRadioS->on();
  134|      1|    EXPECT_EQ(testRadioS->getState(), STATE::UNDEFINE);
  135|      1|    testRadioS->off();
  136|      1|    EXPECT_EQ(testRadioS->getState(), STATE::UNDEFINE);
  137|      1|    testRadioS->onFor15sec();
  138|      1|    EXPECT_EQ(testRadioS->getState(), STATE::UNDEFINE);
  139|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/SATEL_INTEGRA/BT/satel_integra_stub.cpp:
    1|       |#include "satel_integra_stub.h"
    2|       |#include <iostream>
    3|       |
    4|       |SATEL_INTEGRA_HANDLER_STUB::SATEL_INTEGRA_HANDLER_STUB()
    5|     68|{
    6|     68|    std::cout << "SATEL_INTEGRA_HANDLER_STUB::SATEL_INTEGRA_HANDLER_STUB()" << std::endl;
    7|     68|}
    8|       |
    9|       |SATEL_INTEGRA_HANDLER_STUB::~SATEL_INTEGRA_HANDLER_STUB()
   10|     68|{
   11|     68|    std::cout << "SATEL_INTEGRA_HANDLER_STUB::~SATEL_INTEGRA_HANDLER_STUB()" << std::endl;
   12|     68|}
   13|       |
   14|       |void SATEL_INTEGRA_HANDLER_STUB::checkSatel()
   15|      0|{
   16|       |
   17|      0|}
   18|       |
   19|       |void SATEL_INTEGRA_HANDLER_STUB::checkAlarm(STATE &st)
   20|      0|{
   21|       |
   22|      0|}
   23|       |
   24|       |void SATEL_INTEGRA_HANDLER_STUB::run()
   25|      0|{
   26|       |
   27|      0|}
   28|       |
   29|       |SATEL_INTEGRA_INTERFACE *SATEL_INTEGRA_HANDLER_STUB::getSatelPTR()
   30|     12|{
   31|     12|#ifdef BT_TEST
   32|     12|    std::cout << "SATEL_INTEGRA_HANDLER_STUB::getSatelPTR()" << std::endl;
   33|     12|#endif
   34|     12|    return &m_integra32_stub;
   35|     12|}
   36|       |
   37|       |
   38|       |bool SATEL_INTEGRA_STUB::isAlarmArmed()
   39|      4|{
   40|      4|    return armed;
   41|      4|}
   42|       |
   43|       |void SATEL_INTEGRA_STUB::armAlarm(unsigned int partitionID)
   44|      2|{
   45|      2|    armed = true;
   46|      2|}
   47|       |
   48|       |void SATEL_INTEGRA_STUB::disarmAlarm(unsigned int partitionID)
   49|      2|{
   50|      2|    armed = false;
   51|      2|}
   52|       |
   53|       |void SATEL_INTEGRA_STUB::outputOn(unsigned int id)
   54|      4|{
   55|       |
   56|      4|}
   57|       |
   58|       |void SATEL_INTEGRA_STUB::outputOff(unsigned int id)
   59|      0|{
   60|       |
   61|      0|}
   62|       |
   63|       |void SATEL_INTEGRA_STUB::reconnectIntegra()
   64|      0|{
   65|       |
   66|      0|}
   67|       |
   68|     68|SATEL_INTEGRA_STUB::SATEL_INTEGRA_STUB(){
   69|     68|    std::cout << "SATEL_INTEGRA_STUB::SATEL_INTEGRA_STUB()" << std::endl;
   70|     68|}
   71|       |
   72|       |SATEL_INTEGRA_STUB::~SATEL_INTEGRA_STUB()
   73|     68|{
   74|     68|    std::cout << "SATEL_INTEGRA_STUB::~SATEL_INTEGRA_STUB()" << std::endl;
   75|     68|}
   76|       |
   77|       |std::string SATEL_INTEGRA_STUB::getIntegraInfo()
   78|      0|{
   79|      0|    return "test";
   80|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/SATEL_INTEGRA/BT/test.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include <sys/socket.h>
    4|       |#include <resolv.h>
    5|       |#include <arpa/inet.h>
    6|       |#include <errno.h>
    7|       |
    8|       |#include "../satel_integra_handler.h"
    9|       |#include "../../iDomTools/mock/iDomToolsMock.h"
   10|       |#include "../satel_enum.h"
   11|       |
   12|       |// armed partition fefe0a000000007dc4fe0d
   13|       |// output states fefe1700000000000000000000000000000000430efe0d
   14|       |
   15|       |using namespace std::chrono_literals;
   16|       |
   17|       |std::atomic<bool> workStubSatel = true;
   18|       |
   19|      5|void satelServer(){
   20|      5|    std::cout << "start" << std::endl;
   21|      5|    int  MAX_buf = 1024;
   22|      5|    char c_buffer[MAX_buf];
   23|      5|    struct sockaddr_in server;
   24|      5|    int v_socket;
   25|      5|    int SERVER_PORT = 7094;
   26|      5|    const char *SERVER_IP = "127.0.0.1";
   27|       |
   28|      5|    memset(&server, 0, sizeof(server));
   29|       |
   30|      5|    server.sin_family = AF_INET;
   31|      5|    server.sin_port = htons(SERVER_PORT);
   32|       |
   33|      5|    if(inet_pton(AF_INET, SERVER_IP, & server.sin_addr) <= 0)
   34|      0|    {
   35|      0|        perror("inet_pton() ERROR");
   36|      0|        exit(-1);
   37|      0|    }
   38|       |
   39|      5|    if((v_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0)
   40|      0|    {
   41|      0|        perror("socket() ERROR");
   42|      0|        exit(-1);
   43|      0|    }
   44|       |
   45|      5|    if(fcntl(v_socket, F_SETFL, O_NONBLOCK) < 0) // fcntl()
   46|      0|    {
   47|      0|        perror("fcntl() ERROR");
   48|      0|        exit(-1);
   49|      0|    }
   50|       |    // zgub wkurzający komunikat błędu "address already in use"
   51|      5|    int yes = 1;
   52|      5|    if(setsockopt(v_socket, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) == - 1) {
   53|      0|        perror("setsockopt");
   54|      0|        exit(1);
   55|      0|    }
   56|      5|    socklen_t len = sizeof(server);
   57|      5|    if(bind(v_socket,(struct sockaddr *) & server, len) < 0)
   58|      0|    {
   59|      0|        perror("bind() ERROR");
   60|      0|        exit(-1);
   61|      0|    }
   62|       |
   63|      5|    if(listen(v_socket, iDomConst::MAX_CONNECTION) < 0)
   64|      0|    {
   65|      0|        perror("listen() ERROR");
   66|      0|        exit(-1);
   67|      0|    }
   68|      5|    struct sockaddr_in from;
   69|       |
   70|      5|    std::cout << " przed while " << std::endl;
   71|     45|    while (workStubSatel)
   72|     40|    {
   73|     40|        int v_sock_ind = 0;
   74|     40|        memset(&from,0, sizeof(from));
   75|       |        //  if(!useful_F::workServer) {
   76|       |        //      break;
   77|       |        //  }
   78|       |
   79|     40|        std::this_thread::sleep_for(100ms);
   80|       |
   81|     40|        if((v_sock_ind = accept(v_socket,(struct sockaddr *) & from, & len)) < 0)
   82|     36|        {
   83|     36|            continue;
   84|     36|        }
   85|      4|        else{
   86|      4|            std::cout << "polaczono " << std::endl;
   87|     22|            while(workStubSatel){
   88|     18|                auto  m_recv_size = recv(v_sock_ind, c_buffer, MAX_buf, 0);
   89|     18|                if (m_recv_size > 0){
   90|       |
   91|     14|                    std::cout << " STUB SATEL RECV: " << m_recv_size  << std::endl;
   92|     14|                    if(c_buffer[2] == INTEGRA_ENUM::VERSION){
   93|      1|                        std::cout << "wersja integry" << std::endl;
   94|      1|                        std::string len_new;
   95|      1|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
   96|      1|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
   97|      1|                        len_new.push_back(0x00);
   98|      1|                        len_new.push_back(0x00);
   99|      1|                        len_new.push_back(0x00);
  100|      1|                        len_new.push_back(0x00);
  101|      1|                        len_new.push_back(0x41);
  102|      1|                        len_new.push_back(0xae);
  103|      1|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  104|      1|                        len_new.push_back(INTEGRA_ENUM::END);
  105|      1|                        int siz = send( v_sock_ind, len_new.c_str() ,len_new.length(), 0);
  106|      1|                        if(siz >= 0)
  107|      1|                        {
  108|      1|                            std::cout << "wyslano " << siz << std::endl;
  109|      1|                        }
  110|      0|                        else
  111|      0|                            std::cout << " nie wyslano " << siz << std::endl;
  112|      1|                    }
  113|     13|                    else if(c_buffer[2] == INTEGRA_ENUM::OUTPUTS_STATE){
  114|      3|                        std::cout << "stan wejsc integry" << std::endl;
  115|      3|                        std::string len_new;
  116|      3|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  117|      3|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  118|      3|                        len_new.push_back(INTEGRA_ENUM::OUTPUTS_STATE);
  119|      3|                        len_new.push_back(0x00);
  120|      3|                        len_new.push_back(0x00);
  121|      3|                        len_new.push_back(0x00);
  122|      3|                        len_new.push_back(0x00);
  123|      3|                        len_new.push_back(0x00);
  124|      3|                        len_new.push_back(0x00);
  125|      3|                        len_new.push_back(0x00);
  126|      3|                        len_new.push_back(0x00);
  127|      3|                        len_new.push_back(0x00);
  128|      3|                        len_new.push_back(0x00);
  129|      3|                        len_new.push_back(0x00);
  130|      3|                        len_new.push_back(0x00);
  131|      3|                        len_new.push_back(0x00);
  132|      3|                        len_new.push_back(0x00);
  133|      3|                        len_new.push_back(0x00);
  134|      3|                        len_new.push_back(0x00);
  135|      3|                        len_new.push_back(0x43);
  136|      3|                        len_new.push_back(0x0e);
  137|      3|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  138|      3|                        len_new.push_back(INTEGRA_ENUM::END);
  139|       |
  140|      3|                        int siz = send( v_sock_ind, len_new.c_str() ,len_new.length(), 0);
  141|      3|                        if(siz >= 0)
  142|      3|                        {
  143|      3|                            std::cout << "wyslano "<< std::endl;
  144|      3|                        }
  145|      0|                        else
  146|      0|                            std::cout << " nie wyslano" << std::endl;
  147|      3|                    }
  148|     10|                    else if(c_buffer[2] == (char)INTEGRA_ENUM::ARM){
  149|      1|                        std::cout << "uzbrojenie alarmu "  << (int)c_buffer[3] << " " << (int)c_buffer[4] << std::endl;
  150|       |                        //std::string len;
  151|       |
  152|       |
  153|      1|                        int siz = send(v_sock_ind, c_buffer, m_recv_size, 0);
  154|      1|                        if(siz >= 0)
  155|      1|                        {
  156|      1|                            std::cout << "wyslano "<< std::endl;
  157|      1|                        }
  158|      0|                        else
  159|      0|                            std::cout << " nie wyslano" << std::endl;
  160|      1|                    }
  161|      9|                    else if(c_buffer[2] == (char)INTEGRA_ENUM::DISARM){
  162|      1|                        std::cout << "rozbrojenie alarmu "  << (int)c_buffer[3] << " " << (int)c_buffer[4] << std::endl;
  163|       |                       // std::string len;
  164|       |
  165|       |
  166|      1|                        int siz = send(v_sock_ind, c_buffer, m_recv_size, 0);
  167|      1|                        if(siz >= 0)
  168|      1|                        {
  169|      1|                            std::cout << "wyslano "<< std::endl;
  170|      1|                        }
  171|      0|                        else
  172|      0|                            std::cout << " nie wyslano" << std::endl;
  173|      1|                    }
  174|      8|                    else if(c_buffer[2] == (char)INTEGRA_ENUM::OUTPUT_ON){
  175|      1|                        std::cout << "zmiana stanu alarmu integry" << std::endl;
  176|      1|                        std::string len_new;
  177|      1|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  178|      1|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  179|      1|                        len_new.push_back(INTEGRA_ENUM::OUTPUT_ON);
  180|      1|                        len_new.push_back(0x00);
  181|      1|                        len_new.push_back(0x00);
  182|      1|                        len_new.push_back(0x00);
  183|      1|                        len_new.push_back(0x00);
  184|      1|                        len_new.push_back(0x85);
  185|      1|                        len_new.push_back(0xc4);
  186|       |
  187|      1|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  188|      1|                        len_new.push_back(INTEGRA_ENUM::END);
  189|       |
  190|      1|                        int siz = send( v_sock_ind, len_new.c_str() ,len_new.length(), 0);
  191|      1|                        if(siz >= 0)
  192|      1|                        {
  193|      1|                            std::cout << "wyslano "<< std::endl;
  194|      1|                        }
  195|      0|                        else
  196|      0|                            std::cout << " nie wyslano" << std::endl;
  197|      1|                    }
  198|      7|                    else if(c_buffer[2] == (char)INTEGRA_ENUM::OUTPUT_OFF){
  199|      1|                        std::cout << "zmiana stanu alarmu integry" << std::endl;
  200|      1|                        std::string len_new;
  201|      1|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  202|      1|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  203|      1|                        len_new.push_back(INTEGRA_ENUM::OUTPUT_OFF);
  204|      1|                        len_new.push_back(0x00);
  205|      1|                        len_new.push_back(0x00);
  206|      1|                        len_new.push_back(0x00);
  207|      1|                        len_new.push_back(0x00);
  208|      1|                        len_new.push_back(0x85);
  209|      1|                        len_new.push_back(0xd4);
  210|       |
  211|      1|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  212|      1|                        len_new.push_back(INTEGRA_ENUM::END);
  213|       |
  214|      1|                        int siz = send( v_sock_ind, len_new.c_str() ,len_new.length(), 0);
  215|      1|                        if(siz >= 0)
  216|      1|                        {
  217|      1|                            std::cout << "wyslano "<< std::endl;
  218|      1|                        }
  219|      0|                        else
  220|      0|                            std::cout << " nie wyslano" << std::endl;
  221|      1|                    }
  222|      6|                    else if(c_buffer[2] == INTEGRA_ENUM::ARMED_PARTITIONS){
  223|      6|                        std::cout << "stan alarmu integry" << std::endl;
  224|      6|                        std::string len_new;
  225|      6|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  226|      6|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  227|      6|                        len_new.push_back(INTEGRA_ENUM::ARMED_PARTITIONS);
  228|      6|                        len_new.push_back(0x00);
  229|      6|                        len_new.push_back(0x00);
  230|      6|                        len_new.push_back(0x00);
  231|      6|                        len_new.push_back(0x00);
  232|      6|                        len_new.push_back(0x7d);
  233|      6|                        len_new.push_back(0xc4);
  234|       |
  235|      6|                        len_new.push_back(INTEGRA_ENUM::HEADER_MSG);
  236|      6|                        len_new.push_back(INTEGRA_ENUM::END);
  237|       |
  238|      6|                        int siz = send( v_sock_ind, len_new.c_str() ,len_new.length(), 0);
  239|      6|                        if(siz >= 0)
  240|      6|                        {
  241|      6|                            std::cout << "wyslano "<< std::endl;
  242|      6|                        }
  243|      0|                        else
  244|      0|                            std::cout << " nie wyslano" << std::endl;
  245|      6|                    }
  246|      0|                    else{
  247|      0|                        std::cout << "SATEL STUB SERVER nieznany przypadek :( " << std::hex << (int)c_buffer[2] << std::endl;
  248|      0|                        assert(false);
  249|      0|                    }
  250|     14|                }
  251|      4|                else{
  252|      4|                    std::cout << "odebrano tylko : " <<m_recv_size << std::endl;
  253|      4|                }
  254|     18|            }
  255|      4|        }
  256|     40|    } // while
  257|      5|    std::cout <<  "zamykamy stub serwera integra" << std::endl;
  258|      5|    close(v_socket);
  259|      5|}
  260|       |
  261|       |
  262|       |class satel_integra_fixture:public ::testing::Test
  263|       |{
  264|       |public:
  265|       |    satel_integra_fixture():main_iDomTools(std::make_shared<iDomToolsMock>())
  266|      5|    {
  267|      5|        test_context.server_settings = &test_server_settings;
  268|      5|        test_context.server_settings->_satel_integra.host = "127.0.0.1";
  269|      5|        test_context.server_settings->_satel_integra.port = 7094;
  270|      5|        test_context.server_settings->_satel_integra.pin = "1134";
  271|      5|        test_context.server_settings->_fb_viber.viberSender = "test sender";
  272|      5|        test_context.server_settings->_fb_viber.viberReceiver = {"R1","R2"};
  273|      5|        test_context.main_iDomTools = main_iDomTools;
  274|      5|    };
  275|      5|    ~satel_integra_fixture(){
  276|      5|        workStubSatel = false;
  277|      5|        std::this_thread::sleep_for(0.5s);
  278|      5|    }
  279|      5|    void startSatelServer(){
  280|      5|        workStubSatel = true;
  281|      5|        auto t = std::thread(satelServer);
  282|      5|        t.detach();
  283|      5|        std::cout << "EXIT bit_fixture::start_iDomServer()" << std::endl;
  284|      5|    }
  285|       |
  286|       |protected:
  287|       |    thread_context test_context;
  288|       |    CONFIG_JSON test_server_settings;
  289|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
  290|       |
  291|       |};
  292|       |
  293|       |TEST_F(satel_integra_fixture, checkIntegraOut)
  294|      1|{
  295|      1|    startSatelServer();
  296|       |
  297|      1|    EXPECT_CALL(*main_iDomTools.get(), unlockHome());
  298|      1|    EXPECT_CALL(*main_iDomTools.get(), sendViberPicture(testing::_,testing::_,testing::_,testing::_,testing::_,testing::_));
  299|       |
  300|      1|    std::this_thread::sleep_for(1s);
  301|       |
  302|      1|    SATEL_INTEGRA_HANDLER testIntegra(&test_context);
  303|      1|    testIntegra.checkSatel();
  304|      1|    dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->getIntegraInfo();
  305|      1|    EXPECT_FALSE(testIntegra.getSatelPTR()->isAlarmArmed());
  306|      1|}
  307|       |
  308|       |TEST_F(satel_integra_fixture, server_not_working)
  309|      1|{
  310|      1|    SATEL_INTEGRA_HANDLER testIntegra(&test_context);
  311|      1|    testIntegra.getSatelPTR()->armAlarm(1);
  312|       |
  313|      1|    startSatelServer();
  314|       |
  315|      1|    testIntegra.checkSatel();
  316|      1|    testIntegra.getSatelPTR()->armAlarm(1);
  317|      1|}
  318|       |
  319|       |TEST_F(satel_integra_fixture, turnOnOffOutput)
  320|      1|{
  321|      1|    startSatelServer();
  322|       |
  323|      1|    EXPECT_CALL(*main_iDomTools.get(), unlockHome());
  324|      1|    EXPECT_CALL(*main_iDomTools.get(), sendViberPicture("alarm deaktywowany",testing::_,testing::_,testing::_,testing::_,testing::_));
  325|       |
  326|      1|    std::this_thread::sleep_for(1s);
  327|      1|    SATEL_INTEGRA_HANDLER testIntegra(&test_context);
  328|       |
  329|      1|    testIntegra.getSatelPTR()->outputOn(3);
  330|      1|    testIntegra.checkSatel();
  331|      1|    testIntegra.getSatelPTR()->outputOff(3);
  332|      1|    testIntegra.checkSatel();
  333|      1|    std::cout << "cyniu: " << testIntegra.m_integra32.dump() << std::endl;
  334|      1|}
  335|       |
  336|       |TEST_F(satel_integra_fixture, isArmed)
  337|      1|{
  338|      1|    startSatelServer();
  339|      1|    EXPECT_CALL(*main_iDomTools.get(), unlockHome());
  340|      1|    EXPECT_CALL(*main_iDomTools.get(), sendViberPicture("alarm deaktywowany",testing::_,testing::_,testing::_,testing::_,testing::_));
  341|       |
  342|      1|    std::this_thread::sleep_for(1s);
  343|      1|    SATEL_INTEGRA_HANDLER testIntegra(&test_context);
  344|       |
  345|      1|    EXPECT_FALSE(testIntegra.getSatelPTR()->isAlarmArmed());
  346|      1|}
  347|       |
  348|       |TEST_F(satel_integra_fixture, armAndDisarm)
  349|      1|{
  350|      1|    unsigned int partitionID = 1;
  351|      1|    startSatelServer();
  352|      1|    std::this_thread::sleep_for(1s);
  353|       |
  354|      1|    EXPECT_CALL(*main_iDomTools.get(), unlockHome());
  355|      1|    EXPECT_CALL(*main_iDomTools.get(), sendViberPicture(testing::_,testing::_,testing::_,testing::_,testing::_,testing::_));
  356|       |
  357|      1|    SATEL_INTEGRA_HANDLER testIntegra(&test_context);
  358|      1|    testIntegra.getSatelPTR()->armAlarm(partitionID);
  359|       |
  360|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[0], INTEGRA_ENUM::HEADER_MSG);
  361|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[1], INTEGRA_ENUM::HEADER_MSG);
  362|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[2], INTEGRA_ENUM::ARM);
  363|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[3], 0x11);
  364|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[4], 0x34);
  365|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[5], 0xff);
  366|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[6], 0xff);
  367|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[7], 0xff);
  368|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[8], 0xff);
  369|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[9], 0xff);
  370|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[10], 0xff);
  371|       |    // partition
  372|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[11], 0x01);
  373|       |
  374|       |    // EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[12], 0x00);
  375|       |    // EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[13], 0x00);
  376|       |    // EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[14], 0x00);
  377|       |
  378|      1|    testIntegra.getSatelPTR()->disarmAlarm(partitionID);
  379|       |
  380|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[0], INTEGRA_ENUM::HEADER_MSG);
  381|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[1], INTEGRA_ENUM::HEADER_MSG);
  382|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[2], INTEGRA_ENUM::DISARM);
  383|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[3], 0x11);
  384|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[4], 0x34);
  385|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[5], 0xff);
  386|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[6], 0xff);
  387|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[7], 0xff);
  388|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[8], 0xff);
  389|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[9], 0xff);
  390|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[10], 0xff);
  391|       |    // partition
  392|      1|    EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[11], 0x01);
  393|       |
  394|       |    // EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[12], 0x00);
  395|       |    // EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[13], 0x00);
  396|       |    // EXPECT_EQ(dynamic_cast<SATEL_INTEGRA*>(testIntegra.getSatelPTR())->m_message[14], 0x00);
  397|       |
  398|      1|}
  399|       |
  400|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/SATEL_INTEGRA/satel_enum.h:
    1|       |#pragma once
    2|       |
    3|       |enum INTEGRA_ENUM : unsigned char
    4|       |{
    5|       |    HEADER_MSG = 0xFE,
    6|       |    END = 0x0D,
    7|       |    OUTPUTS_STATE = 0x17,
    8|       |    VERSION = 0x7E,
    9|       |    ARMED_PARTITIONS = 0x0A,
   10|       |    ARM = 0x80,
   11|       |    DISARM = 0x84,
   12|       |    OUTPUT_ON = 0x88,
   13|       |    OUTPUT_OFF = 0x89,
   14|       |    OK = 0x00,
   15|       |    NOT_ARMED = 0x12,
   16|       |    NOT_ARMED_USE_FORCE = 0x11
   17|       |};
   18|       |
   19|       |inline std::ostream &operator<<(std::ostream &os, const INTEGRA_ENUM &v)
   20|    243|{
   21|    243|    switch (v)
   22|    243|    {
   23|     50|    case INTEGRA_ENUM::HEADER_MSG:
   24|     50|        os << "HEADER_MSG";
   25|       |
   26|     66|    case INTEGRA_ENUM::END:
   27|     66|        os << "END";
   28|     66|        break;
   29|      4|    case INTEGRA_ENUM::OUTPUTS_STATE:
   30|      4|        os << "OUTPUTS_STATE";
   31|      4|        break;
   32|      1|    case INTEGRA_ENUM::VERSION:
   33|      1|        os << "VERSION";
   34|      1|        break;
   35|      6|    case INTEGRA_ENUM::ARMED_PARTITIONS:
   36|      6|        os << "ARMED_PARTITIONS";
   37|      6|        break;
   38|      3|    case INTEGRA_ENUM::ARM:
   39|      3|        os << "ARM";
   40|      3|        break;
   41|      1|    case INTEGRA_ENUM::DISARM:
   42|      1|        os << "DISARM";
   43|      1|        break;
   44|      1|    case INTEGRA_ENUM::OUTPUT_ON:
   45|      1|        os << "OUTPUT_ON";
   46|      1|        break;
   47|      1|    case INTEGRA_ENUM::OUTPUT_OFF:
   48|      1|        os << "OUTPUT_OFF";
   49|      1|        break;
   50|     68|    case INTEGRA_ENUM::OK:
   51|     68|        os << "OK";
   52|     68|        break;
   53|      0|    case INTEGRA_ENUM::NOT_ARMED:
   54|      0|        os << "NOT_ARMED";
   55|      0|        break;
   56|      6|    case INTEGRA_ENUM::NOT_ARMED_USE_FORCE:
   57|      6|        os << "NOT_ARMED_USE_FORCE";
   58|      6|        break;
   59|     86|    default:
   60|     86|        os << "Unknown";
   61|    243|    }
   62|    243|    return os;
   63|    243|};
   64|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/SATEL_INTEGRA/satel_integra.cpp:
    1|       |#include "satel_integra.h"
    2|       |
    3|       |#include <bitset>
    4|       |#include <sstream>
    5|       |
    6|       |#include "../functions/functions.h"
    7|       |#include "satel_enum.h"
    8|       |
    9|       |SATEL_INTEGRA::SATEL_INTEGRA()
   10|      0|{
   11|      0|    m_className.insert(0, typeid(this).name());
   12|      0|    iDom_API::addToMap(m_className, this);
   13|      0|}
   14|       |
   15|       |SATEL_INTEGRA::SATEL_INTEGRA(const std::string &host, int port) : m_host(host), m_port(port)
   16|      5|{
   17|      5|    m_className.insert(0, typeid(this).name());
   18|      5|    iDom_API::addToMap(m_className, this);
   19|      5|}
   20|       |
   21|       |SATEL_INTEGRA::~SATEL_INTEGRA()
   22|      5|{
   23|      5|    disconnectIntegra();
   24|      5|    iDom_API::removeFromMap(m_className);
   25|      5|}
   26|       |
   27|       |void SATEL_INTEGRA::setIntegraPin(const std::string &pin)
   28|      5|{
   29|      5|    m_pin = pin;
   30|      5|}
   31|       |
   32|       |void SATEL_INTEGRA::connectIntegra(const std::string &host, const int port)
   33|      5|{
   34|      5|    m_host = host;
   35|      5|    m_port = port;
   36|       |
   37|      5|    m_sock = socket(AF_INET, SOCK_STREAM, 0);
   38|      5|    if (m_sock == -1)
   39|      0|    {
   40|      0|        m_connectState = STATE::DISCONNECTED;
   41|      0|        puts("Nie można stworzyć połączenia socket");
   42|      0|        return;
   43|      0|    }
   44|      5|    m_server.sin_addr.s_addr = inet_addr(host.c_str());
   45|      5|    m_server.sin_family = AF_INET;
   46|       |
   47|      5|    m_server.sin_port = htons(port);
   48|       |
   49|      5|    if (connect(m_sock, (struct sockaddr *)&m_server, sizeof(m_server)) < 0)
   50|      1|    {
   51|      1|        m_connectState = STATE::DISCONNECTED;
   52|      1|        puts("Nie udało się nawiązać połączenia");
   53|      1|        return;
   54|      1|    }
   55|      4|    m_connectState = STATE::CONNECTED;
   56|      4|}
   57|       |
   58|       |void SATEL_INTEGRA::disconnectIntegra()
   59|     10|{
   60|     10|    shutdown(m_sock, SHUT_RDWR);
   61|     10|    m_connectState = STATE::DISCONNECTED;
   62|     10|}
   63|       |
   64|       |void SATEL_INTEGRA::reconnectIntegra()
   65|      0|{
   66|      0|    disconnectIntegra();
   67|      0|    useful_F::sleep(1s);
   68|      0|    connectIntegra(m_host, m_port);
   69|      0|}
   70|       |
   71|       |std::string SATEL_INTEGRA::getIntegraInfo()
   72|      1|{
   73|      1|    unsigned char cmd[1] = {INTEGRA_ENUM::VERSION};
   74|       |
   75|       |    // msg.push_back(INTEGRA_ENUM::VERSION); // get integra info
   76|       |
   77|      1|    if (sendIntegra(cmd, 1) == 0)
   78|      0|    {
   79|      0|        return "BAD INTEGRA DATA";
   80|      0|    }
   81|       |
   82|       |    // (void) recvIntegra();
   83|       |
   84|      1|    std::stringstream rec;
   85|      1|    rec << "Typ centrali: INTEGRA " << satelType(m_message[3]) << std::endl;
   86|      1|    rec << "Wersja: " << m_message[4] << "." << m_message[5] << m_message[6] << " z dnia: " << m_message[7] << m_message[8] << m_message[9] << m_message[10] << "-" << m_message[11] << m_message[12] << '-' << m_message[13] << m_message[14] << std::endl;
   87|      1|    rec << "Wersja językowa: " << (int)m_message[15] << " (" << (m_message[15] == 0 ? "polska" : "inny język") << ")" << std::endl;
   88|      1|    rec << "Dane zapisane w pamięci FLASH: " << (m_message[16] == 255 ? "tak" : "nie") << std::endl;
   89|      1|    return rec.str();
   90|      1|}
   91|       |
   92|       |std::string SATEL_INTEGRA::checkIntegraOut()
   93|      3|{
   94|      3|    unsigned char cmd[1] = {INTEGRA_ENUM::OUTPUTS_STATE};
   95|      3|    if (sendIntegra(cmd, 1) == 0)
   96|      0|    {
   97|      0|        return "BAD INTEGRA DATA";
   98|      0|    }
   99|       |
  100|       |    // (void) recvIntegra();
  101|      3|    if (m_message[2] not_eq INTEGRA_ENUM::OUTPUTS_STATE)
  102|      0|    {
  103|      0|        std::cout << "zła ramka" << std::endl;
  104|      0|    }
  105|      3|    std::string data;
  106|      3|    data.push_back(m_message[3]);
  107|      3|    data.push_back(m_message[4]);
  108|      3|    data.push_back(m_message[5]);
  109|      3|    data.push_back(m_message[6]);
  110|      3|    return data;
  111|      3|}
  112|       |
  113|       |bool SATEL_INTEGRA::isAlarmArmed()
  114|      6|{
  115|      6|    unsigned char cmd[1] = {INTEGRA_ENUM::ARMED_PARTITIONS};
  116|       |
  117|      6|    auto io = sendIntegra(cmd, 1);
  118|      6|#ifdef BT_TEST
  119|     72|    for (int i = 0; i < io; ++i)
  120|     66|    {
  121|     66|        char d = m_message[i];
  122|     66|        auto bs = std::bitset<8>(d);
  123|     66|        std::cout << "BITY3 " << bs.to_string() << std::endl;
  124|     66|    }
  125|      6|#endif
  126|       |
  127|      6|    if (m_message[2] not_eq INTEGRA_ENUM::ARMED_PARTITIONS)
  128|      0|    {
  129|      0|        std::cout << "zła odpowiedź servera " << (int)m_message[2] << std::endl;
  130|      0|        return false;
  131|      0|    }
  132|      6|    switch (m_message[3])
  133|      6|    {
  134|      6|    case 0:
  135|      6|        return false; // not armed
  136|      0|    case 1:
  137|      0|        return true; // all armed
  138|      0|    default:
  139|      0|        std::cout << "blad sprawdzania uzborjenia " << (int)m_message[3] << std::endl;
  140|      6|    }
  141|       |
  142|      0|    return false;
  143|      6|}
  144|       |
  145|       |void SATEL_INTEGRA::armAlarm(unsigned int partitionID)
  146|      3|{
  147|      3|    std::stringstream buffer1(m_pin.substr(0, 2));
  148|      3|    uint64_t value1;
  149|      3|    buffer1 >> std::hex >> value1;
  150|       |
  151|      3|    std::stringstream buffer2(m_pin.substr(2, 2));
  152|      3|    uint64_t value2;
  153|      3|    buffer2 >> std::hex >> value2;
  154|       |
  155|      3|    unsigned char cmd[13];
  156|     33|    for (unsigned int i = 0; i < 10; ++i)
  157|     30|    {
  158|     30|        cmd[i] = 0xFF;
  159|     30|    }
  160|      3|    cmd[0] = INTEGRA_ENUM::ARM;
  161|      3|    cmd[1] = value1;
  162|      3|    cmd[2] = value2;
  163|      3|    unsigned char byteNumber = (partitionID - 1) / 8;
  164|      3|    unsigned char bitNumber = (partitionID - 1) % 8;
  165|       |
  166|      3|    cmd[byteNumber + 9] = 0x01 << bitNumber;
  167|       |
  168|      3|    if (sendIntegra(cmd, 13) == 0)
  169|      0|    {
  170|      0|        throw "SATEL BAD RECV";
  171|      0|    }
  172|      3|}
  173|       |
  174|       |void SATEL_INTEGRA::disarmAlarm(unsigned int partitionID)
  175|      1|{
  176|      1|    std::stringstream buffer1(m_pin.substr(0, 2));
  177|      1|    uint64_t value1;
  178|      1|    buffer1 >> std::hex >> value1;
  179|       |
  180|      1|    std::stringstream buffer2(m_pin.substr(2, 2));
  181|      1|    uint64_t value2;
  182|      1|    buffer2 >> std::hex >> value2;
  183|       |
  184|      1|    unsigned char cmd[13];
  185|     11|    for (unsigned int i = 0; i < 10; ++i)
  186|     10|    {
  187|     10|        cmd[i] = 0xFF;
  188|     10|    }
  189|      1|    cmd[0] = INTEGRA_ENUM::DISARM;
  190|      1|    cmd[1] = value1;
  191|      1|    cmd[2] = value2;
  192|      1|    unsigned char byteNumber = (partitionID - 1) / 8;
  193|      1|    unsigned char bitNumber = (partitionID - 1) % 8;
  194|       |
  195|      1|    cmd[byteNumber + 9] = 0x01 << bitNumber;
  196|       |
  197|      1|    if (sendIntegra(cmd, 13) == 0)
  198|      0|    {
  199|      0|        throw "SATEL BAD RECV";
  200|      0|    }
  201|      1|}
  202|       |
  203|       |void SATEL_INTEGRA::outputOn(unsigned int id)
  204|      1|{
  205|      1|    std::stringstream buffer1(m_pin.substr(0, 2));
  206|      1|    uint64_t value1;
  207|      1|    buffer1 >> std::hex >> value1;
  208|       |
  209|      1|    std::stringstream buffer2(m_pin.substr(2, 2));
  210|      1|    uint64_t value2;
  211|      1|    buffer2 >> std::hex >> value2;
  212|       |
  213|      1|    unsigned char cmd[41] = {0xFF};
  214|      7|    for (unsigned int i = 0; i < 6; ++i)
  215|      6|    {
  216|      6|        cmd[i] = 0xFF;
  217|      6|    }
  218|      1|    cmd[0] = INTEGRA_ENUM::OUTPUT_ON;
  219|      1|    cmd[1] = value1;
  220|      1|    cmd[2] = value2;
  221|       |
  222|      1|    unsigned char byteNumber = (id - 1) / 8;
  223|      1|    unsigned char bitNumber = (id - 1) % 8;
  224|       |
  225|      1|    cmd[byteNumber + 9] = 0x01 << bitNumber;
  226|       |
  227|      1|    if (sendIntegra(cmd, 41) == 0)
  228|      0|    {
  229|      0|        throw "SATEL BAD RECV";
  230|      0|    }
  231|      1|}
  232|       |
  233|       |void SATEL_INTEGRA::outputOff(unsigned int id)
  234|      1|{
  235|       |
  236|      1|    std::stringstream buffer1(m_pin.substr(0, 2));
  237|      1|    uint64_t value1;
  238|      1|    buffer1 >> std::hex >> value1;
  239|       |
  240|      1|    std::stringstream buffer2(m_pin.substr(2, 2));
  241|      1|    uint64_t value2;
  242|      1|    buffer2 >> std::hex >> value2;
  243|       |
  244|      1|    unsigned char cmd[41] = {0xFF};
  245|      7|    for (unsigned int i = 0; i < 6; ++i)
  246|      6|    {
  247|      6|        cmd[i] = 0xFF;
  248|      6|    }
  249|      1|    cmd[0] = INTEGRA_ENUM::OUTPUT_OFF;
  250|      1|    cmd[1] = value1;
  251|      1|    cmd[2] = value2;
  252|       |
  253|      1|    unsigned char byteNumber = (id - 1) / 8;
  254|      1|    unsigned char bitNumber = (id - 1) % 8;
  255|       |
  256|      1|    cmd[byteNumber + 9] = 0x01 << bitNumber;
  257|       |
  258|      1|    if (sendIntegra(cmd, 41) == 0)
  259|      0|    {
  260|      0|        throw "SATEL BAD RECV";
  261|      0|    }
  262|      1|}
  263|       |
  264|       |std::string SATEL_INTEGRA::dump() const
  265|      1|{
  266|      1|    std::string msg((char *)(m_message));
  267|       |
  268|      1|    std::stringstream ss;
  269|      1|    ss << "m_message ";
  270|      1|    for (const auto &a : msg)
  271|      3|    {
  272|      3|        ss << INTEGRA_ENUM(a) << " ";
  273|      3|    }
  274|      1|    ss << std::endl;
  275|      1|    ss << "m_host " << m_host << std::endl;
  276|      1|    ss << "m_port " << m_port << std::endl;
  277|      1|    return ss.str();
  278|      1|}
  279|       |
  280|       |STATE SATEL_INTEGRA::connectionState()
  281|      9|{
  282|      9|    return m_connectState;
  283|      9|}
  284|       |
  285|       |void SATEL_INTEGRA::calculateCRC(const unsigned char *pCmd, unsigned int length, unsigned short &result)
  286|     30|{
  287|     30|    unsigned short crc = 0x147A;
  288|       |
  289|    295|    for (unsigned int i = 0; i < length; ++i)
  290|    265|    {
  291|    265|        crc = (crc << 1) | (crc >> 15);
  292|    265|        crc = crc ^ 0xFFFF;
  293|    265|        crc = crc + (crc >> 8) + pCmd[i];
  294|    265|    }
  295|       |
  296|     30|    result = crc;
  297|     30|}
  298|       |
  299|       |int SATEL_INTEGRA::sendIntegra(const unsigned char *cmd, const unsigned int cmdLength)
  300|     16|{
  301|     16|    std::lock_guard<std::mutex> m_lock(sendMutex);
  302|       |    // std::pair<unsigned char*, unsigned int> cmdPayload;
  303|     16|    auto cmdPayload = getFullFrame(cmd, cmdLength);
  304|     16|#ifdef BT_TEST
  305|     16|    std::cout << "cyniu lenght: " << (sizeof(cmd)) << " cmdLength " << cmdLength << std::endl;
  306|       |
  307|    256|    for (unsigned int i = 0; i < cmdPayload.size(); ++i)
  308|    240|    {
  309|    240|        char d = (const char)cmdPayload.at(i);
  310|    240|        auto bs = std::bitset<8>(d);
  311|    240|        std::cout << "BITY2 " << bs.to_string() << " " << INTEGRA_ENUM(d) << std::endl;
  312|    240|    }
  313|     16|#endif
  314|     16|    int size = send(m_sock, cmdPayload.c_str(), cmdPayload.size(), MSG_NOSIGNAL);
  315|     16|    if (size < 1)
  316|      2|    {
  317|      2|        return size;
  318|      2|    }
  319|     14|    return recvIntegra();
  320|     16|}
  321|       |
  322|       |int SATEL_INTEGRA::recvIntegra()
  323|     14|{
  324|     14|    struct timeval tv;
  325|     14|    tv.tv_sec = 10;
  326|     14|    tv.tv_usec = 0;
  327|     14|    setsockopt(m_sock, SOL_SOCKET, SO_RCVTIMEO, (char *)&tv, sizeof(struct timeval));
  328|       |
  329|     14|    int size = recv(m_sock, m_message, 2000, 0);
  330|     14|    if (size < 6)
  331|      0|    {
  332|      0|        puts("Nie udało się pobrać odpowiedzi z serwera");
  333|      0|        log_file_mutex.mutex_lock();
  334|      0|        log_file_cout << CRITICAL << "Satel Integra: received frame is too short." << std::endl;
  335|      0|        log_file_mutex.mutex_unlock();
  336|      0|        connectIntegra(m_host, m_port);
  337|      0|        return 0;
  338|      0|    }
  339|     14|    if (m_message[0] not_eq INTEGRA_ENUM::HEADER_MSG or m_message[1] not_eq INTEGRA_ENUM::HEADER_MSG or m_message[size - 1] not_eq INTEGRA_ENUM::END or m_message[size - 2] not_eq INTEGRA_ENUM::HEADER_MSG)
  340|      0|    {
  341|      0|        puts("Urządzenie zajęte (busy) lub niewłaściwy format odpowiedzi");
  342|      0|        log_file_mutex.mutex_lock();
  343|      0|        log_file_cout << CRITICAL << "Satel Integra: received bad frame (prefix or sufix)" << std::endl;
  344|      0|        log_file_mutex.mutex_unlock();
  345|      0|        return 0;
  346|      0|    }
  347|     14|    unsigned int answerLength = 0;
  348|     14|    unsigned char answer[100];
  349|    135|    for (int i = 0; i < size - 6; i++)
  350|    121|        if (m_message[i + 2] != 0xF0 || m_message[i + 1] != 0xFE) // skip special value
  351|    121|        {
  352|    121|            answer[answerLength] = m_message[i + 2];
  353|    121|            answerLength++;
  354|    121|        }
  355|     14|    unsigned short crc;
  356|     14|    calculateCRC(answer, answerLength, crc);
  357|       |
  358|     14|    if ((crc & 0xFF) != m_message[size - 3] || (crc >> 8) != m_message[size - 4])
  359|      0|    {
  360|      0|        log_file_mutex.mutex_lock();
  361|      0|        log_file_cout << CRITICAL << "Satel Integra: receive bad CRC :(" << std::endl
  362|      0|                      << "crc & 0xFF          = " << (crc & 0xFF) << std::endl
  363|      0|                      << "m_message[size - 3] = " << (int)m_message[size - 3] << std::endl
  364|      0|                      << "(crc >> 8)          = " << (crc >> 8) << std::endl
  365|      0|                      << "m_message[size - 4] = " << (int)m_message[size - 4] << std::endl;
  366|      0|        ;
  367|      0|        log_file_mutex.mutex_unlock();
  368|      0|        return 0;
  369|      0|    }
  370|       |
  371|     14|    return size;
  372|     14|}
  373|       |
  374|       |const char *SATEL_INTEGRA::satelType(unsigned char t)
  375|      1|{
  376|      1|    switch (t)
  377|      1|    {
  378|      1|    case 0:
  379|      1|        return "24";
  380|      0|    case 1:
  381|      0|        return "32";
  382|      0|    case 2:
  383|      0|        return "64";
  384|      0|    case 3:
  385|      0|        return "128";
  386|      0|    case 4:
  387|      0|        return "128-WRL SIM300";
  388|      0|    case 132:
  389|      0|        return "128-WRL LEON";
  390|      0|    case 66:
  391|      0|        return "64 PLUS";
  392|      0|    case 67:
  393|      0|        return "128 PLUS";
  394|      0|    case 72:
  395|      0|        return "256 PLUS";
  396|      0|    default:
  397|      0|        return "Nieznany typ";
  398|      1|    }
  399|      1|}
  400|       |
  401|       |void SATEL_INTEGRA::expandForSpecialValue(std::list<unsigned char> &result)
  402|     16|{
  403|     16|    const unsigned char specialValue = 0xFE;
  404|       |
  405|    192|    for (auto it = result.begin(); it != result.end(); ++it)
  406|    176|    {
  407|    176|        if (*it == specialValue)
  408|      0|        {
  409|      0|            result.insert(++it, 0xF0);
  410|      0|            it--;
  411|      0|        }
  412|    176|    }
  413|     16|}
  414|       |
  415|       |std::string SATEL_INTEGRA::getFullFrame(const unsigned char *pCmd, const unsigned int cmdLength)
  416|     16|{
  417|     16|    std::string message;
  418|     16|    std::list<unsigned char> result;
  419|       |
  420|    160|    for (unsigned int i = 0; i < cmdLength; ++i)
  421|    144|    {
  422|    144|        result.push_back(pCmd[i]);
  423|    144|    }
  424|       |
  425|       |    // add CRC
  426|     16|    unsigned short crc;
  427|     16|    calculateCRC(pCmd, cmdLength, crc);
  428|     16|    result.push_back(crc >> 8);
  429|     16|    result.push_back(crc & 0xFF);
  430|       |    // check special value
  431|     16|    expandForSpecialValue(result);
  432|       |    // add prefix
  433|     16|    result.push_front(INTEGRA_ENUM::HEADER_MSG);
  434|     16|    result.push_front(INTEGRA_ENUM::HEADER_MSG);
  435|       |    // add sufix
  436|     16|    result.push_back(INTEGRA_ENUM::HEADER_MSG);
  437|     16|    result.push_back(INTEGRA_ENUM::END);
  438|     16|    std::copy(result.begin(), result.end(), std::back_inserter(message));
  439|     16|    return message;
  440|     16|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/SATEL_INTEGRA/satel_integra_handler.cpp:
    1|       |#include <iostream>
    2|       |#include <time.h>
    3|       |#include <string>
    4|       |#include <bitset>
    5|       |
    6|       |#include "../functions/functions.h"
    7|       |#include "satel_integra_handler.h"
    8|       |#include "../iDomTools/idomtools_interface.h"
    9|       |
   10|       |using namespace std::chrono_literals;
   11|       |
   12|       |SATEL_INTEGRA_HANDLER::SATEL_INTEGRA_HANDLER(thread_context *myData) : m_integra32(myData->server_settings->_satel_integra.host,
   13|       |                                                                                myData->server_settings->_satel_integra.port)
   14|      5|{
   15|      5|    context = myData;
   16|      5|    m_integra32.connectIntegra(context->server_settings->_satel_integra.host,
   17|      5|                               context->server_settings->_satel_integra.port);
   18|      5|    m_integra32.setIntegraPin(context->server_settings->_satel_integra.pin);
   19|      5|    myData->satelIntegraHandler = static_cast<SATEL_INTEGRA_HANDLER_INTERFACE *>(this);
   20|       |
   21|      5|    this->checkAlarm(context->idom_all_state.alarmSatelState);
   22|      5|}
   23|       |
   24|       |SATEL_INTEGRA_HANDLER::~SATEL_INTEGRA_HANDLER()
   25|      5|{
   26|      5|    m_integra32.disconnectIntegra();
   27|      5|}
   28|       |
   29|       |void SATEL_INTEGRA_HANDLER::checkSatel()
   30|      4|{
   31|      4|    if (m_integra32.connectionState() not_eq STATE::CONNECTED)
   32|      1|        return;
   33|       |
   34|      3|    std::string dataOut = m_integra32.checkIntegraOut();
   35|      3|    if (dataOut == "BAD INTEGRA DATA")
   36|      0|    {
   37|      0|        log_file_mutex.mutex_lock();
   38|      0|        log_file_cout << CRITICAL << "received bad integra data" << std::endl;
   39|      0|        log_file_mutex.mutex_unlock();
   40|      0|        return;
   41|      0|    }
   42|      3|    int counter = 1;
   43|      3|    for (const auto &d : dataOut)
   44|     12|    {
   45|     12|        auto bs = std::bitset<8>(d);
   46|     12|#ifdef BT_TEST
   47|       |        //  std::cout << "BITY " << bs.to_string() << std::endl;
   48|     12|#endif
   49|    108|        for (int i = 0; i < 8; ++i)
   50|     96|        {
   51|     96|            if (bs[i] == true)
   52|      0|            {
   53|       |#ifndef BT_TEST
   54|       |                context->main_house_room_handler->satelSensorActive(counter);
   55|       |#endif
   56|      0|            }
   57|     96|            ++counter;
   58|     96|        }
   59|     12|    }
   60|      3|}
   61|       |
   62|       |void SATEL_INTEGRA_HANDLER::checkAlarm(STATE &st)
   63|      5|{
   64|      5|    if (m_integra32.connectionState() not_eq STATE::CONNECTED)
   65|      1|        return;
   66|      4|    bool fromSatel = m_integra32.isAlarmArmed();
   67|      4|    if ((st == STATE::DISARMED or st == STATE::UNDEFINE) and fromSatel == true)
   68|      0|    {
   69|      0|        st = STATE::ARMED;
   70|      0|        context->main_iDomTools->lockHome();
   71|      0|        log_file_mutex.mutex_lock();
   72|      0|        log_file_cout << INFO << "Alarm uzbrojony" << std::endl;
   73|      0|        log_file_mutex.mutex_unlock();
   74|      0|        context->main_iDomTools->sendViberPicture("alarm uzbrojony",
   75|      0|                                                  "https://frontpoint.files.wordpress.com/2010/08/redbutton_web_blog.png",
   76|      0|                                                  context->server_settings->_fb_viber.viberReceiver.at(0),
   77|      0|                                                  context->server_settings->_fb_viber.viberSender);
   78|      0|    }
   79|      4|    else if ((st == STATE::ARMED or st == STATE::UNDEFINE) and fromSatel == false)
   80|      4|    {
   81|      4|        st = STATE::DISARMED;
   82|      4|        context->main_iDomTools->unlockHome();
   83|      4|        log_file_mutex.mutex_lock();
   84|      4|        log_file_cout << INFO << "Alarm deaktywowany" << std::endl;
   85|      4|        log_file_mutex.mutex_unlock();
   86|      4|        context->main_iDomTools->sendViberPicture("alarm deaktywowany",
   87|      4|                                                  "https://www.clipartmax.com/png/middle/172-1721538_home-security-alarm-icons-lock-house-monitoring-system.png",
   88|      4|                                                  context->server_settings->_fb_viber.viberReceiver.at(0),
   89|      4|                                                  context->server_settings->_fb_viber.viberSender);
   90|      4|    }
   91|      0|    else if (st == STATE::UNDEFINE)
   92|      0|    {
   93|      0|        if (fromSatel == true)
   94|      0|            st = STATE::ARMED;
   95|      0|        else
   96|      0|            st = STATE::DISARMED;
   97|       |
   98|      0|        log_file_mutex.mutex_lock();
   99|      0|        log_file_cout << INFO << "ustawiam stan alarmu na " << st << std::endl;
  100|      0|        log_file_mutex.mutex_unlock();
  101|      0|    }
  102|      4|}
  103|       |
  104|       |void SATEL_INTEGRA_HANDLER::run()
  105|      0|{
  106|      0|    auto sleepTime = 1000ms;
  107|      0|    while (useful_F::go_while)
  108|      0|    {
  109|      0|        try
  110|      0|        {
  111|      0|            if (m_integra32.connectionState() not_eq STATE::CONNECTED)
  112|      0|            {
  113|      0|                m_integra32.connectIntegra(context->server_settings->_satel_integra.host,
  114|      0|                                           context->server_settings->_satel_integra.port);
  115|      0|                if (sleepTime < 60s)
  116|      0|                    sleepTime += 100ms;
  117|      0|            }
  118|      0|            else
  119|      0|            {
  120|      0|                sleepTime = 1s;
  121|      0|            }
  122|      0|            checkAlarm(context->idom_all_state.alarmSatelState);
  123|      0|            checkSatel();
  124|      0|            std::this_thread::sleep_for(sleepTime);
  125|      0|        }
  126|      0|        catch (...)
  127|      0|        {
  128|      0|            log_file_mutex.mutex_lock();
  129|      0|            log_file_cout << ERROR << "wyjątek w  SATEL_INTEGRA_HANDLER::run()" << std::endl;
  130|      0|            log_file_mutex.mutex_unlock();
  131|      0|        }
  132|      0|    }
  133|      0|}
  134|       |
  135|       |SATEL_INTEGRA_INTERFACE *SATEL_INTEGRA_HANDLER::getSatelPTR()
  136|     33|{
  137|     33|#ifdef BT_TEST
  138|     33|    std::cout << "SATEL_INTEGRA_HANDLER::getSatelPTR()" << std::endl;
  139|     33|#endif
  140|     33|    return static_cast<SATEL_INTEGRA *>(&m_integra32);
  141|     33|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/SATEL_INTEGRA/satel_integra_interface.h:
    1|       |#pragma once
    2|       |
    3|       |#include "../libs/useful/useful.h"
    4|       |
    5|       |class SATEL_INTEGRA;
    6|       |class SATEL_INTEGRA_INTERFACE
    7|       |{
    8|       |
    9|       |public:
   10|     73|    SATEL_INTEGRA_INTERFACE(){};
   11|     73|    virtual ~SATEL_INTEGRA_INTERFACE(){};
   12|       |
   13|       |    virtual bool isAlarmArmed() = 0;
   14|       |    virtual void armAlarm(unsigned int partitionID) = 0;
   15|       |    virtual void disarmAlarm(unsigned int partitionID) = 0;
   16|       |    virtual void outputOn(unsigned int id) = 0;
   17|       |    virtual void outputOff(unsigned int id) = 0;
   18|       |    virtual std::string getIntegraInfo() = 0;
   19|       |    virtual void reconnectIntegra() = 0;
   20|       |};
   21|       |
   22|       |class SATEL_INTEGRA_HANDLER_INTERFACE
   23|       |{
   24|       |public:
   25|     73|    SATEL_INTEGRA_HANDLER_INTERFACE(){};
   26|     73|    virtual ~SATEL_INTEGRA_HANDLER_INTERFACE(){};
   27|       |
   28|       |    virtual void checkSatel() = 0;
   29|       |    virtual void checkAlarm(STATE &st) = 0;
   30|       |    virtual void run() = 0;
   31|       |
   32|       |    virtual SATEL_INTEGRA_INTERFACE *getSatelPTR() = 0;
   33|       |};
   34|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/TASKER/tasker.cpp:
    1|       |#include "tasker.h"
    2|       |#include "../functions/functions.h"
    3|       |
    4|       |TASKER::TASKER(thread_context *context) : topic("iDom-client/command"),
    5|       |                                       context(context)
    6|     17|{
    7|     17|}
    8|       |
    9|       |int TASKER::runTasker()
   10|     66|{
   11|     66|    if (counter == 0)
   12|     39|    {
   13|     39|        ++counter;
   14|     39|    }
   15|     27|    else
   16|     27|    {
   17|     27|        counter = 0;
   18|     27|    }
   19|       |
   20|     66|    if (context->mqttHandler->getReceiveQueueSize() > 0)
   21|     11|    {
   22|     11|        auto kk = context->mqttHandler->getMessage();
   23|       |
   24|     11|        if (kk.first == "iDom-client/buderus/ems-esp/heating_active")
   25|      4|        {
   26|      4|            std::vector<std::string> v = {"buderus", "heating_active"};
   27|      4|            v.push_back(kk.second);
   28|      4|            (void)commandMQTT.run(v, context);
   29|      4|        }
   30|      7|        else if (kk.first == "iDom-client/buderus/ems-esp/boiler_data" or kk.first == "iDom-client/buderus/ems-esp/boiler_data_ww")
   31|      3|        {
   32|      3|            std::vector<std::string> v = {"buderus", "boiler_data"};
   33|      3|            v.push_back(kk.second);
   34|      3|            (void)commandMQTT.run(v, context);
   35|      3|        }
   36|      4|        else if (kk.first == "iDom-client/buderus/ems-esp/thermostat_data")
   37|      1|        {
   38|      1|            std::vector<std::string> v = {"buderus", "thermostat_data"};
   39|      1|            v.push_back(kk.second);
   40|      1|            (void)commandMQTT.run(v, context);
   41|      1|        }
   42|      3|        else if (kk.first == "iDom-client/shed/put")
   43|      0|        {
   44|      0|            std::vector<std::string> v = {"shed", "put"};
   45|      0|            v.push_back(kk.second);
   46|      0|            auto ret = commandMQTT.run(v, context);
   47|      0|            context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/command",
   48|      0|                                          ret);
   49|      0|        }
   50|      3|        else if (kk.first == topic)
   51|      1|        {
   52|      1|            auto v = useful_F::split(kk.second, ' ');
   53|       |
   54|      1|            if (v.at(1) == "button")
   55|      0|            {
   56|      0|                context->main_house_room_handler->executeButtonComand(std::stoul(v.at(3)), v.at(2), &commandMQTT);
   57|      0|            }
   58|      1|            else
   59|      1|            {
   60|      1|                auto ret = commandMQTT.run(v, context);
   61|      1|                context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/command",
   62|      1|                                              ret);
   63|      1|            }
   64|      1|        }
   65|       |
   66|     11|        return 10;
   67|     11|    }
   68|     55|    return 256;
   69|     66|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/THERMOMETER_CONTAINER/test/thermometer_container_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "../../iDomTools/test/iDomTools_fixture.h"
    4|       |#include "../thermometer_container.h"
    5|       |
    6|       |class Thermometer_container_fixture :  public ::testing::Test
    7|       |{
    8|       |public:
    9|       |    THERMOMETER_CONTAINER testThermo;
   10|       |    std::string termoName = "test_thermometer";
   11|       |    std::vector<std::string> v = {"10.2","11.22"};
   12|       |    Thermometer_container_fixture()
   13|      4|    {
   14|      4|        testThermo.add("inside");
   15|      4|        testThermo.add("outside");
   16|      4|        testThermo.updateAll(&v);
   17|      4|        v = {"20.2","21.22"};
   18|      4|        testThermo.updateAll(&v);
   19|      4|        std::cout << "temepratura inside" << testThermo.getTemp("inside") << std::endl;
   20|      4|        std::cout << "temepratura outside" << testThermo.getTemp("outside") << std::endl;
   21|      4|        testThermo.updateStats("inside");
   22|      4|        testThermo.updateStats("outside");
   23|      4|        std::cout << "rozmiar mapy termoetrow: " << testThermo.sizeOf() << std::endl;
   24|      4|        testThermo.showAll();
   25|      4|    }
   26|       |};
   27|       |TEST_F(Thermometer_container_fixture, returnUnexistPTR)
   28|      1|{
   29|      1|    EXPECT_THROW(testThermo.returnThermometerPtr("fake"),std::string);
   30|      1|}
   31|       |
   32|       |TEST_F(Thermometer_container_fixture, getStatsByName)
   33|      1|{
   34|      1|    std::string returnedStr = testThermo.getStatsByName("inside");
   35|      1|    std::cout << "zwrocono " << returnedStr << std::endl;
   36|      1|    EXPECT_THAT(returnedStr, testing::HasSubstr("min: 20.2"));
   37|      1|    EXPECT_THAT(returnedStr, testing::HasSubstr("max: 20.2"));
   38|      1|}
   39|       |
   40|       |TEST_F(Thermometer_container_fixture, getLast2)
   41|      1|{
   42|      1|    std::cout << "rozmiar mapy termoetrow: " << testThermo.sizeOf() << std::endl;
   43|      1|    testThermo.updateStats("inside");
   44|      1|    testThermo.updateStats("outside");
   45|      1|    testThermo.showAll();
   46|      1|    v = {"44.4","45.45"};
   47|      1|    testThermo.updateAll(&v);
   48|      1|    testThermo.updateStats("inside");
   49|      1|    testThermo.updateStats("outside");
   50|      1|    std::string returnedStr = testThermo.getStatsByName("inside");
   51|      1|    std::cout << "zwrocono " << returnedStr <<"or"<< std::endl;
   52|      1|    auto v = testThermo.getLast2("inside");
   53|      1|    EXPECT_EQ(v.first, 20.2);
   54|      1|    EXPECT_EQ(v.second, 44.4);
   55|      1|}
   56|       |
   57|       |TEST_F(Thermometer_container_fixture, isMoreDiff)
   58|      1|{
   59|      1|    std::cout << "rozmiar mapy termoetrow: " << testThermo.sizeOf() << std::endl;
   60|      1|    testThermo.updateStats("inside");
   61|      1|    testThermo.updateStats("outside");
   62|      1|    testThermo.showAll();
   63|      1|    v = {"24.4","45.45"};
   64|      1|    testThermo.updateAll(&v);
   65|      1|    testThermo.updateStats("inside");
   66|      1|    testThermo.updateStats("outside");
   67|      1|    EXPECT_FALSE(testThermo.isMoreDiff("inside",15.5));
   68|      1|    EXPECT_TRUE(testThermo.isMoreDiff("outside",15.5));
   69|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/THERMOMETER_CONTAINER/thermometer_container.cpp:
    1|       |#include "thermometer_container.h"
    2|       |#include "../iDom_server_OOP.h"
    3|       |
    4|       |THERMOMETER *THERMOMETER_CONTAINER::returnThermometerPtr(const std::string &name)
    5|    294|{
    6|    294|    auto m = thermoMap.find(name);
    7|    294|    if (m not_eq thermoMap.end())
    8|    292|        return &(m->second);
    9|      2|    else
   10|      2|    {
   11|      2|        log_file_mutex.mutex_lock();
   12|      2|        log_file_cout << CRITICAL << " THERMOMETER_CONTAINER::returnThermometerPtr()" << std::endl;
   13|      2|        log_file_mutex.mutex_unlock();
   14|      2|        throw std::string("thermometer not found!");
   15|      2|    }
   16|    294|}
   17|       |
   18|       |THERMOMETER::THERMOMETER(int iter) : m_stats(iter)
   19|    348|{
   20|    348|    m_className.insert(0, typeid(this).name());
   21|    348|    addToMap(m_className, this);
   22|    348|}
   23|       |
   24|       |THERMOMETER::THERMOMETER(const THERMOMETER &a) : m_thermometer(a.m_thermometer),
   25|       |                                                 m_stats(a.m_stats)
   26|    696|{
   27|    696|    m_className.insert(0, typeid(this).name());
   28|    696|    addToMap(m_className, this);
   29|    696|}
   30|       |
   31|       |THERMOMETER::~THERMOMETER()
   32|  1.04k|{
   33|  1.04k|    removeFromMap(m_className);
   34|  1.04k|}
   35|       |
   36|       |std::string THERMOMETER::dump() const
   37|      0|{
   38|      0|    std::stringstream ret;
   39|       |
   40|      0|    ret << "m_thermometer.maxDate: " << this->m_thermometer.maxDate << std::endl;
   41|      0|    ret << "m_thermometer.minDate: " << this->m_thermometer.minDate << std::endl;
   42|      0|    ret << "m_thermometer.newTemp: " << this->m_thermometer.newTemp << std::endl;
   43|      0|    ret << "m_thermometer.oldTemp: " << this->m_thermometer.oldTemp << std::endl;
   44|      0|    ret << "m_thermometer.maxValue: " << this->m_thermometer.maxValue << std::endl;
   45|      0|    ret << "m_thermometer.minValue: " << this->m_thermometer.minValue << std::endl;
   46|      0|    ret << "m_thermometer.lastState: " << this->m_thermometer.lastState << std::endl;
   47|      0|    ret << "m_thermometer.thermometrName: " << this->m_thermometer.thermometrName << std::endl;
   48|       |
   49|      0|    return ret.str();
   50|      0|}
   51|       |
   52|       |void THERMOMETER_CONTAINER::add(const std::string &name)
   53|    348|{
   54|    348|    auto pair = std::make_pair(name, THERMOMETER(120));
   55|    348|    pair.second.m_thermometer.thermometrName = name;
   56|    348|    thermoMap.insert(pair);
   57|    348|}
   58|       |
   59|       |void THERMOMETER_CONTAINER::setTemp(const std::string &name, double value)
   60|     46|{
   61|     46|    returnThermometerPtr(name)->m_thermometer.oldTemp = returnThermometerPtr(name)->m_thermometer.newTemp;
   62|     46|    returnThermometerPtr(name)->m_thermometer.newTemp = value;
   63|     46|}
   64|       |
   65|       |double THERMOMETER_CONTAINER::getTemp(const std::string &name)
   66|     22|{
   67|     22|    return returnThermometerPtr(name)->m_thermometer.newTemp;
   68|     22|}
   69|       |
   70|       |double THERMOMETER_CONTAINER::getOldTemp(const std::string &name)
   71|     14|{
   72|     14|    return returnThermometerPtr(name)->m_thermometer.oldTemp;
   73|     14|}
   74|       |
   75|       |TEMPERATURE_STATE THERMOMETER_CONTAINER::getLastState(const std::string &name)
   76|     26|{
   77|     26|    return returnThermometerPtr(name)->m_thermometer.lastState;
   78|     26|}
   79|       |
   80|       |void THERMOMETER_CONTAINER::setState(const std::string &name, TEMPERATURE_STATE state)
   81|     14|{
   82|     14|    returnThermometerPtr(name)->m_thermometer.lastState = state;
   83|     14|}
   84|       |
   85|       |void THERMOMETER_CONTAINER::updateAll(std::vector<std::string> *vectorThermo)
   86|     23|{
   87|     23|    std::string in = vectorThermo->at(0);
   88|     23|    std::string out = vectorThermo->at(1);
   89|     23|    setTemp("inside", std::stod(in));
   90|     23|    setTemp("outside", std::stod(out));
   91|     23|}
   92|       |
   93|       |void THERMOMETER_CONTAINER::updateStats(const std::string &name)
   94|     28|{
   95|     28|    returnThermometerPtr(name)->m_stats.push_back(returnThermometerPtr(name)->m_thermometer.newTemp);
   96|     28|}
   97|       |
   98|       |std::string THERMOMETER_CONTAINER::getStatsByName(const std::string &name)
   99|      4|{
  100|      4|    return returnThermometerPtr(name)->m_stats.stats();
  101|      4|}
  102|       |
  103|       |bool THERMOMETER_CONTAINER::isMoreDiff(const std::string &name, double diff)
  104|     14|{
  105|     14|    return returnThermometerPtr(name)->m_stats.isMoreDiff(diff);
  106|     14|}
  107|       |
  108|       |std::pair<double, double> THERMOMETER_CONTAINER::getLast2(const std::string &name)
  109|      5|{
  110|      5|    return returnThermometerPtr(name)->m_stats.getLast2();
  111|      5|}
  112|       |
  113|       |int THERMOMETER_CONTAINER::sizeOf()
  114|      6|{
  115|      6|    return static_cast<int>(thermoMap.size());
  116|      6|}
  117|       |
  118|       |void THERMOMETER_CONTAINER::showAll() const
  119|      6|{
  120|      6|    for (const auto &n : thermoMap)
  121|     12|    {
  122|     12|        std::cout << n.first << " ";
  123|     12|    }
  124|      6|    std::cout << std::endl
  125|      6|              << "koniec prointowania w " << std::endl;
  126|      6|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/THERMOMETER_CONTAINER/thermometer_container.h:
    1|       |#pragma once
    2|       |
    3|       |#include <map>
    4|       |#include <vector>
    5|       |
    6|       |#include "../../libs/Statistic/statistic.h"
    7|       |#include "../idom_api.h"
    8|       |
    9|       |enum class TEMPERATURE_STATE
   10|       |{
   11|       |  Under,
   12|       |  Over,
   13|       |  NoChanges,
   14|       |  Unknown
   15|       |};
   16|       |
   17|       |inline std::ostream &operator<<(std::ostream &os, const TEMPERATURE_STATE &v)
   18|      0|{
   19|      0|    switch (v)
   20|      0|    {
   21|      0|    case TEMPERATURE_STATE::Under:
   22|      0|        os << "Under";
   23|      0|        break;
   24|      0|    case TEMPERATURE_STATE::Over:
   25|      0|        os << "Over";
   26|      0|        break;
   27|      0|    case TEMPERATURE_STATE::NoChanges:
   28|      0|        os << "NoChanges";
   29|      0|        break;
   30|      0|    default:
   31|      0|        os << "Unknown";
   32|      0|    }
   33|      0|    return os;
   34|      0|};
   35|       |
   36|       |struct temperature
   37|       |{
   38|       |  // temperature(std::string name) : thermometrName(name){};
   39|       |  double newTemp = 1.0101;
   40|       |  double oldTemp = 1.0101;
   41|       |  double maxValue = 0;
   42|       |  std::string maxDate;
   43|       |  double minValue = 0;
   44|       |  std::string minDate;
   45|       |  std::string thermometrName;
   46|       |
   47|       |  TEMPERATURE_STATE lastState = TEMPERATURE_STATE::Unknown;
   48|       |};
   49|       |class THERMOMETER : public iDom_API
   50|       |{
   51|       |  // THERMOMETER() = default;
   52|       |public:
   53|       |  explicit THERMOMETER(int iter);
   54|       |  THERMOMETER(const THERMOMETER &a);
   55|       |  ~THERMOMETER();
   56|       |
   57|       |  temperature m_thermometer;
   58|       |  STATISTIC<double> m_stats;
   59|       |
   60|       |  std::string dump() const override;
   61|       |};
   62|       |
   63|       |class THERMOMETER_CONTAINER
   64|       |{
   65|       |#ifdef BT_TEST
   66|       |public:
   67|       |#endif
   68|       |  std::map<std::string, THERMOMETER> thermoMap;
   69|       |  THERMOMETER *returnThermometerPtr(const std::string &name);
   70|       |
   71|       |public:
   72|    174|  THERMOMETER_CONTAINER() = default;
   73|       |  void add(const std::string &name);
   74|       |  void setTemp(const std::string &name, double value);
   75|       |  double getTemp(const std::string &name);
   76|       |  double getOldTemp(const std::string &name);
   77|       |  TEMPERATURE_STATE getLastState(const std::string &name);
   78|       |  void setState(const std::string &name, TEMPERATURE_STATE state);
   79|       |  void updateAll(std::vector<std::string> *vectorThermo);
   80|       |  void updateStats(const std::string &name);
   81|       |  std::string getStatsByName(const std::string &name);
   82|       |
   83|       |  bool isMoreDiff(const std::string &name, double diff);
   84|       |  std::pair<double, double> getLast2(const std::string &name);
   85|       |  int sizeOf();
   86|       |  void showAll() const;
   87|       |};
   88|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/blockQueue/blockqueue.cpp:
    1|       |#include "blockqueue.h"
    2|       |#include "../iDom_server_OOP.h"
    3|       |
    4|       |blockQueue::blockQueue()
    5|     88|{
    6|     88|}
    7|       |std::mutex blockQueue::mutex_queue_char;
    8|       |std::queue<MPD_COMMAND> blockQueue::_MPD_CommandQ;
    9|       |void blockQueue::_add(MPD_COMMAND X)
   10|     40|{
   11|     40|    std::lock_guard<std::mutex> lock(mutex_queue_char);
   12|     40|    if (_MPD_CommandQ.size() < 10)
   13|     39|    {
   14|     39|        _MPD_CommandQ.push(X);
   15|     39|    }
   16|      1|    else
   17|      1|    {
   18|      1|        log_file_mutex.mutex_lock();
   19|      1|        log_file_cout << DEBUG << "za dużo danych w kolejce- nie dodaje " << std::endl;
   20|      1|        log_file_mutex.mutex_unlock();
   21|       |
   22|      1|#ifdef BT_TEST
   23|      1|        std::string e = "za duzo w kolejce";
   24|      1|        throw e;
   25|      1|#endif
   26|      1|    }
   27|     40|}
   28|       |
   29|       |MPD_COMMAND blockQueue::_get() const
   30|     26|{
   31|     26|    MPD_COMMAND temp = MPD_COMMAND::NULL_;
   32|     26|    std::lock_guard<std::mutex> lock(mutex_queue_char);
   33|     26|    if (_MPD_CommandQ.empty() == false)
   34|     24|    {
   35|     24|        temp = _MPD_CommandQ.front();
   36|     24|        _MPD_CommandQ.pop();
   37|     24|    }
   38|     26|    return temp;
   39|     26|}
   40|       |
   41|       |int blockQueue::_size()
   42|  73.5M|{
   43|  73.5M|    std::lock_guard<std::mutex> lock(mutex_queue_char);
   44|  73.5M|    return static_cast<int>(_MPD_CommandQ.size());
   45|  73.5M|}
   46|       |
   47|       |void blockQueue::_clearAll()
   48|     46|{
   49|     46|    std::lock_guard<std::mutex> lock(mutex_queue_char);
   50|     61|    while (_MPD_CommandQ.empty() == false)
   51|     15|    {
   52|     15|        _MPD_CommandQ.pop();
   53|     15|    }
   54|     46|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/blockQueue/test/blockqueue_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include "../blockqueue.h"
    3|       |#include <thread>
    4|       |#include <iostream>
    5|       |
    6|       |class blockQueue_Class_fixture : public ::testing::Test
    7|       |{
    8|       |public:
    9|       |    blockQueue_Class_fixture()
   10|      4|    {
   11|      4|        test_q._clearAll();
   12|      4|    }
   13|       |
   14|       |protected:
   15|       |    blockQueue test_q;
   16|       |
   17|       |    static void getFromQ_thread()
   18|      1|    {
   19|      1|        blockQueue q;
   20|      1|        while(q._size() == 0 )
   21|      0|        {
   22|      0|        }
   23|      1|        EXPECT_EQ(q._get(), MPD_COMMAND::STOP);
   24|  73.5M|        while(q._size() == 0 )
   25|  73.5M|        {
   26|  73.5M|        }
   27|      1|        EXPECT_EQ(q._get(), MPD_COMMAND::STOP);
   28|      1|    }
   29|       |
   30|       |    static void putToQ_thread(MPD_COMMAND c)
   31|      1|    {
   32|      1|        blockQueue q;
   33|      1|        q._add(c);
   34|      1|        sleep(1);
   35|      1|        q._add(c);
   36|      1|    }
   37|       |};
   38|       |
   39|       |TEST_F(blockQueue_Class_fixture, main)
   40|      1|{
   41|      1|    test_q._clearAll();
   42|      1|    EXPECT_EQ(test_q._size(), 0);
   43|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::NULL_);
   44|      1|    test_q._add(MPD_COMMAND::PLAY);
   45|      1|    EXPECT_EQ(test_q._size(), 1);
   46|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
   47|      1|    EXPECT_EQ(test_q._size(), 0);
   48|      1|}
   49|       |
   50|       |TEST_F(blockQueue_Class_fixture, inThread)
   51|      1|{
   52|      1|    std::thread get(blockQueue_Class_fixture::getFromQ_thread);
   53|      1|    std::thread put(blockQueue_Class_fixture::putToQ_thread, MPD_COMMAND::STOP);
   54|      1|    get.join();
   55|      1|    put.join();
   56|      1|}
   57|       |
   58|       |TEST_F(blockQueue_Class_fixture, allClear)
   59|      1|{
   60|      1|    EXPECT_EQ(test_q._size(), 0);
   61|      1|    EXPECT_EQ(test_q._get(), MPD_COMMAND::NULL_);
   62|      1|    test_q._add(MPD_COMMAND::PLAY);
   63|      1|    EXPECT_EQ(test_q._size(), 1);
   64|      1|    test_q._add(MPD_COMMAND::PLAY);
   65|      1|    EXPECT_EQ(test_q._size(), 2);
   66|      1|    test_q._clearAll();
   67|      1|    EXPECT_EQ(test_q._size(), 0);
   68|      1|}
   69|       |
   70|       |TEST_F(blockQueue_Class_fixture, capacityExceeded)
   71|      1|{
   72|      1|    EXPECT_EQ(test_q._size(), 0);
   73|       |
   74|     11|    for (auto i = 0 ; i <10 ; ++i)
   75|     10|    {
   76|     10|        test_q._add(MPD_COMMAND::PLAY);
   77|     10|    }
   78|       |
   79|      1|    EXPECT_THROW(test_q._add(MPD_COMMAND::PLAY), std::string );
   80|      1|    test_q._clearAll();
   81|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/buderus/buderus.cpp:
    1|       |#include "buderus.h"
    2|       |
    3|       |#include <experimental/source_location>
    4|       |
    5|       |#include "../functions/functions.h"
    6|       |#include "../iDomTools/idomtools_interface.h"
    7|       |
    8|       |BUDERUS::BUDERUS()
    9|     30|{
   10|     30|    m_className.insert(0, typeid(this).name());
   11|     30|    iDom_API::addToMap(m_className, this);
   12|     30|#ifdef BT_TEST
   13|     30|    std::cout << "BUDERUS::BUDERUS()" << std::endl;
   14|     30|#endif
   15|     30|}
   16|       |
   17|       |BUDERUS::~BUDERUS()
   18|     30|{
   19|     30|    iDom_API::removeFromMap(m_className);
   20|     30|}
   21|       |
   22|       |void BUDERUS::updateBoilerDataFromMQTT(nlohmann::json jj)
   23|      8|{
   24|      8|    std::lock_guard<std::mutex> lock(m_lockGuard);
   25|      8|    try
   26|      8|    {
   27|      8|        if(jj.contains("outdoorTemp")){
   28|      7|            m_outdoorTemp = jj.at("outdoorTemp").get<double>();
   29|      7|            m_boiler_data = jj;
   30|      7|        }
   31|      8|        if(jj.contains("wWStorageTemp2")){
   32|      1|            m_boilerTemp = jj.at("wWStorageTemp2").get<double>();
   33|      1|            m_boiler_data_ww = jj;
   34|      1|        }
   35|      8|        if(jj.contains("curFlowTemp"))
   36|      7|            m_curFlowTemp = jj.at("curFlowTemp").get<double>();
   37|      8|        if(jj.contains("burnGas")){
   38|      7|            auto burnGas = jj.at("burnGas").get<std::string>();
   39|      7|            if (burnGas == "on" && m_heating_active == false)
   40|      3|            {
   41|      3|                m_heating_active = true;
   42|      3|                m_heating_time = Clock::getUnixTime();
   43|      3|            }
   44|      4|            else if (burnGas == "off" && m_heating_active == true)
   45|      0|            {
   46|      0|                m_heating_active = false;
   47|      0|            }
   48|      7|        }
   49|      8|        if(jj.contains("wWCirc")){
   50|      7|            if (jj.at("wWCirc").get<std::string>() == "on")
   51|      4|            {
   52|      4|                if (m_circlePump not_eq STATE::ON)
   53|      3|                {
   54|      3|                    useful_F::myStaticCtx->main_iDomTools->sendViberMsg("uruchamiam pompe obiegową CWU",
   55|      3|                                                                         useful_F::myStaticCtx->server_settings->_fb_viber.viberReceiver.at(0),
   56|      3|                                                                         useful_F::myStaticCtx->server_settings->_fb_viber.viberSender + "BUDERUS");
   57|      3|                    useful_F::myStaticCtx->main_Rs232->print("LED_ALARM:1");
   58|      3|                    m_circlePump = STATE::ON;
   59|      3|                }
   60|      4|            }
   61|      3|            else
   62|      3|            {
   63|      3|                if (m_circlePump == STATE::ON)
   64|      1|                {
   65|      1|                    useful_F::myStaticCtx->main_iDomTools->sendViberMsg("zakończono precę pompy obiegowej CWU",
   66|      1|                                                                         useful_F::myStaticCtx->server_settings->_fb_viber.viberReceiver.at(0),
   67|      1|                                                                         useful_F::myStaticCtx->server_settings->_fb_viber.viberSender + "BUDERUS");
   68|      1|                    useful_F::myStaticCtx->main_Rs232->print("LED_ALARM:0");
   69|      1|                    m_circlePump = STATE::OFF;
   70|      1|                }
   71|      3|            }
   72|      7|        }
   73|      8|    }
   74|      8|    catch (nlohmann::json::exception &e)
   75|      8|    {
   76|      0|        std::cout << "wyjatek w boiler data " << e.what() << " | " << std::experimental::fundamentals_v2::source_location::current().function_name() << std::endl;
   77|      0|    }
   78|      8|}
   79|       |
   80|       |void BUDERUS::updateThermostatDataFromMQTT(nlohmann::json jj)
   81|      3|{
   82|      3|    std::lock_guard<std::mutex> lock(m_lockGuard);
   83|      3|    m_thermostat_data = jj;
   84|      3|    m_insideTemp = jj["hc1"].at("currtemp").get<double>();
   85|      3|}
   86|       |
   87|       |void BUDERUS::tapWaterActivated()
   88|      0|{
   89|      0|    std::lock_guard<std::mutex> lock(m_lockGuard);
   90|      0|    m_tapwater_active = true;
   91|      0|}
   92|       |
   93|       |void BUDERUS::tapWaterDeactivated()
   94|      0|{
   95|      0|    std::lock_guard<std::mutex> lock(m_lockGuard);
   96|      0|    m_tapwater_active = false;
   97|      0|}
   98|       |
   99|       |void BUDERUS::heatingActivated()
  100|      0|{
  101|      0|    std::lock_guard<std::mutex> lock(m_lockGuard);
  102|      0|    m_heating_active = true;
  103|      0|}
  104|       |
  105|       |void BUDERUS::heatingDeactivated()
  106|      0|{
  107|      0|    std::lock_guard<std::mutex> lock(m_lockGuard);
  108|      0|    m_heating_active = false;
  109|      0|}
  110|       |
  111|       |void BUDERUS::setHeating(bool b)
  112|      6|{
  113|      6|    m_heating_active = b;
  114|      6|}
  115|       |
  116|       |void BUDERUS::setTapWater(bool b)
  117|      2|{
  118|      2|    m_tapwater_active = b;
  119|      2|}
  120|       |
  121|       |bool BUDERUS::isHeatingActiv()
  122|     10|{
  123|     10|    std::lock_guard<std::mutex> lock(m_lockGuard);
  124|     10|    return m_heating_active;
  125|     10|}
  126|       |
  127|       |bool BUDERUS::isTapWaterActiv()
  128|      3|{
  129|      3|    std::lock_guard<std::mutex> lock(m_lockGuard);
  130|      3|    return m_tapwater_active;
  131|      3|}
  132|       |
  133|       |std::string BUDERUS::getAllData() const
  134|      4|{
  135|      4|    std::lock_guard<std::mutex> lock(m_lockGuard);
  136|      4|    std::stringstream ret;
  137|      4|    ret << dump();
  138|       |
  139|      4|    return ret.str();
  140|      4|}
  141|       |
  142|       |double BUDERUS::getOutdoorTemp() const
  143|      1|{
  144|      1|    return m_outdoorTemp;
  145|      1|}
  146|       |
  147|       |double BUDERUS::getInsideTemp() const
  148|      0|{
  149|      0|    return m_insideTemp;
  150|      0|}
  151|       |
  152|       |double BUDERUS::getBoilerTemp() const
  153|      1|{
  154|      1|    return m_boilerTemp;
  155|      1|}
  156|       |
  157|       |double BUDERUS::getCurFlowTemp() const
  158|      0|{
  159|      0|    return m_curFlowTemp;
  160|      0|}
  161|       |
  162|       |void BUDERUS::circlePompToRun()
  163|      0|{
  164|      0|    if (m_boilerTemp > 55 && m_heating_active == true && m_circlePompCanRun == true)
  165|      0|    {
  166|      0|        runCirclePompForWhile();
  167|      0|        m_circlePompCanRun = false;
  168|      0|    }
  169|       |
  170|      0|    if (m_boilerTemp < 60 && m_heating_active == false && m_circlePompCanRun == false)
  171|      0|    {
  172|      0|        m_circlePompCanRun = true;
  173|      0|    }
  174|      0|}
  175|       |
  176|       |void BUDERUS::runCirclePompForWhile()
  177|      1|{
  178|      1|    useful_F::myStaticCtx->mqttHandler->publish("iDom-client/buderus/ems-esp/boiler",
  179|      1|                                                 R"({"cmd":"wwcirculation","data":"on"})");
  180|      1|}
  181|       |
  182|       |STATE BUDERUS::getCirclePumpState() const
  183|      5|{
  184|      5|    return m_circlePump;
  185|      5|}
  186|       |
  187|       |void BUDERUS::boilerHeatOneTime()
  188|      1|{
  189|      1|    useful_F::myStaticCtx->mqttHandler->publish("iDom-client/buderus/ems-esp/boiler",
  190|      1|                                                 R"({"cmd":"wwonetime","data":"on"})");
  191|      1|}
  192|       |
  193|       |void BUDERUS::setTempInsideBuilding(const std::string &t)
  194|      1|{
  195|      1|    std::stringstream tt;
  196|      1|    tt << R"({"cmd":"temp","data":)";
  197|      1|    tt << t;
  198|      1|    tt << R"(,"id":1})";
  199|      1|    useful_F::myStaticCtx->mqttHandler->publish("iDom-client/buderus/ems-esp/thermostat", tt.str());
  200|      1|}
  201|       |
  202|       |unsigned int BUDERUS::getHeatingStartTime() const
  203|      0|{
  204|      0|    std::lock_guard<std::mutex> lock(m_lockGuard);
  205|      0|    return m_heating_time;
  206|      0|}
  207|       |
  208|       |std::string BUDERUS::getDump()
  209|      4|{
  210|      4|    return dump();
  211|      4|}
  212|       |
  213|       |std::string BUDERUS::dump() const
  214|      8|{
  215|      8|    std::stringstream ret;
  216|      8|    ret << '{' << std::endl;
  217|      8|    ret << R"("m_boiler_data": )" << m_boiler_data.dump(4) << "," << std::endl;
  218|      8|    ret << R"("m_boiler_data_ww": )" << m_boiler_data_ww.dump(4) << "," << std::endl;
  219|      8|    ret << R"("m_thermostat_data": )" << m_thermostat_data.dump(4) << "," << std::endl;
  220|      8|    ret << R"("m_tapwater_active": )" << m_tapwater_active << "," << std::endl;
  221|      8|    ret << R"("m_heating_active": )" << m_heating_active << "," << std::endl;
  222|      8|    ret << R"("m_heating_time":)" << m_heating_time << ',' << std::endl;
  223|      8|    ret << R"("m_boilerTemp": )" << m_boilerTemp << "," << std::endl;
  224|      8|    ret << R"("m_insideTemp": )" << m_insideTemp << "," << std::endl;
  225|      8|    ret << R"("m_curFlowTemp": )" << m_curFlowTemp << "," << std::endl;
  226|      8|    ret << R"("m_outdoorTemp": )" << m_outdoorTemp << "," << std::endl;
  227|      8|    ret << R"("m_circlePompCanRun": )" << m_circlePompCanRun << "," << std::endl;
  228|      8|    ret << R"("m_circlePump": ")" << m_circlePump << R"(")" << std::endl
  229|      8|        << "}" << std::endl;
  230|       |
  231|      8|    return ret.str();
  232|      8|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/buderus/buderus_interface.h:
    1|       |#pragma once
    2|       |
    3|       |#include "../json2/json.hpp"
    4|       |#include "../libs/useful/useful.h"
    5|       |
    6|       |class BUDERUS_IF
    7|       |{
    8|       |public:
    9|    107|    virtual ~BUDERUS_IF() = default;
   10|       |    virtual void updateBoilerDataFromMQTT(nlohmann::json jj) = 0;
   11|       |    virtual void updateThermostatDataFromMQTT(nlohmann::json jj) = 0;
   12|       |    virtual void tapWaterActivated() = 0;
   13|       |    virtual void tapWaterDeactivated() = 0;
   14|       |    virtual void heatingActivated() = 0;
   15|       |    virtual void heatingDeactivated() = 0;
   16|       |    virtual void setHeating(bool b) = 0;
   17|       |    virtual void setTapWater(bool b) = 0;
   18|       |
   19|       |    virtual bool isHeatingActiv() = 0;
   20|       |    virtual bool isTapWaterActiv() = 0;
   21|       |
   22|       |    virtual std::string getAllData() const = 0;
   23|       |
   24|       |    virtual double getOutdoorTemp() const = 0;
   25|       |    virtual double getInsideTemp() const = 0;
   26|       |    virtual double getBoilerTemp() const = 0;
   27|       |    virtual double getCurFlowTemp() const = 0;
   28|       |
   29|       |    virtual void circlePompToRun() = 0;
   30|       |    virtual void runCirclePompForWhile() = 0;
   31|       |    virtual STATE getCirclePumpState() const = 0;
   32|       |
   33|       |    virtual void boilerHeatOneTime() = 0;
   34|       |    virtual void setTempInsideBuilding(const std::string &t) = 0;
   35|       |
   36|       |    virtual unsigned int getHeatingStartTime() const = 0;
   37|       |    virtual std::string getDump() = 0;
   38|       |};
   39|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/buderus/mock/buderus_mock.h:
    1|       |#pragma once
    2|       |
    3|       |#include <gmock/gmock.h>
    4|       |
    5|       |#include "../buderus.h"
    6|       |
    7|       |class BUDERUS_MOCK : public BUDERUS_IF
    8|       |{
    9|       |public:
   10|     77|    ~BUDERUS_MOCK() = default;
   11|       |    MOCK_METHOD1(updateBoilerDataFromMQTT, void(nlohmann::json jj));
   12|       |    MOCK_METHOD1(updateThermostatDataFromMQTT, void(nlohmann::json jj));
   13|       |    MOCK_METHOD0(tapWaterActivated, void());
   14|       |    MOCK_METHOD0(tapWaterDeactivated, void());
   15|       |    MOCK_METHOD0(heatingActivated, void());
   16|       |    MOCK_METHOD0(heatingDeactivated, void());
   17|       |    MOCK_METHOD1(setHeating, void(bool b));
   18|       |    MOCK_METHOD1(setTapWater, void(bool b));
   19|       |
   20|       |    MOCK_METHOD0(isHeatingActiv, bool());
   21|       |    MOCK_METHOD0(isTapWaterActiv, bool());
   22|       |
   23|       |    MOCK_CONST_METHOD0(getAllData, std::string());
   24|       |
   25|       |    MOCK_CONST_METHOD0(getOutdoorTemp, double());
   26|       |    MOCK_CONST_METHOD0(getInsideTemp, double());
   27|       |    MOCK_CONST_METHOD0(getBoilerTemp, double());
   28|       |    MOCK_CONST_METHOD0(getCurFlowTemp, double());
   29|       |
   30|       |    MOCK_METHOD0(circlePompToRun, void());
   31|       |    MOCK_METHOD0(runCirclePompForWhile, void());
   32|       |    MOCK_CONST_METHOD0(getCirclePumpState, STATE());
   33|       |
   34|       |    MOCK_METHOD0(boilerHeatOneTime, void());
   35|       |    MOCK_METHOD1(setTempInsideBuilding, void(const std::string &t));
   36|       |
   37|       |    MOCK_CONST_METHOD0(getHeatingStartTime, unsigned int());
   38|       |    MOCK_METHOD0(getDump, std::string());
   39|       |};
   40|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_connection/c_connection.cpp:
    1|       |#include <iostream>
    2|       |#include "c_connection.h"
    3|       |#include "../functions/functions.h"
    4|       |
    5|       |C_connection::C_connection(thread_context *context) : c_socket(context->s_client_sock),
    6|       |                                                   c_from(context->from), m_recv_size(0)
    7|     18|{
    8|     18|    this->context = context;
    9|     18|    this->m_encrypted = context->server_settings->_server.encrypted;
   10|     18|    std::fill(std::begin(c_buffer), std::end(c_buffer), ',');
   11|     18|    onStartConnection();
   12|     18|    m_className.insert(0, std::to_string(c_socket));
   13|     18|    m_className.insert(0, " ");
   14|     18|    m_className.insert(0, typeid(this).name());
   15|     18|    iDom_API::addToMap(m_className, this);
   16|     18|#ifdef BT_TEST
   17|     18|    std::cout << "C_connection::C_connection " << std::endl;
   18|     18|#endif
   19|     18|}
   20|       |
   21|       |C_connection::~C_connection()
   22|     18|{
   23|     18|    iDom_API::removeFromMap(m_className);
   24|       |
   25|     18|    useful_F::sleep(3s);
   26|       |
   27|     18|    shutdown(c_socket, SHUT_RDWR);
   28|     18|#ifdef BT_TEST
   29|     18|    std::cout << "C_connection::~C_connection " << std::endl;
   30|     18|#endif
   31|     18|}
   32|       |
   33|       |int C_connection::c_send(int para)
   34|     29|{
   35|     29|    crypto(m_str_buf, m_encriptionKey, m_encrypted);
   36|     29|    std::string len = std::to_string(m_str_buf.size());
   37|     29|    crypto(len, m_encriptionKey, m_encrypted);
   38|     29|    if ((send(c_socket, len.c_str(), len.length(), para)) <= 0)
   39|      1|    {
   40|      1|        return -1;
   41|      1|    }
   42|     28|    m_recv_size = recv(c_socket, c_buffer, MAX_buf, para);
   43|       |
   44|     28|    if (m_recv_size < 0)
   45|      0|    {
   46|      0|        log_file_mutex.mutex_lock();
   47|      0|        log_file_cout << ERROR << "C_connection::c_send(int para) recv() error - " << strerror(errno) << std::endl;
   48|      0|        log_file_mutex.mutex_unlock();
   49|      0|        return -1;
   50|      0|    }
   51|     28|    else if (m_recv_size == 0)
   52|      3|    {
   53|      3|        return -1;
   54|      3|    }
   55|       |
   56|     25|    auto len_send = m_str_buf.length();
   57|       |
   58|     50|    while (len_send > 0)
   59|     25|    {
   60|     25|        auto len_temp = send(c_socket, m_str_buf.c_str(), m_str_buf.length(), para);
   61|     25|        if (len_temp <= 0)
   62|      0|        {
   63|      0|            return -1;
   64|      0|        }
   65|     25|        len_send -= len_temp;
   66|     25|        m_str_buf.erase(0, len_temp);
   67|     25|    }
   68|     25|    return 0;
   69|     25|}
   70|       |
   71|       |int C_connection::c_send(const std::string &command)
   72|     18|{
   73|     18|    m_str_buf = command;
   74|     18|    return c_send(0);
   75|     18|}
   76|       |
   77|       |int C_connection::c_sendPure(const std::string &command)
   78|      2|{
   79|      2|    return send(c_socket, command.c_str(), command.length(), 0);
   80|      2|}
   81|       |
   82|       |int C_connection::c_recv(int para)
   83|     38|{
   84|     38|    struct timeval tv;
   85|     38|    tv.tv_sec = 90;
   86|     38|    tv.tv_usec = 0;
   87|     38|    setsockopt(c_socket, SOL_SOCKET, SO_RCVTIMEO, (char *)&tv, sizeof(struct timeval));
   88|       |
   89|     38|    m_recv_size = recv(c_socket, c_buffer, MAX_buf, para);
   90|       |
   91|     38|    if (m_recv_size < 0)
   92|      1|    {
   93|      1|        log_file_mutex.mutex_lock();
   94|      1|        log_file_cout << ERROR << "C_connection::c_recv(int para) recv() error - " << strerror(errno) << std::endl;
   95|      1|        log_file_mutex.mutex_unlock();
   96|      1|        return -1;
   97|      1|    }
   98|     37|    else if (m_recv_size == 0)
   99|      8|    {
  100|      8|        return -1;
  101|      8|    }
  102|     29|    return m_recv_size;
  103|     38|}
  104|       |
  105|       |void C_connection::c_analyse(int recvSize)
  106|     14|{
  107|     14|    std::string buf;
  108|       |
  109|     14|    buf = c_read_buf(recvSize);
  110|     14|    context->myEventHandler.run("command")->addEvent(buf);
  111|     14|    std::vector<std::string> command;
  112|       |
  113|     14|    try
  114|     14|    {
  115|     14|        useful_F::tokenizer(command, " \n,", buf);
  116|     14|    }
  117|     14|    catch (std::string &k)
  118|     14|    {
  119|      1|        log_file_mutex.mutex_lock();
  120|      1|        log_file_cout << DEBUG << "brak komendy - " << k << std::endl;
  121|      1|        log_file_mutex.mutex_unlock();
  122|      1|        m_str_buf = "empty command";
  123|      1|        return;
  124|      1|    }
  125|       |
  126|      0|#ifdef BT_TEST
  127|     13|    std::cout << "komenda: " << command.at(0) << " command.size() " << command.size() << std::endl;
  128|       |
  129|     13|    m_str_buf = "unknown command\n";
  130|       |
  131|     13|    for (const std::string &t : command)
  132|     23|    {
  133|     23|        m_str_buf.append(t);
  134|     23|        m_str_buf.push_back(' ');
  135|     23|    }
  136|     13|#endif
  137|     13|    m_str_buf = m_mainCommandHandler->run(command, context);
  138|     13|}
  139|       |
  140|       |std::string C_connection::dump() const
  141|      0|{
  142|      0|    std::stringstream ret;
  143|       |
  144|      0|    ret << std::boolalpha;
  145|      0|    ret << " c_from.sin_addr.s_addr: " << this->c_from.sin_addr.s_addr << std::endl;
  146|      0|    ret << " c_socket: " << this->c_socket << std::endl;
  147|      0|    ret << " m_recv_size: " << this->m_recv_size << std::endl;
  148|      0|    ret << " m_className: " << this->m_className << std::endl;
  149|      0|    ret << " m_counter: " << this->m_counter << std::endl;
  150|      0|    ret << " m_encriptionKey: " << this->m_encriptionKey << std::endl;
  151|      0|    ret << " m_encrypted: " << this->m_encrypted << std::endl;
  152|      0|    ret << " m_str_buf: " << this->m_str_buf << std::endl;
  153|       |
  154|      0|    return ret.str();
  155|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_connection/c_connection.h:
    1|       |#pragma once
    2|       |
    3|       |#include <mutex>
    4|       |#include <unistd.h>
    5|       |#include <iostream>
    6|       |
    7|       |#include "../blockQueue/blockqueue.h"
    8|       |#include "../command/commandhandler.h"
    9|       |#include "../iDom_server_OOP.h"
   10|       |
   11|       |constexpr int MAX_buf = 32768;
   12|       |
   13|       |class C_connection : public iDom_API
   14|       |{
   15|       |#ifdef BT_TEST
   16|       |    friend class c_connection_fixture;
   17|       |#endif
   18|       |public:
   19|       |    explicit C_connection(thread_context *context);
   20|       |    ~C_connection();
   21|       |
   22|       |    thread_context *context;
   23|       |    int c_socket = 0;
   24|       |    sockaddr_in c_from;
   25|       |
   26|       |    char c_buffer[MAX_buf];
   27|       |    int m_recv_size;
   28|       |
   29|       |    int c_send(int para);
   30|       |    int c_send(const std::string &command);
   31|       |    int c_sendPure(const std::string &command);
   32|       |    int c_recv(int para);
   33|       |    std::string c_read_buf(int recvSize);
   34|       |    void c_analyse(int recvSize);
   35|       |    void setEncriptionKey(const std::string &key);
   36|       |    void setEncrypted(bool flag);
   37|       |    std::unique_ptr<commandHandler> m_mainCommandHandler = std::nullptr_t();
   38|       |    void onStartConnection();
   39|       |    void onStopConnection();
   40|       |    void cryptoLog(std::string &toEncrypt);
   41|       |    void handleHTTP(const std::string &msg);
   42|       |#ifdef BT_TEST
   43|       |    std::string getStr_buf()
   44|      1|    {
   45|      1|        return m_str_buf;
   46|      1|    }
   47|       |#endif
   48|       |    std::string dump() const override;
   49|       |
   50|       |private:
   51|       |    std::string m_str_buf;
   52|       |    blockQueue m_char_queue;
   53|       |    int m_counter = 0;
   54|       |    std::string m_encriptionKey;
   55|       |    bool m_encrypted;
   56|       |    void crypto(std::string &toEncrypt, const std::string& key, bool encrypted);
   57|       |    C_connection();
   58|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_connection/c_connection2.cpp:
    1|       |#include <iostream>
    2|       |
    3|       |#include "c_connection.h"
    4|       |
    5|       |std::string C_connection::c_read_buf(int recvSize)
    6|     32|{
    7|     32|    std::string str_buf;
    8|    519|    for (int i = 0; i < recvSize; ++i)
    9|    487|    {
   10|    487|        str_buf.push_back(c_buffer[i]);
   11|    487|    }
   12|     32|    crypto(str_buf, m_encriptionKey, m_encrypted);
   13|     32|    return str_buf;
   14|     32|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_connection/c_connection_node.cpp:
    1|       |#include <iostream>
    2|       |#include "c_connection.h"
    3|       |#include "../HTTP/http.h"
    4|       |#include "json.hpp"
    5|       |#include "../iDomTools/idomtools_interface.h"
    6|       |
    7|       |void C_connection::setEncriptionKey(const std::string &key)
    8|     12|{
    9|     12|    m_encriptionKey = key;
   10|     12|}
   11|       |
   12|       |void C_connection::setEncrypted(bool flag)
   13|      4|{
   14|      4|    m_encrypted = flag;
   15|      4|}
   16|       |
   17|       |void C_connection::crypto(std::string &toEncrypt, const std::string& key, bool encrypted)
   18|     99|{
   19|     99|    if (!encrypted)
   20|      5|    {
   21|      5|        return;
   22|      5|    }
   23|     94|    unsigned int keySize = key.size() - 1;
   24|     94|#ifdef BT_TEST
   25|     94|    std::cout << "key: " << key << " size: " << key.size() << std::endl;
   26|     94|#endif
   27|  17.7k|    for (unsigned int i = 0; i < toEncrypt.size(); i++)
   28|  17.7k|    {
   29|  17.7k|        if (keySize == 0)
   30|  1.87k|            keySize = key.size() - 1;
   31|  15.8k|        else
   32|  15.8k|            --keySize;
   33|  17.7k|        toEncrypt[i] ^= key[keySize];
   34|  17.7k|    }
   35|     94|}
   36|       |
   37|       |void C_connection::onStartConnection()
   38|     18|{
   39|     18|}
   40|       |
   41|       |void C_connection::onStopConnection()
   42|      7|{
   43|       |    
   44|      7|}
   45|       |
   46|       |void C_connection::cryptoLog(std::string &toEncrypt)
   47|      7|{
   48|      7|    crypto(toEncrypt, m_encriptionKey, m_encrypted);
   49|      7|}
   50|       |
   51|       |void C_connection::handleHTTP(const std::string &msg)
   52|      1|{
   53|      1|    std::vector<std::string> dataToSend;
   54|      1|    std::string htmlHEAD = R"(<!DOCTYPE html>
   55|      1|                            <html lang="en">
   56|      1|                            <head>
   57|      1|                                <meta charset="UTF-8">
   58|      1|                                <meta http-equiv="X-UA-Compatible" content="IE=edge">
   59|      1|                                <meta name="viewport" content="width=device-width, initial-scale=1.0">
   60|      1|                                <title>iDom gateway</title>
   61|      1|                                <link rel="icon" type="image/x-icon" href="http://cyniu88.no-ip.pl/favicon.ico">
   62|      1|                            </head>)";
   63|       |
   64|      1|    if (Http::getContentType(msg) == Content_Type::ApplicationJSON and Http::getUrl(msg) == "/iDom/log")
   65|      0|    {
   66|      0|        nlohmann::json jj = nlohmann::json::parse(Http::getContent(msg));
   67|      0|        log_file_mutex.mutex_lock();
   68|      0|        log_file_cout << INFO << "logowanie z ESP: " << jj["msg"] << " millis: " << jj["millis"] << std::endl;
   69|      0|        log_file_mutex.mutex_unlock();
   70|      0|        std::string msgHTML = R"(ok)";
   71|      0|        std::string msgHTTP = R"(HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Length: )" + std::to_string(msgHTML.length()) + "\r\n\r\n";
   72|       |
   73|      0|        dataToSend.push_back(msgHTTP);
   74|      0|        dataToSend.push_back(msgHTML);
   75|      0|    }
   76|       |
   77|       |
   78|      1|    else if (Http::getUrl(msg) == "/log")
   79|      0|    {
   80|      0|        std::string str_buf;
   81|      0|                std::fstream log_file;
   82|      0|        log_file.open(_logfile.c_str(), std::ios::in);
   83|      0|        if (log_file.good() == false)
   84|      0|        {
   85|      0|            str_buf = " can not open file !";
   86|      0|        }
   87|      0|        else
   88|      0|        {
   89|      0|            str_buf.erase();
   90|      0|            while (!log_file.eof())
   91|      0|            {
   92|      0|                str_buf.push_back(static_cast<char>(log_file.get()));
   93|      0|            }
   94|      0|            str_buf.erase(str_buf.length() - 1, str_buf.length());
   95|       |
   96|      0|            log_file.close();
   97|      0|        }
   98|      0|        std::string msgHTML = htmlHEAD + R"(<body> <left><pre>)" +  str_buf + R"(</pre></left> </body> </html>)";
   99|       |
  100|      0|        std::string msgHTTP = R"(HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Length: )" + std::to_string(msgHTML.length()) + "\r\n\r\n";
  101|       |
  102|      0|        dataToSend.push_back(msgHTTP);
  103|      0|        dataToSend.push_back(msgHTML);
  104|       |
  105|      0|        log_file_mutex.mutex_lock();
  106|      0|        log_file_cout << DEBUG << "odebrano HTTP " << msg << std::endl;
  107|      0|        log_file_mutex.mutex_unlock();
  108|      0|    }
  109|      1|    else if (Http::getUrl(msg) == "/run/command/")
  110|      0|    {
  111|      0|        auto query = Http::getQuery(msg);
  112|       |
  113|      0|        auto command = context->m_keyHandler->getCommand(query["name"]);
  114|       |
  115|      0|        std::string data;
  116|      0|        std::string color = "#00ff00";
  117|      0|        if (context->m_keyHandler->useKEY(query["name"], query["key"]))
  118|      0|        {
  119|      0|            auto topic = context->server_settings->_mqtt_broker.topicSubscribe;
  120|      0|            topic.pop_back();
  121|      0|            context->mqttHandler->publish(topic + "command", command);
  122|      0|            data = " wyslano komende!";
  123|      0|        }
  124|      0|        else
  125|      0|        {
  126|      0|            data = "operacja niedozwolona!";
  127|      0|            color = "#ff0000";
  128|      0|        }
  129|       |        // std::string msgHTML = htmlHEAD + R"(<body><center><span style="color: red">)" + data + R"(</span></center></body></html>)";
  130|      0|        std::string msgHTML = htmlHEAD + R"(<body>
  131|      0|                            <center><div>
  132|      0|                                <a id="redirect-btn" target="main">
  133|      0|                                <button type="button" style="width: 80%; padding: 80px; cursor: pointer; box-shadow: 6px 6px 5px; #999; -webkit-box-shadow: 6px 6px 5px #999; -moz-box-shadow: 6px 6px 5px #999; font-weight: bold; background: )"
  134|      0|                                 + color 
  135|      0|                                 + R"(; color: #000; border-radius: 10px; border: 1px solid #999; font-size: 150%; text-align: center;"> )" 
  136|      0|                                 + data 
  137|      0|                                 + R"(</button> </a>
  138|      0|                            </div>
  139|      0|                            </center>
  140|      0|                            <br>
  141|      0|                            <iframe  frameborder="0" name="main" width=100% height=600 align="left" >koko</iframe>
  142|      0|
  143|      0|                            <center>13-09-2023 <a href=" " target=_blank title="13-09-2023">Cyniu</a></center>
  144|      0|
  145|      0|                            <script>
  146|      0|                                const baseLink = "http://cyniu88.no-ip.pl:48833/gateway.html";
  147|      0|
  148|      0|                                var urlQuery = new URLSearchParams(window.location.search);
  149|      0|                                //urlQuery = urlQuery.split('=').join(' ');
  150|      0|
  151|      0|                                document.getElementById("redirect-btn").href = baseLink + "?" + urlQuery;
  152|      0|
  153|      0|                            </script>
  154|      0|                            </body>
  155|      0|                            </html>)";
  156|       |
  157|      0|        std::string msgHTTP = R"(HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Length: )" + std::to_string(msgHTML.length()) + "\r\n\r\n";
  158|       |
  159|      0|        dataToSend.push_back(msgHTTP);
  160|      0|        dataToSend.push_back(msgHTML);
  161|       |
  162|      0|        log_file_mutex.mutex_lock();
  163|      0|        log_file_cout << DEBUG << "odebrano HTTP " << msg << std::endl;
  164|      0|        log_file_mutex.mutex_unlock();
  165|      0|    }
  166|      1|    else
  167|      1|    {
  168|      1|        std::string msgHTML = htmlHEAD + R"(<body>
  169|      1|                            <center><div>
  170|      1|                                <a id="redirect-btn" target="main">
  171|      1|                                <button type="button" style="width: 80%; padding: 80px; cursor: pointer; box-shadow: 6px 6px 5px; #999; -webkit-box-shadow: 6px 6px 5px #999; -moz-box-shadow: 6px 6px 5px #999; font-weight: bold; background: #ffff00; color: #000; border-radius: 10px; border: 1px solid #999; font-size: 350%; text-align: center;">Click Me!</button> </a>
  172|      1|                            </div>
  173|      1|                            </center>
  174|      1|                            <br>
  175|      1|                            <iframe  frameborder="0" name="main" width=100% height=600 align="left" >koko</iframe>
  176|      1|
  177|      1|                            <center>13-09-2023 <a href=" " target=_blank title="13-09-2023">Cyniu</a></center>
  178|      1|
  179|      1|                            <script>
  180|      1|                                const baseLink = "http://cyniu88.no-ip.pl:48833/run/command/";
  181|      1|
  182|      1|                                var urlQuery = new URLSearchParams(window.location.search);
  183|      1|                                //urlQuery = urlQuery.split('=').join(' ');
  184|      1|
  185|      1|                                document.getElementById("redirect-btn").href = baseLink + "?" + urlQuery;
  186|      1|
  187|      1|                            </script>
  188|      1|                            </body>
  189|      1|                            </html>)";
  190|       |
  191|      1|        std::string msgHTTP = R"(HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Length: )" + std::to_string(msgHTML.length()) + "\r\n\r\n";
  192|       |
  193|      1|        dataToSend.push_back(msgHTTP);
  194|      1|        dataToSend.push_back(msgHTML);
  195|       |
  196|      1|        log_file_mutex.mutex_lock();
  197|      1|        log_file_cout << DEBUG << "odebrano HTTP " << msg << std::endl;
  198|      1|        log_file_mutex.mutex_unlock();
  199|      1|    }
  200|      1|    for (const auto &d : dataToSend)
  201|      2|        c_sendPure(d);
  202|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/c_connection/test/c_connection_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |
    4|       |#include "../../RADIO_433_eq/radio_433_eq.h"
    5|       |#include "../../command/commandhandlerroot.h"
    6|       |#include "../../iDomTools/mock/iDomToolsMock.h"
    7|       |#include "../c_connection.h"
    8|       |
    9|       |class c_connection_fixture : public testing::Test
   10|       |{
   11|       |public:
   12|       |    c_connection_fixture():main_iDomTools(std::make_shared<iDomToolsMock>()),
   13|       |                           test_connection(std::nullptr_t()),
   14|       |                           test_rec(std::make_shared<RADIO_EQ_CONTAINER>(&test_context))
   15|      7|    {
   16|      7|        test_server_set._server.encrypted = true;
   17|      7|        test_context.server_settings = &test_server_set;
   18|      7|        test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   19|      7|        test_context.main_iDomTools = main_iDomTools;
   20|      7|        test_context.main_REC = test_rec;
   21|      7|        test_context.s_client_sock = 0;
   22|      7|        test_connection = std::make_unique<C_connection>(&test_context);
   23|      7|        test_connection->m_encriptionKey = "key";
   24|      7|        test_connection->m_encrypted = false;
   25|      7|        test_connection->c_socket = 0;
   26|      7|    }
   27|       |
   28|       |protected:
   29|       |    thread_context test_context;
   30|       |    CONFIG_JSON test_server_set;
   31|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   32|       |    std::unique_ptr<C_connection> test_connection;
   33|       |    std::shared_ptr<RADIO_EQ_CONTAINER> test_rec;
   34|       |    void crypto_fixture(std::string &toEncrypt, std::string key)
   35|      2|    {
   36|      2|        test_connection->crypto(toEncrypt, std::move(key), true);
   37|      2|    }
   38|       |};
   39|       |
   40|       |TEST_F(c_connection_fixture, crypto)
   41|      1|{
   42|      1|    std::string key = "210116556";
   43|      1|    std::string test_msg = "kokosowa ksiezniczka";
   44|      1|    std::string toEncrypt = test_msg;
   45|      1|    crypto_fixture(toEncrypt, key);
   46|       |
   47|     21|    for(int i = 0; i < toEncrypt.size(); ++i)
   48|     20|    {
   49|     40|        EXPECT_NE(test_msg[i],toEncrypt[i]) << " niestety równe: " << toEncrypt[i]
   50|     40|                                               << " na indeksie: " << i;
   51|     20|    }
   52|      1|    std::cout << "wiadomość: " << test_msg << " zakodowane: "<< toEncrypt << std::endl;
   53|      1|    crypto_fixture(toEncrypt, key);
   54|      1|    std::cout << "wiadomość: " << test_msg << " odkodowane: "<< toEncrypt << std::endl;
   55|      2|    EXPECT_STREQ(toEncrypt.c_str(), test_msg.c_str()) << "wiadomosci nie są równe";
   56|      1|}
   57|       |
   58|       |TEST_F(c_connection_fixture, c_analyse)
   59|      1|{
   60|      1|    test_connection->m_mainCommandHandler = std::make_unique<commandHandlerRoot>(&test_context);
   61|      1|    int i = 0;
   62|      1|    std::string strMsg = "fake command";
   63|      1|    for(char n : strMsg)
   64|     12|        test_connection->c_buffer[i++] = n;
   65|      1|    test_connection->setEncrypted(false);
   66|      1|    test_connection->c_analyse(static_cast<int>(strMsg.size()));
   67|      1|    EXPECT_THAT(test_context.myEventHandler.run("command")->getEvent()
   68|      1|                ,testing::HasSubstr(strMsg));
   69|      1|}
   70|       |
   71|       |TEST_F(c_connection_fixture, c_recv)
   72|      1|{
   73|      1|    EXPECT_EQ(-1, test_connection->c_recv(1));
   74|      1|}
   75|       |
   76|       |TEST_F(c_connection_fixture, c_send)
   77|      1|{
   78|      1|    EXPECT_EQ(-1, test_connection->c_send("test"));
   79|      1|}
   80|       |
   81|       |TEST_F(c_connection_fixture, cryptoLog)
   82|      1|{
   83|      1|    std::string msg("tajna wiadomosc");
   84|      1|    std::string msgBackup(msg);
   85|      1|    test_connection->setEncriptionKey("key_test");
   86|      1|    test_connection->setEncrypted(true);
   87|       |    ///////szyfrowanie
   88|      1|    test_connection->cryptoLog(msg);
   89|      1|    EXPECT_STRNE(msgBackup.c_str(), msg.c_str());
   90|      1|    std::cout << "ZASZUFROWANY: " << msg << std::endl;
   91|       |    ////// deszyfracja
   92|      1|    test_connection->cryptoLog(msg);
   93|      1|    EXPECT_STREQ(msgBackup.c_str(), msg.c_str());
   94|      1|}
   95|       |
   96|       |
   97|       |TEST_F(c_connection_fixture, exitFlow)
   98|      1|{
   99|      1|    test_connection->m_mainCommandHandler = std::make_unique<commandHandlerRoot>(&test_context);
  100|      1|    EXPECT_CALL(*main_iDomTools.get(), close_iDomServer());
  101|      1|    int i = 0;
  102|      1|    std::string strMsg = "program stop server";
  103|      1|    for(char n : strMsg)
  104|     19|        test_connection->c_buffer[i++] = n;
  105|      1|    test_connection->setEncrypted(false);
  106|      1|    test_connection->c_analyse(strMsg.size());
  107|      1|}
  108|       |
  109|       |TEST_F(c_connection_fixture, emptyCommand)
  110|      1|{
  111|       |
  112|      1|    std::array<Thread_array_struc,iDomConst::MAX_CONNECTION >test_ThreadArrayStruc;
  113|      1|    test_context.main_THREAD_arr = &test_ThreadArrayStruc;
  114|      1|    test_context.main_THREAD_arr->at(3).thread_socket = 1;
  115|      1|    test_context.main_THREAD_arr->at(3).thread_ID = std::this_thread::get_id();
  116|       |
  117|      1|    test_connection->m_mainCommandHandler = std::make_unique<commandHandlerRoot>(&test_context);
  118|       |
  119|      1|    std::string strMsg = "";
  120|      1|    test_connection->setEncrypted(false);
  121|      1|    test_connection->c_analyse(static_cast<int>(strMsg.size()));
  122|      1|    EXPECT_STREQ(test_connection->getStr_buf().c_str(), "empty command");
  123|      1|}
  124|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/command.cpp:
    1|       |#include "command.h"
    2|       |
    3|       |command::command(const std::string &commandName) : commandName(commandName)
    4|    888|{
    5|    888|}
    6|       |
    7|       |std::string command::getCommandName() const
    8|    765|{
    9|    765|    return commandName;
   10|    765|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/command.h:
    1|       |#pragma once
    2|       |
    3|       |#include <string>
    4|       |#include <vector>
    5|       |
    6|       |#include "../iDom_server_OOP.h"
    7|       |
    8|       |class command
    9|       |{
   10|       |    std::string commandName;
   11|       |
   12|       |public:
   13|       |    command(const std::string &commandName);
   14|    888|    virtual ~command() = default;
   15|       |    virtual std::string execute(std::vector<std::string> &v, thread_context *context) = 0;
   16|       |    virtual std::string help() const = 0;
   17|       |    virtual std::string getCommandName() const;
   18|       |    int counter = 0;
   19|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_433mhz_BT.cpp:
    1|       |#include<gtest/gtest.h>
    2|       |#include<gmock/gmock.h>
    3|       |
    4|       |#include "../command_433mhz.h"
    5|       |#include "../../../RADIO_433_eq/radio_433_eq.h"
    6|       |#include "../../../iDomTools/mock/iDomToolsMock.h"
    7|       |#include "../../../blockQueue/blockqueue.h"
    8|       |
    9|       |class command_433MHz_Class_fixture : public testing::Test
   10|       |{
   11|       |public:
   12|       |    command_433MHz_Class_fixture():main_iDomTools(std::make_shared<iDomToolsMock>()),
   13|       |        test_v({"433MHz"}),
   14|       |        test_rec(std::make_shared<RADIO_EQ_CONTAINER>(&test_context)),
   15|       |        test_command_433MHz(std::make_unique<command_433MHz>("433MHz"))
   16|      7|    {
   17|      7|        test_q._clearAll();
   18|      7|        test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   19|      7|        test_server_settings._server.radio433MHzConfigFile = "/mnt/ramdisk/433_eq_conf.json";
   20|      7|        test_rec->loadConfig(test_server_settings._server.radio433MHzConfigFile);
   21|      7|        test_context.main_REC = test_rec;
   22|      7|        test_server_settings._rflink.RFLinkPort = "test port";
   23|      7|        test_context.server_settings = &test_server_settings;
   24|      7|        test_context.main_RFLink = std::make_shared<RFLinkHandler>(&test_context);
   25|      7|        test_context.serverStarted = false;
   26|      7|        test_context.main_iDomTools = main_iDomTools;
   27|      7|    }
   28|       |
   29|       |protected:
   30|       |    thread_context test_context;
   31|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   32|       |    std::vector<std::string> test_v;
   33|       |    std::shared_ptr<RADIO_EQ_CONTAINER> test_rec;
   34|       |    blockQueue test_q;
   35|       |    std::unique_ptr<command_433MHz> test_command_433MHz;
   36|       |    CONFIG_JSON test_server_settings;
   37|       |
   38|       |
   39|       |    void addSwitch(const std::string& name)
   40|      0|    {
   41|      0|        test_v.clear();
   42|      0|        test_v.push_back("433MHz");
   43|      0|        test_v.push_back("add");
   44|      0|        test_v.push_back("SWITCH");
   45|      0|        test_v.push_back(name);
   46|      0|        test_v.push_back("1234");
   47|      0|        test_v.push_back("onCode_A");
   48|      0|        test_v.push_back("ofCode_A");
   49|      0|        test_v.push_back("on15sec_A");
   50|      0|        std::cout << test_command_433MHz->execute(test_v,&test_context) << std::endl;
   51|      0|    }
   52|       |    void deleteSwitch(const std::string& name)
   53|      0|    {
   54|      0|        test_v.clear();
   55|      0|        test_v.push_back("433MHz");
   56|      0|        test_v.push_back("delete");
   57|      0|        test_v.push_back(name);
   58|      0|        std::cout << test_command_433MHz->execute(test_v,&test_context) << std::endl;
   59|      0|    }
   60|       |};
   61|       |TEST_F(command_433MHz_Class_fixture, getCommandName)
   62|      1|{
   63|      1|    EXPECT_THAT(test_command_433MHz->getCommandName(),testing::HasSubstr("433MHz"));
   64|      1|}
   65|       |
   66|       |TEST_F(command_433MHz_Class_fixture, show_config)
   67|      1|{
   68|      1|    test_v.push_back("show");
   69|      1|    test_v.push_back("config");
   70|      1|    auto retStr = test_command_433MHz->execute(test_v,&test_context);
   71|      1|    EXPECT_GT(retStr.size(), 2210);
   72|      1|}
   73|       |
   74|       |TEST_F(command_433MHz_Class_fixture, show_switch)
   75|      1|{
   76|      1|    test_v.push_back("show");
   77|      1|    test_v.push_back("all");
   78|      1|    std::cout << test_command_433MHz->execute(test_v,&test_context) << std::endl;
   79|      1|    auto v = test_rec->getSwitchPointerVector();
   80|      1|    EXPECT_EQ(v.size(), 5);
   81|      1|    test_v.clear();
   82|      1|    test_v.push_back("433MHz");
   83|      1|    test_v.push_back("show");
   84|      1|    test_v.push_back("switch");
   85|       |
   86|      1|    std::string result = test_command_433MHz->execute(test_v,&test_context);
   87|      1|    std::cout << "wynik testu: " << result << std::endl;
   88|      1|    EXPECT_THAT(result, testing::HasSubstr("UNDEFINE"));
   89|      1|    v = test_rec->getSwitchPointerVector();
   90|      1|    EXPECT_EQ(v.size(), 5);
   91|      1|    test_v.clear();
   92|      1|    test_v.push_back("433MHz");
   93|      1|    test_v.push_back("show");
   94|      1|    test_v.push_back("all");
   95|      1|    std::cout << test_command_433MHz->execute(test_v,&test_context) <<std::endl;
   96|      1|}
   97|       |
   98|       |TEST_F(command_433MHz_Class_fixture, show_aether)
   99|      1|{
  100|      1|    test_context.main_RFLink->m_rflinkMAP["kk"].msg = "astro";
  101|      1|    test_context.main_RFLink->m_rflinkMAP["kk"].m_counter = 99;
  102|      1|    test_context.main_RFLink->m_rflinkMAP["jj"].msg = "lock";
  103|      1|    test_context.main_RFLink->m_rflinkMAP["jj"].m_counter = 155;
  104|      1|    test_v.push_back("show");
  105|      1|    test_v.push_back("all");
  106|      1|    std::cout << test_command_433MHz->execute(test_v,&test_context) <<std::endl;
  107|      1|    auto v = test_rec->getSwitchPointerVector();
  108|      1|    EXPECT_EQ(v.size(), 5);
  109|      1|    test_v.clear();
  110|      1|    test_v.push_back("433MHz");
  111|      1|    test_v.push_back("show");
  112|      1|    test_v.push_back("aether");
  113|       |
  114|      1|    std::string result = test_command_433MHz->execute(test_v,&test_context);
  115|      1|    std::cout << "wynik testu: " << result << std::endl;
  116|      1|    EXPECT_THAT(result, testing::HasSubstr("astro"));
  117|      1|    EXPECT_THAT(result, testing::HasSubstr("lock"));
  118|      1|    EXPECT_THAT(result, testing::HasSubstr("99"));
  119|      1|    EXPECT_THAT(result, testing::HasSubstr("155"));
  120|      1|    v = test_rec->getSwitchPointerVector();
  121|      1|    EXPECT_EQ(v.size(), 5);
  122|      1|    test_v.clear();
  123|      1|}
  124|       |
  125|       |TEST_F(command_433MHz_Class_fixture, switchRF433)
  126|      1|{
  127|      1|    test_v.push_back("show");
  128|      1|    test_v.push_back("all");
  129|      1|    std::cout << test_command_433MHz->execute(test_v,&test_context) <<std::endl;
  130|      1|    auto v = test_rec->getSwitchPointerVector();
  131|      1|    EXPECT_EQ(v.size(),5);
  132|       |
  133|      1|    EXPECT_CALL(*main_iDomTools.get(),saveState_iDom(false)).Times(7);
  134|       |    /////////////////////////////// ON
  135|      1|    test_v.clear();
  136|      1|    test_v.push_back("433MHz");
  137|      1|    test_v.push_back("switch");
  138|      1|    test_v.push_back("B");
  139|      1|    test_v.push_back("ON");
  140|      1|    test_command_433MHz->execute(test_v,&test_context);
  141|      1|    EXPECT_EQ(test_context.main_REC->getEqPointer("B")->getState(), STATE::ON);
  142|       |    ////////////////////////////// OFF
  143|      1|    test_v.clear();
  144|      1|    test_v.push_back("433MHz");
  145|      1|    test_v.push_back("switch");
  146|      1|    test_v.push_back("B");
  147|      1|    test_v.push_back("OFF");
  148|      1|    test_command_433MHz->execute(test_v,&test_context);
  149|      1|    EXPECT_EQ(test_context.main_REC->getEqPointer("B")->getState(), STATE::OFF);
  150|       |    ////////////////////////////// change (ON)
  151|      1|    test_v.clear();
  152|      1|    test_v.push_back("433MHz");
  153|      1|    test_v.push_back("switch");
  154|      1|    test_v.push_back("B");
  155|      1|    test_v.push_back("change");
  156|      1|    test_command_433MHz->execute(test_v,&test_context);
  157|      1|    EXPECT_EQ(test_context.main_REC->getEqPointer("B")->getState(), STATE::ON);
  158|       |    ////////////////////////////// change (OFF)
  159|      1|    test_v.clear();
  160|      1|    test_v.push_back("433MHz");
  161|      1|    test_v.push_back("switch");
  162|      1|    test_v.push_back("B");
  163|      1|    test_v.push_back("change");
  164|      1|    test_command_433MHz->execute(test_v,&test_context);
  165|      1|    EXPECT_EQ(test_context.main_REC->getEqPointer("B")->getState(), STATE::OFF);
  166|       |    ////////////////////////////// 15s
  167|      1|    test_v.clear();
  168|      1|    test_v.push_back("433MHz");
  169|      1|    test_v.push_back("switch");
  170|      1|    test_v.push_back("B");
  171|      1|    test_v.push_back("15s");
  172|      1|    test_command_433MHz->execute(test_v,&test_context);
  173|      1|    EXPECT_EQ(test_context.main_REC->getEqPointer("B")->getState(), STATE::TEMPORARY);
  174|       |    ////////////////////////////// unknown paramiter
  175|      1|    test_v.clear();
  176|      1|    test_v.push_back("433MHz");
  177|      1|    test_v.push_back("switch");
  178|      1|    test_v.push_back("B");
  179|      1|    test_v.push_back("fake");
  180|      1|    std::string result = test_command_433MHz->execute(test_v,&test_context);
  181|      1|    EXPECT_EQ(test_context.main_REC->getEqPointer("B")->getState(), STATE::TEMPORARY);
  182|      1|    EXPECT_THAT(result, testing::HasSubstr("fake"));
  183|       |    ///////////////////////////// fake switch
  184|      1|    test_v.clear();
  185|      1|    test_v.push_back("433MHz");
  186|      1|    test_v.push_back("switch");
  187|      1|    test_v.push_back("B_fake");
  188|      1|    test_v.push_back("fake");
  189|       |
  190|      1|    result = test_command_433MHz->execute(test_v,&test_context);
  191|      1|    EXPECT_THAT(result, testing::HasSubstr("not found"));
  192|      1|    v = test_rec->getSwitchPointerVector();
  193|      1|    EXPECT_EQ(v.size(),5);
  194|      1|    test_v.clear();
  195|      1|}
  196|       |
  197|       |
  198|       |TEST_F(command_433MHz_Class_fixture, sendRF433)
  199|      1|{
  200|      1|    test_v.push_back("show");
  201|      1|    test_v.push_back("all");
  202|      1|    std::cout << test_command_433MHz->execute(test_v,&test_context) <<std::endl;
  203|      1|    auto v = test_rec->getSwitchPointerVector();
  204|      1|    EXPECT_EQ(v.size(),5);
  205|      1|    test_v.clear();
  206|      1|    test_v.push_back("433MHz");
  207|      1|    test_v.push_back("send");
  208|      1|    test_v.push_back("fake");
  209|       |
  210|      1|    std::string retStr = test_command_433MHz->execute(test_v,&test_context);
  211|      1|    EXPECT_THAT(retStr, testing::HasSubstr("sended"));
  212|      1|}
  213|       |
  214|       |TEST_F(command_433MHz_Class_fixture, fakeSwitchON)
  215|      1|{
  216|      1|    test_v.push_back("show");
  217|      1|    test_v.push_back("all");
  218|      1|    std::cout << test_command_433MHz->execute(test_v,&test_context) <<std::endl;
  219|      1|    auto v = test_rec->getSwitchPointerVector();
  220|      1|    EXPECT_EQ(v.size(),5);
  221|      1|    test_v.clear();
  222|      1|    test_v.push_back("433MHz");
  223|      1|    test_v.push_back("switch");
  224|      1|    test_v.push_back("ALARM-fake");
  225|      1|    test_v.push_back("ON");
  226|      1|    EXPECT_CALL(*main_iDomTools.get(),saveState_iDom(false));
  227|      1|    std::string retStr = test_command_433MHz->execute(test_v, &test_context);
  228|      1|    EXPECT_THAT(retStr, testing::HasSubstr(" not found ALARM-fake"));
  229|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_ardu_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |
    4|       |#include "../command_ardu.h"
    5|       |#include "../../../blockQueue/blockqueue.h"
    6|       |
    7|       |class commandArdu_Class_fixture : public testing::Test
    8|       |{
    9|       |public:
   10|       |    commandArdu_Class_fixture()
   11|      8|    {
   12|      8|        test_q._clearAll();
   13|      8|        test_server_settings._rflink.RFLinkPort = "testPort";
   14|      8|        test_server_settings._server.radio433MHzConfigFile = "/mnt/ramdisk/433_eq_conf.json";
   15|      8|        test_context.server_settings = &test_server_settings;
   16|      8|        test_v.push_back("433MHz");
   17|      8|        test_context.main_REC = test_rec;
   18|      8|        test_context.main_RFLink = std::make_shared<RFLinkHandler>(&test_context);
   19|      8|        test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("cyniu");
   20|      8|        test_rec = std::make_shared<RADIO_EQ_CONTAINER>(&test_context);
   21|      8|        test_rec->loadConfig(test_server_settings._server.radio433MHzConfigFile);
   22|      8|        test_context.main_REC = test_rec;
   23|      8|        test_ardu = std::make_unique<command_ardu>("ardu", &test_context);
   24|      8|    }
   25|       |
   26|       |protected:
   27|       |    std::vector<std::string> test_v= {"ardu"};
   28|       |    blockQueue test_q;
   29|       |    std::unique_ptr<command_ardu> test_ardu;
   30|       |    thread_context test_context;
   31|       |    std::shared_ptr<RADIO_EQ_CONTAINER> test_rec;
   32|       |    CONFIG_JSON test_server_settings;
   33|       |};
   34|       |
   35|       |TEST_F(commandArdu_Class_fixture, wrongMSGformat)
   36|      1|{
   37|      1|    test_v.push_back("EV1527;ID=01e7be;SWITCH=01;CMD=ON;"); // wronh msg format missing 20;
   38|      1|    EXPECT_THROW(test_ardu->execute(test_v, &test_context), WRONG_FORMAT);
   39|      1|}
   40|       |
   41|       |TEST_F(commandArdu_Class_fixture, weatherStationTemp)
   42|      1|{
   43|      1|    test_v.push_back("20;2A;LaCrosse;ID=0704;TEMP=8043;");
   44|      1|    test_ardu->execute(test_v, &test_context);
   45|      1|    RADIO_WEATHER_STATION* st = static_cast<RADIO_WEATHER_STATION*>(test_context.main_REC->getEqPointer("first"));
   46|      1|    EXPECT_DOUBLE_EQ(-6.7, st->data.getTemperature().value() );
   47|      1|    EXPECT_FALSE(st->data.getHumidity().has_value() );
   48|      1|    test_v[2] = "20;35;LaCrosse;ID=0704;HUM=42;";
   49|      1|    test_ardu->execute(test_v, &test_context);
   50|      1|    EXPECT_DOUBLE_EQ(42, st->data.getHumidity().value() );
   51|      1|    test_v[2] = "20;2A;LaCrosse;ID=0704;TEMP=0000;";
   52|      1|    test_ardu->execute(test_v, &test_context);
   53|      1|    EXPECT_DOUBLE_EQ(0, st->data.getTemperature().value() );
   54|      1|}
   55|       |
   56|       |TEST_F(commandArdu_Class_fixture, button)
   57|      1|{
   58|      1|    test_v.push_back("20;2A;LaCrosse;ID=458;");
   59|      1|    test_ardu->execute(test_v, &test_context);
   60|       |
   61|      1|}
   62|       |
   63|       |TEST_F(commandArdu_Class_fixture, command_ardu_show)
   64|      1|{
   65|      1|    test_v.pop_back();
   66|      1|    test_v.push_back("show");
   67|      1|    std::string retStr = test_ardu->execute(test_v, &test_context);
   68|      1|    EXPECT_THAT(retStr, testing::HasSubstr("data: 0"));
   69|      1|    EXPECT_THAT(retStr, testing::HasSubstr("temperature= 0c"));
   70|      1|}
   71|       |
   72|       |TEST_F(commandArdu_Class_fixture, command_ardu_help)
   73|      1|{
   74|      1|    command_ardu test_Command_ardu ("ardu");
   75|       |
   76|      1|    std::string retStr = test_Command_ardu.help();
   77|      1|    EXPECT_STREQ(retStr.c_str(), " only for internal usege\n");
   78|      1|}
   79|       |
   80|       |TEST_F(commandArdu_Class_fixture, command_ardu_433MHz_throw)
   81|      1|{
   82|      1|    test_v.push_back("fake_msg");
   83|      1|    std::string retStr = test_ardu->execute(test_v, &test_context);
   84|       |
   85|      1|    EXPECT_THAT(retStr, testing::HasSubstr("for"));
   86|      1|}
   87|       |
   88|       |TEST_F(commandArdu_Class_fixture, command_ardu_433MHz_OK)
   89|      1|{
   90|      1|    test_v.push_back("20;53;OK;");
   91|      1|    test_ardu->execute(test_v, &test_context);
   92|      1|    EXPECT_NE(test_context.main_RFLink->m_okTime, 0);
   93|      1|    EXPECT_EQ(test_context.main_RFLink->m_okTime, Clock::getUnixTime());
   94|      1|}
   95|       |
   96|       |TEST_F(commandArdu_Class_fixture, command_ardu_433MHz_PING)
   97|      1|{
   98|      1|    test_v.push_back("20;99;PONG;");
   99|      1|    test_ardu->execute(test_v, &test_context);
  100|      1|    EXPECT_NE(test_context.main_RFLink->m_pingTime, 0);
  101|      1|    EXPECT_EQ(test_context.main_RFLink->m_pingTime, Clock::getUnixTime());
  102|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_big_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_big.h"
    4|       |
    5|       |class command_big_Class_fixture : public testing::Test
    6|       |{
    7|       |public:
    8|       |    command_big_Class_fixture() : test_command_big(std::make_unique<command_big>("big")), test_context()
    9|      1|    {
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_big> test_command_big;
   14|       |
   15|       |    std::vector<std::string> test_v;
   16|       |    thread_context test_context;
   17|       |};
   18|       |
   19|       |TEST_F(command_big_Class_fixture, main)
   20|      1|{
   21|      1|    int s = 55;
   22|      1|    test_v.push_back("big");
   23|      1|    test_v.push_back(std::to_string(s));
   24|      1|    auto ret = test_command_big->execute(test_v, &test_context);
   25|      1|    EXPECT_EQ(ret.size(), s);
   26|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_buderus_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |
    4|       |#include "../command_buderus.h"
    5|       |#include "../../iDom_server_OOP/src/iDomTools/mock/iDomToolsMock.h"
    6|       |#include "../../iDom_server_OOP/src/functions/functions.h"
    7|       |#include "../../iDom_server_OOP/src/buderus/buderus.h"
    8|       |
    9|       |class command_buderus_Class_fixture : public testing::Test
   10|       |{
   11|       |public:
   12|       |    std::string test_boilerData = R"({"wWComfort":"Hot",  "burnGas":"on", "wWSelTemp":60,   "wWDesiredTemp":70,   "selFlowTemp":5,   "selBurnPow":0,   "curBurnPow":0,   "pumpMod":10, "wWCirc":"on", "wWCircPump":"off",   "curFlowTemp":30.9,   "switchTemp":0,)"
   13|       |                                  R"("boilTemp":16.4,   "wWActivated":"off",   "wWOnetime":"on",    "flameCurr":0,   "heatPmp":"on",   "fanWork":"off",   "ignWork":"off",   )"
   14|       |                                  R"("heating_temp":50,   "outdoorTemp":9.99,   "wwStorageTemp2":62.2,   "pump_mod_max":100,   "pump_mod_min":10,   "wWHeat":"off",   "UBAuptime":14590,   "burnStarts":27,   "burnWorkMin":13594,   "heatWorkMin":13594,   "ServiceCode":"0H",)"
   15|       |                                  R"("ServiceCodeNumber":203})";
   16|       |    std::string test_thermostatData = R"({"hc1": {"currtemp": 22.5,"mode": "manual", "seltemp": 22  } })";
   17|       |    std::string test_boielrDataWrongJSON = "fake json";
   18|       |    command_buderus_Class_fixture() : test_command_buderus(std::make_unique<command_buderus>("buderus")),
   19|       |        main_iDomTools(std::make_shared<iDomToolsMock>())
   20|     13|    {
   21|     13|        test_context.ptr_buderus = std::make_shared<BUDERUS>();
   22|     13|        test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("cyniu");
   23|     13|        test_context.main_iDomTools = main_iDomTools;
   24|     13|        test_context.server_settings = &test_server_set;
   25|     13|        test_context.server_settings->_fb_viber.viberSender = "test sender";
   26|     13|        test_context.server_settings->_fb_viber.viberReceiver = {"R1","R2"};
   27|     13|        test_context.main_Rs232 = std::make_unique<SerialPi>("cyniu");
   28|     13|        useful_F::myStaticCtx = &test_context;
   29|     13|    }
   30|       |
   31|       |protected:
   32|       |    std::unique_ptr<command_buderus> test_command_buderus;
   33|       |    thread_context test_context;
   34|       |    std::vector<std::string> test_v;
   35|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   36|       |    CONFIG_JSON test_server_set;
   37|       |};
   38|       |
   39|       |TEST_F(command_buderus_Class_fixture, wrong_paramiter)
   40|      1|{
   41|      1|    test_v.push_back("buderus");
   42|      1|    auto ret = test_command_buderus->execute(test_v, &test_context);
   43|      1|    EXPECT_THAT( ret, testing::HasSubstr("wrong paramiter") );
   44|      1|}
   45|       |
   46|       |
   47|       |TEST_F(command_buderus_Class_fixture, heating_active)
   48|      1|{
   49|      1|    EXPECT_FALSE(test_context.ptr_buderus->isHeatingActiv());
   50|      1|    test_v.clear();
   51|      1|    test_v.push_back("buderus");
   52|      1|    test_v.push_back("heating_active");
   53|      1|    test_v.push_back("1");
   54|      1|    (void) test_command_buderus->execute(test_v, &test_context);
   55|      1|    EXPECT_TRUE(test_context.ptr_buderus->isHeatingActiv());
   56|       |
   57|      1|    test_v.clear();
   58|      1|    test_v.push_back("buderus");
   59|      1|    test_v.push_back("heating_active");
   60|      1|    test_v.push_back("0");
   61|      1|    (void) test_command_buderus->execute(test_v,&test_context);
   62|      1|    EXPECT_FALSE(test_context.ptr_buderus->isHeatingActiv());
   63|      1|}
   64|       |
   65|       |TEST_F(command_buderus_Class_fixture, tapwater_active)
   66|      1|{
   67|      1|    EXPECT_FALSE(test_context.ptr_buderus->isTapWaterActiv());
   68|      1|    test_v.clear();
   69|      1|    test_v.push_back("buderus");
   70|      1|    test_v.push_back("tapwater_active");
   71|      1|    test_v.push_back("1");
   72|      1|    (void) test_command_buderus->execute(test_v,&test_context);
   73|      1|    EXPECT_TRUE(test_context.ptr_buderus->isTapWaterActiv());
   74|       |
   75|      1|    test_v.clear();
   76|      1|    test_v.push_back("buderus");
   77|      1|    test_v.push_back("tapwater_active");
   78|      1|    test_v.push_back("0");
   79|      1|    (void) test_command_buderus->execute(test_v,&test_context);
   80|      1|    EXPECT_FALSE(test_context.ptr_buderus->isTapWaterActiv());
   81|      1|}
   82|       |
   83|       |TEST_F(command_buderus_Class_fixture, boiler_data)
   84|      1|{
   85|      1|    EXPECT_CALL(*main_iDomTools.get(), sendViberMsg(testing::_,testing::_,testing::_,testing::_,testing::_));
   86|       |
   87|      1|    EXPECT_FALSE(test_context.ptr_buderus->isHeatingActiv());
   88|      1|    test_v.clear();
   89|      1|    test_v.push_back("buderus");
   90|      1|    test_v.push_back("boiler_data");
   91|      1|    test_v.push_back(test_boilerData);
   92|      1|    (void)test_command_buderus->execute(test_v,&test_context);
   93|      1|    auto ret = test_context.ptr_buderus->getAllData();
   94|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("13594"));
   95|      1|    EXPECT_TRUE(test_context.ptr_buderus->isHeatingActiv());
   96|      1|}
   97|       |
   98|       |TEST_F(command_buderus_Class_fixture, boiler_data_wrong_json_format)
   99|      1|{
  100|      1|    test_v.clear();
  101|      1|    test_v.push_back("buderus");
  102|      1|    test_v.push_back("boiler_data");
  103|      1|    test_v.push_back(test_boielrDataWrongJSON);
  104|      1|    (void)test_command_buderus->execute(test_v,&test_context);
  105|      1|    auto ret = test_context.iDomAlarm.showAlarm();
  106|      1|    std::cout << "alarmy: " << ret << std::endl;
  107|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("buderus boile_data - wrong JSON format!"));
  108|      1|}
  109|       |
  110|       |TEST_F(command_buderus_Class_fixture, thermostat_data)
  111|      1|{
  112|      1|    test_v.clear();
  113|      1|    test_v.push_back("buderus");
  114|      1|    test_v.push_back("thermostat_data");
  115|      1|    test_v.push_back(test_thermostatData);
  116|      1|    (void)test_command_buderus->execute(test_v,&test_context);
  117|      1|    auto ret = test_context.ptr_buderus->getAllData();
  118|      1|    EXPECT_THAT(ret, ::testing::HasSubstr(": 22"));
  119|      1|}
  120|       |
  121|       |TEST_F(command_buderus_Class_fixture, thermostat_data_wrong_json_format)
  122|      1|{
  123|      1|    test_v.clear();
  124|      1|    test_v.push_back("buderus");
  125|      1|    test_v.push_back("thermostat_data");
  126|      1|    test_v.push_back("fake json");
  127|      1|    (void)test_command_buderus->execute(test_v,&test_context);
  128|      1|    auto ret = test_context.iDomAlarm.showAlarm();
  129|      1|    std::cout << "alarmy: " << ret << std::endl;
  130|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("buderus thermostat_data - wrong JSON format!"));
  131|      1|}
  132|       |
  133|       |TEST_F(command_buderus_Class_fixture, print)
  134|      1|{
  135|      1|    EXPECT_CALL(*main_iDomTools.get(), sendViberMsg(testing::_,testing::_,testing::_,testing::_,testing::_));
  136|      1|    test_v.clear();
  137|      1|    test_v.push_back("buderus");
  138|      1|    test_v.push_back("boiler_data");
  139|      1|    test_v.push_back(test_boilerData);
  140|      1|    (void)test_command_buderus->execute(test_v,&test_context);
  141|      1|    test_v.clear();
  142|      1|    test_v.push_back("buderus");
  143|      1|    test_v.push_back("thermostat_data");
  144|      1|    test_v.push_back(test_thermostatData);
  145|      1|    (void)test_command_buderus->execute(test_v,&test_context);
  146|       |
  147|       |
  148|      1|    test_v.clear();
  149|      1|    test_v.push_back("buderus");
  150|      1|    test_v.push_back("print");
  151|      1|    auto ret = test_command_buderus->execute(test_v,&test_context);
  152|      1|    std::cout << ret << std::endl;
  153|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("thermostat_data"));
  154|      1|    nlohmann::json checkJson(nlohmann::json::parse(ret));
  155|      1|    EXPECT_FALSE(checkJson["m_tapwater_active"].get<int>());
  156|      1|    EXPECT_FALSE(checkJson.at("m_boiler_data").at("curBurnPow").get<int>());
  157|      1|    EXPECT_STREQ(checkJson.at("m_boiler_data").at("wWHeat").get<std::string>().c_str(), "off");
  158|      1|}
  159|       |
  160|       |TEST_F(command_buderus_Class_fixture, circle_pomp)
  161|      1|{
  162|      1|    test_v.clear();
  163|      1|    test_v.push_back("buderus");
  164|      1|    test_v.push_back("print");
  165|      1|    auto ret = test_command_buderus->execute(test_v,&test_context);
  166|      1|    std::cout << ret << std::endl;
  167|      1|    EXPECT_THAT(ret, ::testing::HasSubstr(R"("m_circlePompCanRun": 0)"));
  168|       |
  169|      1|    test_v.clear();
  170|      1|    test_v.push_back("buderus");
  171|      1|    test_v.push_back("circPomp");
  172|       |
  173|      1|    ret = test_command_buderus->execute(test_v,&test_context);
  174|       |
  175|      1|    std::cout << ret << std::endl;
  176|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("RUN circle pomp"));
  177|      1|}
  178|       |
  179|       |TEST_F(command_buderus_Class_fixture, boiler_heating)
  180|      1|{
  181|      1|    test_v.clear();
  182|      1|    test_v.push_back("buderus");
  183|      1|    test_v.push_back("boiler");
  184|      1|    test_v.push_back("heating");
  185|      1|    auto ret = test_command_buderus->execute(test_v,&test_context);
  186|      1|    std::cout << ret << std::endl;
  187|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("Start heating boiler"));
  188|      1|}
  189|       |
  190|       |TEST_F(command_buderus_Class_fixture, set_desired_temp)
  191|      1|{
  192|      1|    test_v.clear();
  193|      1|    test_v.push_back("buderus");
  194|      1|    test_v.push_back("set");
  195|      1|    test_v.push_back("temp");
  196|      1|    test_v.push_back("2.2");
  197|      1|    auto ret = test_command_buderus->execute(test_v,&test_context);
  198|      1|    std::cout << ret << std::endl;
  199|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("2.2"));
  200|      1|}
  201|       |
  202|       |TEST_F(command_buderus_Class_fixture, set_desired_temp_fake)
  203|      1|{
  204|      1|    test_v.clear();
  205|      1|    test_v.push_back("buderus");
  206|      1|    test_v.push_back("set");
  207|      1|    test_v.push_back("temp");
  208|      1|    test_v.push_back("fake");
  209|      1|    auto ret = test_command_buderus->execute(test_v,&test_context);
  210|      1|    std::cout << ret << std::endl;
  211|      1|    EXPECT_STREQ(ret.c_str(), "cannot convert to float");
  212|      1|}
  213|       |
  214|      1|TEST_F(command_buderus_Class_fixture, circlePump_handling) {
  215|       |
  216|      1|    EXPECT_CALL(*main_iDomTools.get(), sendViberMsg(testing::_,testing::_,testing::_,testing::_,testing::_)).Times(2);
  217|      1|    EXPECT_THAT(test_context.ptr_buderus->getCirclePumpState(),
  218|      1|                STATE::UNDEFINE);
  219|      1|    test_v.clear();
  220|      1|    test_v.push_back("buderus");
  221|      1|    test_v.push_back("boiler_data");
  222|      1|    test_v.push_back(test_boilerData);
  223|      1|    (void)test_command_buderus->execute(test_v,&test_context);
  224|      1|    EXPECT_THAT(test_context.ptr_buderus->getCirclePumpState(),
  225|      1|                STATE::ON);
  226|       |
  227|      1|    test_v.clear();
  228|      1|    test_v.push_back("buderus");
  229|      1|    test_v.push_back("boiler_data");
  230|      1|    test_v.push_back(R"({ "wWCirc":"on", "burnGas":"on", "curFlowTemp":44.4, "outdoorTemp":9.99, "wwStorageTemp2":62.2 })");
  231|      1|    (void)test_command_buderus->execute(test_v,&test_context);
  232|      1|    EXPECT_THAT(test_context.ptr_buderus->getCirclePumpState(),
  233|      1|                STATE::ON);
  234|       |
  235|      1|    test_v.clear();
  236|      1|    test_v.push_back("buderus");
  237|      1|    test_v.push_back("boiler_data");
  238|      1|    test_v.push_back(R"({ "wWCirc":"off", "burnGas":"on", "curFlowTemp":44.4, "outdoorTemp":9.99, "wwStorageTemp2":62.2 })");
  239|      1|    (void)test_command_buderus->execute(test_v,&test_context);
  240|      1|    EXPECT_THAT(test_context.ptr_buderus->getCirclePumpState(),
  241|      1|                STATE::OFF);
  242|       |
  243|      1|    test_v.clear();
  244|      1|    test_v.push_back("buderus");
  245|      1|    test_v.push_back("boiler_data");
  246|      1|    test_v.push_back(R"({ "wWCirc":"off", "burnGas":"on", "curFlowTemp":44.4, "outdoorTemp":9.99, "wwStorageTemp2":62.2 })");
  247|      1|    (void)test_command_buderus->execute(test_v,&test_context);
  248|      1|    EXPECT_THAT(test_context.ptr_buderus->getCirclePumpState(),
  249|      1|                STATE::OFF);
  250|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_clock_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_clock.h"
    4|       |
    5|       |class command_clock_Class_fixture : public testing::Test
    6|       |{
    7|       |public:
    8|       |    command_clock_Class_fixture():test_command_clock(std::make_unique<command_clock>("clock")), test_context()
    9|      2|    {
   10|      2|        test_context.main_Rs232 = std::make_unique<SerialPi>("cyniu");
   11|      2|    }
   12|       |
   13|       |protected:
   14|       |    std::unique_ptr<command_clock> test_command_clock;
   15|       |    thread_context test_context;
   16|       |    std::vector<std::string> test_v;
   17|       |
   18|       |};
   19|       |
   20|       |TEST_F(command_clock_Class_fixture, main)
   21|      1|{
   22|      1|    test_v.push_back("clock");
   23|      1|    test_v.push_back("1234");
   24|      1|    auto ret = test_command_clock->execute(test_v, &test_context);
   25|      1|    EXPECT_STREQ(ret.c_str(),"done");
   26|      1|}
   27|       |
   28|       |TEST_F(command_clock_Class_fixture, missingParamiter)
   29|      1|{
   30|      1|    test_v.push_back("clock");
   31|      1|    auto ret = test_command_clock->execute(test_v, &test_context);
   32|      1|    EXPECT_STREQ(ret.c_str(),"can not set clock");
   33|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_cmd_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "../command_cmd.h"
    4|       |
    5|       |class command_cmd_Class_fixture : public testing::Test
    6|       |{
    7|       |public:
    8|       |    command_cmd_Class_fixture():test_command_cmd(std::make_unique <command_cmd>("cmd")), test_context()
    9|      1|    {
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_cmd> test_command_cmd;
   14|       |    std::vector<std::string> test_v;
   15|       |    thread_context test_context;
   16|       |};
   17|       |
   18|       |TEST_F(command_cmd_Class_fixture, wrongParamiter)
   19|      1|{
   20|      1|    test_v.push_back("cmd");
   21|      1|    test_v.push_back("1234");
   22|      1|    auto ret = test_command_cmd->execute(test_v,&test_context);
   23|      1|    EXPECT_STREQ(ret.c_str(),"error: unknown parameter: 1234");
   24|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_event_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |
    4|       |#include "../command_event.h"
    5|       |
    6|       |class command_event_Class_fixture : public testing::Test
    7|       |{
    8|       |public:
    9|       |    command_event_Class_fixture():test_command_event(std::make_unique <command_event> ("event")), test_context()
   10|      7|    {
   11|      7|    }
   12|       |
   13|       |protected:
   14|       |    std::unique_ptr<command_event> test_command_event;
   15|       |    std::vector<std::string> test_v;
   16|       |    thread_context test_context;
   17|       |};
   18|       |
   19|       |TEST_F(command_event_Class_fixture, eventList)
   20|      1|{
   21|      1|    test_v.push_back("event");
   22|      1|    auto ret = test_command_event->execute(test_v,&test_context);
   23|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("pilot"));
   24|      1|}
   25|       |
   26|       |TEST_F(command_event_Class_fixture, eventPilot)
   27|      1|{
   28|      1|    test_v.push_back("event");
   29|      1|    test_v.push_back("pilot");
   30|      1|    auto ret = test_command_event->execute(test_v,&test_context);
   31|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("pilot"));
   32|      1|}
   33|       |
   34|       |TEST_F(command_event_Class_fixture, clearEventPilot)
   35|      1|{
   36|      1|    test_context.myEventHandler.run("pilot")->addEvent("pilot test");
   37|      1|    EXPECT_EQ(test_context.myEventHandler.run("pilot")->howManyEvent(),1);
   38|      1|    test_v.push_back("event");
   39|      1|    test_v.push_back("pilot");
   40|      1|    test_v.push_back("clear");
   41|      1|    test_command_event->execute(test_v,&test_context);
   42|      1|    EXPECT_EQ(test_context.myEventHandler.run("pilot")->howManyEvent(),0);
   43|      1|}
   44|       |
   45|       |TEST_F(command_event_Class_fixture, clearsSomeEventPilot)
   46|      1|{
   47|     11|    for(int i = 0; i<10; ++i){
   48|     10|    test_context.myEventHandler.run("pilot")->addEvent("pilot test");
   49|     10|    }
   50|      1|    EXPECT_EQ(test_context.myEventHandler.run("pilot")->howManyEvent(),10);
   51|      1|    test_v.push_back("event");
   52|      1|    test_v.push_back("pilot");
   53|      1|    test_v.push_back("clear");
   54|      1|    test_v.push_back("3");
   55|      1|    test_v.push_back("6");
   56|      1|    test_command_event->execute(test_v,&test_context);
   57|      1|    EXPECT_EQ(test_context.myEventHandler.run("pilot")->howManyEvent(),7);
   58|      1|}
   59|       |
   60|       |TEST_F(command_event_Class_fixture, intensityEventPilot)
   61|      1|{
   62|      1|    test_context.myEventHandler.run("pilot")->addEvent("pilot test");
   63|      1|    EXPECT_EQ(test_context.myEventHandler.run("pilot")->howManyEvent(),1);
   64|      1|    test_v.push_back("event");
   65|      1|    test_v.push_back("pilot");
   66|      1|    test_v.push_back("intensity");
   67|      1|    auto ret = test_command_event->execute(test_v,&test_context);
   68|      1|    EXPECT_STREQ(ret.c_str(),"event pilot 1 intensity per last minute!");
   69|      1|    EXPECT_EQ(test_context.myEventHandler.run("pilot")->howManyEvent(),1);
   70|      1|}
   71|       |
   72|       |TEST_F(command_event_Class_fixture, wrongParamiter)
   73|      1|{
   74|      1|    test_v.push_back("event");
   75|      1|    test_v.push_back("pilot");
   76|      1|    test_v.push_back("clear");
   77|      1|    test_v.push_back("3");
   78|      1|    test_v.push_back("6");
   79|      1|    test_v.push_back("clear");
   80|      1|    test_v.push_back("3");
   81|      1|    test_v.push_back("6");
   82|      1|    test_v.push_back("clear");
   83|      1|    test_v.push_back("3");
   84|      1|    test_v.push_back("6");
   85|      1|    auto ret = test_command_event->execute(test_v,&test_context);
   86|      1|    EXPECT_THAT(ret,::testing::HasSubstr("event"));
   87|      1|}
   88|       |
   89|       |TEST_F(command_event_Class_fixture, addEvent)
   90|      1|{
   91|      1|    EXPECT_EQ(test_context.myEventHandler.run("test")->howManyEvent(),0);
   92|      1|    test_v.push_back("event");
   93|      1|    test_v.push_back("add");
   94|      1|    test_v.push_back("test");
   95|      1|    test_v.push_back("msg");
   96|      1|    std::cout << test_command_event->execute(test_v,&test_context) << std::endl;
   97|      1|    EXPECT_EQ(test_context.myEventHandler.run("test")->howManyEvent(),1);
   98|      1|    std::cout << test_context.myEventHandler.run("test")->getEvent() << std::endl;
   99|      1|}
  100|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_exit_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../commandexit.h"
    4|       |
    5|       |class command_exit_Class_fixture : public testing::Test
    6|       |{
    7|       |public:
    8|       |    command_exit_Class_fixture():test_command_exit(std::make_unique <commandEXIT>("exit")), test_context()
    9|      1|    {
   10|      1|    }
   11|       |
   12|       |
   13|       |protected:
   14|       |    std::unique_ptr<commandEXIT> test_command_exit;
   15|       |    std::vector<std::string> test_v;
   16|       |    thread_context test_context;
   17|       |};
   18|       |
   19|       |TEST_F(command_exit_Class_fixture, main)
   20|      1|{
   21|      1|    test_v.push_back("exit");
   22|      1|    auto ret = test_command_exit->execute(test_v,&test_context);
   23|      1|    EXPECT_STREQ(ret.c_str(),"\nEND.\n");
   24|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_gateway_bt.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |
    4|       |#include "../command_gateway.h"
    5|       |#include "../../iDom_server_OOP/src/iDomTools/mock/iDomToolsMock.h"
    6|       |
    7|       |class command_gateway_Class_fixture : public testing::Test
    8|       |{
    9|       |public:
   10|       |    command_gateway_Class_fixture():test_command_gateway(std::make_unique <command_gateway>("gateway")),
   11|       |        main_iDomTools(std::make_shared<iDomToolsMock>())
   12|      2|    {
   13|      2|        test_context.main_iDomTools = main_iDomTools;
   14|      2|    }
   15|       |
   16|       |protected:
   17|       |    std::unique_ptr<command_gateway> test_command_gateway;
   18|       |    std::vector<std::string> test_v;
   19|       |    thread_context test_context;
   20|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   21|       |};
   22|       |
   23|       |TEST_F(command_gateway_Class_fixture, unknownParam)
   24|      1|{
   25|      1|    test_v.push_back("gateway");
   26|      1|    test_v.push_back("fake");
   27|      1|    auto ret = test_command_gateway->execute(test_v,&test_context);
   28|      1|    EXPECT_THAT(ret,testing::HasSubstr("unknown"));
   29|      1|}
   30|       |
   31|       |TEST_F(command_gateway_Class_fixture, fan)
   32|      1|{
   33|      1|    EXPECT_CALL(*main_iDomTools.get(), turnOn433MHzSwitch("fan"));
   34|      1|    test_v.push_back("gateway");
   35|      1|    test_v.push_back("fan");
   36|      1|    auto ret = test_command_gateway->execute(test_v,&test_context);
   37|      1|    EXPECT_THAT(ret,testing::HasSubstr("fan on"));
   38|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_hello_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_hello.h"
    4|       |
    5|       |class command_hello_Class_fixture : public testing::Test
    6|       |{
    7|       |public:
    8|       |    command_hello_Class_fixture():test_command_hello(std::make_unique <command_hello>("hello")), test_context()
    9|      1|    {
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_hello> test_command_hello;
   14|       |    std::vector<std::string> test_v;
   15|       |    thread_context test_context;
   16|       |};
   17|       |
   18|       |TEST_F(command_hello_Class_fixture, main)
   19|      1|{
   20|      1|    test_v.push_back("hello");
   21|      1|    auto ret = test_command_hello->execute(test_v,&test_context);
   22|      1|    EXPECT_STREQ(ret.c_str(),"\nHI You User!\n");
   23|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_help_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_help.h"
    4|       |#include "../../commandhandlerroot.h"
    5|       |#include "../../../RADIO_433_eq/radio_433_eq.h"
    6|       |
    7|       |class command_help_Class_fixture : public testing::Test
    8|       |{
    9|       |public:
   10|       |    command_help_Class_fixture()
   11|      3|    {
   12|      3|        auto test_rec = std::make_shared<RADIO_EQ_CONTAINER>(&test_context);
   13|      3|        test_context.main_REC = test_rec;
   14|      3|    }
   15|       |
   16|       |protected:
   17|       |    std::vector<std::string> test_v;
   18|       |    thread_context test_context;
   19|       |};
   20|       |
   21|       |TEST_F(command_help_Class_fixture, all)
   22|      1|{
   23|      1|    auto chr = std::make_unique<commandHandlerRoot>(&test_context);
   24|      1|    test_v.push_back("help");
   25|      1|    auto size = chr->run(test_v,&test_context).size();
   26|      1|    EXPECT_EQ(size, 5541);
   27|      1|}
   28|       |
   29|       |TEST_F(command_help_Class_fixture, one)
   30|      1|{
   31|      1|    auto chr = std::make_unique<commandHandlerRoot>(&test_context);
   32|      1|    test_v.push_back("help");
   33|      1|    test_v.push_back("ok");
   34|      1|    auto ret = chr->run(test_v,&test_context);
   35|      1|    EXPECT_STREQ(ret.c_str(), "ok - confirmation msg server response: END \n");
   36|      1|}
   37|       |
   38|       |TEST_F(command_help_Class_fixture, nonExistingCommand)
   39|      1|{
   40|      1|    auto chr = std::make_unique<commandHandlerRoot>(&test_context);
   41|      1|    test_v.push_back("help");
   42|      1|    test_v.push_back("okdoki");
   43|      1|    auto ret = chr->run(test_v,&test_context);
   44|      1|    EXPECT_STREQ(ret.c_str(), "unknown command: okdoki help note not found");
   45|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_idom_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_idom.h"
    4|       |#include "../../../iDomTools/test/iDomTools_fixture.h"
    5|       |#include "../../../thread_functions/iDom_thread.h"
    6|       |#include "../../../MENU/menu_root.h"
    7|       |#include "../../../blockQueue/blockqueue.h"
    8|       |#include "test_data.h"
    9|       |
   10|       |class commandiDom_Class_fixture : public iDomTOOLS_ClassTest
   11|       |{
   12|       |public:
   13|       |  commandiDom_Class_fixture(): test_v({"iDom"}),
   14|       |    test_command_iDom(std::make_unique<command_iDom>("iDom"))
   15|     21|  {
   16|     21|    test_q._clearAll();
   17|     21|    test_context.main_RFLink = std::make_shared<RFLinkHandler>(&test_context);
   18|     21|  }
   19|       |
   20|       |protected:
   21|       |  std::vector<std::string> test_v;
   22|       |  blockQueue test_q;
   23|       |  std::unique_ptr<command_iDom> test_command_iDom;
   24|       |};
   25|       |
   26|       |TEST_F(commandiDom_Class_fixture, getName)
   27|      1|{
   28|      1|  EXPECT_THAT(test_command_iDom->getCommandName(),testing::HasSubstr("iDom"));
   29|      1|}
   30|       |
   31|       |TEST_F(commandiDom_Class_fixture, help)
   32|      1|{
   33|      1|  std::string helpStr = test_command_iDom->help();
   34|      1|  EXPECT_THAT(helpStr,testing::HasSubstr("iDom"));
   35|      1|  std::cout << "test " << helpStr.size() << std::endl;
   36|      1|  EXPECT_EQ(helpStr.size(), 1297);
   37|      1|}
   38|       |
   39|       |TEST_F(commandiDom_Class_fixture, less_param)
   40|      1|{
   41|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
   42|      1|  EXPECT_THAT(retStr,testing::HasSubstr("need parameter!"));
   43|      1|}
   44|       |
   45|       |TEST_F(commandiDom_Class_fixture, unknonw_para)
   46|      1|{
   47|      1|  test_v.push_back("fake");
   48|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
   49|      1|  EXPECT_THAT(retStr,testing::HasSubstr("iDom - unknown parameter:"));
   50|      1|}
   51|       |
   52|       |TEST_F(commandiDom_Class_fixture, speakers)
   53|      1|{
   54|      1|  test_context.idom_all_state.houseState = STATE::LOCK;
   55|      1|  test_context.main_iDomTools->unlockHome();
   56|       |  //////////////// fake command
   57|      1|  test_v.push_back("speakers");
   58|      1|  test_v.push_back("fake");
   59|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
   60|      1|  EXPECT_THAT(retStr,testing::HasSubstr("unknow speakers action: fake"));
   61|       |  ///////////////// ON
   62|      1|  test_context.main_iDomStatus->setObjectState("speakers",STATE::UNDEFINE);
   63|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::UNDEFINE);
   64|      1|  test_v.clear();
   65|      1|  test_v.push_back("iDom");
   66|      1|  test_v.push_back("speakers");
   67|      1|  test_v.push_back("ON");
   68|      1|  retStr = test_command_iDom->execute(test_v, &test_context);
   69|      1|  EXPECT_THAT(retStr,testing::HasSubstr("speakers ON"));
   70|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::ON);
   71|       |  ///////////////// OFF
   72|      1|  test_v.clear();
   73|      1|  test_v.push_back("iDom");
   74|      1|  test_v.push_back("speakers");
   75|      1|  test_v.push_back("OFF");
   76|      1|  retStr = test_command_iDom->execute(test_v, &test_context);
   77|      1|  EXPECT_THAT(retStr,testing::HasSubstr("speakers OFF"));
   78|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::OFF);
   79|       |  // */
   80|      1|}
   81|       |
   82|       |TEST_F(commandiDom_Class_fixture, sunset_sunrise)
   83|      1|{
   84|      1|  test_v.clear();
   85|      1|  test_v.push_back("iDom");
   86|      1|  test_v.push_back("sunset");
   87|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
   88|      1|  std::cout << "retString: " << retStr << std::endl;
   89|      1|  EXPECT_THAT(retStr,testing::HasSubstr("Sunset time:"));
   90|       |
   91|      1|  test_v.clear();
   92|      1|  test_v.push_back("iDom");
   93|      1|  test_v.push_back("sunrise");
   94|      1|  retStr = test_command_iDom->execute(test_v, &test_context);
   95|      1|  std::cout << "retString: " << retStr << std::endl;
   96|      1|  EXPECT_THAT(retStr,testing::HasSubstr("Sunrise time:"));
   97|      1|}
   98|       |
   99|       |TEST_F(commandiDom_Class_fixture, day_lenght)
  100|      1|{
  101|      1|  test_v.clear();
  102|      1|  test_v.push_back("iDom");
  103|      1|  test_v.push_back("day");
  104|      1|  test_v.push_back("lenght");
  105|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  106|      1|  std::cout << "retString: " << retStr << std::endl;
  107|      1|  EXPECT_THAT(retStr,testing::HasSubstr("Day Lenght :"));
  108|      1|}
  109|       |
  110|       |TEST_F(commandiDom_Class_fixture, sun)
  111|      1|{
  112|      1|  test_v.clear();
  113|      1|  test_v.push_back("iDom");
  114|      1|  test_v.push_back("sun");
  115|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  116|      1|  std::cout << "retString: " << retStr << std::endl;
  117|      1|  EXPECT_THAT(retStr,testing::HasSubstr("Day Lenght :"));
  118|      1|}
  119|       |
  120|       |TEST_F(commandiDom_Class_fixture, sysinfo)
  121|      1|{
  122|      1|  test_v.clear();
  123|      1|  test_v.push_back("iDom");
  124|      1|  test_v.push_back("sysinfo");
  125|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  126|      1|  std::cout << "retString: " << retStr << std::endl;
  127|      1|  EXPECT_THAT(retStr,testing::HasSubstr("free RAM"));
  128|      1|}
  129|       |
  130|       |TEST_F(commandiDom_Class_fixture, temperature)
  131|      1|{
  132|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(-12.0));
  133|      1|  EXPECT_CALL(*testBuderusMock.get(), getBoilerTemp()).WillOnce(testing::Return(62.2));    EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(12));
  134|      1|  EXPECT_CALL(*testBuderusMock.get(), getCurFlowTemp()).WillOnce(testing::Return(12));
  135|      1|  test_v.clear();
  136|      1|  test_v.push_back("iDom");
  137|      1|  test_v.push_back("temperature");
  138|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  139|      1|  std::cout << "retString: " << retStr << std::endl;
  140|      1|  EXPECT_THAT(retStr,testing::HasSubstr("inside\":-12.0"));
  141|       |
  142|      1|  test_v.clear();
  143|      1|  test_v.push_back("iDom");
  144|      1|  test_v.push_back("temperature");
  145|      1|  test_v.push_back("stats");
  146|      1|  test_v.push_back("insideee");
  147|      1|  retStr = test_command_iDom->execute(test_v, &test_context);
  148|      1|  std::cout << "retString: " << retStr << std::endl;
  149|      1|  EXPECT_THAT(retStr,testing::HasSubstr("not found!"));
  150|      1|}
  151|       |
  152|       |TEST_F(commandiDom_Class_fixture, text)
  153|      1|{
  154|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(12));
  155|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(12));
  156|      1|  test_v.clear();
  157|      1|  test_v.push_back("iDom");
  158|      1|  test_v.push_back("text");
  159|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  160|      1|  std::cout << "retString: " << retStr << std::endl;
  161|      1|  EXPECT_THAT(retStr,testing::HasSubstr("Godzina"));
  162|      1|}
  163|       |
  164|       |TEST_F(commandiDom_Class_fixture, lock_unlock)
  165|      1|{
  166|      1|  test_v.clear();
  167|      1|  test_v.push_back("iDom");
  168|      1|  test_v.push_back("lock");
  169|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  170|      1|  std::cout << "retString: " << retStr << std::endl;
  171|      1|  EXPECT_EQ(test_context.idom_all_state.houseState, STATE::LOCK);
  172|       |
  173|      1|  test_v.clear();
  174|      1|  test_v.push_back("iDom");
  175|      1|  test_v.push_back("unlock");
  176|      1|  retStr = test_command_iDom->execute(test_v, &test_context);
  177|      1|  std::cout << "retString: " << retStr << std::endl;
  178|      1|  EXPECT_EQ(test_context.idom_all_state.houseState, STATE::UNLOCK);
  179|      1|}
  180|       |
  181|       |TEST_F(commandiDom_Class_fixture, smog)
  182|      1|{
  183|      1|  test_v.clear();
  184|      1|  test_v.push_back("iDom");
  185|      1|  test_v.push_back("smog");
  186|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  187|      1|  std::cout << "retString: " << retStr << std::endl;
  188|      1|  EXPECT_THAT(retStr,testing::HasSubstr(" mg/m^3"));
  189|      1|}
  190|       |
  191|       |TEST_F(commandiDom_Class_fixture, say)
  192|      1|{
  193|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(12));
  194|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(12));
  195|      1|  Clock::setTime_forBT_usage(23,23);
  196|      1|  TEST_DATA::return_send_to_arduino = "-3:6";
  197|      1|  test_v.clear();
  198|      1|  test_v.push_back("iDom");
  199|      1|  test_v.push_back("say");
  200|      1|  test_v.push_back("dummy");
  201|      1|  test_v.push_back("dummy");
  202|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  203|      1|  std::cout << "retString: " << retStr << std::endl;
  204|       |  //EXPECT_THAT(retStr,testing::HasSubstr("sad"));
  205|      1|}
  206|       |
  207|       |TEST_F(commandiDom_Class_fixture, wifi)
  208|      1|{
  209|      1|  TEST_DATA::return_httpPost = "ok";
  210|      1|  test_v.clear();
  211|      1|  test_v.push_back("iDom");
  212|      1|  test_v.push_back("wifi");
  213|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  214|      1|  std::cout << "retString: " << retStr << std::endl;
  215|      1|  EXPECT_THAT(retStr,testing::HasSubstr("ok"));
  216|      1|}
  217|       |
  218|       |TEST_F(commandiDom_Class_fixture, kodi)
  219|      1|{
  220|      1|  MENU_STATE_MACHINE stateMechine;
  221|      1|  LCD_c lcdStub(1,1,1);
  222|      1|  auto ptr = std::make_unique<MENU_ROOT>(&test_context, &lcdStub, &stateMechine);
  223|      1|  stateMechine.setStateMachine(std::move(ptr));
  224|      1|  test_context.main_key_menu_handler = std::make_unique<KEY_HANDLER>(&stateMechine);
  225|      1|  test_context.main_iDomStatus->setObjectState("KODI",STATE::ACTIVE);
  226|      1|  test_v.clear();
  227|      1|  test_v.push_back("iDom");
  228|      1|  test_v.push_back("KODI");
  229|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  230|       |
  231|      1|  std::cout << "retString: " << retStr << std::endl;
  232|      1|  EXPECT_STREQ(retStr.c_str(),"kodi already run");
  233|       |
  234|      1|  test_context.main_iDomStatus->setObjectState("KODI",STATE::DEACTIVE);
  235|      1|  test_context.main_iDomStatus->setObjectState("music",STATE::PLAY);
  236|      1|  test_context.main_iDomStatus->setObjectState("speakers",STATE::ON);
  237|       |
  238|      1|  std::array<Thread_array_struc,iDomConst::MAX_CONNECTION> test_ThreadArrayStruc;
  239|       |
  240|     11|  for (std::size_t i = 0 ; i < iDomConst::MAX_CONNECTION; i++)
  241|     10|    test_ThreadArrayStruc.at(i).thread_socket = 0;
  242|      1|  test_ThreadArrayStruc.at(3).thread_socket = 0;
  243|      1|  test_ThreadArrayStruc.at(3).thread_ID = std::this_thread::get_id();
  244|      1|  test_context.main_THREAD_arr = &test_ThreadArrayStruc;
  245|       |
  246|      1|  test_v.clear();
  247|      1|  test_v.push_back("iDom");
  248|      1|  test_v.push_back("KODI");
  249|      1|  retStr = test_command_iDom->execute(test_v, &test_context);
  250|       |
  251|       |  //sleep(1);
  252|      1|  iDOM_THREAD::waitUntilAllThreadEnd(&test_context);
  253|       |
  254|      1|  std::cout << "retString: " << retStr << std::endl;
  255|      1|  EXPECT_THAT(retStr,testing::HasSubstr("STARTED"));
  256|       |
  257|     11|  for (std::size_t i = 0 ; i < iDomConst::MAX_CONNECTION; i++)
  258|     10|    test_ThreadArrayStruc[i].thread_socket = 1;
  259|       |
  260|      1|  test_v.clear();
  261|      1|  test_v.push_back("iDom");
  262|      1|  test_v.push_back("KODI");
  263|      1|  retStr = test_command_iDom->execute(test_v, &test_context);
  264|       |
  265|      1|  std::cout << "retString: " << retStr << std::endl;
  266|      1|  EXPECT_STREQ(retStr.c_str(),"not free space to new thread");
  267|      1|}
  268|       |
  269|       |TEST_F(commandiDom_Class_fixture, health_alarm)
  270|      1|{
  271|      1|  test_v.clear();
  272|      1|  test_v.push_back("iDom");
  273|      1|  test_v.push_back("health");
  274|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  275|      1|  std::cout << "retString: " << retStr << std::endl;
  276|      1|  EXPECT_THAT(retStr,testing::HasSubstr("no alarms!"));
  277|      1|}
  278|       |#include<memory>
  279|       |
  280|       |TEST_F(commandiDom_Class_fixture, addAccessKEY)
  281|      1|{
  282|      1|  std::string s = "kokos";
  283|      1|  test_v.clear();
  284|      1|  test_v.push_back("iDom");
  285|      1|  test_v.push_back("key");
  286|      1|  test_v.push_back("add");
  287|      1|  test_v.push_back("kokos");
  288|      1|  test_v.push_back("20");
  289|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  290|      1|  std::cout << "retString: " << retStr << std::endl;
  291|      1|  EXPECT_THAT(retStr,testing::HasSubstr(s));
  292|      1|  test_context.m_keyHandler->removeKEY(s);
  293|      1|}
  294|       |
  295|       |TEST_F(commandiDom_Class_fixture, addAccessKEY_temp)
  296|      1|{
  297|      1|  std::string s = "kokos";
  298|      1|  test_v.clear();
  299|      1|  test_v.push_back("iDom");
  300|      1|  test_v.push_back("key");
  301|      1|  test_v.push_back("add");
  302|      1|  test_v.push_back("tmp");
  303|      1|  test_v.push_back(s);
  304|      1|  test_v.push_back("20");
  305|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  306|      1|  std::cout << "retString: " << retStr << std::endl;
  307|      1|  EXPECT_THAT(retStr,testing::HasSubstr(s));
  308|      1|  test_context.m_keyHandler->removeKEY(s);
  309|      1|}
  310|       |
  311|       |TEST_F(commandiDom_Class_fixture, removeAccessKEY)
  312|      1|{
  313|      1|  std::string s = "ttt";
  314|      1|  test_context.m_keyHandler->addKEY(s,"null", 23);
  315|       |
  316|      1|  test_v.clear();
  317|      1|  test_v.push_back("iDom");
  318|      1|  test_v.push_back("key");
  319|      1|  test_v.push_back("remove");
  320|      1|  test_v.push_back(s);
  321|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  322|      1|  std::cout << "retString: " << retStr << std::endl;
  323|      1|  EXPECT_THAT(retStr,testing::HasSubstr(s));
  324|      1|  test_context.m_keyHandler->removeKEY(s);
  325|      1|}
  326|       |
  327|       |TEST_F(commandiDom_Class_fixture, getOpenLink)
  328|      1|{
  329|      1|  test_context.server_settings->_gateway.url = "http://test.pl";
  330|      1|  test_context.server_settings->_gateway.keySize = 128;
  331|      1|  test_v.clear();
  332|      1|  test_v.push_back("iDom");
  333|      1|  test_v.push_back("link");
  334|      1|  test_v.push_back("gate");
  335|      1|  std::string retStr = test_command_iDom->execute(test_v, &test_context);
  336|      1|  std::cout << "retString: " << retStr << std::endl;
  337|      1|  EXPECT_THAT(retStr, testing::HasSubstr("http://"));
  338|      1|  EXPECT_EQ(retStr.at(19) , '=');
  339|      1|  EXPECT_EQ(retStr.at(45 + test_context.server_settings->_gateway.keySize) , '&');
  340|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_ip_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_ip.h"
    4|       |
    5|       |class command_ip_Class_fixture : public testing::Test
    6|       |{
    7|       |public:
    8|       |    command_ip_Class_fixture():test_command_ip(std::make_unique <command_ip>("ip"))
    9|      1|    {
   10|      1|        test_context.server_settings = &server_settings;
   11|      1|    }
   12|       |
   13|       |protected:
   14|       |    std::unique_ptr<command_ip> test_command_ip;
   15|       |    std::vector<std::string> test_v;
   16|       |    thread_context test_context;
   17|       |    CONFIG_JSON server_settings;
   18|       |};
   19|       |
   20|       |TEST_F(command_ip_Class_fixture, main)
   21|      1|{
   22|      1|    test_context.server_settings->_server.SERVER_IP = "100.001.1.0";
   23|      1|    test_v.push_back("ip");
   24|      1|    auto ret = test_command_ip->execute(test_v,&test_context);
   25|      1|    EXPECT_STREQ(ret.c_str(),"iDom server IP: 100.001.1.0");
   26|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_light_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |
    4|       |#include "../command_light.h"
    5|       |#include "../../../functions/functions.h"
    6|       |#include "../../../iDomTools/mock/iDomToolsMock.h"
    7|       |
    8|       |class command_light_Class_fixture : public testing::Test
    9|       |{
   10|       |public:
   11|       |    command_light_Class_fixture():
   12|       |        test_command_light (std::make_unique <command_light>("light")),
   13|       |        main_iDomTools(std::make_shared<iDomToolsMock>())
   14|     10|    {
   15|     10|        std::string cfg("../config/bulb_config.json");;
   16|     10|        test_context.main_house_room_handler = std::make_shared<house_room_handler>(&test_context);
   17|     10|        test_context.main_house_room_handler->loadConfig(cfg);
   18|     10|        useful_F::myStaticCtx = &test_context;
   19|     10|        test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   20|     10|        test_context.main_iDomTools = main_iDomTools;
   21|     10|        test_context.server_settings = &test_server_settings;
   22|     10|        test_context.server_settings->_fb_viber.viberSender = "test sender";
   23|     10|        test_context.server_settings->_fb_viber.viberReceiver = {"R1","R2"};
   24|     10|        test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("cyniu");
   25|     10|    }
   26|       |
   27|       |protected:
   28|       |    std::unique_ptr<command_light> test_command_light;
   29|       |    std::vector<std::string> test_v;
   30|       |    thread_context test_context;
   31|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   32|       |    CONFIG_JSON test_server_settings;
   33|       |};
   34|       |
   35|       |TEST_F(command_light_Class_fixture, mqtt_bulb_state_update)
   36|      1|{
   37|      1|    EXPECT_CALL(*main_iDomTools.get(),
   38|      1|                sendViberMsg("zmiana statusu lampy jedna w pomieszczeniu: pokoj dzieci na ON przyciskiem: 30 czas trwania: 00:00",
   39|      1|                             testing::_,testing::_,testing::_,testing::_));
   40|      1|    test_v.clear();
   41|      1|    test_v.push_back("light");
   42|      1|    test_v.push_back("state;226;30;1\n");
   43|      1|    auto ret = test_command_light->execute(test_v,&test_context);
   44|      1|    std::cout << "ret: " << ret << std::endl;
   45|      1|    EXPECT_EQ( test_context.main_house_room_handler->m_lightingBulbMap[226]->getStatus(), STATE::ON);
   46|       |
   47|      1|    test_v.clear();
   48|      1|    test_v.push_back("light");
   49|      1|    test_v.push_back("state;226;30;0\n");
   50|      1|    ret = test_command_light->execute(test_v,&test_context);
   51|      1|    std::cout << "ret: " << ret << std::endl;
   52|      1|    EXPECT_EQ( test_context.main_house_room_handler->m_lightingBulbMap[226]->getStatus(), STATE::OFF);
   53|      1|    test_v.clear();
   54|      1|    test_v.push_back("light");
   55|      1|    test_v.push_back("info");
   56|       |
   57|      1|    ret = test_command_light->execute(test_v,&test_context);
   58|      1|    std::cout << "ret: " << ret << std::endl;
   59|      1|}
   60|       |
   61|       |TEST_F(command_light_Class_fixture, mqtt_bulb_state_update_bulb_not_exist)
   62|      1|{
   63|      1|    EXPECT_CALL(*main_iDomTools.get(),
   64|      1|                sendViberMsg("zmiana statusu lampy bulbName w pomieszczeniu: roomName na ON przyciskiem: 30 czas trwania: 00:00",
   65|      1|                             testing::_,testing::_,testing::_,testing::_));
   66|      1|    test_v.clear();
   67|      1|    test_v.push_back("light");
   68|      1|    test_v.push_back("state;330;30;1\n");
   69|      1|    auto ret = test_command_light->execute(test_v,&test_context);
   70|      1|    std::cout << "ret: " << ret << std::endl;
   71|      1|    EXPECT_EQ( test_context.main_house_room_handler->m_lightingBulbMap[330]->getStatus(), STATE::ON);
   72|       |
   73|      1|    test_v.clear();
   74|      1|    test_v.push_back("light");
   75|      1|    test_v.push_back("state;330;30;0\n");
   76|      1|    ret = test_command_light->execute(test_v,&test_context);
   77|      1|    std::cout << "ret: " << ret << std::endl;
   78|      1|    EXPECT_EQ( test_context.main_house_room_handler->m_lightingBulbMap[330]->getStatus(), STATE::OFF);
   79|      1|    test_v.clear();
   80|      1|    test_v.push_back("light");
   81|      1|    test_v.push_back("info");
   82|      1|    ret = test_command_light->execute(test_v,&test_context);
   83|      1|    std::cout << "ret: " << ret << std::endl;
   84|      1|}
   85|       |
   86|       |TEST_F(command_light_Class_fixture, light_info)
   87|      1|{
   88|      1|    test_v.clear();
   89|      1|    test_v.push_back("light");
   90|      1|    test_v.push_back("info");
   91|       |
   92|      1|    auto ret = test_command_light->execute(test_v,&test_context);
   93|      1|    std::cout << "ret: " << ret << std::endl;
   94|       |
   95|      1|    EXPECT_THAT(ret, testing::HasSubstr(R"(bulb ID": 126,)"));
   96|      1|}
   97|       |
   98|       |TEST_F(command_light_Class_fixture, light_info_on)
   99|      1|{
  100|      1|    EXPECT_CALL(*main_iDomTools.get(),
  101|      1|                sendViberMsg("zmiana statusu lampy wanna w pomieszczeniu: lazienka na ON przyciskiem: 30 czas trwania: 00:00",
  102|      1|                             testing::_,testing::_,testing::_,testing::_));
  103|      1|    test_v.clear();
  104|      1|    test_v.push_back("light");
  105|      1|    test_v.push_back("state;126;30;1\n");
  106|      1|    (void)test_command_light->execute(test_v,&test_context);
  107|       |
  108|      1|    test_v.clear();
  109|      1|    test_v.push_back("light");
  110|      1|    test_v.push_back("info");
  111|      1|    test_v.push_back("on");
  112|       |
  113|      1|    auto ret = test_command_light->execute(test_v,&test_context);
  114|      1|    std::cout << "ret: " << ret << std::endl;
  115|       |
  116|      1|    EXPECT_THAT(ret, testing::HasSubstr(R"(bulb ID": 126,)"));
  117|      1|}
  118|       |
  119|       |TEST_F(command_light_Class_fixture, on_off_bulb_command)
  120|      1|{
  121|      1|    EXPECT_CALL(*main_iDomTools.get(),
  122|      1|                sendViberMsg("zmiana statusu lampy wanna w pomieszczeniu: lazienka na ON przyciskiem: 30 czas trwania: 00:00",
  123|      1|                             testing::_,testing::_,testing::_,testing::_));
  124|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(126)->getStatus(),
  125|      1|              STATE::UNDEFINE);
  126|      1|    test_v.clear();
  127|      1|    test_v.push_back("light");
  128|      1|    test_v.push_back("bulb");
  129|      1|    test_v.push_back("on");
  130|      1|    test_v.push_back("126");
  131|       |
  132|      1|    (void)test_command_light->execute(test_v,&test_context);
  133|      1|    test_v.clear();
  134|      1|    test_v.push_back("light");
  135|      1|    test_v.push_back("state;126;30;1\n");
  136|      1|    (void)test_command_light->execute(test_v,&test_context);
  137|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(126)->getStatus(),
  138|      1|              STATE::ON);
  139|       |
  140|      1|    test_v.clear();
  141|      1|    test_v.push_back("light");
  142|      1|    test_v.push_back("bulb");
  143|      1|    test_v.push_back("off");
  144|      1|    test_v.push_back("126");
  145|       |
  146|      1|    (void)test_command_light->execute(test_v,&test_context);
  147|      1|    test_v.clear();
  148|      1|    test_v.push_back("light");
  149|      1|    test_v.push_back("state;126;30;0\n");
  150|      1|    (void)test_command_light->execute(test_v,&test_context);
  151|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(126)->getStatus(),
  152|      1|              STATE::OFF);
  153|      1|    test_v.clear();
  154|      1|    test_v.push_back("light");
  155|      1|    test_v.push_back("info");
  156|       |
  157|      1|    auto ret = test_command_light->execute(test_v,&test_context);
  158|      1|    std::cout << "ret: " << ret << std::endl;
  159|      1|}
  160|       |
  161|       |TEST_F(command_light_Class_fixture, change_bulb_command)
  162|      1|{
  163|      1|    EXPECT_CALL(*main_iDomTools.get(),
  164|      1|                sendViberMsg("zmiana statusu lampy wanna w pomieszczeniu: lazienka na ON przyciskiem: 30 czas trwania: 00:00",
  165|      1|                             testing::_,testing::_,testing::_,testing::_));
  166|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(126)->getStatus(),
  167|      1|              STATE::UNDEFINE);
  168|      1|    test_v.clear();
  169|      1|    test_v.push_back("light");
  170|      1|    test_v.push_back("bulb");
  171|      1|    test_v.push_back("change");
  172|      1|    test_v.push_back("126");
  173|       |
  174|      1|    (void)test_command_light->execute(test_v,&test_context);
  175|      1|    test_v.clear();
  176|      1|    test_v.push_back("light");
  177|      1|    test_v.push_back("state;126;30;1\n");
  178|      1|    (void)test_command_light->execute(test_v,&test_context);
  179|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(126)->getStatus(),
  180|      1|              STATE::ON);
  181|      1|    test_v.clear();
  182|      1|    test_v.push_back("light");
  183|      1|    test_v.push_back("bulb");
  184|      1|    test_v.push_back("change");
  185|      1|    test_v.push_back("126");
  186|       |
  187|      1|    (void)test_command_light->execute(test_v,&test_context);
  188|      1|    test_v.clear();
  189|      1|    test_v.push_back("light");
  190|      1|    test_v.push_back("state;126;30;0\n");
  191|      1|    (void)test_command_light->execute(test_v,&test_context);
  192|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(126)->getStatus(),
  193|      1|              STATE::OFF);
  194|      1|}
  195|       |
  196|       |TEST_F(command_light_Class_fixture, on_off_all_bulbs_in_room_command)
  197|      1|{
  198|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(226)->getStatus(),
  199|      1|              STATE::UNDEFINE);
  200|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(227)->getStatus(),
  201|      1|              STATE::UNDEFINE);
  202|      1|    test_v.clear();
  203|      1|    test_v.push_back("light");
  204|      1|    test_v.push_back("room");
  205|      1|    test_v.push_back("lazienka");
  206|      1|    test_v.push_back("on");
  207|       |
  208|      1|    (void)test_command_light->execute(test_v,&test_context);
  209|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(126)->getStatus(),
  210|      1|              STATE::ACTIVE);
  211|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(127)->getStatus(),
  212|      1|              STATE::ACTIVE);
  213|       |
  214|      1|    test_v.clear();
  215|      1|    test_v.push_back("light");
  216|      1|    test_v.push_back("room");
  217|      1|    test_v.push_back("lazienka");
  218|      1|    test_v.push_back("off");
  219|       |
  220|      1|    (void)test_command_light->execute(test_v,&test_context);
  221|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(126)->getStatus(),
  222|      1|              STATE::DEACTIVE);
  223|      1|    EXPECT_EQ(test_context.main_house_room_handler->m_lightingBulbMap.at(127)->getStatus(),
  224|      1|              STATE::DEACTIVE);
  225|      1|    test_v.clear();
  226|      1|    test_v.push_back("light");
  227|      1|    test_v.push_back("info");
  228|       |
  229|      1|    auto ret = test_command_light->execute(test_v,&test_context);
  230|      1|    std::cout << "ret: " << ret << std::endl;
  231|      1|}
  232|       |
  233|       |TEST_F(command_light_Class_fixture, on_off_all_bulbs_in_home_command)
  234|      1|{
  235|      1|    auto ret = test_context.main_house_room_handler->getAllInfoJSON().dump(4);
  236|      1|    EXPECT_THAT(ret, testing::HasSubstr("UNDEFINE"));
  237|       |
  238|      1|    test_v.clear();
  239|      1|    test_v.push_back("light");
  240|      1|    test_v.push_back("all");
  241|      1|    test_v.push_back("on");
  242|       |
  243|      1|    (void)test_command_light->execute(test_v,&test_context);
  244|      1|    ret = test_context.main_house_room_handler->getAllInfoJSON().dump(4);
  245|      1|    std::cout << ret << std::endl;
  246|      1|    EXPECT_THAT(ret, testing::Not(testing::HasSubstr(R"("STATUS": "OFF")")));
  247|      1|    test_v.clear();
  248|      1|    test_v.push_back("light");
  249|      1|    test_v.push_back("all");
  250|      1|    test_v.push_back("off");
  251|       |
  252|      1|    (void)test_command_light->execute(test_v,&test_context);
  253|      1|    ret = test_context.main_house_room_handler->getAllInfoJSON().dump(4);
  254|      1|    EXPECT_THAT(ret, testing::Not(testing::HasSubstr(R"("STATUS": "ON")")));
  255|      1|}
  256|       |
  257|       |TEST_F(command_light_Class_fixture, wrong_param)
  258|      1|{
  259|      1|    test_v.clear();
  260|      1|    test_v.push_back("light");
  261|      1|    test_v.push_back("lazienka");
  262|      1|    test_v.push_back("off");
  263|       |
  264|      1|    EXPECT_NO_THROW( test_command_light->execute(test_v,&test_context));
  265|      1|}
  266|       |
  267|       |TEST_F(command_light_Class_fixture, room_stats)
  268|      1|{
  269|      1|    test_v.clear();
  270|      1|    test_v.push_back("light");
  271|      1|    test_v.push_back("room");
  272|      1|    test_v.push_back("stats");
  273|       |
  274|      1|    std::cout << test_command_light->execute(test_v,&test_context) << std::endl;
  275|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_log_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |
    4|       |#include "../command_log.h"
    5|       |
    6|       |class command_log_Class_fixture : public testing::Test
    7|       |{
    8|       |public:
    9|       |    command_log_Class_fixture():test_command_log(std::make_unique<command_log>("log")), test_context()
   10|      1|    {
   11|      1|    }
   12|       |
   13|       |protected:
   14|       |    std::unique_ptr<command_log> test_command_log;
   15|       |    std::vector<std::string> test_v;
   16|       |    thread_context test_context;
   17|       |};
   18|       |
   19|       |TEST_F(command_log_Class_fixture, main)
   20|      1|{
   21|      1|    test_v.clear();
   22|      1|    test_v.push_back("log");
   23|      1|    test_v.push_back("INFOoo");
   24|      1|    test_v.push_back("test");
   25|      1|    auto ret = test_command_log->execute(test_v,&test_context);
   26|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   27|       |
   28|      1|    test_v.clear();
   29|      1|    test_v.push_back("log");
   30|      1|    test_v.push_back("INFO");
   31|      1|    test_v.push_back("test");
   32|      1|    ret = test_command_log->execute(test_v,&test_context);
   33|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   34|       |
   35|      1|    test_v.clear();
   36|      1|    test_v.push_back("log");
   37|      1|    test_v.push_back("DEBUG");
   38|      1|    test_v.push_back("test");
   39|      1|    ret = test_command_log->execute(test_v,&test_context);
   40|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   41|       |
   42|      1|    test_v.clear();
   43|      1|    test_v.push_back("log");
   44|      1|    test_v.push_back("WARNING");
   45|      1|    test_v.push_back("test");
   46|      1|    ret = test_command_log->execute(test_v,&test_context);
   47|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   48|      1|    test_v.clear();
   49|      1|    test_v.push_back("log");
   50|      1|    test_v.push_back("ERROR");
   51|      1|    test_v.push_back("test");
   52|      1|    ret = test_command_log->execute(test_v,&test_context);
   53|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   54|      1|    test_v.clear();
   55|      1|    test_v.push_back("log");
   56|      1|    test_v.push_back("FATAL");
   57|      1|    test_v.push_back("test");
   58|      1|    ret = test_command_log->execute(test_v,&test_context);
   59|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   60|      1|    test_v.clear();
   61|      1|    test_v.push_back("log");
   62|      1|    test_v.push_back("CRITICAL");
   63|      1|    test_v.push_back("test");
   64|      1|    ret = test_command_log->execute(test_v,&test_context);
   65|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   66|      1|    test_v.clear();
   67|      1|    test_v.push_back("log");
   68|      1|    test_v.push_back("VERBOSE");
   69|      1|    test_v.push_back("test");
   70|      1|    ret = test_command_log->execute(test_v,&test_context);
   71|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("DONE!"));
   72|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_mpd_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_mpd.h"
    4|       |#include "../../../iDomTools/mock/iDomToolsMock.h"
    5|       |
    6|       |
    7|       |class command_mpd_Class_fixture : public testing::Test
    8|       |{
    9|       |public:
   10|       |    command_mpd_Class_fixture():
   11|       |        test_command_mpd(std::make_unique <command_mpd> ("mpd")),
   12|       |        main_iDomTools(std::make_shared<iDomToolsMock>())
   13|      9|    {
   14|      9|        test_context.main_iDomTools = main_iDomTools;
   15|      9|        test_context.ptr_MPD_info = std::make_unique<MPD_info>();
   16|      9|    }
   17|       |
   18|       |protected:
   19|       |    std::unique_ptr<command_mpd> test_command_mpd;
   20|       |    std::vector<std::string> test_v;
   21|       |    thread_context test_context;
   22|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   23|       |};
   24|       |
   25|       |TEST_F(command_mpd_Class_fixture, unknownParameter)
   26|      1|{
   27|      1|    test_v.clear();
   28|      1|    test_v.push_back("mpd");
   29|      1|    test_v.push_back("test");
   30|      1|    auto ret = test_command_mpd->execute(test_v,&test_context);
   31|      1|    EXPECT_STREQ(ret.c_str(), "unknown parameter test");
   32|       |
   33|      1| }
   34|       |
   35|       |TEST_F(command_mpd_Class_fixture, list)
   36|      1|{
   37|      1|    test_context.ptr_MPD_info->songList = {"song 1","song 2","song 3"};
   38|      1|    test_v.clear();
   39|      1|    test_v.push_back("mpd");
   40|      1|    test_v.push_back("list");
   41|      1|    auto ret = test_command_mpd->execute(test_v,&test_context);
   42|      1|    EXPECT_STREQ(ret.c_str(), "song 1\nsong 2\nsong 3\n");
   43|      1| }
   44|       |
   45|       |TEST_F(command_mpd_Class_fixture, get)
   46|      1|{
   47|      1|    test_context.ptr_MPD_info->volume = 33;
   48|      1|    test_context.ptr_MPD_info->radio = "radio test";
   49|      1|    test_context.ptr_MPD_info->title = "title test";
   50|       |
   51|      1|    test_v.clear();
   52|      1|    test_v.push_back("mpd");
   53|      1|    test_v.push_back("get");
   54|      1|    test_v.push_back("volume");
   55|       |
   56|      1|    auto ret = test_command_mpd->execute(test_v,&test_context);
   57|      1|    EXPECT_STREQ(ret.c_str(), "33");
   58|       |
   59|      1|    test_v.clear();
   60|      1|    test_v.push_back("mpd");
   61|      1|    test_v.push_back("get");
   62|      1|    test_v.push_back("info");
   63|       |
   64|      1|    ret = test_command_mpd->execute(test_v,&test_context);
   65|      1|    EXPECT_STREQ(ret.c_str(), "radio test : title test");
   66|      1| }
   67|       |TEST_F(command_mpd_Class_fixture, volume)
   68|      1|{
   69|      1|    test_context.ptr_MPD_info->volume = 33;
   70|       |
   71|      1|    test_v.clear();
   72|      1|    test_v.push_back("mpd");
   73|      1|    test_v.push_back("volume");
   74|      1|    test_v.push_back("up");
   75|       |
   76|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_volumeUp());
   77|       |
   78|      1|    test_command_mpd->execute(test_v,&test_context);
   79|       |
   80|      1|    test_v.clear();
   81|      1|    test_v.push_back("mpd");
   82|      1|    test_v.push_back("volume");
   83|      1|    test_v.push_back("down");
   84|       |
   85|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_volumeDown());
   86|      1|    test_command_mpd->execute(test_v,&test_context);
   87|       |
   88|      1|    test_v.clear();
   89|      1|    test_v.push_back("mpd");
   90|      1|    test_v.push_back("volume");
   91|      1|    test_v.push_back("55");
   92|       |
   93|       |
   94|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_volumeSet(testing::_, 55));
   95|      1|    test_command_mpd->execute(test_v,&test_context);
   96|       |    /////// voule -gt 100%
   97|      1|    test_v.clear();
   98|      1|    test_v.push_back("mpd");
   99|      1|    test_v.push_back("volume");
  100|      1|    test_v.push_back("155");
  101|       |
  102|      1|    test_command_mpd->execute(test_v,&test_context);
  103|      1| }
  104|       |
  105|       |TEST_F(command_mpd_Class_fixture, pause)
  106|      1|{
  107|      1|    test_v.clear();
  108|      1|    test_v.push_back("mpd");
  109|      1|    test_v.push_back("pause");
  110|       |
  111|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_pause());
  112|       |
  113|      1|    auto ret = test_command_mpd->execute(test_v,&test_context);
  114|      1|    EXPECT_STREQ(ret.c_str(), "paused!");
  115|      1|}
  116|       |
  117|       |TEST_F(command_mpd_Class_fixture, next)
  118|      1|{
  119|      1|    EXPECT_CALL(*main_iDomTools, MPD_next());
  120|      1|    test_v.clear();
  121|      1|    test_v.push_back("mpd");
  122|      1|    test_v.push_back("next");
  123|       |
  124|      1|    test_command_mpd->execute(test_v,&test_context);
  125|      1|}
  126|       |
  127|       |TEST_F(command_mpd_Class_fixture, prev)
  128|      1|{
  129|      1|    test_v.clear();
  130|      1|    test_v.push_back("mpd");
  131|      1|    test_v.push_back("prev");
  132|       |
  133|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_prev());
  134|       |
  135|      1|    test_command_mpd->execute(test_v,&test_context);
  136|      1|}
  137|       |
  138|       |TEST_F(command_mpd_Class_fixture, stop)
  139|      1|{
  140|      1|    test_v.clear();
  141|      1|    test_v.push_back("mpd");
  142|      1|    test_v.push_back("stop");
  143|       |
  144|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_stop());
  145|      1|    EXPECT_CALL(*main_iDomTools.get(), saveState_iDom(false));
  146|       |
  147|      1|    auto ret = test_command_mpd->execute(test_v,&test_context);
  148|      1|    EXPECT_STREQ(ret.c_str(), "stoped!");
  149|      1|}
  150|       |
  151|       |TEST_F(command_mpd_Class_fixture, play_playID)
  152|      1|{
  153|      1|    test_context.idom_all_state.houseState = STATE::UNLOCK;
  154|      1|    test_context.ptr_MPD_info->currentSongID = 2;
  155|      1|    test_context.ptr_MPD_info->songList = {"song 1","song 2","song 3"};
  156|       |
  157|      1|    test_v.clear();
  158|      1|    test_v.push_back("mpd");
  159|      1|    test_v.push_back("start");
  160|       |
  161|       |
  162|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_play(testing::_));
  163|      1|    EXPECT_CALL(*main_iDomTools.get(), saveState_iDom(false)).Times(2);
  164|       |
  165|      1|    test_command_mpd->execute(test_v,&test_context);
  166|      1|    test_v.clear();
  167|      1|    test_v.push_back("mpd");
  168|      1|    test_v.push_back("start");
  169|      1|    test_v.push_back("3");
  170|       |
  171|       |
  172|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_play(testing::_, 3));
  173|      1|    test_command_mpd->execute(test_v,&test_context);
  174|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_ok_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_ok.h"
    4|       |
    5|       |class command_ok_Class_fixture : public testing::Test
    6|       |{
    7|       |public:
    8|       |    command_ok_Class_fixture():test_command_ok(std::make_unique <command_ok> ("ok")), test_context()
    9|      1|    {
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_ok> test_command_ok;
   14|       |    std::vector<std::string> test_v;
   15|       |    thread_context test_context;
   16|       |};
   17|       |
   18|       |TEST_F(command_ok_Class_fixture, main)
   19|      1|{
   20|      1|    test_v.push_back("ok");
   21|      1|    auto ret = test_command_ok->execute(test_v,&test_context);
   22|      1|    EXPECT_STREQ(ret.c_str(),"\nEND\n");
   23|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_program_BT.cpp:
    1|       |#include<gtest/gtest.h>
    2|       |#include<gmock/gmock.h>
    3|       |
    4|       |#include "../command_program.h"
    5|       |#include "../../../iDomTools/mock/iDomToolsMock.h"
    6|       |
    7|       |class command_program_Class_fixture : public testing::Test
    8|       |{
    9|       |public:
   10|       |    command_program_Class_fixture(): test_command_program(std::make_unique <command_program> ("program")),
   11|       |        main_iDomTools(std::make_shared<iDomToolsMock>())
   12|      9|    {
   13|      9|        test_context.iDomProgramState = iDomStateEnum::WORKING;
   14|      9|        test_context.main_iDomTools = main_iDomTools;
   15|      9|        test_context.server_settings = &test_server_set;
   16|      9|    }
   17|       |
   18|       |protected:
   19|       |    std::unique_ptr<command_program> test_command_program;
   20|       |    std::vector<std::string> test_v;
   21|       |    thread_context test_context;
   22|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   23|       |    CONFIG_JSON test_server_set;
   24|       |};
   25|       |
   26|       |TEST_F(command_program_Class_fixture, unknownParameter)
   27|      1|{
   28|      1|    test_v.clear();
   29|      1|    test_v.push_back("program");
   30|      1|    test_v.push_back("test");
   31|      1|    auto ret = test_command_program->execute(test_v,&test_context);
   32|      1|    EXPECT_STREQ(ret.c_str(), "add more paramiters");
   33|       |
   34|      1|}
   35|       |
   36|       |TEST_F(command_program_Class_fixture, missingParameter)
   37|      1|{
   38|      1|    test_v.clear();
   39|      1|    test_v.push_back("program");
   40|      1|    auto ret = test_command_program->execute(test_v,&test_context);
   41|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("what?"));
   42|      1|}
   43|       |
   44|       |TEST_F(command_program_Class_fixture, fakeParameter)
   45|      1|{
   46|      1|    test_v.clear();
   47|      1|    test_v.push_back("program");
   48|      1|    test_v.push_back("fake");
   49|      1|    test_v.push_back("fake2");
   50|      1|    auto ret = test_command_program->execute(test_v,&test_context);
   51|      1|    EXPECT_THAT(ret, ::testing::HasSubstr("what? - fake"));
   52|      1|}
   53|       |
   54|       |TEST_F(command_program_Class_fixture, stopProgram)
   55|      1|{
   56|      1|    test_v.clear();
   57|      1|    test_v.push_back("program");
   58|      1|    test_v.push_back("stop");
   59|      1|    EXPECT_CALL(*main_iDomTools.get(), close_iDomServer());
   60|      1|    test_command_program->execute(test_v,&test_context);
   61|      1|}
   62|       |
   63|       |TEST_F(command_program_Class_fixture, programReloadSoft)
   64|      1|{
   65|      1|    test_v.clear();
   66|      1|    test_v.push_back("program");
   67|      1|    test_v.push_back("reload");
   68|      1|    test_v.push_back("soft");
   69|      1|    EXPECT_CALL(*main_iDomTools.get(), reloadSoft_iDomServer());
   70|      1|    test_command_program->execute(test_v,&test_context);
   71|      1|}
   72|       |
   73|       |TEST_F(command_program_Class_fixture, programReloadHard)
   74|      1|{
   75|      1|    test_v.clear();
   76|      1|    test_v.push_back("program");
   77|      1|    test_v.push_back("reload");
   78|      1|    test_v.push_back("hard");
   79|      1|    EXPECT_CALL(*main_iDomTools.get(), reloadHard_iDomServer());
   80|      1|    test_command_program->execute(test_v,&test_context);
   81|      1|}
   82|       |
   83|       |TEST_F(command_program_Class_fixture, clearRamProgram)
   84|      1|{
   85|      1|    test_v.clear();
   86|      1|    test_v.push_back("program");
   87|      1|    test_v.push_back("clear");
   88|      1|    test_v.push_back("ram");
   89|      1|    auto ret = test_command_program->execute(test_v,&test_context);
   90|      1|    EXPECT_STREQ(ret.c_str(),"ram has beed freed");
   91|      1|}
   92|       |
   93|       |TEST_F(command_program_Class_fixture, raspberryProgram)
   94|      1|{
   95|      1|    test_v.clear();
   96|      1|    test_v.push_back("program");
   97|      1|    test_v.push_back("raspberry");
   98|      1|    test_v.push_back("command");
   99|      1|    auto ret = test_command_program->execute(test_v,&test_context);
  100|      1|    EXPECT_STREQ(ret.c_str(),"command done with exitcode: 0");
  101|      1|}
  102|       |
  103|       |TEST_F(command_program_Class_fixture, version)
  104|      1|{
  105|      1|    auto now = std::chrono::system_clock::now();
  106|      1|    std::time_t now_c = std::chrono::system_clock::to_time_t(now);
  107|      1|    struct tm *parts = std::localtime(&now_c);
  108|       |
  109|       |
  110|      1|    std::stringstream timeString;
  111|      1|    timeString << parts->tm_mday << " " << (1900 + parts->tm_year);
  112|      1|    test_v.clear();
  113|      1|    test_v.push_back("program");
  114|      1|    test_v.push_back("version");
  115|      1|    auto ret = test_command_program->execute(test_v,&test_context);
  116|      1|    std::cout << ret << std::endl;
  117|      1|    EXPECT_THAT(ret, testing::HasSubstr(timeString.str()));
  118|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_put_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_put.h"
    4|       |#include "test_data.h"
    5|       |#include "../../iDom_server_OOP/src/iDomTools/mock/iDomToolsMock.h"
    6|       |
    7|       |class command_put_Class_fixture : public testing::Test
    8|       |{
    9|       |public:
   10|       |    command_put_Class_fixture():
   11|       |        test_command_put(std::make_unique<command_put>("put")),
   12|       |        main_iDomTools(std::make_shared<iDomToolsMock>())
   13|      2|    {
   14|      2|        test_context.main_iDomTools = main_iDomTools;
   15|      2|    }
   16|       |
   17|       |protected:
   18|       |    std::unique_ptr<command_put> test_command_put;
   19|       |    std::vector<std::string> test_v;
   20|       |    thread_context test_context;
   21|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   22|       |};
   23|       |
   24|       |TEST_F(command_put_Class_fixture, main)
   25|      1|{
   26|      1|    TEST_DATA::return_send_to_arduino = "-2:3";
   27|      1|    test_v.push_back("put");
   28|      1|    test_v.push_back("temperature");
   29|      1|    EXPECT_CALL(*main_iDomTools.get(), send_data_to_thingSpeak());
   30|      1|    auto ret = test_command_put->execute(test_v,&test_context);
   31|      1|    EXPECT_STREQ(ret.c_str(), "DONE");
   32|      1|}
   33|       |
   34|       |
   35|       |TEST_F(command_put_Class_fixture, influx)
   36|      1|{
   37|      1|    TEST_DATA::return_send_to_arduino = "-2:3";
   38|      1|    test_v.push_back("put");
   39|      1|    test_v.push_back("influx");
   40|      1|    EXPECT_CALL(*main_iDomTools.get(), send_data_to_influxdb());
   41|      1|    auto ret = test_command_put->execute(test_v,&test_context);
   42|      1|    EXPECT_STREQ(ret.c_str(), "DONE");
   43|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_rs232_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../commandrs232.h"
    4|       |#include "test_data.h"
    5|       |
    6|       |class command_RS232_Class_fixture : public testing::Test
    7|       |{
    8|       |public:
    9|       |    command_RS232_Class_fixture():test_command_put(std::make_unique <commandRS232> ("RS232")), test_context()
   10|      2|    {
   11|      2|        test_context.main_Rs232 = std::make_unique<SerialPi>("addr");
   12|      2|    }
   13|       |
   14|       |protected:
   15|       |    std::unique_ptr<commandRS232> test_command_put;
   16|       |    std::vector<std::string> test_v;
   17|       |    thread_context test_context;
   18|       |};
   19|       |
   20|       |TEST_F(command_RS232_Class_fixture, wrongParameter)
   21|      1|{
   22|      1|    test_v.push_back("RS232");
   23|      1|    test_v.push_back("test_par");
   24|      1|    auto ret = test_command_put->execute(test_v,&test_context);
   25|      1|    EXPECT_STREQ(ret.c_str(), "wrong parameter: test_par");
   26|      1|}
   27|       |
   28|       |TEST_F(command_RS232_Class_fixture, send)
   29|      1|{
   30|      1|    TEST_DATA::return_send_to_arduino = "done";
   31|       |
   32|      1|    test_v.push_back("RS232");
   33|      1|    test_v.push_back("send");
   34|      1|    test_v.push_back("test:33;");
   35|      1|    auto ret = test_command_put->execute(test_v,&test_context);
   36|      1|    EXPECT_STREQ(ret.c_str(), "done");
   37|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_shed_BT.cpp:
    1|       |#include<gtest/gtest.h>
    2|       |#include<gmock/gmock.h>
    3|       |
    4|       |#include "../command_shed.h"
    5|       |#include "../../iDom_server_OOP/src/iDomTools/mock/iDomToolsMock.h"
    6|       |
    7|       |class command_shed_Class_fixture : public testing::Test
    8|       |{
    9|       |public:
   10|       |    command_shed_Class_fixture():test_command_shed(std::make_unique <command_shed>("shed")),
   11|       |        main_iDomTools(std::make_shared<iDomToolsMock>())
   12|      2|    {
   13|      2|        test_context.m_keyHandler = std::make_unique<iDomKEY_ACCESS>("");
   14|      2|        test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("iDomSERVER test");
   15|      2|        test_context.main_iDomTools = main_iDomTools;
   16|      2|    }
   17|       |
   18|       |protected:
   19|       |    std::unique_ptr<command_shed> test_command_shed;
   20|       |
   21|       |    std::vector<std::string> test_v;
   22|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   23|       |    thread_context test_context;
   24|       |};
   25|       |
   26|       |TEST_F(command_shed_Class_fixture, wrongParameter)
   27|      1|{
   28|      1|    test_v.push_back("shed");
   29|      1|    test_v.push_back("t");
   30|      1|    auto ret = test_command_shed->execute(test_v,&test_context);
   31|      1|    EXPECT_STREQ(ret.c_str(), "command shed - wrong paramiter");
   32|      1|}
   33|       |
   34|       |TEST_F(command_shed_Class_fixture, put_get_json)
   35|      1|{
   36|       |
   37|      1|    test_context.lusina.shedConfJson = nlohmann::json::parse(R"({
   38|      1|       "deepSleep":true,
   39|      1|       "howLongDeepSleep":177,
   40|      1|       "fanON":false
   41|      1|   })");
   42|      1|    EXPECT_CALL(*main_iDomTools.get(), isItDay()).WillOnce(testing::Return(true));
   43|      1|    std::string msg = R"({"acdc":2,"temperatura":21.37999916,"ciśnienie":992.303772,"wilgotność":51.86914063,"millis":119626,"bateria":3.900585938, "podłoga": 22.6})";
   44|      1|    test_v.push_back("shed");
   45|      1|    test_v.push_back("put");
   46|      1|    test_v.push_back(msg);
   47|      1|    auto ret = test_command_shed->execute(test_v, &test_context);
   48|      1|    EXPECT_STREQ(ret.c_str(), "DONE");
   49|       |
   50|      1|    test_v.clear();
   51|      1|    test_v.push_back("shed");
   52|      1|    test_v.push_back("show");
   53|      1|    ret = test_command_shed->execute(test_v, &test_context);
   54|      1|    std::cout << ret << std::endl;
   55|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_show_BT.cpp:
    1|       |#include<gtest/gtest.h>
    2|       |#include<gmock/gmock.h>
    3|       |
    4|       |#include "../command_show.h"
    5|       |
    6|       |class command_show_Class_fixture : public testing::Test
    7|       |{
    8|       |public:
    9|       |    command_show_Class_fixture():test_command_show(std::make_unique <command_show>("show"))
   10|     10|    {
   11|     10|        test_context.m_keyHandler = std::make_unique<iDomKEY_ACCESS>("");
   12|     10|    }
   13|       |
   14|       |protected:
   15|       |    std::unique_ptr<command_show> test_command_show;
   16|       |
   17|       |    std::vector<std::string> test_v;
   18|       |    thread_context test_context;
   19|       |};
   20|       |
   21|       |TEST_F(command_show_Class_fixture, wrongParameter)
   22|      1|{
   23|      1|    test_v.push_back("show");
   24|      1|    test_v.push_back("t");
   25|      1|    auto ret = test_command_show->execute(test_v,&test_context);
   26|      1|    EXPECT_STREQ(ret.c_str(), "wrong parameter: t");
   27|      1|}
   28|       |
   29|       |TEST_F(command_show_Class_fixture, unknownParameter)
   30|      1|{
   31|      1|    test_v.push_back("show");
   32|      1|    auto ret = test_command_show->execute(test_v,&test_context);
   33|      1|    EXPECT_STREQ(ret.c_str(), "show what?");
   34|      1|}
   35|       |
   36|       |TEST_F(command_show_Class_fixture, showThreadAll)
   37|      1|{
   38|      1|    std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> threadArray;
   39|       |
   40|      1|    threadArray[1].thread_ID = std::this_thread::get_id();
   41|      1|    threadArray[1].thread_name = "thread1 test1";
   42|      1|    threadArray[1].thread_socket = 1;
   43|      1|    threadArray[2].thread_ID = std::this_thread::get_id();
   44|      1|    threadArray[2].thread_name = "thread1 test2";
   45|      1|    threadArray[2].thread_socket = 2;
   46|       |
   47|      1|    test_context.main_THREAD_arr = &threadArray;
   48|       |
   49|      1|    test_v.push_back("show");
   50|      1|    test_v.push_back("thread");
   51|      1|    test_v.push_back("all");
   52|      1|    auto ret = test_command_show->execute(test_v,&test_context);
   53|      1|    EXPECT_THAT(ret, testing::HasSubstr("socket: 2"));
   54|      1|}
   55|       |
   56|       |TEST_F(command_show_Class_fixture, showThread)
   57|      1|{
   58|      1|    std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> threadArray;
   59|       |
   60|      1|    threadArray[1].thread_ID = std::this_thread::get_id();
   61|      1|    threadArray[1].thread_name = "thread1 test1";
   62|      1|    threadArray[1].thread_socket = 1;
   63|      1|    threadArray[2].thread_ID = std::this_thread::get_id();
   64|      1|    threadArray[2].thread_name = "thread1 test2";
   65|      1|    threadArray[2].thread_socket = 2;
   66|       |
   67|      1|    test_context.main_THREAD_arr = &threadArray;
   68|       |
   69|      1|    test_v.push_back("show");
   70|      1|    test_v.push_back("thread");
   71|      1|    test_v.push_back("2");
   72|      1|    auto ret = test_command_show->execute(test_v,&test_context);
   73|      1|    EXPECT_THAT(ret, testing::HasSubstr("socket: 2"));
   74|      1|}
   75|       |
   76|       |TEST_F(command_show_Class_fixture, showThreadNoId)
   77|      1|{
   78|      1|    test_v.push_back("show");
   79|      1|    test_v.push_back("thread");
   80|      1|    auto ret = test_command_show->execute(test_v,&test_context);
   81|      1|    EXPECT_STREQ(ret.c_str(), "No ID");
   82|      1|}
   83|       |
   84|       |TEST_F(command_show_Class_fixture, showLog)
   85|      1|{
   86|      1|    test_v.push_back("show");
   87|      1|    test_v.push_back("log");
   88|      1|    auto ret = test_command_show->execute(test_v,&test_context);
   89|      1|    EXPECT_THAT(ret, testing::HasSubstr("VERBOSE"));
   90|      1|}
   91|       |
   92|       |TEST_F(command_show_Class_fixture, showLogNoInfo)
   93|      1|{
   94|      1|    test_v.push_back("show");
   95|      1|    test_v.push_back("log");
   96|      1|    test_v.push_back("no");
   97|      1|    test_v.push_back("INFO");
   98|      1|    auto ret = test_command_show->execute(test_v,&test_context);
   99|      1|    EXPECT_THAT(ret, testing::HasSubstr("VERBOSE"));
  100|      1|    EXPECT_THAT(ret, testing::Not(testing::HasSubstr("INFO")));
  101|      1|}
  102|       |
  103|       |TEST_F(command_show_Class_fixture, showLogInfo)
  104|      1|{
  105|      1|    test_v.push_back("show");
  106|      1|    test_v.push_back("log");
  107|      1|    test_v.push_back("INFO");
  108|      1|    auto ret = test_command_show->execute(test_v,&test_context);
  109|      1|    EXPECT_THAT(ret, testing::HasSubstr("INFO"));
  110|      1|}
  111|       |
  112|       |TEST_F(command_show_Class_fixture, showLogFakeInfo)
  113|      1|{
  114|      1|    test_v.push_back("show");
  115|      1|    test_v.push_back("log");
  116|      1|    test_v.push_back("fake");
  117|      1|    test_v.push_back("INFO");
  118|      1|    auto ret = test_command_show->execute(test_v,&test_context);
  119|      1|    EXPECT_STREQ(ret.c_str(), "do you mean : show log no <string>?");
  120|      1|}
  121|       |
  122|       |TEST_F(command_show_Class_fixture, showKEY_all)
  123|      1|{
  124|      1|    test_v.push_back("show");
  125|      1|    test_v.push_back("iDom");
  126|      1|    test_v.push_back("key");
  127|      1|    auto ret = test_command_show->execute(test_v,&test_context);
  128|      1|    EXPECT_GT(ret.size(), 3);
  129|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_sleep_BT.cpp:
    1|       |#include<gtest/gtest.h>
    2|       |
    3|       |#include "../command_sleep.h"
    4|       |#include "../../../iDomTools/mock/iDomToolsMock.h"
    5|       |
    6|       |class command_sleep_Class_fixture : public testing::Test
    7|       |{
    8|       |public:
    9|       |    command_sleep_Class_fixture():
   10|       |        test_command_sleep(std::make_unique <command_sleep> ("sleep")),
   11|       |        main_iDomTools(std::make_shared<iDomToolsMock>())
   12|      5|    {
   13|      5|        test_context.main_iDomTools = main_iDomTools;
   14|      5|    }
   15|       |
   16|       |protected:
   17|       |    std::unique_ptr<command_sleep> test_command_sleep;
   18|       |    std::vector<std::string> test_v;
   19|       |    thread_context test_context;
   20|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   21|       |};
   22|       |
   23|       |TEST_F(command_sleep_Class_fixture, sleep)
   24|      1|{
   25|      1|    test_context.sleeper = 88;
   26|       |
   27|      1|    test_v.push_back("sleep");
   28|      1|    auto ret = test_command_sleep->execute(test_v,&test_context);
   29|      1|    EXPECT_STREQ(ret.c_str(), "sleep set to: 88");
   30|      1|}
   31|       |
   32|       |TEST_F(command_sleep_Class_fixture, sleepFakeParam)
   33|      1|{
   34|      1|    test_context.sleeper = 88;
   35|       |
   36|      1|    test_v.push_back("sleep");
   37|      1|    test_v.push_back("fake");
   38|      1|    auto ret = test_command_sleep->execute(test_v,&test_context);
   39|      1|    EXPECT_STREQ(ret.c_str(), "internal error");
   40|      1|}
   41|       |
   42|       |TEST_F(command_sleep_Class_fixture, sleepFakeParam2)
   43|      1|{
   44|      1|    test_context.sleeper = 88;
   45|       |
   46|      1|    test_v.push_back("sleep");
   47|      1|    test_v.push_back("fake");
   48|      1|    test_v.push_back("fake2");
   49|      1|    auto ret = test_command_sleep->execute(test_v,&test_context);
   50|      1|    EXPECT_STREQ(ret.c_str(), "wrong parametr fake");
   51|      1|}
   52|       |
   53|       |TEST_F(command_sleep_Class_fixture, sleepSetNoIntiger)
   54|      1|{
   55|      1|    test_context.sleeper = 88;
   56|       |
   57|      1|    test_v.push_back("sleep");
   58|      1|    test_v.push_back("set");
   59|      1|    test_v.push_back("fake2");
   60|      1|    auto ret = test_command_sleep->execute(test_v,&test_context);
   61|      1|    EXPECT_STREQ(ret.c_str(), "system need intiger > 0 not: fake2");
   62|      1|}
   63|       |
   64|       |TEST_F(command_sleep_Class_fixture, sleepSet)
   65|      1|{
   66|      1|    std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> threadArray;
   67|       |
   68|      1|    threadArray[1].thread_ID = std::this_thread::get_id();
   69|      1|    threadArray[1].thread_name = "thread1 test1";
   70|      1|    threadArray[1].thread_socket = 1;
   71|      1|    threadArray[2].thread_ID = std::this_thread::get_id();
   72|      1|    threadArray[2].thread_name = "thread1 test2";
   73|      1|    threadArray[2].thread_socket = 2;
   74|       |
   75|      1|    test_context.main_THREAD_arr = &threadArray;
   76|      1|    test_context.main_Rs232 = std::make_unique<SerialPi>("cyniu");
   77|       |
   78|      1|    test_v.push_back("sleep");
   79|      1|    test_v.push_back("set");
   80|      1|    test_v.push_back("2");
   81|      1|    EXPECT_CALL(*main_iDomTools.get(), ledClear(0, 60));
   82|      1|    EXPECT_CALL(*main_iDomTools.get(), ledOFF());
   83|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_stop());
   84|      1|    EXPECT_CALL(*main_iDomTools.get(), turnOff433MHzSwitch("listwa"));
   85|      1|    EXPECT_CALL(*main_iDomTools.get(), ledClear(0, 30));
   86|      1|    auto ret = test_command_sleep->execute(test_v,&test_context);
   87|      1|    EXPECT_STREQ(ret.c_str(), "DONE - Sleep MPD STARTED");
   88|      1|    sleep(1);
   89|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_state_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |
    4|       |#include "../command_state.h"
    5|       |#include "../../../functions/functions.h"
    6|       |#include "../../../buderus/mock/buderus_mock.h"
    7|       |
    8|       |class command_state_Class_fixture : public testing::Test
    9|       |{
   10|       |public:
   11|       |    command_state_Class_fixture():test_command_state(std::make_unique <command_state>("state")),
   12|       |                                  buderusMock(std::make_shared<BUDERUS_MOCK>())
   13|      3|    {
   14|      3|        test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   15|      3|        test_context.ptr_buderus = buderusMock;
   16|      3|        useful_F::myStaticCtx = &test_context;
   17|      3|    }
   18|       |
   19|       |protected:
   20|       |    std::unique_ptr<command_state> test_command_state;
   21|       |    std::vector<std::string> test_v;
   22|       |    thread_context test_context;
   23|       |    std::shared_ptr<BUDERUS_MOCK> buderusMock;
   24|       |};
   25|       |
   26|       |TEST_F(command_state_Class_fixture, stateAll)
   27|      1|{
   28|      1|    test_v.clear();
   29|      1|    test_v.push_back("state");
   30|      1|    test_v.push_back("all");
   31|      1|    EXPECT_CALL(*buderusMock.get(), getHeatingStartTime()).WillOnce(testing::Return(2));
   32|      1|    EXPECT_CALL(*buderusMock.get(), isHeatingActiv()).WillOnce(testing::Return(true));
   33|      1|    auto ret = test_command_state->execute(test_v,&test_context);
   34|      1|    EXPECT_STREQ(ret.c_str(), "state: burnGas=ACTIVE burnGasStartTime=2 ");
   35|      1|}
   36|       |
   37|       |TEST_F(command_state_Class_fixture, stateGetOne)
   38|      1|{
   39|      1|    test_v.clear();
   40|      1|    test_v.push_back("state");
   41|      1|    test_v.push_back("KODI");
   42|      1|    auto ret = test_command_state->execute(test_v,&test_context);
   43|      1|    EXPECT_STREQ(ret.c_str(), "UNKNOWN KODI");
   44|      1|}
   45|       |
   46|       |TEST_F(command_state_Class_fixture, stateMissingParam)
   47|      1|{
   48|      1|    test_v.clear();
   49|      1|    test_v.push_back("state");
   50|      1|    auto ret = test_command_state->execute(test_v,&test_context);
   51|      1|    EXPECT_THAT(ret, testing::HasSubstr("need parameter!\n"));
   52|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_test_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../commandtest.h"
    4|       |
    5|       |class command_test_Class_fixture : public testing::Test
    6|       |{
    7|       |public:
    8|       |    command_test_Class_fixture():  test_command_test{std::make_unique <commandTEST> ("test")}, test_context()
    9|      3|    {
   10|       |
   11|      3|    }
   12|       |
   13|       |protected:
   14|       |    std::unique_ptr<commandTEST> test_command_test;
   15|       |    std::vector<std::string> test_v;
   16|       |    thread_context test_context;
   17|       |};
   18|       |
   19|       |TEST_F(command_test_Class_fixture, test)
   20|      1|{
   21|      1|    test_v.push_back("test");
   22|      1|    test_v.push_back("test");
   23|      1|    auto ret = test_command_test->execute(test_v,&test_context);
   24|      1|    EXPECT_STREQ(ret.c_str(),"test - for test");
   25|      1|}
   26|       |
   27|       |TEST_F(command_test_Class_fixture, throw_test)
   28|      1|{
   29|      1|    test_v.push_back("test");
   30|      1|    test_v.push_back("throw");
   31|      1|    EXPECT_THROW(test_command_test->execute(test_v,&test_context), int);
   32|      1|}
   33|       |
   34|       |TEST_F(command_test_Class_fixture, unknownParam)
   35|      1|{
   36|      1|    test_v.push_back("test");
   37|      1|    test_v.push_back("fake");
   38|      1|    auto ret = test_command_test->execute(test_v,&test_context);
   39|      1|    EXPECT_EQ(ret.size(),59);
   40|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_uptime_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_uptime.h"
    4|       |
    5|       |class command_uptime_Class_fixture : public testing::Test
    6|       |{
    7|       |public:
    8|       |    command_uptime_Class_fixture():test_command_uptime(std::make_unique <command_UPTIME> ("uptime")), test_context()
    9|      1|    {
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_UPTIME> test_command_uptime;
   14|       |    std::vector<std::string> test_v;
   15|       |    thread_context test_context;
   16|       |};
   17|       |
   18|       |TEST_F(command_uptime_Class_fixture, main)
   19|      1|{
   20|      1|    time(&test_context.start);
   21|      1|    test_v.push_back("uptime");
   22|      1|    auto ret = test_command_uptime->execute(test_v,&test_context);
   23|      1|    std::cout << "DATA: " << ret << std::endl;
   24|      1|    EXPECT_STREQ(ret.c_str(),"uptime: \n0 day 0 hours 0 minutes 0 seconds");
   25|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/TEST/command_wifi_bt.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../command_wifi.h"
    4|       |
    5|       |class command_wifi_Class_fixture : public testing::Test
    6|       |{
    7|       |public:
    8|       |    command_wifi_Class_fixture():test_command_wifi(std::make_unique <command_wifi>("wifi")), test_context()
    9|      1|    {
   10|      1|    }
   11|       |
   12|       |protected:
   13|       |    std::unique_ptr<command_wifi> test_command_wifi;
   14|       |    std::vector<std::string> test_v;
   15|       |    thread_context test_context;
   16|       |};
   17|       |
   18|       |TEST_F(command_wifi_Class_fixture, main)
   19|      1|{
   20|      1|    time(&test_context.start);
   21|      1|    test_v.push_back("wifi");
   22|      1|    auto ret = test_command_wifi->execute(test_v,&test_context);
   23|      1|    std::cout << "DATA: " << ret << std::endl;
   24|      1|    EXPECT_STREQ(ret.c_str(),"done");
   25|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_433mhz.cpp:
    1|       |#include "command_433mhz.h"
    2|       |#include "../../RADIO_433_eq/radio_433_eq.h"
    3|       |#include "../../433MHz/RFLink/rflinkhandler.h"
    4|       |#include "../../iDomTools/idomtools_interface.h"
    5|       |
    6|       |command_433MHz::command_433MHz(const std::string &name):command(name)
    7|     56|{}
    8|       |
    9|       |std::string command_433MHz::execute(std::vector<std::string> &v, thread_context *context)
   10|     22|{
   11|     22|    std::string str_buf = "wrong paramiter\n" + help();
   12|     22|    if (v.size() > 2){
   13|       |        //////////////////////////// switch
   14|     22|        if (v[1] == "show" && v[2] == "all"){
   15|      6|            str_buf = context->main_REC->listAllName();
   16|      6|        }
   17|     16|        else if (v[1] == "show" && v[2] == "switch"){
   18|      1|            str_buf.clear();
   19|      1|            for (auto m_switch : context->main_REC->getSwitchPointerVector())
   20|      5|            {
   21|      5|                str_buf.append(stateToString(m_switch->getState()) );
   22|      5|            }
   23|      1|        }
   24|     15|        else if (v[1] == "show" && v[2] == "aether"){
   25|      1|            str_buf.clear();
   26|      1|            for(auto itr = context->main_RFLink->m_rflinkMAP.begin();
   27|      3|                itr not_eq context->main_RFLink->m_rflinkMAP.end();
   28|      2|                itr++)
   29|      2|            {
   30|      2|                str_buf.append(itr->second.read());
   31|      2|                str_buf.push_back('\n');
   32|      2|            }
   33|      1|            str_buf.push_back('.');
   34|       |
   35|      1|        }
   36|     14|        else if (v[1] == "show" && v[2] == "config"){
   37|      1|            str_buf = context->main_REC->showConfig(context->server_settings->_server.radio433MHzConfigFile);
   38|      1|        }
   39|     13|        else if (v[1] == "send"){
   40|      1|            str_buf = "sended! counter " + std::to_string(++counter);
   41|      1|            context->main_RFLink->sendCommand(v[2]);
   42|       |
   43|      1|        }
   44|     12|        else if (v[1] == "switch"){
   45|     12|            try{
   46|     12|                RADIO_SWITCH *m_switch = dynamic_cast<RADIO_SWITCH*>(context->main_REC->getEqPointer(v[2]));
   47|       |
   48|     12|                if (v[3] == "ON") {
   49|      3|                    m_switch->on();
   50|      3|                    str_buf = " done ";
   51|      3|                }
   52|      9|                else if (v[3] == "OFF"){
   53|      3|                    m_switch->off();
   54|      3|                    str_buf = " done ";
   55|      3|                }
   56|      6|                else if (v[3] == "15s"){
   57|      1|                    m_switch->onFor15sec();
   58|      1|                    str_buf = " done ";
   59|      1|                }
   60|      5|                else if(v[3] == "change"){
   61|      2|                    m_switch->on_Off();
   62|      2|                }
   63|      3|                else{
   64|      3|                    str_buf = "unknown paramiter: ";
   65|      3|                    str_buf.append(v[3]);
   66|      3|                }
   67|     12|            }
   68|     12|            catch (std::string& error){
   69|      2|                str_buf = error;
   70|      2|            }
   71|     12|            context->main_iDomTools->saveState_iDom(context->serverStarted);
   72|     12|        }
   73|       |        /////////////////////////////////////////////
   74|     22|    }
   75|     22|    return str_buf;
   76|     22|}
   77|       |
   78|       |std::string command_433MHz::help() const
   79|     26|{
   80|     26|    std::stringstream help;
   81|     26|    help << ("433MHz switch <name> ON/OFF/15s/change - change switch state") <<std::endl;
   82|     26|    help << ("433MHz show all - list all equipment by name") <<std::endl;
   83|     26|    help << ("433MHz show aether - show aether devices by ID") <<std::endl;
   84|     26|    help << ("433MHz show config - show 433MHz devices config") <<std::endl;
   85|     26|    help << ("433MHz send <msg> - send command") <<std::endl;
   86|     26|    return help.str();
   87|     26|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_ardu.cpp:
    1|       |#include "command_ardu.h"
    2|       |
    3|       |command_ardu::command_ardu(const std::string &name):command(name)
    4|      1|{
    5|      1|    this->m_mainRadioButton = std::nullptr_t();
    6|      1|    this->m_mainWeatherStation = std::nullptr_t();
    7|      1|}
    8|       |
    9|       |command_ardu::command_ardu(const std::string& name,
   10|       |                           thread_context *context):command(name),
   11|       |    m_button433MHzVector(context->main_REC->getButtonPointerVector()),
   12|       |    m_mainRadioButton( std::nullptr_t()),
   13|       |    m_weatherStVe(context->main_REC->getWeather_StationPtrVector())
   14|     22|{
   15|     22|    try{
   16|     22|            m_mainWeatherStation = static_cast<RADIO_WEATHER_STATION*>(context->main_REC->getEqPointer("first"));
   17|     22|    }
   18|     22|    catch(std::string &e)
   19|     22|    {
   20|     13|        context->iDomAlarm.raiseAlarm(88756, e);
   21|     13|    }
   22|     22|}
   23|       |
   24|       |std::string command_ardu::execute(std::vector<std::string> &v, thread_context *context)
   25|      9|{
   26|      9|    std::string str_buf = " only for internal usage!";
   27|      9|    if (v.size() > 1){
   28|      9|        if(v[1] == "show"){
   29|      1|            RADIO_WEATHER_STATION* st = static_cast<RADIO_WEATHER_STATION*>(context->main_REC->getEqPointer("first"));
   30|      1|            str_buf = st->data.getDataString();
   31|      1|        }
   32|      9|        if(v[1] == "433MHz"){
   33|      8|            context->myEventHandler.run("433MHz")->addEvent("RFLink: " + v[2]);
   34|      8|            try {
   35|      8|                context->main_RFLink->
   36|      8|                    m_rflinkMAP[context->main_RFLink->getArgumentValueFromRFLinkMSG(v[2],
   37|      8|                                                                                    "ID")].counter();
   38|      8|                context->main_RFLink->
   39|      8|                    m_rflinkMAP[context->main_RFLink->getArgumentValueFromRFLinkMSG(v[2],
   40|      8|                                                                                    "ID")].msg = v[2];
   41|      8|            }
   42|      8|            catch(const std::string& e){
   43|       |                //std::cout << "wyjatek w szukaniu: " << e <<std::endl;
   44|      3|                pingAndOkRecv( context, v[2]);
   45|      3|            }
   46|       |            //TODO add command
   47|      8|            try {
   48|      7|                for(auto k : m_button433MHzVector)
   49|     15|                {
   50|     15|                    if (k->getID() == context->main_RFLink->getArgumentValueFromRFLinkMSG(v[2],"ID") )
   51|      1|                    {
   52|      1|                        context->mqttHandler->publish("iDom-client/command", k->getCommandRun() );
   53|      1|                    }
   54|     15|                }
   55|      7|            }
   56|      7|            catch (const std::string& e){ }
   57|      7|            try {
   58|      7|                if (m_mainWeatherStation->getID() ==
   59|      7|                        context->main_RFLink->getArgumentValueFromRFLinkMSG(v[2],"ID") )
   60|      3|                {
   61|      3|                    m_mainWeatherStation->data.putData(v[2]);
   62|      3|                }
   63|      7|            }
   64|      7|            catch (std::string& e){ }
   65|      7|        }
   66|      9|    }
   67|      9|    return str_buf;
   68|      9|}
   69|       |
   70|       |std::string command_ardu::help() const
   71|      5|{
   72|      5|    return " only for internal usege\n";
   73|      5|}
   74|       |
   75|       |void command_ardu::pingAndOkRecv(thread_context *context, const std::string& s)
   76|      3|{
   77|      3|    if (s.find("OK;") not_eq std::string::npos)
   78|      1|        context->main_RFLink->m_okTime = Clock::getUnixTime();
   79|      2|    else if (s.find("PONG;") not_eq std::string::npos)
   80|      1|        context->main_RFLink->m_pingTime = Clock::getUnixTime();
   81|      3|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_ardu.h:
    1|       |#pragma once
    2|       |
    3|       |#include "../../RADIO_433_eq/radio_433_eq.h"
    4|       |#include "../../command/command.h"
    5|       |
    6|       |class command_ardu : public command
    7|       |{
    8|       |    std::vector<RADIO_BUTTON*> m_button433MHzVector;
    9|       |    RADIO_BUTTON* m_mainRadioButton;
   10|       |    std::vector<RADIO_WEATHER_STATION*> m_weatherStVe;
   11|       |    RADIO_WEATHER_STATION* m_mainWeatherStation;
   12|       |public:
   13|       |    explicit command_ardu(const std::string& name);
   14|       |    command_ardu(const std::string& name, thread_context* context );
   15|     23|    ~command_ardu() = default;
   16|       |    std::string execute(std::vector <std::string> &v,thread_context* context) override;
   17|       |    std::string help() const override;
   18|       |#ifndef BT_TEST
   19|       |    private:
   20|       |#endif
   21|       |    void pingAndOkRecv(thread_context *context, const std::string &s);
   22|       |};
   23|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_big.cpp:
    1|       |#include "command_big.h"
    2|       |
    3|       |command_big::command_big(const std::string &name):command(name)
    4|     16|{
    5|       |
    6|     16|}
    7|       |
    8|       |std::string command_big::execute(std::vector<std::string> &v, thread_context *context)
    9|      1|{
   10|      1|    std::string str_buf = "command big - wrong paramiter:\n "+ help();
   11|      1|    if (v.size() > 1){
   12|      1|        str_buf.erase();
   13|     55|        for (int i = 0; i < std::stoi(v[1])-1; ++i){
   14|     54|            str_buf.push_back('z');
   15|     54|        }
   16|      1|        str_buf.push_back('Y');
   17|      1|    }
   18|      1|    return str_buf;
   19|      1|}
   20|       |
   21|       |std::string command_big::help() const
   22|      5|{
   23|      5|    return "big <number> - send big (number) data \n";
   24|      5|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_buderus.cpp:
    1|       |#include "command_buderus.h"
    2|       |
    3|       |command_buderus::command_buderus(const std::string &name):command(name)
    4|     62|{
    5|       |
    6|     62|}
    7|       |
    8|       |std::string command_buderus::execute(std::vector<std::string> &v, thread_context *context)
    9|     29|{
   10|     29|    std::string str_buf = "command buderus - wrong paramiter:\n "+ help();
   11|       |
   12|     29|    if(v.size() < 2)
   13|      1|        return str_buf;
   14|     28|    if(v.at(1) == "heating_active")
   15|      6|    {
   16|      6|        context->ptr_buderus->setHeating(v.at(2) == "1");
   17|      6|        return "done; counter " + std::to_string(++counter);
   18|      6|    }
   19|       |
   20|     22|    else if(v.at(1) == "tapwater_active")
   21|      2|    {
   22|      2|        context->ptr_buderus->setTapWater(v.at(2) == "1");
   23|      2|        return "done; counter " + std::to_string(++counter);
   24|      2|    }
   25|       |
   26|     20|    else if(v.at(1) == "boiler_data")
   27|     10|    {
   28|     10|        try{
   29|     10|            context->ptr_buderus->updateBoilerDataFromMQTT(nlohmann::json(nlohmann::json::parse(v.at(2))));
   30|     10|        }
   31|     10|        catch(...)
   32|     10|        {
   33|      2|            context->iDomAlarm.raiseAlarm(879,"buderus boile_data - wrong JSON format!");
   34|      2|        }
   35|       |
   36|     10|        return "done; counter " + std::to_string(++counter);
   37|     10|    }
   38|       |
   39|     10|    else if(v.at(1) == "thermostat_data")
   40|      4|    {
   41|      4|        try{
   42|      4|        context->ptr_buderus->updateThermostatDataFromMQTT(nlohmann::json(nlohmann::json::parse(v.at(2))));
   43|      4|        }
   44|      4|        catch(...){
   45|      2|            context->iDomAlarm.raiseAlarm(878,"buderus thermostat_data - wrong JSON format!");
   46|      2|        }
   47|       |
   48|      4|        return "done; counter " + std::to_string(++counter);
   49|      4|    }
   50|       |
   51|      6|    else if(v.at(1) == "print")
   52|      2|    {
   53|      2|        str_buf = context->ptr_buderus->getAllData();
   54|      2|    }
   55|       |
   56|      4|    else if(v.at(1) == "circPomp")
   57|      1|    {
   58|      1|         context->ptr_buderus->runCirclePompForWhile();
   59|      1|         str_buf = "RUN circle pomp";
   60|      1|    }
   61|      3|    else if(v.at(1) == "boiler" && v.at(2) == "heating")
   62|      1|    {
   63|      1|        context->ptr_buderus->boilerHeatOneTime();
   64|      1|        str_buf = "Start heating boiler";
   65|      1|    }
   66|      2|    else if(v.at(1) == "set" && v.at(2) == "temp")
   67|      2|    {
   68|      2|        try {
   69|      2|            (void)std::stof(v.at(3));
   70|      2|        } catch (...) {
   71|      1|            return "cannot convert to float";
   72|      1|        }
   73|      1|        context->ptr_buderus->setTempInsideBuilding(v.at(3));
   74|      1|        str_buf = "temp has been set to: " + v.at(3);
   75|      1|    }
   76|      5|    return str_buf;
   77|     28|}
   78|       |
   79|       |std::string command_buderus::help() const
   80|     33|{
   81|     33|    std::stringstream ret;
   82|     33|    ret << "buderus print - show all data" << std::endl;
   83|     33|    ret << "buderus thermostat_data <json>  - set termostat data" << std::endl;
   84|     33|    ret << "buderus boiler_data <json>  - set boiler data" << std::endl;
   85|     33|    ret << "buderus tapwater_active <1/0>  - set tapwater activ" << std::endl;
   86|     33|    ret << "buderus heating_active <1/0>  - set heating activ" << std::endl;
   87|     33|    ret << "buderus circPomp  - run circle pomp tap water for while" << std::endl;
   88|     33|    ret << "buderus boiler heating - heat boiler one time" << std::endl;
   89|     33|    ret << "buderus set temp <float> - set thermostat temperature <degrees>" << std::endl;
   90|       |
   91|     33|    return ret.str();
   92|     33|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_clock.cpp:
    1|       |#include "command_clock.h"
    2|       |
    3|       |command_clock::command_clock(const std::string &name):command(name)
    4|     17|{
    5|       |
    6|     17|}
    7|       |
    8|       |std::string command_clock::execute(std::vector<std::string> &v, thread_context *context)
    9|      2|{
   10|      2|    if(v.size()<2)
   11|      1|        return "can not set clock";
   12|      1|    std::stringstream ss;
   13|      1|    ss << "TEXT:" << v.at(1) << ";" ;
   14|      1|    context->main_Rs232->print(ss.str());
   15|      1|    return "done";
   16|      2|}
   17|       |
   18|       |std::string command_clock::help() const
   19|      4|{
   20|      4|    return "clock <number/string> - put number/string (max 4 digits) to 7segment LCD\n";
   21|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_cmd.cpp:
    1|       |#include "command_cmd.h"
    2|       |#include "../../../src/functions/functions.h"
    3|       |
    4|       |command_cmd::command_cmd(const std::string &name):command(name)
    5|     15|{
    6|       |
    7|     15|}
    8|       |
    9|       |std::string command_cmd::execute(std::vector<std::string> &v, thread_context *context)
   10|      1|{
   11|       |    //TODO  cleanup
   12|       |   // if (v.size() == 1){
   13|       |   //     return "fifo file contain: "+ useful_F_libs::read_from_mkfifo(context->server_settings->_server.omxplayerFile);
   14|       |  //  }
   15|      1|    return "error: unknown parameter: " + v[1];
   16|      1|}
   17|       |
   18|       |std::string command_cmd::help() const
   19|      4|{
   20|      4|    return "cmd - read char prom cmd fifo file for unblock video player\n";
   21|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_event.cpp:
    1|       |#include "command_event.h"
    2|       |
    3|       |command_event::command_event(const std::string &name) :command(name)
    4|     56|{
    5|       |
    6|     56|}
    7|       |
    8|       |std::string command_event::execute(std::vector<std::string> &v, thread_context *context)
    9|      7|{
   10|      7|    if (v.size() == 1){
   11|      1|        return context->myEventHandler.getListPossibleEvents();
   12|      1|    }
   13|      6|    if (v.size() == 2){
   14|      1|        return context->myEventHandler.run(v[1])->getEvent();
   15|      1|    }
   16|      5|    if (v.size() == 3 && v[2] == "clear"){
   17|      1|        context->myEventHandler.run(v[1])->clearEvent();
   18|      1|        return "event " + v[1] + " has been cleared!";
   19|      1|    }
   20|      4|    if (v.size() == 3 && v[2] == "intensity"){
   21|      1|        std::stringstream intensity;
   22|      1|        intensity << context->myEventHandler.run(v[1])->getLast1minNumberEvent();
   23|      1|        return "event " + v[1] + " " + intensity.str() +" intensity per last minute!";
   24|      1|    }
   25|      3|    if (v.size() == 4 && v[1] == "add"){
   26|      1|         context->myEventHandler.run(v[2])->addEvent(v[3]);
   27|      1|        return "event " + v[1] +" " + " added!";
   28|      1|    }
   29|      2|    if (v.size() == 5 && v[2] == "clear"){
   30|      1|        int from = std::stoi(v[3]);
   31|      1|        int to = std::stoi(v[4]);
   32|      1|        context->myEventHandler.run(v[1])->clearEvent(from, to);
   33|      1|        return "event " + v[1] + " has been cleared!";
   34|      1|    }
   35|      1|    return context->myEventHandler.help();
   36|      2|}
   37|       |
   38|       |std::string command_event::help() const
   39|      4|{
   40|      4|    std::stringstream help;
   41|      4|    help << "event- show actual event (all)" << std::endl;
   42|      4|    help << "event <name> - show one event" << std::endl;
   43|      4|    help << "event <name> clear - clear event <name>" << std::endl;
   44|      4|    help << "event <name> intensity - intensity per minute" <<std::endl;
   45|      4|    return help.str();
   46|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_gateway.cpp:
    1|       |#include <thread>
    2|       |#include <chrono>
    3|       |
    4|       |#include "command_gateway.h"
    5|       |#include "../../iDomTools/idomtools_interface.h"
    6|       |
    7|       |command_gateway::command_gateway(const std::string &name) : command(name)
    8|     17|{
    9|     17|}
   10|       |
   11|       |std::string command_gateway::execute(std::vector<std::string> &v, thread_context *context)
   12|      2|{
   13|      2|    if (v[1] == "fan")
   14|      1|    {
   15|      1|        context->main_iDomTools->turnOn433MHzSwitch("fan");
   16|      1|        return "fan on";
   17|      1|    }
   18|      1|    if (v[1] == "iDomUnlock")
   19|      0|    {
   20|      0|        context->main_iDomTools->unlockHome();
   21|      0|        return "alarm wyłączony";
   22|      0|    }
   23|      1|    else if (v[1] == "sleep")
   24|      0|    {
   25|      0|        auto sendComand = [context](int sleep, std::vector<std::string> command)
   26|      0|        {
   27|      0|            std::this_thread::sleep_for(std::chrono::minutes(sleep)); // Symulacja opóźnienia
   28|      0|            if (command.size() >= 3)
   29|      0|            {
   30|       |                // Usuń dwa pierwsze elementy
   31|      0|                command.erase(command.begin(), command.begin() + 3);
   32|      0|            }
   33|      0|            std::vector<std::string> cmd = {std::accumulate(command.begin(), command.end(), std::string(), [](const std::string &a, const std::string &b)
   34|      0|                                                            { return a.empty() ? b : a + " " + b; })};
   35|      0|            context->main_iDomTools->runCommandFromJson(cmd);
   36|       |
   37|      0|            log_file_mutex.mutex_lock();
   38|      0|            log_file_cout << DEBUG << "komenda: " << cmd.at(0) << " odłożona w czasie: " << sleep << "minut" << std::endl;
   39|      0|            log_file_mutex.mutex_unlock();
   40|      0|        };
   41|       |
   42|       |        // Uruchamianie lambdy asynchronicznie
   43|      0|        std::thread t(sendComand, std::stoi(v[2]), v);
   44|      0|        t.detach();
   45|       |
   46|      0|        return "done";
   47|      0|    }
   48|      1|    return "unknown paramiter - " + help();
   49|      1|}
   50|       |
   51|       |std::string command_gateway::help() const
   52|      5|{
   53|      5|    std::stringstream ret;
   54|      5|    ret << "gateway fan  - turn on fan" << std::endl;
   55|      5|    ret << "gateway sleep (minutes) <command>  -  run command afte some time in minutes" << std::endl;
   56|      5|    return ret.str();
   57|      5|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_hello.cpp:
    1|       |#include "command_hello.h"
    2|       |
    3|       |command_hello::command_hello(const std::string &name):command(name)
    4|     16|{}
    5|       |
    6|       |std::string command_hello::execute(std::vector<std::string> &v, thread_context *context)
    7|      1|{
    8|      1|    return "\nHI You User!\n";
    9|      1|}
   10|       |
   11|       |std::string command_hello::help() const
   12|      4|{
   13|      4|    return R"(hello - send test message to server if connection is ok, the server response: "HI!")";
   14|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_help.cpp:
    1|       |#include "command_help.h"
    2|       |
    3|       |command_help::command_help(const std::string &name,std::map <std::string, std::unique_ptr<command> >* commandMapPtr):
    4|       |    command(name),
    5|       |    commandMapPtr(commandMapPtr)
    6|     15|{
    7|     15|}
    8|       |
    9|       |std::string command_help::execute(std::vector<std::string> &v, thread_context *context)
   10|      6|{
   11|      6|    std::string result = "";
   12|      6|    if (v.size() == 2){
   13|       |
   14|      2|        if (commandMapPtr->find(v[1]) == commandMapPtr->end()){
   15|      1|            return "unknown command: "+ v[1] +" help note not found";
   16|      1|        }
   17|      1|        else{
   18|      1|            return commandMapPtr->find(v[1])->second->help();
   19|      1|        }
   20|      2|    }
   21|      4|    else
   22|      4|    {
   23|    108|        for( auto iter = commandMapPtr->begin();iter not_eq commandMapPtr->end(); ++iter ) {
   24|       |
   25|    104|            result.append(iter->second->help());
   26|    104|            result.append("------------------------------------\n");
   27|    104|        }
   28|      4|    }
   29|      4|    return result;
   30|      6|}
   31|       |
   32|       |std::string command_help::help() const
   33|      4|{
   34|      4|    return "help - show help for all command \nhelp <parameter> - show help for command\n";
   35|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_idom.cpp:
    1|       |#include "command_idom.h"
    2|       |#include "../../iDomTools/idomtools_interface.h"
    3|       |
    4|       |command_iDom::command_iDom(const std::string &name):command(name)
    5|     70|{
    6|     70|}
    7|       |
    8|       |std::string command_iDom::execute(std::vector<std::string> &v, thread_context *context)
    9|     27|{
   10|     27|    if (v.size()<2){
   11|      1|        return "need parameter!\n" + help();
   12|      1|    }
   13|     26|    if (v[1] == "speakers")
   14|      3|    {
   15|      3|        if (v[2] == "ON"){
   16|      1|            context->main_iDomTools->turnOnSpeakers();
   17|      1|            return "speakers ON";
   18|      1|        }
   19|      2|        else if (v[2] == "OFF"){
   20|      1|            context->main_iDomTools->turnOffSpeakers();
   21|      1|            return "speakers OFF";
   22|      1|        }
   23|      1|        else{
   24|      1|            return "unknow speakers action: "+v[2];
   25|      1|        }
   26|      3|    }
   27|     23|    else if (v[1] == "sunset"){
   28|      1|        return context->main_iDomTools->getSunset(true);
   29|      1|    }
   30|     22|    else if (v[1] == "sunrise"){
   31|      1|        return context->main_iDomTools->getSunrise(true);
   32|      1|    }
   33|     21|    else if (v[1] == "day" && v[2] == "lenght"){
   34|      1|        return context->main_iDomTools->getDayLenght(true);
   35|      1|    }
   36|     20|    else if (v[1] == "sun"){
   37|      1|        std::string ret;
   38|      1|        ret = context->main_iDomTools->getSunrise(true);
   39|      1|        ret.append("\n");
   40|      1|        ret.append(context->main_iDomTools->getSunset(true));
   41|      1|        ret.append("\n");
   42|      1|        ret.append(context->main_iDomTools->getDayLenght(true));
   43|      1|        ret.append("\n");
   44|      1|        return ret;
   45|      1|    }
   46|     19|    else if (v[1] == "sysinfo"){
   47|      1|        return context->main_iDomTools->getSystemInfo();
   48|      1|    }
   49|     18|    else if (v[1] == "temperature"){
   50|      2|        if(v.size() < 3){
   51|      1|            return context->main_iDomTools->getTemperatureString();
   52|      1|        }
   53|      1|        else {
   54|      1|            if (v[2] == "stats"){
   55|      1|                std::string ret;
   56|      1|                try{
   57|      1|                    ret = context->main_iDomTools->getThermoStats(v[3]);
   58|      1|                }
   59|      1|                catch (std::string& obj){
   60|      1|                    ret = obj + " " + v[3];
   61|      1|                }
   62|      1|                return ret;
   63|      1|            }
   64|      1|        }
   65|      2|    }
   66|     16|    else if (v[1] == "text"){
   67|      1|        return context->main_iDomTools->getTextToSpeach();
   68|      1|    }
   69|     15|    else if (v[1] == "lock"){
   70|      2|        context->main_iDomTools->lockHome();
   71|      2|        return "house locked";
   72|      2|    }
   73|     13|    else if (v[1] == "unlock"){
   74|      1|        context->main_iDomTools->unlockHome();
   75|      1|        return "house unlocked";
   76|      1|    }
   77|     12|    else if (v[1] == "say"){
   78|      1|        if (v.size() > 3){
   79|      1|            std::vector<std::string> vTTS = { context->main_iDomTools->getTextToSpeach()};
   80|      1|            context->main_iDomTools->textToSpeach(&vTTS);
   81|      1|            return "sad";
   82|      1|        }
   83|      1|    }
   84|     11|    else if (v[1] == "smog"){
   85|      1|        return context->main_iDomTools->getSmog().value_or("null") + " mg/m^3";
   86|      1|    }
   87|     10|    else if (v[1] == "230V"){
   88|      0|        if (v.size() > 2 && v[2] == "ON"){
   89|       |            //context->main_iDomTools->turnOnPrinter();
   90|      0|            return "230V ON";
   91|      0|        }
   92|      0|        else if(v.size() > 2 && v[2] == "OFF"){
   93|       |            //context->main_iDomTools->turnOffPrinter();
   94|      0|            return "230V OFF";
   95|      0|        }
   96|      0|        else if(v.size() > 2 && v[2] == "OUTDOOR"){
   97|      0|            context->main_iDomTools->turnOnOff230vOutdoor();
   98|      0|            return "change outdoor";
   99|      0|        }
  100|      0|        else {
  101|      0|            return "wrong paramiter";
  102|      0|        }
  103|      0|    }
  104|     10|    else if (v[1] == "wifi"){
  105|      1|        std::string readBuffer = useful_F_libs::httpPost("http://45.90.3.84/cgi-bin/kto_wifi.sh",10);
  106|      1|        return readBuffer;
  107|      1|    }
  108|       |
  109|      9|    else if (v[1] == "kill"){
  110|       |
  111|      0|        if (v[2]=="thread"){
  112|      0|            context->main_THREAD_arr->at(std::stoul(v[3]) ).thread.~thread();
  113|      0|            return "done!";
  114|      0|        }
  115|      0|    }
  116|      9|    else if (v[1] == "viber"){
  117|      0|        std::string msg;
  118|      0|        for (unsigned int i = 2; i < v.size(); ++i){
  119|      0|            msg.push_back(' ');
  120|      0|            msg.append(v[i]);
  121|      0|        }
  122|      0|        STATE stMSG = context->main_iDomTools->sendViberMsgBool(msg, context->server_settings->_fb_viber.viberReceiver.at(0),
  123|      0|                                                                context->server_settings->_fb_viber.viberSender);
  124|      0|        if(stMSG == STATE::SEND_OK){
  125|      0|            return "wiadomosc wyslana poprawnie";
  126|      0|        }
  127|      0|        else{
  128|      0|            return "blad wysylania wiadomosci - sprawdz logi";
  129|      0|        }
  130|      0|    }
  131|      9|    else if (v[1] == "weather"){
  132|       |
  133|      0|        if (v.size() < 4){
  134|      0|            return "not enough parameters";
  135|      0|        }
  136|      0|        std::string tempHTML = context->main_iDomTools->getWeatherEvent(v[2],std::stoi(v[3]));
  137|      0|        return useful_F_libs::removeHtmlTag(tempHTML);
  138|      0|    }
  139|      9|    else if (v[1] == "KODI"){
  140|      3|        return context->main_iDomTools->startKodi_Thread();
  141|      3|    }
  142|      6|    else if (v[1] == "health") {
  143|      1|        return context->iDomAlarm.showAlarm();
  144|      1|    }
  145|      5|    else if (v[1] == "isDay"){
  146|      0|        return context->main_iDomTools->isItDay() ? "isDay:true" : "isDay:false";
  147|      0|    }
  148|      5|    else if (v[1] == "blink"  and
  149|      5|             context->server_settings->_runThread.SATEL == true) {
  150|      0|        context->satelIntegraHandler->getSatelPTR()->outputOn(context->server_settings->_satel_integra.outdoor_siren_lights_id); //turn on satel output to blink outdoor siren
  151|      0|        return "done " + std::to_string(counter);
  152|      0|    }
  153|      5|    else if (v[1] == "doorbell") {
  154|       |        // context->main_iDomTools->sendViberPicture("DZWONEK do bramy!",
  155|       |        //                                           "https://png.pngtree.com/element_our/20190529/ourmid/pngtree-ring-the-doorbell-icon-image_1198163.jpg",
  156|       |        //                                           context->server_settings->_fb_viber.viberReceiver.at(0),
  157|       |        //                                           context->server_settings->_fb_viber.viberSender);   // inform  door bell has been pressed
  158|      0|        log_file_mutex.mutex_lock();
  159|      0|        log_file_cout << INFO << "Dzwonek do bramy"<< std::endl;
  160|      0|        log_file_mutex.mutex_unlock();
  161|       |        //TODO add doorbell actions if needed
  162|      0|        context->main_house_room_handler->turnOnAllInRoom("dzwonek");
  163|      0|        if(context->satelIntegraHandler != std::nullptr_t()){
  164|      0|            context->satelIntegraHandler->getSatelPTR()->outputOn(context->server_settings->_satel_integra.outdoor_siren_lights_id); //turn on satel output to blink outdoor siren in case of gate doorbell
  165|      0|        }
  166|      0|        else{
  167|      0|            log_file_mutex.mutex_lock();
  168|      0|            log_file_cout << WARNING << "Satel gateway not started!"<< std::endl;
  169|      0|            log_file_mutex.mutex_unlock();
  170|      0|        }
  171|      0|        return "done " + std::to_string(counter);
  172|      0|    }
  173|      5|    else if (v[1] == "alarm"){
  174|       |
  175|      0|        if (v.size() < 3){
  176|      0|            return "not enough parameters";
  177|      0|        }
  178|      0|        if (v[2] == "OFF"){
  179|      0|            context->alarmTime.state = STATE::DEACTIVE;
  180|      0|            context->main_Rs232->print("LED_CLOCK:0;");
  181|      0|            context->main_iDomStatus->setObjectState("alarm", context->alarmTime.state);
  182|      0|            context->main_iDomTools->saveState_iDom(context->serverStarted);
  183|      0|            context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/alarm",
  184|      0|                                          stateToString(STATE::DEACTIVE));
  185|      0|            return "alarm clock has been deactivated";
  186|      0|        }
  187|      0|        else if (v[2] == "GET"){
  188|      0|            return context->alarmTime.time.getString();
  189|      0|        }
  190|      0|        else if (v[2] == "SET" && v.size() == 5){
  191|      0|            if (v[3] == "from")
  192|      0|            {
  193|      0|                context->alarmTime.fromVolume = std::stoi(v[4]);
  194|      0|            }
  195|      0|            else if (v[3] == "to")
  196|      0|            {
  197|      0|                context->alarmTime.toVolume = std::stoi(v[4]);
  198|      0|            }
  199|      0|            else if (v[3] == "radio")
  200|      0|            {
  201|      0|                context->alarmTime.radioID = std::stoi(v[4]);
  202|      0|            }
  203|      0|            else if (v[3] == "command")
  204|      0|            {
  205|      0|                context->alarmTime.commands.push_back("light room pokoj_N on");
  206|      0|                context->alarmTime.commands.push_back("light room korytarz on");
  207|      0|            }
  208|      0|            std::stringstream ret;
  209|      0|            ret << "The values has beedn set:" << std::endl;
  210|      0|            ret << "From Value: " << context->alarmTime.fromVolume << std::endl;
  211|      0|            ret << "To Value: " << context->alarmTime.toVolume << std::endl;
  212|      0|            ret << "Radio ID: " << context->alarmTime.radioID << std::endl;
  213|      0|            context->main_iDomTools->saveState_iDom(context->serverStarted);
  214|      0|            return ret.str();
  215|      0|        }
  216|      0|        else if (v[2] == "ON" && v.size() > 3){
  217|      0|            context->alarmTime.time = Clock(v[3]);
  218|      0|            context->alarmTime.state = STATE::ACTIVE;
  219|      0|            context->main_Rs232->print("LED_CLOCK:1;");
  220|      0|            context->main_iDomStatus->setObjectState("alarm", context->alarmTime.state);
  221|      0|            context->main_iDomTools->saveState_iDom(context->serverStarted);
  222|      0|            context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/alarm",
  223|      0|                                          stateToString(STATE::ACTIVE));
  224|      0|            return "alarm clock has been activated";
  225|      0|        }
  226|       |
  227|      0|    }
  228|       |
  229|      5|    else if (v[1] == "key" && v[2] == "add")
  230|      2|    {
  231|      2|        if(v[3] == "tmp")
  232|      1|            context->m_keyHandler->addKEY(v[4],"null", std::stoul(v[5]),true);
  233|      1|        else {
  234|      1|            context->m_keyHandler->addKEY(v[3],"null", std::stoul(v[4]),false);
  235|      1|        }
  236|      2|        return context->m_keyHandler->listKEY();
  237|      2|    }
  238|      3|    else if (v[1] == "key" && v[2] == "remove" && v.size() == 4)
  239|      1|    {
  240|      1|        context->m_keyHandler->removeKEY(v[3]);
  241|      1|        return v[3] + " removed";
  242|      1|    }
  243|      2|    else if(v[1] == "link" && v.size() > 2)
  244|      1|    {
  245|      1|        v.erase(v.begin(), v.begin() + 2);
  246|      1|        return context->main_iDomTools->getLink(v);
  247|      1|    }
  248|       |    // ADD more
  249|      1|    return "iDom - unknown parameter: "+ v[1];
  250|     26|}
  251|       |
  252|       |std::string command_iDom::help() const
  253|      6|{
  254|      6|    std::stringstream help;
  255|      6|    help << "iDom - for control smart home" << std::endl;
  256|      6|    help << "iDom speakers ON/OFF - to on or off speakers" << std::endl;
  257|      6|    help << "iDom 230v ON/OFF     - to on or off printers" << std::endl;
  258|      6|    help << "iDom 230V OUTDOOR - turn on off outdoor 230v socket" << std::endl;
  259|      6|    help << "iDom sunset/sunrise/day lenght - to show those parameters" << std::endl;
  260|      6|    help << "iDom sun        - get sunrise, sunset and day lenght" << std::endl;
  261|      6|    help << "iDom sysinfo    - get system info" << std::endl;
  262|      6|    help << "iDom text       - get text to speach" << std::endl;
  263|      6|    help << "iDom say <text> - say standatrd info or <text>" << std::endl;
  264|      6|    help << "iDom sms <text> - send sms<text>" << std::endl;
  265|      6|    help << "iDom temperature - get temperature from all termomether" << std::endl;
  266|      6|    help << "iDom temperature stats <name> - get temperature stats from termomether <name>" << std::endl;
  267|      6|    help << "iDom smog       - get current SMOG level (KRAKOW)" << std::endl;
  268|      6|    help << "iDom kill thread <ID>  - kill thread but denger!" << std::endl;
  269|      6|    help << "iDom viber ...   - send viber msg" << std::endl;
  270|      6|    help << "iDom weather <city> <radius> - get weather alert" << std::endl;
  271|      6|    help << "iDom alarm ON/OFF hh:mm - set alarm clock" << std::endl;
  272|      6|    help << "iDom alarm SET from/to/radio <value> - set alarm clock" << std::endl;
  273|      6|    help << "iDom alarm GET - get alarm time" << std::endl;
  274|      6|    help << "iDom lock   - lock home" << std::endl;
  275|      6|    help << "iDom unlock - unlock home" << std::endl;
  276|      6|    help << "iDom KODI - start KODI smart TV" << std::endl;
  277|      6|    help << "iDom wifi - show all wifi client" << std::endl;
  278|      6|    help << "iDom health - get iDom server alarm health" << std::endl;
  279|      6|    help << "iDom key add ?tmp? <name> <size> - add new access key" << std::endl;
  280|      6|    help << "iDom key remove <key name> - remove access key" << std::endl;
  281|      6|    help << "iDom link < - generate temporaty link for action" << std::endl;
  282|      6|    help << "iDom doorbell - on doorbell" << std::endl;
  283|      6|    help << "iDom blink - blink outdoor siren for 5 sek" << std::endl;
  284|      6|    help << "iDom isDay - get information about day"  << std::endl;
  285|      6|    return help.str();
  286|      6|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_ip.cpp:
    1|       |#include "command_ip.h"
    2|       |
    3|       |command_ip::command_ip(const std::string &name):command(name)
    4|     16|{
    5|     16|}
    6|       |
    7|       |std::string command_ip::execute(std::vector<std::string> &v, thread_context *context)
    8|      1|{
    9|      1|    return "iDom server IP: " + context->server_settings->_server.SERVER_IP;
   10|      1|}
   11|       |
   12|       |std::string command_ip::help() const
   13|      4|{
   14|      4|    return "ip - show server IP address\n";
   15|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_light.cpp:
    1|       |#include "command_light.h"
    2|       |
    3|       |command_light::command_light(const std::string &name):command(name)
    4|     59|{
    5|     59|}
    6|       |
    7|       |std::string command_light::execute(std::vector<std::string> &v, thread_context *context)
    8|     25|{
    9|     25|    std::string str_buf = "command light - wrong paramiter:\n "+ help();
   10|     25|    if(v.size()<2)
   11|      0|        return str_buf;
   12|     25|    if (v.at(1) == "info" && v.size() < 3){
   13|      5|        str_buf = context->main_house_room_handler->getAllInfoJSON().dump(4);
   14|      5|    }
   15|     20|    else if (v.at(1) == "info" && v.at(2) == "on"){
   16|      1|        str_buf = context->main_house_room_handler->getInfoJSON_allON().dump(4);
   17|      1|    }
   18|     19|    else if(v.at(1) == "bulb"){
   19|      4|        int bulbID = std::stoi(v.at(3));
   20|      4|        if(v.at(2) == "on"){
   21|      1|            context->main_house_room_handler->turnOnBulb(bulbID);
   22|      1|        }
   23|      3|        else if(v.at(2) == "off"){
   24|      1|            context->main_house_room_handler->turnOffBulb(bulbID);
   25|      1|        }
   26|      2|        else if(v.at(2) == "change"){
   27|      2|            context->main_house_room_handler->turnChangeBulb(bulbID);
   28|      2|        }
   29|       |
   30|      4|        return "done " + std::to_string(++counter);
   31|      4|    }
   32|     15|    else if(v.at(1) == "room"){
   33|       |
   34|      3|        if(v.size() == 3 && v.at(2) == "stats"){
   35|      1|            std::stringstream msg;
   36|      3|            for(auto &j : context->main_house_room_handler->m_roomMap){
   37|      3|                msg << j.second->getStatsJSON().dump(4) << std::endl;
   38|      3|            }
   39|      1|            return msg.str();
   40|      1|        }
   41|      2|        if(v.at(3) == "on"){
   42|      1|            context->main_house_room_handler->turnOnAllInRoom(v.at(2));
   43|      1|        }
   44|      1|        else if(v.at(3) == "off"){
   45|      1|            context->main_house_room_handler->turnOffAllInRoom(v.at(2));
   46|      1|        }
   47|      0|        else if(v.at(3) == "change"){
   48|      0|            context->main_house_room_handler->changeAllInRoom(v.at(2));
   49|      0|        }
   50|       |        //TODO dodac rozpoznawanie nazwy pokoju  z wiecej niz jednym wyrazem
   51|       |
   52|       |
   53|      2|        return "done " + std::to_string(++counter);
   54|      3|    }
   55|     12|    else if(v.at(1) == "all"){
   56|      2|        if(v.at(2) == "on"){
   57|      1|            context->main_house_room_handler->turnOnAllBulb();
   58|      1|        }
   59|      1|        else if(v.at(2) == "off"){
   60|      1|            context->main_house_room_handler->turnOffAllBulb();
   61|      1|        }
   62|       |
   63|      2|        return "done " + std::to_string(++counter);
   64|      2|    }
   65|     10|    else{
   66|     10|        str_buf.erase();
   67|     10|        str_buf.append(v.at(1));
   68|     10|        std::replace( str_buf.begin(), str_buf.end(), '\n', ';');
   69|     10|        context->main_house_room_handler->executeCommandFromMQTT(str_buf);
   70|     10|    }
   71|     16|    return str_buf;
   72|     25|}
   73|       |
   74|       |std::string command_light::help() const
   75|     29|{
   76|     29|    std::stringstream ret;
   77|     29|    ret << "light info - get bulb info" << std::endl;
   78|     29|    ret << "light info on - get bulb info only on" << std::endl;
   79|     29|    ret << "light bulb on/off/change <bulbID> - turn on / off / change bulb" << std::endl;
   80|     29|    ret << "light room <room name> on/off/change - turn on / off / change all bulbs in room" << std::endl;
   81|     29|    ret << "light room stats - get all room stats json" << std::endl;
   82|     29|    ret << "light all on/off - turn on/off all bulbs in house" << std::endl;
   83|     29|    return ret.str();
   84|     29|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_log.cpp:
    1|       |#include "command_log.h"
    2|       |
    3|       |command_log::command_log(const std::string &name):command(name)
    4|     51|{
    5|     51|}
    6|       |
    7|       |std::string command_log::execute(std::vector<std::string> &v, thread_context *context)
    8|      8|{
    9|      8|    std::string msg;
   10|     16|    for (unsigned int i = 2; i < v.size(); ++i)
   11|      8|    {
   12|      8|        msg.push_back(' ');
   13|      8|        msg.append(v[i]);
   14|      8|    }
   15|      8|    log_file_mutex.mutex_lock();
   16|      8|    log_file_cout <<"USER:- " << logLevel(v[1]) << msg <<std::endl;;
   17|      8|    log_file_mutex.mutex_unlock();
   18|      8|    return "DONE!";
   19|      8|}
   20|       |
   21|       |std::string command_log::help() const
   22|      4|{
   23|      4|    std::stringstream help;
   24|      4|    help << R"(log <logLevel> "***TXT***"- add *** to iDom logfile)" << std::endl;
   25|      4|    return help.str();
   26|      4|}
   27|       |
   28|       |logger_level command_log::logLevel(const std::string &level)
   29|      8|{
   30|      8|    if (level == "VERBOSE"){
   31|      1|        return VERBOSE;
   32|      1|    }
   33|      7|    else if (level == "DEBUG"){
   34|      1|        return DEBUG;
   35|      1|    }
   36|      6|    else if (level == "INFO"){
   37|      1|        return INFO;
   38|      1|    }
   39|      5|    else if (level == "WARNING"){
   40|      1|        return WARNING;
   41|      1|    }
   42|      4|    else if (level == "ERROR"){
   43|      1|        return ERROR;
   44|      1|    }
   45|      3|    else if (level == "FATAL"){
   46|      1|        return FATAL;
   47|      1|    }
   48|      2|    else if (level == "CRITICAL"){
   49|      1|        return CRITICAL;
   50|      1|    }
   51|      1|puts ("nie mam co wysetlic wale verbose");
   52|      1|        return VERBOSE;
   53|       |
   54|      8|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_mpd.cpp:
    1|       |#include "command_mpd.h"
    2|       |#include "../../functions/functions.h"
    3|       |#include "../../iDomTools/idomtools_interface.h"
    4|       |
    5|       |command_mpd::command_mpd(const std::string &name) :command(name)
    6|     58|{
    7|     58|}
    8|       |
    9|       |std::string command_mpd::execute(std::vector<std::string> &v, thread_context *context)
   10|     15|{
   11|     15|    std::string str_buf;
   12|       |
   13|     15|    if (v[1] == "start")
   14|      2|    {
   15|      2|        if (v.size()>2)
   16|      1|        {
   17|      1|            int id = std::stoi(v[2]);
   18|      1|            if (id > 0)
   19|      1|            {
   20|      1|                context->main_iDomTools->MPD_play(context,id);
   21|      1|                useful_F::sleep(1s);
   22|      1|                str_buf = context->ptr_MPD_info->songList[id-1];
   23|      1|            }
   24|      1|        }
   25|      1|        else
   26|      1|        {
   27|      1|            context->main_iDomTools->MPD_play(context);
   28|      1|            useful_F::sleep(1s);
   29|      1|            str_buf = context->ptr_MPD_info->title;
   30|      1|        }
   31|      2|        context->main_iDomTools->saveState_iDom(context->serverStarted);
   32|      2|    }
   33|     13|    else if (v[1] == "stop")
   34|      1|    {
   35|      1|        context->main_iDomTools->MPD_stop();
   36|      1|        str_buf = "stoped!";
   37|      1|        context->main_iDomTools->saveState_iDom(context->serverStarted);
   38|      1|    }
   39|     12|    else if (v[1] == "next")
   40|      1|    {
   41|      1|        context->main_iDomTools->MPD_next();
   42|      1|        useful_F::sleep(1s);
   43|      1|        str_buf = context->ptr_MPD_info->radio + " : "+ context->ptr_MPD_info->title;
   44|      1|    }
   45|     11|    else if (v[1] == "prev")
   46|      1|    {
   47|      1|        context->main_iDomTools->MPD_prev();
   48|      1|        useful_F::sleep(1s);
   49|      1|        str_buf = context->ptr_MPD_info->radio+ " : "+ context->ptr_MPD_info->title;
   50|      1|    }
   51|     10|    else if (v[1] == "pause")
   52|      1|    {
   53|      1|        context->main_iDomTools->MPD_pause();
   54|      1|        str_buf = "paused!";
   55|      1|    }
   56|      9|    else if (v[1] == "volume")
   57|      5|    {
   58|      5|        if (v[2] == "up")
   59|      2|        {
   60|      2|            context->main_iDomTools->MPD_volumeUp();
   61|      2|        }
   62|      3|        else if (v[2] == "down")
   63|      1|        {
   64|      1|            context->main_iDomTools->MPD_volumeDown();
   65|      1|        }
   66|      2|        else
   67|      2|        {
   68|      2|            int vol = std::stoi(v[2]);
   69|      2|            if (vol >0 && vol <100)
   70|      1|            {
   71|      1|                context->main_iDomTools->MPD_volumeSet(context,vol);
   72|      1|            }
   73|      2|        }
   74|       |        //sleep(1);
   75|      5|        str_buf = std::to_string(context->ptr_MPD_info->volume);
   76|      5|    }
   77|      4|    else if (v[1] == "get")
   78|      2|    {
   79|      2|        if(v[2] == "volume")
   80|      1|        {
   81|      1|            str_buf = std::to_string(context->ptr_MPD_info->volume);
   82|      1|        }
   83|      1|        else if (v[2] == "info")
   84|      1|        {
   85|      1|            str_buf = context->ptr_MPD_info->radio + " : " + context->ptr_MPD_info->title;
   86|      1|        }
   87|      2|    }
   88|      2|    else if (v[1] == "list")
   89|      1|    {
   90|      1|        for (const auto& i : context->ptr_MPD_info->songList)
   91|      3|            str_buf.append(i + "\n");
   92|      1|    }
   93|      1|    else
   94|      1|    {
   95|      1|        str_buf = "unknown parameter " + v[1];
   96|      1|    }
   97|     15|    return str_buf;
   98|     15|}
   99|       |
  100|       |std::string command_mpd::help() const
  101|      4|{
  102|      4|    std::stringstream help;
  103|      4|    help << "MPD - for control music player:" << std::endl;
  104|      4|    help << "parameter:" << std::endl;
  105|      4|    help << "\tstart - play music" << std::endl;
  106|      4|    help << "\tstop  - stop music" << std::endl;
  107|      4|    help << "\tpause - pause music" << std::endl;
  108|      4|    help << "\tnext  - next song" << std::endl;
  109|      4|    help << "\tprev  - previous song" << std::endl;
  110|      4|    help << "\tlist  - show playlist" << std::endl;
  111|      4|    help << "\tget volume - get volume %" << std::endl;
  112|      4|    help << "\tget info - get info about current song" << std::endl;
  113|      4|    help << "\tvolume up/down - increase/decrease volume 1%" << std::endl;
  114|      4|    return help.str();
  115|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_ok.cpp:
    1|       |#include "command_ok.h"
    2|       |
    3|       |command_ok::command_ok(const std::string &name):command(name)
    4|     16|{
    5|     16|}
    6|       |
    7|       |std::string command_ok::execute(std::vector<std::string> &v, thread_context *context)
    8|      2|{
    9|      2|    return "\nEND\n";
   10|      2|}
   11|       |
   12|       |std::string command_ok::help() const
   13|      5|{
   14|      5|    return "ok - confirmation msg server response: END \n";
   15|      5|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_program.cpp:
    1|       |#include "command_program.h"
    2|       |#include "../../functions/functions.h"
    3|       |#include "../../433MHz/RFLink/rflinkhandler.h"
    4|       |#include "../../iDomTools/idomtools_interface.h"
    5|       |
    6|     23|command_program::command_program(const std::string &name):command(name){}
    7|       |
    8|       |std::string command_program::execute(std::vector<std::string> &v, thread_context *context)
    9|     13|{
   10|     13|    std::string ret = help();
   11|     13|    if (v.size() <2 )
   12|      1|    {
   13|      1|        return "what?\n" + help();
   14|      1|    }
   15|     12|    if (v[1] == "version")
   16|      1|    {
   17|      1|        std::stringstream r;
   18|      1|        const char* PROG_INFO = "iDomServer: " __DATE__ ", " __TIME__;
   19|      1|        r << "wersja " << PROG_INFO << " " << GIT_BRANCH << " " << GIT_COMMIT_HASH << std::endl;
   20|      1|        return r.str();
   21|      1|    }
   22|     11|    if (v[1] == "stop")
   23|      3|    {
   24|      3|        context->main_iDomTools->close_iDomServer();
   25|      3|        return "CLOSE";
   26|      3|    }
   27|      8|    if (v.size() < 3 )
   28|      1|    {
   29|      1|        std::cout << "cyniu size: " << v.size() << std::endl;
   30|      1|        return "add more paramiters";
   31|      1|    }
   32|      7|    if(v[1] == "reload" && v[2] == "soft"){
   33|      1|        context->main_iDomTools->reloadSoft_iDomServer();
   34|      1|        return "CLOSE";
   35|      1|    }
   36|      6|    else if(v[1] == "reload" && v[2] == "hard")
   37|      2|    {
   38|      2|        context->main_iDomTools->reloadHard_iDomServer();
   39|      2|        return "CLOSE";
   40|      2|    }
   41|      4|    else if(v[1] == "clear" && v[2] == "ram")
   42|      1|    {
   43|      1|        useful_F::runLinuxCommand("sync; echo 3 > /proc/sys/vm/drop_caches");
   44|      1|        ret = "ram has beed freed";
   45|      1|    }
   46|      3|    else if(v[1] == "debuge" && v[2] == "variable")
   47|      0|    {
   48|      0|        std::stringstream r;
   49|      0|        r << std::boolalpha;
   50|      0|        r << "context->alarmTime.fromVolume \t" << context->alarmTime.fromVolume << std::endl;
   51|      0|        r << "context->alarmTime.radioID \t" << context->alarmTime.radioID << std::endl;
   52|      0|        r << "context->alarmTime.state \t" << context->alarmTime.state << std::endl;
   53|      0|        r << "context->alarmTime.time \t" << context->alarmTime.time.getString() << std::endl;
   54|      0|        r << "context->alarmTime.toVolume \t" << context->alarmTime.toVolume << std::endl;
   55|      0|        r << "command: " << std::endl;
   56|      0|        for (const auto& k : context->alarmTime.commands)
   57|      0|        {
   58|      0|            r << k << std::endl;
   59|      0|        }
   60|      0|        r << std::endl;
   61|      0|        r << "context->encriptionKey \t" << context->encriptionKey << std::endl;
   62|      0|        r << std::endl;
   63|      0|        r << "context->server_settings->_rs232.BaudRate \t"
   64|      0|          << context->server_settings->_rs232.BaudRate << std::endl;
   65|      0|        r << "context->server_settings->_server.encrypted \t"
   66|      0|          << context->server_settings->_server.encrypted << std::endl;
   67|      0|        r << "context->server_settings->_server.ftpServer.URL \t"
   68|      0|          << context->server_settings->_server.ftpServer.URL << std::endl;
   69|      0|        r << "context->server_settings->_server.ftpServer.user \t"
   70|      0|          << context->server_settings->_server.ftpServer.user << std::endl;
   71|      0|        r << "context->server_settings->_server.ID_server \t"
   72|      0|          << context->server_settings->_server.ID_server << std::endl;
   73|      0|        r << "context->server_settings->_server.lightningApiURL \t"
   74|      0|          << context->server_settings->_server.lightningApiURL << std::endl;
   75|      0|        r << "context->server_settings->_server.MPD_IP \t"
   76|      0|          << context->server_settings->_server.MPD_IP << std::endl;
   77|      0|        r << "context->server_settings->_server.PORT \t"
   78|      0|          << context->server_settings->_server.PORT << std::endl;
   79|      0|        r << "context->server_settings->_rs232.portRS232 \t"
   80|      0|          << context->server_settings->_rs232.portRS232<< std::endl;
   81|      0|        r << "context->server_settings->_server.radio433MHzConfigFile \t"
   82|      0|          << context->server_settings->_server.radio433MHzConfigFile << std::endl;
   83|      0|        r << "context->server_settings->_rflink.RFLinkBaudRate \t"
   84|      0|          << context->server_settings->_rflink.RFLinkBaudRate<< std::endl;
   85|      0|        r << "context->server_settings->_rflink.RFLinkPort \t"
   86|      0|          << context->server_settings->_rflink.RFLinkPort<< std::endl;
   87|      0|        r << "context->server_settings->_server.saveFilePath \t"
   88|      0|          << context->server_settings->_server.saveFilePath<< std::endl;
   89|      0|        r << "context->server_settings->_server.SERVER_IP \t"
   90|      0|          << context->server_settings->_server.SERVER_IP << std::endl;
   91|      0|        r << "context->server_settings->_runThread.CRON \t"
   92|      0|          << context->server_settings->_runThread.CRON << std::endl;
   93|      0|        r << "context->server_settings->_runThread.DUMMY \t"
   94|      0|          << context->server_settings->_runThread.DUMMY << std::endl;
   95|      0|        r << "context->server_settings->_runThread.MPD \t"
   96|      0|          << context->server_settings->_runThread.MPD << std::endl;
   97|      0|        r << "context->server_settings->_runThread.RS232 \t"
   98|      0|          << context->server_settings->_runThread.RS232 << std::endl;
   99|      0|        r << "context->server_settings->_runThread.RFLink \t"
  100|      0|          << context->server_settings->_runThread.RFLink << std::endl;
  101|      0|        r << "context->server_settings->_runThread.MQTT \t"
  102|      0|          << context->server_settings->_runThread.MQTT<< std::endl;
  103|      0|        r << "context->server_settings->_server.TS_KEY \t"
  104|      0|          << context->server_settings->_server.TS_KEY<< std::endl;
  105|      0|        r << "context->server_settings->_fb_viber.viberAvatar \t"
  106|      0|          << context->server_settings->_fb_viber.viberAvatar<< std::endl;
  107|      0|        r << "context->server_settings->_fb_viber.viberReceiver.at(0) \t"
  108|      0|          << context->server_settings->_fb_viber.viberReceiver.at(0) << std::endl;
  109|      0|        r << "context->server_settings->_fb_viber.viberSender \t"
  110|      0|          << context->server_settings->_fb_viber.viberSender << std::endl;
  111|      0|        r << "context->server_settings->_fb_viber.viberToken \t"
  112|      0|          << context->server_settings->_fb_viber.viberToken << std::endl;
  113|      0|        r << "context->server_settings->_server.v_delay \t"
  114|      0|          << context->server_settings->_server.v_delay << std::endl;
  115|      0|        r << "context->server_settings->_command\t"
  116|      0|          << context->server_settings->_command.dump(4) << std::endl;
  117|      0|        r << std::endl;
  118|      0|        r << "context->server_settings->sleeper \t"
  119|      0|          << context->sleeper<< std::endl;
  120|      0|        r << std::endl;
  121|      0|        r << "context->iDomProgramState \t"
  122|      0|          << static_cast<int>(context->iDomProgramState) << std::endl;
  123|      0|        r << std::endl;
  124|      0|        r << "context->serverStarted \t"  << context->serverStarted << std::endl;
  125|      0|        r << std::endl;
  126|      0|        r << "context->main_iDomStatus \t"
  127|      0|          << context->main_iDomStatus->getAllObjectsStateString()<< std::endl;
  128|      0|        r << std::endl;
  129|      0|        r << "context->idom_all_state.houseState \t"
  130|      0|          << context->idom_all_state.houseState << std::endl;
  131|      0|        r << std::endl;
  132|      0|        r << "context->now_time \t" << context->now_time<< std::endl;
  133|      0|        r << "context->start - time \t" << context->start<< std::endl;
  134|      0|        r << std::endl;
  135|       |
  136|      0|        r << "context->ptr_MPD_info->artist \t" << context->ptr_MPD_info->artist<< std::endl;
  137|      0|        r << "context->ptr_MPD_info->currentSongID \t" << context->ptr_MPD_info->currentSongID<< std::endl;
  138|      0|        r << "context->ptr_MPD_info->isPlay \t" << context->ptr_MPD_info->isPlay<< std::endl;
  139|      0|        r << "context->ptr_MPD_info->radio \t" << context->ptr_MPD_info->radio<< std::endl;
  140|      0|        r << "context->ptr_MPD_info->songList.at(0) \t" << context->ptr_MPD_info->songList.at(0)<< std::endl;
  141|      0|        r << "context->ptr_MPD_info->title \t" << context->ptr_MPD_info->title<< std::endl;
  142|      0|        r << "context->ptr_MPD_info->volume \t" << context->ptr_MPD_info->volume<< std::endl;
  143|       |
  144|      0|        r << std::endl;
  145|      0|        r << "context->main_RFLink->okTime \t" << context->main_RFLink->m_okTime<< std::endl;
  146|      0|        r << "context->main_RFLink->pingTime \t" << context->main_RFLink->m_pingTime<< std::endl;
  147|       |
  148|      0|        r << std::endl;
  149|       |
  150|      0|        r << "context->mqttHandler->_connected: " << context->mqttHandler->_connected << std::endl;
  151|      0|        r << "context->mqttHandler->_subscribed: " << context->mqttHandler->_subscribed << std::endl;
  152|      0|        r << "buffer size:" << std::endl;
  153|       |
  154|      0|        r << "mqtt bffer: " << context->mqttHandler->getReceiveQueueSize() << std::endl;
  155|      0|        r << "rflink map size: " << context->main_RFLink->m_rflinkMAP.size() << std::endl;
  156|       |
  157|      0|        r << "alarm map size: " << context->iDomAlarm.alarmSize() << std::endl;
  158|       |
  159|      0|        r << iDom_API::getDump() << std::endl;
  160|       |
  161|      0|        r << "END.";
  162|      0|        ret = r.str();
  163|      0|    }
  164|      3|    else if(v[1] == "raspberry")
  165|      2|    {
  166|      2|        int i = useful_F::runLinuxCommand(v[2].c_str());
  167|      2|        ret = "command done with exitcode: " + std::to_string(i);
  168|      2|    }
  169|      1|    else
  170|      1|    {
  171|      1|        ret = " what? - "+ v[1];
  172|      1|    }
  173|      4|    return ret;
  174|      7|}
  175|       |
  176|       |std::string command_program::help() const
  177|     18|{
  178|     18|    std::stringstream help;
  179|     18|    help << "program version - show iDom server info " << std::endl;
  180|     18|    help << "program stop - close iDom server"<< std::endl;
  181|     18|    help << "program reload soft - reload iDom server" << std::endl;
  182|     18|    help << "program reload hard - reload iDom server" << std::endl;
  183|     18|    help << "program clear ram   - reload iDom server" << std::endl;
  184|     18|    help << "program debuge variable - show value iDom server variable" << std::endl;
  185|     18|    help << "program raspberry <command> - put command to raspberry " << std::endl;
  186|     18|    return help.str();
  187|     18|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_put.cpp:
    1|       |#include "command_put.h"
    2|       |#include "../../iDomTools/idomtools_interface.h"
    3|       |
    4|       |command_put::command_put(const std::string &name):command(name)
    5|     17|{
    6|     17|}
    7|       |
    8|       |std::string command_put::execute(std::vector<std::string> &v, thread_context *context)
    9|      2|{
   10|      2|    std::string str_buf = "command put - wrong paramiter: ";
   11|      2|    if (v.size() > 1){
   12|      2|        if (v[1] == "temperature")
   13|      1|        {
   14|      1|            str_buf.erase();
   15|      1|            context->main_iDomTools->send_data_to_thingSpeak();
   16|      1|            str_buf = "DONE";
   17|      1|        }
   18|      1|        else         if (v[1] == "influx")
   19|      1|        {
   20|      1|            str_buf.erase();
   21|      1|            context->main_iDomTools->send_data_to_influxdb();
   22|      1|            str_buf = "DONE";
   23|      1|        }
   24|      2|    }
   25|      2|    return str_buf;
   26|      2|}
   27|       |
   28|       |std::string command_put::help() const
   29|      4|{
   30|      4|    std::stringstream help;
   31|      4|    help << "put <parameter> - " << std::endl << std::endl;
   32|      4|    help << "parameter:" << std::endl;
   33|      4|    help << "\ttemperature - put actual temperature from inside and outside and smog on thingspeak\n" << std::endl;
   34|      4|    help << "\tinflux - put actual temperature from inside and outside and smog and other to influxdb\n" << std::endl;
   35|      4|    return help.str();
   36|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_shed.cpp:
    1|       |#include "command_shed.h"
    2|       |#include "../../iDomTools/idomtools_interface.h"
    3|       |
    4|       |command_shed::command_shed(const std::string &name) : command(name)
    5|     52|{
    6|     52|}
    7|       |
    8|       |std::string command_shed::execute(std::vector<std::string> &v, thread_context *context)
    9|      3|{
   10|      3|    std::stringstream str_buf;
   11|      3|    str_buf << "command shed - wrong paramiter";
   12|      3|    if (v.size() > 1)
   13|      3|    {
   14|      3|        if (v[1] == "put")
   15|      1|        {
   16|      1|            str_buf.str("");
   17|      1|            try
   18|      1|            {
   19|      1|                context->lusina.shedJson = nlohmann::json::parse(v[2]);
   20|      1|            }
   21|      1|            catch (...)
   22|      1|            {
   23|      0|                log_file_mutex.mutex_lock();
   24|      0|                log_file_cout << CRITICAL << " błąd odebranego json z shed " << v[2] << std::endl;
   25|      0|                log_file_mutex.mutex_unlock();
   26|       |                
   27|      0|                return "error 222";
   28|      0|            }
   29|      1|            context->lusina.shedFloor.push_back(context->lusina.shedJson["podłoga"].get<float>());
   30|      1|            context->lusina.shedHum.push_back(context->lusina.shedJson["wilgotność"].get<float>());
   31|      1|            context->lusina.shedPres.push_back(context->lusina.shedJson["ciśnienie"].get<float>());
   32|      1|            context->lusina.shedTemp.push_back(context->lusina.shedJson["temperatura"].get<float>());
   33|      1|            context->lusina.acdc.push_back(context->lusina.shedJson["acdc"].get<float>());
   34|      1|            str_buf << "DONE";
   35|      1|            nlohmann::json returnJson;
   36|      1|            returnJson["isDay"] = context->main_iDomTools->isItDay();
   37|      1|            returnJson["deepSleep"] = context->lusina.shedConfJson["deepSleep"].get<bool>();
   38|      1|            returnJson["howLongDeepSleep"] = context->lusina.shedConfJson["howLongDeepSleep"].get<int>();
   39|      1|            returnJson["fanON"] = context->lusina.shedConfJson["fanON"].get<bool>();
   40|      1|            context->mqttHandler->publish("iDom-domek/data", returnJson.dump());
   41|      1|        }
   42|      2|        else if (v[1] == "show")
   43|      1|        {
   44|      1|            str_buf.str("");
   45|      1|            str_buf << context->lusina.shedJson.dump(4);
   46|      1|        }
   47|      1|        else if (v[1] == "set" and v[2] == "deepSleep")
   48|      0|        {
   49|      0|            str_buf.str("");
   50|      0|            context->lusina.shedConfJson["deepSleep"] = (v[3] == "true" ? true : false);
   51|      0|            context->lusina.shedConfJson["howLongDeepSleep"] = std::stoi(v[4]);
   52|      0|            str_buf << "ustawiono deep sleep " << std::boolalpha << context->lusina.shedConfJson["deepSleep"].get<bool>() << " na " << context->lusina.shedConfJson["howLongDeepSleep"].get<int>()
   53|      0|                    << " sekund." << std::endl;
   54|      0|        }
   55|      3|    }
   56|      3|    return str_buf.str();
   57|      3|}
   58|       |
   59|       |std::string command_shed::help() const
   60|      4|{
   61|      4|    std::stringstream help;
   62|      4|    help << "shed put <json> - send data from json" << std::endl
   63|      4|         << "shed show - print json data" << std::endl
   64|      4|         << "shed set deepSleep <bool> <time> - set time for sleep  if" << std::endl;
   65|      4|    return help.str();
   66|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_show.cpp:
    1|       |#include <sstream>
    2|       |#include "command_show.h"
    3|       |#include "../../../src/functions/functions.h"
    4|       |
    5|       |command_show::command_show(const std::string &name):command(name)
    6|     25|{
    7|       |
    8|     25|}
    9|       |
   10|       |std::string command_show::execute(std::vector<std::string> &v, thread_context *context)
   11|     10|{
   12|     10|    std::string str_buf = "show what?";
   13|     10|    if (v.size() > 1){
   14|      9|        if (v[1] == "log")
   15|      4|        {
   16|      4|            if (v.size() >2 && v.size() < 4){
   17|      1|                 return useful_F::l_send_file(_logfile,v[2],true);
   18|      1|            }
   19|      3|            else if (v.size() > 3){
   20|      2|                if (v[2] == "no"){
   21|      1|                 return useful_F::l_send_file(_logfile,v[3],false);
   22|      1|                }
   23|      1|                else{
   24|      1|                    return "do you mean : show log no <string>?";
   25|      1|                }
   26|      2|            }
   27|      1|            return useful_F::l_send_file(_logfile,"");
   28|      4|        }
   29|      5|        if (v[1] == "thread")
   30|      3|        {
   31|      3|            if (v.size() < 3){
   32|      1|                return "No ID";
   33|      1|            }
   34|      2|            else {
   35|      2|                if (v [2] not_eq"all"){
   36|      1|                    std::stringstream ss;
   37|      1|                    ss << context->main_THREAD_arr->at(std::stoi(v[2])).thread_ID;
   38|      1|                    str_buf = context->main_THREAD_arr->at(std::stoi(v[2])).thread_name;
   39|      1|                    str_buf.append("ID: ");
   40|      1|                    str_buf.append(ss.str());
   41|      1|                    str_buf.append(" socket: ");
   42|      1|                    str_buf.append(std::to_string(context->main_THREAD_arr->at(std::stoi(v[2])).thread_socket));
   43|      1|                    return str_buf;
   44|      1|                }
   45|      1|                else{
   46|      1|                    str_buf.erase();
   47|      1|                    std::stringstream ss;
   48|     11|                    for (unsigned int i = 0; i < iDomConst::MAX_CONNECTION;++i)
   49|     10|                    {
   50|     10|                        ss.clear();
   51|     10|                        ss = std::stringstream();
   52|     10|                        str_buf.append(std::to_string(i) + " ");
   53|     10|                        str_buf.append(context->main_THREAD_arr->at(i).thread_name);
   54|     10|                        str_buf.append("\t ID: ");
   55|     10|                        ss << context->main_THREAD_arr->at(i).thread_ID;
   56|     10|                        str_buf.append(ss.str());
   57|     10|                        unsigned int idSocket = context->main_THREAD_arr->at(i).thread_socket;
   58|       |
   59|     10|                        if (idSocket not_eq 0 && idSocket not_eq 1){
   60|      1|                            str_buf.append(" socket: ");
   61|      1|                            str_buf.append(std::to_string(context->main_THREAD_arr->at(i).thread_socket));
   62|      1|                        }
   63|     10|                        str_buf.push_back('\n');
   64|     10|                    }
   65|      1|                    return str_buf;
   66|      1|                }
   67|      2|            }
   68|      3|        }
   69|      2|        else if (v[1] == "iDom" && v[2] == "key")
   70|      1|        {
   71|      1|            return context->m_keyHandler->listKEY();
   72|      1|        }
   73|      1|        else {
   74|      1|            return "wrong parameter: " + v[1];
   75|      1|        }
   76|      5|    }
   77|      1|    return str_buf;
   78|     10|}
   79|       |
   80|       |std::string command_show::help() const
   81|      4|{
   82|      4|    std::stringstream help;
   83|      4|    help << "show <parameter> - for show something" <<std::endl << std::endl;
   84|      4|    help << "parameter:" << std::endl;
   85|      4|    help << "\tlog             - show all server log" << std::endl;
   86|      4|    help << "\tlog <string>    - show all server log lines which contain <string>" << std::endl;
   87|      4|    help << "\tlog no <string> - show all server log lines which NO contain <string>" << std::endl;
   88|      4|    help << "\tthread all      - show all server thread pid " << std::endl;
   89|      4|    help << "\tthread <number> - show server <number> thread pid " << std::endl;
   90|      4|    help << "\tiDom key        - show all access key" << std::endl;
   91|       |
   92|      4|    return help.str();
   93|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_sleep.cpp:
    1|       |#include "command_sleep.h"
    2|       |#include "../../functions/functions.h"
    3|       |#include "../../thread_functions/iDom_thread.h"
    4|       |
    5|       |command_sleep::command_sleep(const std::string &name):command(name)
    6|     19|{
    7|     19|}
    8|       |
    9|       |std::string command_sleep::execute(std::vector<std::string> &v, thread_context *context)
   10|      5|{   if (v.size() == 1)
   11|      1|    {
   12|      1|        return "sleep set to: "+ std::to_string(context->sleeper);
   13|      1|    }
   14|      4|    else if (v.size() == 3 ){
   15|      3|        if (v[1] == "set"){
   16|      2|            int sleep = 0;
   17|      2|            try {
   18|      2|                sleep = std::stoi(v[2]);
   19|      2|            }
   20|      2|            catch (...){
   21|      1|                return "system need intiger > 0 not: " + v[2];
   22|      1|            }
   23|       |
   24|      1|            context->sleeper = sleep;
   25|       |
   26|      1|            return iDOM_THREAD::start_thread("Sleep MPD",useful_F::sleeper_mpd, context);
   27|      2|        }
   28|      1|        else {
   29|      1|            return "wrong parametr " + v[1];
   30|      1|        }
   31|      3|    }
   32|      1|    return "internal error";
   33|      5|}
   34|       |
   35|       |std::string command_sleep::help() const
   36|      4|{
   37|      4|    std::stringstream help;
   38|      4|    help << "sleep - show actual time to stop play music" << std::endl;
   39|      4|    help << "sleep set <int> - start sleep for <int> minutes" << std::endl;
   40|       |
   41|      4|    return help.str();
   42|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_state.cpp:
    1|       |#include "command_state.h"
    2|       |
    3|       |command_state::command_state(const std::string &name):command(name)
    4|     17|{
    5|     17|}
    6|       |
    7|       |std::string command_state::execute(std::vector<std::string> &v, thread_context *context)
    8|      3|{
    9|      3|    std::string ret = "need parameter!\n" + help();
   10|      3|    if (v.size() > 1)
   11|      2|    {
   12|       |
   13|      2|        if (v[1] == "all")
   14|      1|        {
   15|      1|            return context->main_iDomStatus->getAllObjectsStateString();
   16|      1|        }
   17|      1|        if (v[1] not_eq "all")
   18|      1|        {
   19|      1|            return context->main_iDomStatus->getObjectStateString(v[1]);
   20|      1|        }
   21|       |
   22|      1|    }
   23|      1|    return ret;
   24|      3|}
   25|       |
   26|       |std::string command_state::help() const
   27|      7|{
   28|      7|    std::stringstream help;
   29|      7|    help << "state all/<name> - show state" << std::endl;
   30|      7|    return help.str();
   31|      7|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_uptime.cpp:
    1|       |#include "command_uptime.h"
    2|       |#include "../../../src/functions/functions.h"
    3|       |
    4|       |command_UPTIME::command_UPTIME(const std::string &name):command(name)
    5|     16|{
    6|       |
    7|     16|}
    8|       |
    9|       |std::string command_UPTIME::execute(std::vector<std::string> &v, thread_context *context)
   10|      1|{
   11|      1|    std::string str_buf;
   12|      1|    time(&context->now_time);
   13|      1|    str_buf = "uptime: ";
   14|      1|    str_buf.append(useful_F::sek_to_uptime(difftime(context->now_time,context->start) ) );
   15|      1|    return str_buf;
   16|      1|}
   17|       |
   18|       |std::string command_UPTIME::help() const
   19|      4|{
   20|      4|    std::stringstream help;
   21|      4|    help << "uptime - show server uptime" << std::endl;
   22|      4|    return help.str();
   23|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_voice.cpp:
    1|       |#include "command_voice.h"
    2|       |#include "../libs/emoji/emoji.h"
    3|       |#include "../../iDomTools/idomtools_interface.h"
    4|       |
    5|       |command_voice::command_voice(const std::string &name): command(name)
    6|     35|{
    7|       |
    8|     35|}
    9|       |
   10|       |std::string command_voice::execute(std::vector<std::string> &v, thread_context *context)
   11|     30|{
   12|     75|    for(auto &vv : v){
   13|     75|        useful_F_libs::toLower(vv);
   14|     75|    }
   15|       |
   16|     30|    if(vectorContain(v,"włą") or vectorContain(v, "zaś")){
   17|      1|        if(vectorContain(v,"rad")){
   18|      1|            context->main_iDomTools->MPD_play(context);
   19|      1|            return "done";
   20|      1|        }
   21|      0|        else if(vectorContain(v, "świat")){
   22|      0|            for(auto &j : context->main_house_room_handler->m_roomMap){
   23|      0|                if(vectorContain(v, j.first.substr(0,5))){
   24|      0|                    context->main_house_room_handler->turnOnAllInRoom(j.first);
   25|      0|                }
   26|      0|            }
   27|      0|            return "done";
   28|      0|        }
   29|      0|        else if(vectorContain(v, "led")){
   30|      0|           (void) context->main_iDomTools->ledOn();
   31|      0|        }
   32|      0|        else if(vectorContain(v, "kodi")){
   33|      0|            context->main_iDomTools->startKodi_Thread();
   34|      0|            return "kodi run";
   35|      0|        }
   36|      1|    }
   37|     29|    else if(vectorContain(v, "wyłą") or vectorContain(v, "zgaś")){
   38|      1|        if(vectorContain(v, "radi")){
   39|      0|            context->main_iDomTools->MPD_stop();
   40|      0|            return "done";
   41|      0|        }
   42|      1|        else if(vectorContain(v, "świat")){
   43|      1|            if(vectorContain(v, "wsz") or vectorContain(v, "dom")){
   44|      1|                context->main_house_room_handler->turnOffAllBulb();
   45|      1|                return "done";
   46|      1|            }
   47|      0|            for(auto &j : context->main_house_room_handler->m_roomMap){
   48|      0|                if(vectorContain(v, j.first.substr(0,5))){
   49|      0|                    context->main_house_room_handler->turnOffAllInRoom(j.first);
   50|      0|                }
   51|      0|            }
   52|      0|            return "done";
   53|      1|        }
   54|      0|        else if(vectorContain(v, "led")){
   55|      0|            (void) context->main_iDomTools->ledOFF();
   56|      0|        }
   57|      1|    }
   58|     28|    else if(vectorContain(v, "pomru")){
   59|       |       // context->main_iDomTools
   60|      0|        return "done";
   61|      0|    }
   62|     28|    std::fstream log;
   63|     28|    log.open( "/mnt/ramdisk/command.txt", std::ios::binary | std::ios::in | std::ios::out|std::ios::app );
   64|     28|    log << "MQTT: " << v.front() << std::endl;
   65|     28|    log.close();
   66|     28|    return EMOJI::emoji(E_emoji::WARNING_SIGN) + " unknown command: "+ v.front();
   67|     30|}
   68|       |
   69|       |std::string command_voice::help() const
   70|      0|{
   71|      0|    return "TODO";
   72|      0|}
   73|       |
   74|       |bool command_voice::vectorContain(const std::vector<std::string> &vector, const std::string &str)
   75|    148|{
   76|    368|    return std::any_of(vector.cbegin(), vector.cend(), [str](const std::string & vv){return useful_F_libs::hasSubstring(vv, str);});
   77|    148|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/command_wifi.cpp:
    1|       |#include "command_wifi.h"
    2|       |
    3|       |command_wifi::command_wifi(const std::string &name):command(name)
    4|     36|{
    5|     36|}
    6|       |
    7|       |std::string command_wifi::execute(std::vector<std::string> &v, thread_context *context)
    8|      2|{
    9|      2|    return "done";
   10|      2|}
   11|       |
   12|       |std::string command_wifi::help() const
   13|      0|{
   14|      0|    return "internal wifi command";
   15|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/commandexit.cpp:
    1|       |#include "commandexit.h"
    2|       |
    3|       |commandEXIT::commandEXIT(const std::string &name):command(name)
    4|     16|{
    5|     16|}
    6|       |
    7|       |std::string commandEXIT::execute(std::vector<std::string> &v, thread_context *context)
    8|      4|{
    9|      4|    return "\nEND.\n";
   10|      4|}
   11|       |
   12|       |std::string commandEXIT::help() const
   13|      4|{
   14|      4|    return "exit - disconnect from server\n";
   15|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/commandrs232.cpp:
    1|       |#include "commandrs232.h"
    2|       |
    3|       |commandRS232::commandRS232(const std::string &name):command(name)
    4|     51|{
    5|     51|}
    6|       |
    7|       |std::string commandRS232::execute(std::vector<std::string> &v, thread_context *context)
    8|      2|{
    9|      2|    std::string str_buf = "default";
   10|       |
   11|       |
   12|      2|    if (v[1] == "send")
   13|      1|    {
   14|      1|        context->main_Rs232->print(v[2]);
   15|      1|        str_buf = "done";
   16|      1|    }
   17|      1|    else if (v[1] == "error")
   18|      0|    {
   19|      0|        if (v.size() < 3 )
   20|      0|            return "add more parameter to error";
   21|      0|        std::string msg;
   22|      0|        for (unsigned int i = 2; i < v.size(); ++i)
   23|      0|        {
   24|      0|            msg.push_back(' ');
   25|      0|            msg.append(v[i]);
   26|      0|        }
   27|      0|     }
   28|      1|    else
   29|      1|    {
   30|      1|        str_buf = ("wrong parameter: " + v[1]);
   31|      1|    }
   32|      2|    return str_buf;
   33|      2|}
   34|       |
   35|       |std::string commandRS232::help() const
   36|      4|{
   37|      4|    std::stringstream help;
   38|      4|    help << "RS232 - communication with Arduino:" << std::endl;
   39|      4|    help << "parameter:" << std::endl << std::endl;
   40|      4|    help << "\tsend <command> - send <command> to Arduino" << std::endl;
   41|       |
   42|      4|    return help.str();
   43|      4|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandClass/commandtest.cpp:
    1|       |#include "commandtest.h"
    2|       |#include "../../iDomTools/idomtools_interface.h"
    3|       |#include <signal.h>
    4|       |#include "../../functions/functions.h"
    5|       |#include <malloc.h>
    6|       |
    7|       |commandTEST::commandTEST(const std::string &name) : command(name)
    8|     18|{
    9|     18|}
   10|       |
   11|       |std::string commandTEST::execute(std::vector<std::string> &v, thread_context *context)
   12|      3|{
   13|       |
   14|      3|    if (v[1] == "test")
   15|      1|    {
   16|      1|        return "test - for test";
   17|      1|    }
   18|      2|    else if (v[1] == "throw")
   19|      1|    {
   20|      1|        throw 888;
   21|      1|    }
   22|      1|    else if (v[1] == "abort")
   23|      0|    {
   24|      0|        puts("podnosimy SEGV");
   25|      0|        raise(SIGSEGV);
   26|      0|    }
   27|      1|    else if (v[1] == "reboot")
   28|      0|    {
   29|      0|        context->main_iDomTools->raspberryReboot();
   30|      0|    }
   31|      1|    else if (v[1] == "memory")
   32|      0|    {
   33|      0|        {
   34|      0|            std::vector<int> vv;
   35|      0|            int count = std::stoi(v[2]);
   36|       |
   37|      0|            for (int i = 0; i < count; ++i)
   38|      0|            {
   39|      0|                vv.push_back(i);
   40|      0|            }
   41|      0|            useful_F::sleep(3s);
   42|      0|            std::cout << "mallocTrim: " << malloc_trim(0) << std::endl;
   43|      0|        }
   44|       |
   45|       |
   46|      0|        return "done";
   47|      0|    }
   48|      1|        else if (v[1] == "memory2")
   49|      0|    {
   50|      0|        {
   51|      0|            std::map<int, int> vv2;
   52|      0|            int count = std::stoi(v[2]);
   53|       |
   54|      0|            for (int i = 0; i < count; ++i)
   55|      0|            {
   56|      0|                vv2.insert({i,i});
   57|      0|            }
   58|      0|            useful_F::sleep(3s);
   59|      0|            std::cout << "mallocTrim: " << malloc_trim(0) << std::endl;
   60|      0|        }
   61|       |
   62|       |
   63|      0|        return "done";
   64|      0|    }
   65|      1|    return help();
   66|      3|}
   67|       |std::string commandTEST::help() const
   68|      5|{
   69|      5|    std::stringstream help;
   70|      5|    help << "test test - for test" << std::endl;
   71|      5|    help << "test throw - trow test reload program" << std::endl;
   72|      5|    return help.str();
   73|      5|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandhandler.cpp:
    1|       |#include "commandhandler.h"
    2|       |#include "../../libs/emoji/emoji.h"
    3|       |#include "commandClass/command_big.h"
    4|       |#include "commandClass/command_clock.h"
    5|       |#include "commandClass/command_hello.h"
    6|       |#include "commandClass/command_help.h"
    7|       |#include "commandClass/command_ip.h"
    8|       |#include "commandClass/command_log.h"
    9|       |#include "commandClass/command_ok.h"
   10|       |#include "commandClass/command_put.h"
   11|       |#include "commandClass/command_shed.h"
   12|       |#include "commandClass/command_show.h"
   13|       |#include "commandClass/command_uptime.h"
   14|       |#include "commandClass/commandexit.h"
   15|       |#include "commandClass/commandtest.h"
   16|       |
   17|       |commandHandler::commandHandler(thread_context * context)
   18|     15|{
   19|     15|    std::unique_ptr <command> test(new commandTEST("test") );
   20|     15|    commandMap.insert( std::make_pair(test->getCommandName(),std::move( test )) );
   21|       |
   22|     15|    std::unique_ptr <command> uptime (new command_UPTIME("uptime"));
   23|     15|    commandMap.insert(std::make_pair(uptime->getCommandName(), std::move(uptime)));
   24|       |
   25|     15|    std::unique_ptr <command> big (new command_big("big"));
   26|     15|    commandMap.insert(std::make_pair(big->getCommandName(), std::move(big)));
   27|       |
   28|     15|    std::unique_ptr <command> clock (new command_clock("clock"));
   29|     15|    commandMap.insert(std::make_pair(clock->getCommandName(), std::move(clock)));
   30|       |
   31|     15|    std::unique_ptr <command> hello (new command_hello("hello"));
   32|     15|    commandMap.insert(std::make_pair(hello->getCommandName(), std::move(hello)));
   33|       |
   34|     15|    std::unique_ptr <command> help (new command_help("help", &commandMap));
   35|     15|    commandMap.insert(std::make_pair(help->getCommandName(), std::move(help)));
   36|       |
   37|     15|    std::unique_ptr <command> ip (new command_ip("ip"));
   38|     15|    commandMap.insert(std::make_pair(ip->getCommandName(), std::move(ip)));
   39|       |
   40|     15|    std::unique_ptr <command> ok (new command_ok("ok"));
   41|     15|    commandMap.insert(std::make_pair(ok->getCommandName(), std::move(ok)));
   42|       |
   43|     15|    std::unique_ptr <command> show (new command_show("show"));
   44|     15|    commandMap.insert(std::make_pair(show->getCommandName(), std::move(show)));
   45|       |
   46|     15|    std::unique_ptr <command> put (new command_put("put"));
   47|     15|    commandMap.insert(std::make_pair(put->getCommandName(), std::move(put)));
   48|       |
   49|     15|    std::unique_ptr <command> log (new command_log("log"));
   50|     15|    commandMap.insert(std::make_pair(log->getCommandName(), std::move(log)));
   51|       |
   52|     15|    std::unique_ptr <command> eexit(new commandEXIT("exit"));
   53|     15|    commandMap.insert( std::make_pair(eexit->getCommandName(),std::move( eexit )) );
   54|       |
   55|     15|    std::unique_ptr <command> shed(new command_shed("shed"));
   56|     15|    commandMap.insert(std::make_pair(shed->getCommandName(), std::move(shed)));
   57|       |
   58|     15|    this->context = context;
   59|     15|}
   60|       |
   61|       |std::string commandHandler::run(std::vector<std::string> &v, thread_context *context)
   62|     17|{
   63|     17|    if (commandMap.find(v.front()) == commandMap.end()){
   64|      2|        std::fstream log;
   65|      2|        log.open( "/mnt/ramdisk/command.txt", std::ios::binary | std::ios::in | std::ios::out|std::ios::app );
   66|      2|        log << v.front() << std::endl;
   67|      2|        log.close();
   68|      2|        return EMOJI::emoji(E_emoji::WARNING_SIGN) + " unknown command: "+ v.front();
   69|      2|    }
   70|     15|    else{
   71|     15|        return commandMap[v.front()]->execute(v, context);
   72|     15|    }
   73|     17|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandhandler.h:
    1|       |#pragma once
    2|       |
    3|       |#include <string>
    4|       |#include <vector>
    5|       |#include <map>
    6|       |#include <memory>
    7|       |#include "../iDom_server_OOP.h"
    8|       |#include "../command/command.h"
    9|       |
   10|       |class commandHandler
   11|       |{
   12|       |    thread_context *context;
   13|       |
   14|       |public:
   15|       |    std::map<std::string, std::unique_ptr<command>> commandMap;
   16|       |    explicit commandHandler(thread_context *context);
   17|     15|    virtual ~commandHandler() = default;
   18|       |    virtual std::string run(std::vector<std::string> &v, thread_context *context);
   19|       |};
   20|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandhandlergateway.cpp:
    1|       |#include "commandhandlergateway.h"
    2|       |#include "../libs/emoji/emoji.h"
    3|       |#include "commandClass/command_gateway.h"
    4|       |#include "../iDomTools/idomtools_interface.h"
    5|       |
    6|       |commandHandlerGATEWAY::commandHandlerGATEWAY(thread_context *context) : commandHandler(context)
    7|      1|{
    8|      1|    std::unique_ptr<command> gateway(new command_gateway("gateway"));
    9|      1|    commandMap.insert(std::make_pair(gateway->getCommandName(), std::move(gateway)));
   10|      1|}
   11|       |
   12|       |std::string commandHandlerGATEWAY::run(std::vector<std::string> &v, thread_context *context)
   13|      1|{
   14|      1|    if (v.size() < 3)
   15|      1|    {
   16|      1|        return "not enough parameters";
   17|      1|    }
   18|       |
   19|      0|    context->main_iDomTools->sendViberMsg("iDom gateway run command",
   20|      0|                                          context->server_settings->_fb_viber.viberReceiver.at(0),
   21|      0|                                          context->server_settings->_fb_viber.viberSender + "GATEWAY");
   22|       |
   23|      0|    if (context->m_keyHandler->useKEY(v.front(), v[1]) == false)
   24|      0|    {
   25|      0|        return EMOJI::emoji(E_emoji::WARNING_SIGN) + " wrong key! ";
   26|      0|    }
   27|       |
   28|      0|    v.erase(v.begin(), v.begin() + 2);
   29|       |
   30|      0|    if (commandMap.find(v.front()) == commandMap.end())
   31|      0|    {
   32|      0|        std::fstream log;
   33|      0|        log.open("/mnt/ramdisk/command.txt", std::ios::binary | std::ios::in | std::ios::out | std::ios::app);
   34|      0|        log << "MQTT: " << v.front() << std::endl;
   35|      0|        log.close();
   36|      0|        return EMOJI::emoji(E_emoji::WARNING_SIGN) + " unknown command: " + v.front();
   37|      0|    }
   38|      0|    else
   39|      0|    {
   40|      0|        return commandMap[v.front()]->execute(v, context);
   41|      0|    }
   42|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandhandlermqtt.cpp:
    1|       |#include "commandhandlermqtt.h"
    2|       |#include "commandClass/command_433mhz.h"
    3|       |#include "commandClass/commandrs232.h"
    4|       |#include "commandClass/command_mpd.h"
    5|       |#include "commandClass/command_event.h"
    6|       |#include "commandClass/command_log.h"
    7|       |#include "commandClass/command_wifi.h"
    8|       |#include "commandClass/command_buderus.h"
    9|       |#include "commandClass/command_light.h"
   10|       |#include "commandClass/command_idom.h"
   11|       |#include "commandClass/command_voice.h"
   12|       |#include "commandClass/command_shed.h"
   13|       |
   14|       |CommandHandlerMQTT::CommandHandlerMQTT()
   15|     35|{
   16|     35|    std::unique_ptr<command> r_433MHz(new command_433MHz("433MHz"));
   17|     35|    commandMap.insert(std::make_pair(r_433MHz->getCommandName(), std::move(r_433MHz)));
   18|       |
   19|     35|    std::unique_ptr<command> MPD(new command_mpd("MPD"));
   20|     35|    commandMap.insert(std::make_pair(MPD->getCommandName(), std::move(MPD)));
   21|       |
   22|     35|    std::unique_ptr<command> RS232(new commandRS232("RS232"));
   23|     35|    commandMap.insert(std::make_pair(RS232->getCommandName(), std::move(RS232)));
   24|       |
   25|     35|    std::unique_ptr<command> log(new command_log("log"));
   26|     35|    commandMap.insert(std::make_pair(log->getCommandName(), std::move(log)));
   27|       |
   28|     35|    std::unique_ptr<command> event(new command_event("event"));
   29|     35|    commandMap.insert(std::make_pair(event->getCommandName(), std::move(event)));
   30|       |
   31|     35|    std::unique_ptr<command> wifi(new command_wifi("wifi"));
   32|     35|    commandMap.insert(std::make_pair(wifi->getCommandName(), std::move(wifi)));
   33|       |
   34|     35|    std::unique_ptr<command> buderus(new command_buderus("buderus"));
   35|     35|    commandMap.insert(std::make_pair(buderus->getCommandName(), std::move(buderus)));
   36|       |
   37|     35|    std::unique_ptr<command> light(new command_light("light"));
   38|     35|    commandMap.insert(std::make_pair(light->getCommandName(), std::move(light)));
   39|       |
   40|     35|    std::unique_ptr<command> idom(new command_iDom("iDom"));
   41|     35|    commandMap.insert(std::make_pair(idom->getCommandName(), std::move(idom)));
   42|       |
   43|     35|    std::unique_ptr<command> voice(new command_voice("voice"));
   44|     35|    commandMap.insert(std::make_pair(voice->getCommandName(), std::move(voice)));
   45|       |
   46|     35|    std::unique_ptr<command> shed(new command_shed("shed"));
   47|     35|    commandMap.insert(std::make_pair(shed->getCommandName(), std::move(shed)));
   48|     35|}
   49|       |
   50|       |std::string CommandHandlerMQTT::run(std::vector<std::string> &v, thread_context *context)
   51|     44|{
   52|     44|    if (commandMap.find(v.front()) == commandMap.end())
   53|     30|    {
   54|       |        /* std::fstream log;
   55|       |         log.open( "/mnt/ramdisk/command.txt", std::ios::binary | std::ios::in | std::ios::out|std::ios::app );
   56|       |         log << "MQTT: " << v.front() << std::endl;
   57|       |         log.close();
   58|       |         return EMOJI::emoji(E_emoji::WARNING_SIGN) + " unknown command: "+ v.front();*/
   59|     30|        return commandMap["voice"]->execute(v, context);
   60|     30|    }
   61|     14|    else
   62|     14|    {
   63|     14|        return commandMap[v.front()]->execute(v, context);
   64|     14|    }
   65|     44|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandhandlermqtt.h:
    1|       |#pragma once
    2|       |
    3|       |#include <string>
    4|       |
    5|       |#include "../iDom_server_OOP.h"
    6|       |#include "../command/command.h"
    7|       |
    8|       |class CommandHandlerMQTT
    9|       |{
   10|       |    std::map<std::string, std::unique_ptr<command>> commandMap;
   11|       |
   12|       |public:
   13|       |    CommandHandlerMQTT();
   14|     35|    ~CommandHandlerMQTT() = default;
   15|       |    std::string run(std::vector<std::string> &v, thread_context *context);
   16|       |};
   17|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandhandlerroot.cpp:
    1|       |#include "commandhandlerroot.h"
    2|       |#include "commandClass/command_cmd.h"
    3|       |#include "commandClass/command_event.h"
    4|       |#include "commandClass/command_433mhz.h"
    5|       |#include "commandClass/command_mpd.h"
    6|       |#include "commandClass/commandrs232.h"
    7|       |#include "commandClass/command_idom.h"
    8|       |#include "commandClass/command_program.h"
    9|       |#include "commandClass/command_ardu.h"
   10|       |#include "commandClass/command_state.h"
   11|       |#include "commandClass/command_sleep.h"
   12|       |#include "commandClass/command_gateway.h"
   13|       |#include "commandClass/command_buderus.h"
   14|       |#include "commandClass/command_light.h"
   15|       |
   16|       |commandHandlerRoot::commandHandlerRoot(thread_context *context) : commandHandler(context)
   17|     14|{
   18|     14|    std::unique_ptr<command> gateway(new command_gateway("gateway"));
   19|     14|    commandMap.insert(std::make_pair(gateway->getCommandName(), std::move(gateway)));
   20|       |
   21|     14|    std::unique_ptr<command> cmd(new command_cmd("cmd"));
   22|     14|    commandMap.insert(std::make_pair(cmd->getCommandName(), std::move(cmd)));
   23|       |
   24|     14|    std::unique_ptr<command> event(new command_event("event"));
   25|     14|    commandMap.insert(std::make_pair(event->getCommandName(), std::move(event)));
   26|       |
   27|     14|    std::unique_ptr<command> r_433MHz(new command_433MHz("433MHz"));
   28|     14|    commandMap.insert(std::make_pair(r_433MHz->getCommandName(), std::move(r_433MHz)));
   29|       |
   30|     14|    std::unique_ptr<command> program(new command_program("program"));
   31|     14|    commandMap.insert(std::make_pair(program->getCommandName(), std::move(program)));
   32|       |
   33|     14|    std::unique_ptr<command> MPD(new command_mpd("MPD"));
   34|     14|    commandMap.insert(std::make_pair(MPD->getCommandName(), std::move(MPD)));
   35|       |
   36|     14|    std::unique_ptr<command> RS232(new commandRS232("RS232"));
   37|     14|    commandMap.insert(std::make_pair(RS232->getCommandName(), std::move(RS232)));
   38|       |
   39|     14|    std::unique_ptr<command> iDom(new command_iDom("iDom"));
   40|     14|    commandMap.insert(std::make_pair(iDom->getCommandName(), std::move(iDom)));
   41|       |
   42|     14|    std::unique_ptr<command> state(new command_state("state"));
   43|     14|    commandMap.insert(std::make_pair(state->getCommandName(), std::move(state)));
   44|       |
   45|     14|    std::unique_ptr<command> ardu(new command_ardu("ardu", context));
   46|     14|    commandMap.insert(std::make_pair(ardu->getCommandName(), std::move(ardu)));
   47|       |
   48|     14|    std::unique_ptr<command> sleep(new command_sleep("sleep"));
   49|     14|    commandMap.insert(std::make_pair(sleep->getCommandName(), std::move(sleep)));
   50|       |
   51|     14|    std::unique_ptr<command> buderus(new command_buderus("buderus"));
   52|     14|    commandMap.insert(std::make_pair(buderus->getCommandName(), std::move(buderus)));
   53|       |
   54|     14|    std::unique_ptr<command> light(new command_light("light"));
   55|     14|    commandMap.insert(std::make_pair(light->getCommandName(), std::move(light)));
   56|     14|}
   57|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/commandhandlerrs232.cpp:
    1|       |#include "commandhandlerrs232.h"
    2|       |
    3|       |commandHandlerRS232::commandHandlerRS232(thread_context *context) : commandHandlerRoot(context)
    4|      1|{
    5|      1|}
    6|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/command/test/commandhandler_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "../commandhandlerrs232.h"
    4|       |#include "../commandhandlermqtt.h"
    5|       |#include "../commandhandlergateway.h"
    6|       |#include "../../RADIO_433_eq/radio_433_eq.h"
    7|       |#include "../../iDomTools/mock/iDomToolsMock.h"
    8|       |#include "../../iDomTools/test/iDomTools_fixture.h"
    9|       |#include "../../HOUSE/house_room_handler.h"
   10|       |#include "../../functions/functions.h"
   11|       |
   12|       |class command_handler_main : public testing::Test
   13|       |{
   14|       |public:
   15|       |    command_handler_main() : test_rec(std::make_shared<RADIO_EQ_CONTAINER>(&test_context)),
   16|       |                             main_iDomTools(std::make_shared<iDomToolsMock>()),
   17|       |                             testRoomHandler(std::make_shared<house_room_handler>(&test_context))
   18|      5|    {
   19|      5|        test_server_settings._server.radio433MHzConfigFile = "/mnt/ramdisk/433_eq_conf.json";
   20|      5|        test_context.server_settings = &test_server_settings;
   21|      5|        test_rec->loadConfig(test_server_settings._server.radio433MHzConfigFile);
   22|      5|        test_context.main_REC = test_rec;
   23|      5|        test_context.main_iDomTools = main_iDomTools;
   24|      5|        testRoomHandler->loadConfig("../config/bulb_config.json");
   25|      5|        test_context.main_house_room_handler = testRoomHandler;
   26|      5|        useful_F::myStaticCtx = &test_context;
   27|      5|    }
   28|       |    thread_context test_context;
   29|       |    std::shared_ptr<RADIO_EQ_CONTAINER> test_rec;
   30|       |    CONFIG_JSON test_server_settings;
   31|       |    std::vector<std::string> test_v;
   32|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   33|       |    std::shared_ptr<house_room_handler> testRoomHandler;
   34|       |};
   35|       |
   36|       |class command_handler_rs232_fixture : public command_handler_main
   37|       |{
   38|       |public:
   39|       |    command_handler_rs232_fixture() : test_chRS232(std::make_unique<commandHandlerRS232>(&test_context))
   40|      1|    {
   41|      1|    }
   42|       |
   43|       |protected:
   44|       |    std::unique_ptr<commandHandlerRS232> test_chRS232;
   45|       |};
   46|       |
   47|       |TEST_F(command_handler_rs232_fixture, main)
   48|      1|{
   49|      1|    test_v.push_back("ok");
   50|      1|    auto ret = test_chRS232->run(test_v, &test_context);
   51|      1|    EXPECT_STREQ(ret.c_str(), "\nEND\n");
   52|      1|}
   53|       |
   54|       |///////////////////////////////////////////////////////////////////////////////////////////////////
   55|       |class command_handler_mqtt_fixture : public command_handler_main
   56|       |{
   57|       |public:
   58|       |    command_handler_mqtt_fixture() : test_chMQTT(std::make_unique<CommandHandlerMQTT>())
   59|      3|    {
   60|      3|    }
   61|       |
   62|       |protected:
   63|       |    std::unique_ptr<CommandHandlerMQTT> test_chMQTT;
   64|       |};
   65|       |
   66|       |TEST_F(command_handler_mqtt_fixture, main)
   67|      1|{
   68|      1|    test_v.push_back("wifi");
   69|      1|    auto ret = test_chMQTT->run(test_v, &test_context);
   70|      1|    EXPECT_STREQ(ret.c_str(), "done");
   71|      1|}
   72|       |
   73|       |TEST_F(command_handler_mqtt_fixture, unknown_command)
   74|      1|{
   75|      1|    time(&test_context.start);
   76|      1|    test_v.clear();
   77|      1|    test_v.push_back("fake");
   78|      1|    auto ret = test_chMQTT->run(test_v, &test_context);
   79|      1|    std::cout << "DATA: " << ret << std::endl;
   80|      1|    EXPECT_THAT(ret, testing::HasSubstr("unknown"));
   81|      1|}
   82|       |
   83|       |TEST_F(command_handler_mqtt_fixture, voice_mqtt)
   84|      1|{
   85|      1|    time(&test_context.start);
   86|      1|    test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("cyniu");
   87|      1|    test_v.clear();
   88|      1|    test_v.push_back("radIo");
   89|      1|    test_v.push_back("włąCz");
   90|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_play(testing::_));
   91|      1|    auto ret = test_chMQTT->run(test_v, &test_context);
   92|      1|    std::cout << "DATA: " << ret << std::endl;
   93|      1|    EXPECT_THAT(ret, testing::HasSubstr("done"));
   94|       |
   95|      1|    test_v.clear();
   96|      1|    test_v.push_back("światła");
   97|      1|    test_v.push_back("wszędzie");
   98|      1|    test_v.push_back("wyłąCz");
   99|      1|    test_chMQTT->run(test_v, &test_context);
  100|      1|}
  101|       |
  102|       |///////////////////////////////////////////////////////////////////////////////////////////////////
  103|       |class command_handler_gateway_fixture : public command_handler_main
  104|       |{
  105|       |public:
  106|       |    command_handler_gateway_fixture() : test_chGATEWAY(std::make_unique<commandHandlerGATEWAY>(&test_context))
  107|      1|    {
  108|      1|    }
  109|       |
  110|       |protected:
  111|       |    std::unique_ptr<commandHandlerGATEWAY> test_chGATEWAY;
  112|       |};
  113|       |
  114|       |TEST_F(command_handler_gateway_fixture, not_enough_parameters)
  115|      1|{
  116|      1|    time(&test_context.start);
  117|      1|    test_v.clear();
  118|      1|    test_v.push_back("fake");
  119|      1|    auto ret = test_chGATEWAY->run(test_v, &test_context);
  120|      1|    std::cout << "DATA: " << ret << std::endl;
  121|      1|    EXPECT_THAT(ret, testing::HasSubstr("not enough parameters"));
  122|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/dbClient/DB_DATA.hpp:
    1|       |#pragma once
    2|       |
    3|       |#include <unordered_map>
    4|       |#include <string>
    5|       |#include <optional>
    6|       |#include <any>
    7|       |
    8|       |class DB_DATA
    9|       |{
   10|       |public:
   11|       |   uint64_t timestamp;
   12|       |   std::unordered_map<std::string, std::unordered_map<std::string, std::optional<std::any>>> data;
   13|       |   DB_DATA(uint64_t _timestamp, const std::unordered_map<std::string, std::unordered_map<std::string, std::optional<std::any>>>& _data):
   14|       |   timestamp(_timestamp), data(_data)
   15|      0|   {
   16|       |    
   17|      0|   }
   18|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/dbClient/db-client-factory.cpp:
    1|       |#include "db-client-factory.hpp"
    2|       |
    3|       |std::unique_ptr<dbClientIf> dbClientFactory::createDbClient()
    4|      0|{
    5|      0|    if (m_db == std::nullptr_t())
    6|      0|        return std::make_unique<dbClient>();
    7|      0|    else
    8|      0|        return std::move(m_db);
    9|      0|}
   10|       |
   11|       |std::unique_ptr<dbClientIf> dbClientFactory::m_db = std::nullptr_t();

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/dbClient/db-client-if.hpp:
    1|       |#pragma once
    2|       |
    3|       |#include <string>
    4|       |#include <unordered_map>
    5|       |#include <any>
    6|       |#include <utility>
    7|       |#include <optional>
    8|       |#include <stdint.h>
    9|       |
   10|       |#include "../../libs/httpStatusCode/httpStatusCode.hpp"
   11|       |#include "../../src/iDom_server_OOP.h"
   12|       |
   13|       |class dbClientIf
   14|       |{
   15|       |public:
   16|       |	virtual HttpStatus::Code upload_iDomData(const std::unordered_map<std::string, std::unordered_map<std::string, std::optional<std::any>>> &, uint64_t, DATABASE* config ) = 0;
   17|       |	virtual HttpStatus::Code uploadBulbData(const std::string &, bool, std::optional<uint64_t> timestamp = std::nullopt, DATABASE* config = std::nullptr_t()) = 0;
   18|       |
   19|      0|	virtual ~dbClientIf() = default;
   20|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/dbClient/db-client.cpp:
    1|       |#include "db-client.hpp"
    2|       |#include "../../libs/influxm/client.h"
    3|       |#include "../../src/iDom_server_OOP.h"
    4|       |#include "../../src/functions/functions.h"
    5|       |
    6|       |#include <iostream>
    7|       |#include <experimental/source_location>
    8|       |
    9|       |HttpStatus::Code dbClient::upload_iDomData(const std::unordered_map<std::string, std::unordered_map<std::string, std::optional<std::any>>> &iDomData, uint64_t timestamp, DATABASE *config)
   10|      1|{
   11|      1|    char points[4096];
   12|      1|    int code2 = 204;
   13|       |
   14|      1|    influx_client::flux::Client client(
   15|      1|        config->ip,
   16|      1|        config->port,
   17|      1|        config->token,
   18|      1|        config->org,
   19|      1|        config->bucket);
   20|       |
   21|      1|    if (iDomData.at("smog").at("smog").has_value())
   22|      0|    {
   23|      0|        std::vector<influx_client::kv_t> tags;
   24|      0|        std::vector<influx_client::kv_t> fields;
   25|      0|        fields.emplace_back("smog", std::any_cast<float>(iDomData.at("smog").at("smog").value()));
   26|      0|        auto code = client.write("smog", tags, fields);
   27|      0|        code2 = code;
   28|      0|    }
   29|      1|    else
   30|      1|    {
   31|      1|        log_file_mutex.mutex_lock();
   32|      1|        log_file_cout << WARNING << "brak pozycji smog - " << std::experimental::fundamentals_v2::source_location::current().function_name() << std::endl;
   33|      1|        log_file_mutex.mutex_unlock();
   34|      1|    }
   35|      1|    {
   36|      1|        std::vector<influx_client::kv_t> fields;
   37|      1|        if (iDomData.at("temperatura").at("outdoor").has_value())
   38|      0|        {
   39|      0|            fields.emplace_back("outdoor", std::any_cast<float>(iDomData.at("temperatura").at("outdoor").value()));
   40|      0|        }
   41|      1|        if (iDomData.at("temperatura").at("inside").has_value())
   42|      0|        {
   43|      0|            fields.emplace_back("inside", std::any_cast<float>(iDomData.at("temperatura").at("inside").value()));
   44|      0|        }
   45|      1|        if (iDomData.at("temperatura").at("floor").has_value())
   46|      0|        {
   47|      0|            fields.emplace_back("floor", std::any_cast<float>(iDomData.at("temperatura").at("floor").value()));
   48|      0|        }
   49|      1|        if (iDomData.at("temperatura").at("bojler").has_value())
   50|      0|        {
   51|      0|            fields.emplace_back("bojler", std::any_cast<double>(iDomData.at("temperatura").at("bojler").value()));
   52|      0|        }
   53|      1|        if (iDomData.at("temperatura").at("domek").has_value())
   54|      0|        {
   55|      0|            fields.emplace_back("domek", std::any_cast<double>(iDomData.at("temperatura").at("domek").value()));
   56|      0|        }
   57|      1|        if (iDomData.at("temperatura").at("flow").has_value())
   58|      0|        {
   59|      0|            fields.emplace_back("flow", std::any_cast<double>(iDomData.at("temperatura").at("flow").value()));
   60|      0|        }
   61|      1|        if (iDomData.at("temperatura").at("shedTemp").has_value())
   62|      0|        {
   63|      0|            fields.emplace_back("shedTemp", std::any_cast<float>(iDomData.at("temperatura").at("shedTemp").value()));
   64|      0|        }
   65|       |
   66|      1|        if (fields.size() > 0)
   67|      0|        {
   68|      0|            std::vector<influx_client::kv_t> tags;
   69|      0|            auto code = client.write("temperatura", tags, fields);
   70|      0|            if (code2 == 204)
   71|      0|                code2 = code;
   72|      0|        }
   73|      1|        else
   74|      1|        {
   75|      1|            log_file_mutex.mutex_lock();
   76|      1|            log_file_cout << WARNING << "brak pozycji temepratura - " << std::experimental::fundamentals_v2::source_location::current().function_name() << std::endl;
   77|      1|            log_file_mutex.mutex_unlock();
   78|      1|        }
   79|      1|    }
   80|       |
   81|      1|    if (iDomData.at("wilgoc").at("humi").has_value())
   82|      0|    {
   83|      0|        std::vector<influx_client::kv_t> tags;
   84|      0|        std::vector<influx_client::kv_t> fields;
   85|      0|        fields.emplace_back("humi", std::any_cast<float>(iDomData.at("wilgoc").at("humi").value()));
   86|      0|        auto code = client.write("wilgoc", tags, fields);
   87|      0|        if (code2 == 204)
   88|      0|            code2 = code;
   89|      0|    }
   90|      1|    else
   91|      1|    {
   92|      1|        log_file_mutex.mutex_lock();
   93|      1|        log_file_cout << WARNING << "brak pozycji wilgoc humi - " << std::experimental::fundamentals_v2::source_location::current().function_name() << std::endl;
   94|      1|        log_file_mutex.mutex_unlock();
   95|      1|    }
   96|       |
   97|      1|    if (iDomData.at("cisnienie").at("dom").has_value())
   98|      0|    {
   99|      0|        std::vector<influx_client::kv_t> tags;
  100|      0|        std::vector<influx_client::kv_t> fields;
  101|      0|        fields.emplace_back("dom", std::any_cast<float>(iDomData.at("cisnienie").at("dom").value()));
  102|      0|        auto code = client.write("cisnienie", tags, fields);
  103|      0|        if (code2 == 204)
  104|      0|            code2 = code;
  105|      0|    }
  106|      1|    else
  107|      1|    {
  108|      1|        log_file_mutex.mutex_lock();
  109|      1|        log_file_cout << WARNING << "brak pozycji cisnienie dom - " << std::experimental::fundamentals_v2::source_location::current().function_name() << std::endl;
  110|      1|        log_file_mutex.mutex_unlock();
  111|      1|    }
  112|      1|    if (iDomData.at("acdc").at("acdc").has_value())
  113|      0|    {
  114|      0|        std::vector<influx_client::kv_t> tags;
  115|      0|        std::vector<influx_client::kv_t> fields;
  116|      0|        fields.emplace_back("acdc", std::any_cast<float>(iDomData.at("acdc").at("acdc").value()));
  117|      0|        auto code = client.write("acdc", tags, fields);
  118|      0|        if (code2 == 204)
  119|      0|            code2 = code;
  120|      0|    }
  121|       |
  122|      1|    else
  123|      1|    {
  124|      1|        log_file_mutex.mutex_lock();
  125|      1|        log_file_cout << WARNING << "brak pozycji acdc  - " << std::experimental::fundamentals_v2::source_location::current().function_name() << std::endl;
  126|      1|        log_file_mutex.mutex_unlock();
  127|      1|    }
  128|      1|    if (iDomData.at("piec").at("praca").has_value())
  129|      0|    {
  130|      0|        std::vector<influx_client::kv_t> tags;
  131|      0|        std::vector<influx_client::kv_t> fields;
  132|      0|        fields.emplace_back("praca", std::any_cast<bool>(iDomData.at("piec").at("praca").value()));
  133|      0|        auto code = client.write("piec", tags, fields);
  134|      0|        if (code2 == 204)
  135|      0|            code2 = code;
  136|      0|    }
  137|      1|    else
  138|      1|    {
  139|      1|        log_file_mutex.mutex_lock();
  140|      1|        log_file_cout << WARNING << "brak pozycji praca piec - " << std::experimental::fundamentals_v2::source_location::current().function_name() << std::endl;
  141|      1|        log_file_mutex.mutex_unlock();
  142|      1|    }
  143|       |
  144|      1|    return HttpStatus::Code(code2);
  145|      1|}
  146|       |
  147|       |HttpStatus::Code dbClient::uploadBulbData(const std::string &name, bool state, std::optional<uint64_t> timestamp, DATABASE *config)
  148|      0|{
  149|      0|    if (config == std::nullptr_t())
  150|      0|    {
  151|      0|        log_file_mutex.mutex_lock();
  152|      0|        log_file_cout << CRITICAL << "DATABASE *config null ptr " << std::experimental::fundamentals_v2::source_location::current().function_name() << std::endl;
  153|      0|        log_file_mutex.mutex_unlock();
  154|      0|        return HttpStatus::Code::FailedDependency;
  155|      0|    }
  156|      0|    influx_client::flux::Client client(
  157|      0|        config->ip,
  158|      0|        config->port,
  159|      0|        config->token,
  160|      0|        config->org,
  161|      0|        config->bucket);
  162|       |
  163|      0|    if (timestamp.has_value())
  164|      0|    {
  165|      0|        auto code = client.write(
  166|      0|            "bulb",
  167|      0|            {},
  168|      0|            {{name, state}},
  169|      0|            timestamp.value());
  170|      0|        return HttpStatus::Code(code);
  171|      0|    }
  172|      0|    auto code = client.write(
  173|      0|        "bulb",
  174|      0|        {},
  175|      0|        {{name, state}});
  176|      0|    return HttpStatus::Code(code);
  177|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/dbClient/db-client.hpp:
    1|       |#pragma once
    2|       |
    3|       |#include "db-client-if.hpp"
    4|       |
    5|       |class dbClient : public dbClientIf
    6|       |{
    7|       |public:
    8|      1|	dbClient() = default;
    9|       |	~dbClient() = default;
   10|       |	HttpStatus::Code upload_iDomData(const std::unordered_map<std::string, std::unordered_map<std::string, std::optional<std::any>>> &iDomData, uint64_t timestamp, DATABASE* config);
   11|       |	HttpStatus::Code uploadBulbData(const std::string &name, bool state, std::optional<uint64_t> timestamp = std::nullopt, DATABASE* config = std::nullptr_t());
   12|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/dbClient/test/bt.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include <memory>
    4|       |
    5|       |#include "../db-client.hpp"
    6|       |#include "../../../src/iDom_server_OOP.h"
    7|       |
    8|       |class db_client_fixture : public testing::Test
    9|       |{
   10|       |public:
   11|      1|    db_client_fixture() {};
   12|       |    
   13|       |    DATABASE config;
   14|       |protected:
   15|       |};
   16|       |
   17|       |TEST_F(db_client_fixture, main_TC)
   18|      1|{
   19|      1|    std::unordered_map<std::string, std::unordered_map<std::string, std::optional<std::any>>> iDomData;
   20|      1|    iDomData["temperatura"]["outdoor"] = std::nullopt;
   21|      1|    iDomData["temperatura"]["inside"] = std::nullopt;
   22|      1|    iDomData["temperatura"]["floor"] = std::nullopt;
   23|      1|    iDomData["temperatura"]["bojler"] = std::nullopt;
   24|      1|    iDomData["temperatura"]["domek"] = std::nullopt;
   25|      1|    iDomData["temperatura"]["flow"] = std::nullopt;
   26|      1|    iDomData["temperatura"]["shedTemp"] = std::nullopt;
   27|       |
   28|      1|    iDomData["wilgoc"]["humi"] = std::nullopt;
   29|      1|    iDomData["smog"]["smog"] = std::nullopt;
   30|      1|    iDomData["cisnienie"]["dom"] = std::nullopt;
   31|      1|    iDomData["piec"]["praca"] = std::nullopt;
   32|      1|    iDomData["acdc"]["acdc"] = std::nullopt;
   33|       |
   34|      1|    config.ip = "127.0.0.1";
   35|      1|    config.port = 1223;
   36|      1|    config.token = "asdasdasda";
   37|      1|    config.org = "testogr";
   38|      1|    config.bucket = "test";
   39|      1|    dbClient clinet;
   40|      1|    EXPECT_NO_THROW(clinet.upload_iDomData(iDomData, 111, &config));
   41|       |
   42|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/functions/functions2.cpp:
    1|       |#include <fstream>
    2|       |#include <iostream>
    3|       |#include <iterator>
    4|       |#include <netdb.h>
    5|       |#include <vector>
    6|       |#include <experimental/source_location>
    7|       |
    8|       |#include "functions.h"
    9|       |#include "../thread_functions/iDom_thread.h"
   10|       |#include "../command/commandhandlergateway.h"
   11|       |#include "../command/commandhandlerroot.h"
   12|       |#include "../c_connection/c_connection.h"
   13|       |#include "../iDomTools/idomtools_interface.h"
   14|       |#include <cstddef>
   15|       |
   16|       |std::vector<std::string> useful_F::split(const std::string &s, char separator)
   17|     53|{
   18|     53|    std::vector<std::string> output;
   19|     53|    std::string::size_type prev_pos = 0, pos = 0;
   20|       |
   21|    179|    while ((pos = s.find(separator, pos)) not_eq std::string::npos)
   22|    126|    {
   23|    126|        std::string substring(s.substr(prev_pos, pos - prev_pos));
   24|    126|        output.push_back(substring);
   25|    126|        prev_pos = ++pos;
   26|    126|    }
   27|     53|    try
   28|     53|    {
   29|     53|        output.push_back(s.substr(prev_pos, pos - prev_pos)); // Last word
   30|     53|    }
   31|     53|    catch (...)
   32|     53|    {
   33|      0|        log_file_mutex.mutex_lock();
   34|      0|        log_file_cout << CRITICAL << "wyjatek substr() w useful_F::split() !!!!!!" << std::endl;
   35|      0|        log_file_mutex.mutex_unlock();
   36|      0|    }
   37|     53|    return output;
   38|     53|}
   39|       |
   40|       |thread_context *useful_F::myStaticCtx = std::nullptr_t();
   41|       |
   42|       |void useful_F::setStaticData(thread_context *contextPtr)
   43|     13|{
   44|     13|    myStaticCtx = contextPtr;
   45|     13|}
   46|       |
   47|       |void useful_F::tokenizer(std::vector<std::string> &command,
   48|       |                         const std::string &separator,
   49|       |                         const std::string &text)
   50|     16|{
   51|     16|    std::string temp;
   52|       |
   53|     16|    for (const char &n : text)
   54|    136|    { // the initializer may be an array
   55|       |
   56|    136|        if (!std::any_of(separator.cbegin(), separator.cend(), [n](int y)
   57|    376|                         { return n == y; }))
   58|    124|            temp.push_back(n);
   59|     12|        else
   60|     12|        {
   61|     12|            if (!temp.empty())
   62|     12|            {
   63|     12|                command.push_back(temp);
   64|     12|                temp.clear();
   65|     12|            }
   66|     12|        }
   67|    136|    }
   68|     16|    if (!temp.empty())
   69|     14|        command.push_back(temp);
   70|       |
   71|     16|    if (command.size() == 0)
   72|      2|    {
   73|      2|        log_file_mutex.mutex_lock();
   74|      2|        log_file_cout << CRITICAL << "throw useful_F::tokenizer()" << std::endl;
   75|      2|        log_file_mutex.mutex_unlock();
   76|      2|        throw std::string("command empty");
   77|      2|    }
   78|     16|}
   79|       |
   80|       |////// watek sleeper
   81|       |void useful_F::sleeper_mpd(thread_context *context, const std::string &threadName)
   82|      2|{
   83|      2|    context->main_Rs232->print("LED_CLOCK:1;");
   84|      2|    unsigned int t = 60 / context->sleeper;
   85|      2|    unsigned int k = 0;
   86|       |
   87|     14|    for (; context->sleeper > 0; context->sleeper--)
   88|     12|    {
   89|     12|        useful_F::sleep(60s);
   90|     12|        k += t;
   91|     12|        context->main_iDomTools->ledClear(0, k);
   92|     12|    }
   93|      2|    context->main_iDomTools->ledOFF();
   94|      2|    context->main_iDomTools->MPD_stop();
   95|      2|    context->main_iDomTools->turnOff433MHzSwitch("listwa");
   96|       |
   97|      2|    log_file_mutex.mutex_lock();
   98|      2|    log_file_cout << INFO << "zaczynam procedure konca watku " << threadName << std::endl;
   99|      2|    log_file_mutex.mutex_unlock();
  100|       |
  101|      2|    context->main_Rs232->print("LED_CLOCK:0;");
  102|       |
  103|      2|    iDOM_THREAD::stop_thread(threadName, context);
  104|       |
  105|      2|    log_file_mutex.mutex_lock();
  106|      2|    log_file_cout << INFO << "koniec watku SLEEP_MPD" << std::endl;
  107|      2|    log_file_mutex.mutex_unlock();
  108|      2|}
  109|       |
  110|       |///////////////////////////////////////////////////////////////////////////////////////////////////// watek kodi
  111|       |void useful_F::kodi(thread_context *context, const std::string &threadName)
  112|      1|{
  113|      1|    log_file_mutex.mutex_lock();
  114|      1|    log_file_cout << INFO << "start wątku " << threadName << std::endl;
  115|      1|    log_file_mutex.mutex_unlock();
  116|       |
  117|      1|    context->main_iDomStatus->setObjectState("KODI", STATE::ACTIVE);
  118|       |    // status mpd
  119|      1|    STATE musicState = context->main_iDomStatus->getObjectState("music");
  120|       |    // status glosnikow
  121|      1|    STATE speakersState = context->main_iDomStatus->getObjectState("speakers");
  122|       |
  123|      1|    if (musicState not_eq STATE::STOP)
  124|      1|        context->main_iDomTools->MPD_pause();
  125|      1|    if (speakersState not_eq STATE::ON)
  126|      0|        context->main_iDomTools->turnOnSpeakers();
  127|       |    // system
  128|       |
  129|      1|    int ret = useful_F::runLinuxCommand("runuser -u pi kodi");
  130|       |
  131|      1|    if (ret not_eq 0)
  132|      0|    {
  133|      0|        log_file_mutex.mutex_lock();
  134|      0|        log_file_cout << CRITICAL << "kodi zamkniete z błędem " << ret << std::endl;
  135|      0|        log_file_mutex.mutex_unlock();
  136|      0|    }
  137|       |    // przywracanie danych
  138|       |
  139|      1|    if (musicState == STATE::PLAY)
  140|      1|        context->main_iDomTools->MPD_play(context);
  141|      0|    else
  142|      0|        context->main_iDomTools->turnOffSpeakers();
  143|       |    // koniec
  144|      1|    context->main_key_menu_handler->timeout();
  145|      1|    context->main_iDomStatus->setObjectState("KODI", STATE::DEACTIVE);
  146|      1|    iDOM_THREAD::stop_thread("kodi smartTV", context);
  147|      1|}
  148|       |
  149|       |std::string useful_F::RSHash(const std::string &data, unsigned int b, unsigned int a)
  150|     24|{
  151|     24|    time_t act_time;
  152|     24|    struct tm *act_date;
  153|     24|    time(&act_time);
  154|     24|    act_date = localtime(&act_time);
  155|     24|    char buffer3[10];
  156|     24|    strftime(buffer3, 10, "%M%H%w", act_date);
  157|     24|    std::string str(buffer3);
  158|     24|    str.append(data);
  159|     24|    unsigned int hash = 0;
  160|       |
  161|    176|    for (std::size_t i = 0; i < str.length(); i++)
  162|    152|    {
  163|    152|        hash = hash * a + str[i];
  164|    152|        a = a * b;
  165|    152|    }
  166|     24|    return std::to_string((hash & 0x7FFFFFFF));
  167|     24|}
  168|       |
  169|       |std::string useful_F::sek_to_uptime(long long secy)
  170|      2|{
  171|      2|    const int min = 60;     // s
  172|      2|    const int houry = 3600; // s
  173|      2|    const int day = 86400;  // s
  174|      2|    int number_day, number_hour, number_min, number_sec;
  175|      2|    int temp1, temp2, temp3;
  176|      2|    number_day = secy / day;
  177|      2|    std::stringstream text;
  178|      2|    text << "\n"
  179|      2|         << number_day << " day ";
  180|      2|    temp1 = secy % day;
  181|      2|    number_hour = temp1 / houry;
  182|      2|    text << number_hour << " hours ";
  183|      2|    temp2 = temp1 % houry;
  184|      2|    number_min = temp2 / min;
  185|      2|    text << number_min << " minutes ";
  186|      2|    temp3 = temp2 % min;
  187|      2|    number_sec = temp3;
  188|      2|    text << number_sec << " seconds";
  189|      2|    return text.str();
  190|      2|}
  191|       |
  192|       |// wysylanie pliku
  193|       |std::string useful_F::l_send_file(const std::string &path, const std::string &find, bool reverse)
  194|      3|{
  195|      3|    std::string str_buf;
  196|      3|    if (find.empty() == true)
  197|      1|    {
  198|      1|        std::fstream log_file;
  199|      1|        log_file.open(path.c_str(), std::ios::in);
  200|      1|        if (log_file.good() == false)
  201|      0|        {
  202|      0|            return " can not open file !";
  203|      0|        }
  204|      1|        else
  205|      1|        {
  206|      1|            str_buf.erase();
  207|  21.1k|            while (!log_file.eof())
  208|  21.1k|            {
  209|  21.1k|                str_buf.push_back(static_cast<char>(log_file.get()));
  210|  21.1k|            }
  211|      1|            str_buf.erase(str_buf.length() - 1, str_buf.length());
  212|       |
  213|      1|            log_file.close();
  214|      1|        }
  215|      1|    }
  216|      2|    else
  217|      2|    {
  218|      2|        std::fstream log_file;
  219|      2|        log_file.open(path.c_str(), std::ios::in);
  220|      2|        if (log_file.good() == false)
  221|      0|        {
  222|      0|            return " can not open file !";
  223|      0|        }
  224|      2|        else
  225|      2|        {
  226|      2|            str_buf.erase();
  227|      2|            std::string str_temp;
  228|    592|            while (std::getline(log_file, str_temp))
  229|    590|            {
  230|    590|                if (reverse)
  231|    296|                {
  232|    296|                    if (std::string::npos not_eq str_temp.find(find))
  233|    177|                    {
  234|    177|                        str_buf.append(str_temp);
  235|    177|                        str_buf.append("\n");
  236|    177|                    }
  237|    119|                    else
  238|    119|                    {
  239|    119|                        if (str_buf.size() < 3)
  240|      1|                        {
  241|      1|                            str_buf.append("    ");
  242|      1|                        }
  243|    119|                    }
  244|    296|                }
  245|    294|                else
  246|    294|                {
  247|    294|                    if (std::string::npos == str_temp.find(find))
  248|    118|                    {
  249|    118|                        str_buf.append(str_temp);
  250|    118|                        str_buf.append("\n");
  251|    118|                    }
  252|    294|                }
  253|    590|                if (str_buf.size() < 3)
  254|      0|                {
  255|      0|                    str_buf.append("    ");
  256|      0|                }
  257|    590|            }
  258|      2|        }
  259|      2|        log_file.close();
  260|      2|    }
  261|      3|    return str_buf;
  262|      3|}
  263|       |
  264|       |///////////////////// watek polaczenia TCP /////////////////////////////////////
  265|       |void useful_F::Server_connectivity_thread(thread_context *context, const std::string &threadName)
  266|     11|{
  267|     11|    auto client = std::make_unique<C_connection>(context);
  268|     11|    static unsigned int connectionCounter = 0;
  269|     11|    bool key_ok = false;
  270|     11|    std::string tm = inet_ntoa(context->from.sin_addr);
  271|       |
  272|     11|    if (tm.find("192.168.13.18") != std::string::npos)
  273|      0|    {
  274|      0|        if (++connectionCounter > 9)
  275|      0|        {
  276|      0|            connectionCounter = 0;
  277|      0|            context->main_iDomTools->sendViberMsg("ktoś kombinuje z polaczeniem do serwera!",
  278|      0|                                                  context->server_settings->_fb_viber.viberReceiver.at(0),
  279|      0|                                                  context->server_settings->_fb_viber.viberSender + "_ALERT!");
  280|      0|        }
  281|      0|        client->setEncrypted(false);
  282|      0|    }
  283|     11|    else
  284|     11|    {
  285|     11|        connectionCounter = 0;
  286|     11|    }
  287|       |
  288|     11|    log_file_mutex.mutex_lock();
  289|     11|    log_file_cout << INFO << threadName << ": polaczenie z adresu " << tm << std::endl;
  290|     11|    log_file_mutex.mutex_unlock();
  291|     11|    context->myEventHandler.run("connections")->addEvent(tm);
  292|     11|    context->main_Rs232->print("LED_AT:1;");
  293|       |
  294|     11|    int recvSize_tm = client->c_recv(0);
  295|       |
  296|     11|    if (recvSize_tm == -1)
  297|      0|    {
  298|      0|        log_file_mutex.mutex_lock();
  299|      0|        log_file_cout << CRITICAL << "CLOSE, AUTHENTICATION FAILED! " << inet_ntoa(context->from.sin_addr) << std::endl;
  300|      0|        log_file_mutex.mutex_unlock();
  301|       |
  302|      0|        context->main_Rs232->print("LED_AT:0;");
  303|      0|        iDOM_THREAD::stop_thread(threadName, context);
  304|      0|        return;
  305|      0|    }
  306|     11|    std::string KEY_OWN = useful_F::RSHash();
  307|     11|    client->setEncriptionKey(KEY_OWN);
  308|     11|    std::string KEY_rec = client->c_read_buf(recvSize_tm);
  309|       |
  310|     11|    if (KEY_rec == KEY_OWN) // stop runing idom_server
  311|      8|    {
  312|      8|        key_ok = true;
  313|      8|        if (client->c_send("OK") == -1)
  314|      1|        {
  315|      1|            std::cout << "FAKE CONNECTION send OK" << std::endl;
  316|      1|            key_ok = false;
  317|      1|        }
  318|      8|    }
  319|      3|    else
  320|      3|    {
  321|      3|        auto KEY_rec2 = KEY_rec;
  322|      3|        client->cryptoLog(KEY_rec2);
  323|       |
  324|      3|        if (useful_F_libs::hasSubstring(KEY_rec2, "HTTP"))
  325|      1|        {
  326|      1|            client->handleHTTP(KEY_rec2);
  327|       |
  328|      1|            context->main_Rs232->print("LED_AT:0;");
  329|      1|            iDOM_THREAD::stop_thread(threadName, context);
  330|      1|            return;
  331|      1|        }
  332|       |
  333|      2|        key_ok = false;
  334|      2|        log_file_mutex.mutex_lock();
  335|      2|        log_file_cout << CRITICAL << "AUTHENTICATION FAILED! " << inet_ntoa(context->from.sin_addr) << std::endl;
  336|      2|        log_file_cout << CRITICAL << "KEY RECIVED: " << KEY_rec << " KEY SERVER: " << KEY_OWN << std::endl;
  337|      2|        client->cryptoLog(KEY_rec); // setEncriptionKey(KEY_rec);
  338|      2|        log_file_cout << CRITICAL << "KEY UNCRIPTED RECIVED\n\n " << KEY_rec << "\n\n"
  339|      2|                      << std::endl;
  340|      2|        log_file_mutex.mutex_unlock();
  341|       |
  342|      2|        std::string msg = "podano zły klucz autentykacji - sprawdz logi ";
  343|      2|        msg.append(inet_ntoa(context->from.sin_addr));
  344|      2|        context->main_iDomTools->sendViberMsg(msg,
  345|      2|                                              context->server_settings->_fb_viber.viberReceiver.at(0),
  346|      2|                                              context->server_settings->_fb_viber.viberSender + "_ALERT!");
  347|       |
  348|      2|        if (client->c_send("\nFAIL\n") == -1)
  349|      1|        {
  350|      1|            context->main_Rs232->print("LED_AT:0;");
  351|      1|            iDOM_THREAD::stop_thread(threadName, context);
  352|      1|            return;
  353|      1|        }
  354|      2|    }
  355|       |    /// ///////////////////////user level
  356|      9|    {
  357|      9|        int recvSize_tm_n = client->c_recv(0);
  358|      9|        if (recvSize_tm_n == -1)
  359|      2|        {
  360|      2|            context->main_Rs232->print("LED_AT:0;");
  361|      2|            iDOM_THREAD::stop_thread(threadName, context);
  362|      2|            return;
  363|      2|        }
  364|       |
  365|      7|        std::string userLevel = client->c_read_buf(recvSize_tm_n);
  366|      7|        client->c_send("OK you are " + userLevel);
  367|       |
  368|      7|        if (userLevel == "ROOT")
  369|      7|        {
  370|      7|            client->m_mainCommandHandler = std::make_unique<commandHandlerRoot>(context);
  371|      7|        }
  372|      0|        else if (userLevel == "GATEWAY")
  373|      0|        {
  374|      0|            client->m_mainCommandHandler = std::make_unique<commandHandlerGATEWAY>(context);
  375|      0|        }
  376|      0|        else
  377|      0|        {
  378|      0|            client->m_mainCommandHandler = std::make_unique<commandHandler>(context);
  379|      0|        }
  380|      7|    }
  381|     17|    while (useful_F::go_while && key_ok)
  382|     17|    {
  383|     17|        int recvSize_tm_n = client->c_recv(0);
  384|     17|        if (recvSize_tm_n == -1)
  385|      6|        {
  386|      6|            break;
  387|      6|        }
  388|       |        // ########################### analiza wiadomosci ####################################//
  389|     11|        try
  390|     11|        {
  391|     11|            client->c_analyse(recvSize_tm_n);
  392|     11|        }
  393|     11|        catch (std::string &s)
  394|     11|        {
  395|      0|            puts("close server - throw");
  396|      0|            useful_F::workServer = false;
  397|      0|            client->c_send("CLOSE");
  398|      0|            break;
  399|      0|        }
  400|     11|        catch (const std::exception &e)
  401|     11|        {
  402|      0|            log_file_mutex.mutex_lock();
  403|      0|            log_file_cout << CRITICAL << "złapano wyjatek: " << e.what() << " w " << std::experimental::fundamentals_v2::source_location::current().function_name() << std::endl;
  404|      0|            log_file_mutex.mutex_unlock();
  405|      0|            break;
  406|      0|        }
  407|       |
  408|       |        // ############################### koniec analizy wysylanie wyniku do RS232 lub TCP ########################
  409|     11|        if (client->c_send(0) == -1)
  410|      1|        {
  411|      1|            perror("send() ERROR");
  412|      1|            break;
  413|      1|        }
  414|     11|    }
  415|      7|    client->onStopConnection();
  416|      7|    context->main_Rs232->print("LED_AT:0;");
  417|      7|#ifdef BT_TEST
  418|      7|    puts("zamykamy server");
  419|      7|    useful_F::workServer = false; // wylacz nasluchwianie servera
  420|      7|#endif
  421|      7|    iDOM_THREAD::stop_thread(threadName, context);
  422|      7|}
  423|       |
  424|       |// przerobka adresu na ip . //////////////////////////////////
  425|       |std::string useful_F::conv_dns(const std::string &temp)
  426|     11|{
  427|       |
  428|     11|    int i;
  429|     11|    struct hostent *he;
  430|     11|    struct in_addr **addr_list;
  431|     11|    std::string s_ip;
  432|       |
  433|     11|    if ((he = gethostbyname(temp.c_str())) == NULL)
  434|      0|    {
  435|      0|        herror("gethostbyname");
  436|      0|        return "- 1";
  437|      0|    }
  438|       |    // print information about this host:
  439|     11|    printf("Official name is: %s\n", he->h_name);
  440|     11|    printf("IP addresses: ");
  441|     11|    addr_list = (struct in_addr **)(he->h_addr_list);
  442|       |
  443|     22|    for (i = 0; addr_list[i] not_eq NULL; i++)
  444|     11|    {
  445|     11|        printf("%s ", inet_ntoa(*addr_list[i]));
  446|     11|        s_ip += inet_ntoa(*addr_list[i]);
  447|     11|    }
  448|     11|    printf("\ndone ");
  449|     11|    return s_ip;
  450|     11|}
  451|       |
  452|       |void useful_F::startServer(thread_context *context, TASKER *my_tasker)
  453|     11|{
  454|     11|    struct sockaddr_in server;
  455|     11|    memset(&server, 0, sizeof(server));
  456|     11|    int v_socket;
  457|     11|    int SERVER_PORT = context->server_settings->_server.PORT;
  458|     11|    server.sin_family = AF_INET;
  459|     11|    server.sin_port = htons(SERVER_PORT);
  460|       |
  461|     11|    if (context->server_settings->_server.SERVER_IP == "auto")
  462|      0|    {
  463|      0|        server.sin_addr.s_addr = INADDR_ANY;
  464|      0|    }
  465|     11|    else
  466|     11|    {
  467|       |
  468|     11|        context->server_settings->_server.SERVER_IP =
  469|     11|            useful_F::conv_dns(context->server_settings->_server.SERVER_IP);
  470|     11|        const char *SERVER_IP = context->server_settings->_server.SERVER_IP.c_str();
  471|       |
  472|     11|        if (inet_pton(AF_INET, SERVER_IP, &server.sin_addr) <= 0)
  473|      0|        {
  474|      0|            perror("inet_pton() ERROR");
  475|      0|            exit(-1);
  476|      0|        }
  477|     11|    }
  478|     11|    if ((v_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0)
  479|      0|    {
  480|      0|        perror("socket() ERROR");
  481|      0|        exit(-1);
  482|      0|    }
  483|       |
  484|     11|    if (fcntl(v_socket, F_SETFL, O_NONBLOCK) < 0) // fcntl()
  485|      0|    {
  486|      0|        perror("fcntl() ERROR");
  487|      0|        exit(-1);
  488|      0|    }
  489|       |    // zgub wkurzający komunikat błędu "address already in use"
  490|     11|    int yes = 1;
  491|     11|    if (setsockopt(v_socket, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) == -1)
  492|      0|    {
  493|      0|        perror("setsockopt");
  494|      0|        exit(1);
  495|      0|    }
  496|     11|    socklen_t len = sizeof(server);
  497|     11|    if (bind(v_socket, (struct sockaddr *)&server, len) < 0)
  498|      0|    {
  499|      0|        log_file_mutex.mutex_lock();
  500|      0|        log_file_cout << CRITICAL << "BIND problem: " << strerror(errno) << std::endl;
  501|      0|        log_file_cout << CRITICAL << "awaryjne ! zamykanie gniazda " << shutdown(v_socket, SHUT_RDWR) << std::endl;
  502|      0|        log_file_mutex.mutex_unlock();
  503|      0|        perror("bind() ERROR");
  504|      0|        exit(-1);
  505|      0|    }
  506|       |
  507|     11|    if (listen(v_socket, iDomConst::MAX_CONNECTION) < 0)
  508|      0|    {
  509|      0|        log_file_mutex.mutex_lock();
  510|      0|        log_file_cout << CRITICAL << "Listen problem: " << strerror(errno) << std::endl;
  511|      0|        log_file_mutex.mutex_unlock();
  512|      0|        perror("listen() ERROR");
  513|      0|        exit(-1);
  514|      0|    }
  515|     11|    struct sockaddr_in from;
  516|     11|    context->main_Rs232->print("LED_POWER:1;");
  517|     65|    while (1)
  518|     65|    {
  519|     65|        int v_sock_ind = 0;
  520|     65|        memset(&from, 0, sizeof(from));
  521|     65|        if (!useful_F::workServer)
  522|     11|        {
  523|     11|            break;
  524|     11|        }
  525|       |
  526|       |        ///////////////////////////////////// TASKER //////////////////////////////////////////
  527|       |        /// call Tasker, if Tasker has a lot of work to do, we cut waiting times
  528|     54|        int delayMS = my_tasker->runTasker();
  529|     54|        std::this_thread::sleep_for(std::chrono::milliseconds(delayMS));
  530|       |
  531|     54|        if ((v_sock_ind = accept(v_socket, (struct sockaddr *)&from, &len)) < 0)
  532|     42|        {
  533|     42|            continue;
  534|     42|        }
  535|       |
  536|       |        //////////////////////// jest połacznie wiec wstawiamy je do nowego watku i umieszczamy id watku w tablicy w pierwszym wolnym miejscu ////////////////////
  537|       |
  538|     12|        int freeSlotID = iDOM_THREAD::findFreeThreadSlot(context->main_THREAD_arr);
  539|       |
  540|     12|        if (freeSlotID not_eq -1)
  541|     11|        {
  542|     11|            context->s_client_sock = v_sock_ind;
  543|     11|            context->from = from;
  544|     11|            iDOM_THREAD::start_thread(inet_ntoa(context->from.sin_addr),
  545|     11|                                      useful_F::Server_connectivity_thread,
  546|     11|                                      context,
  547|     11|                                      v_sock_ind);
  548|     11|        }
  549|      1|        else
  550|      1|        {
  551|      1|            log_file_mutex.mutex_lock();
  552|      1|            log_file_cout << INFO << "za duzo klientow " << std::endl;
  553|      1|            log_file_mutex.mutex_unlock();
  554|       |
  555|      1|            if ((send(v_sock_ind, "za duzo kientow \nEND.\n", 22, MSG_DONTWAIT)) <= 0)
  556|      0|            {
  557|      0|                perror("send() ERROR");
  558|      0|                break;
  559|      0|            }
  560|      1|            continue;
  561|      1|        }
  562|     12|    } // while
  563|     11|    close(v_socket);
  564|       |
  565|     11|    context->main_Rs232->print("LED_POWER:0;");
  566|     11|    log_file_mutex.mutex_lock();
  567|     11|    log_file_cout << INFO << "zamykanie gniazda wartosc " << shutdown(v_socket, SHUT_RDWR) << std::endl;
  568|     11|    log_file_cout << ERROR << "gniazdo ind " << strerror(errno) << std::endl;
  569|     11|    log_file_cout << INFO << "koniec programu " << std::endl;
  570|     11|    log_file_mutex.mutex_unlock();
  571|       |    // zamykam gniazdo
  572|     11|}
  573|       |
  574|       |CONFIG_JSON useful_F::configJsonFileToStruct(nlohmann::json jj)
  575|      1|{
  576|      1|    CONFIG_JSON cj;
  577|      1|#ifdef BT_TEST
  578|      1|    std::cout << "json: " << jj.dump(4);
  579|      1|#endif /////////////////////// server settings
  580|      1|    cj._server.PORT = jj["Server_settings"].at("PORT").get<int>();
  581|      1|    cj._server.encrypted = jj["Server_settings"].at("ENCRYPTED").get<bool>();
  582|      1|    cj._server.viber_notification = jj["Server_settings"].at("viber_notification").get<bool>();
  583|      1|    cj._server.ID_server = jj["Server_settings"].at("ID").get<int>();
  584|      1|    cj._server.SERVER_IP = jj["Server_settings"].at("SERVER_IP").get<std::string>();
  585|      1|    cj._server.saveFilePath = jj["Server_settings"].at("saveFilePath").get<std::string>();
  586|      1|    cj._server.radio433MHzConfigFile = jj["433MHz_settings"].at("433MHz_config").get<std::string>();
  587|      1|    cj._server.TS_KEY = jj["THINGSPEAK_settings"].at("TS_KEY").get<std::string>();
  588|      1|    cj._server.TS_KEY2 = jj["THINGSPEAK_settings"].at("TS_KEY2").get<std::string>();
  589|      1|    cj._server.lightningApiURL = jj["lightning_settings"].at("LIGHTNING_API_URL").get<std::string>();
  590|      1|    cj._server.MPD_IP = jj["MPD_settings"].at("MPD_IP").get<std::string>();
  591|      1|    cj._server.keyDatabasePath = jj["Server_settings"].at("key_DB_PATH").get<std::string>();
  592|       |    /////////////////////// viber
  593|      1|    cj._fb_viber.viberToken = jj["viber_settings"].at("VIBER_TOKEN").get<std::string>();
  594|      1|    cj._fb_viber.viberAvatar = jj["viber_settings"].at("VIBER_AVATAR").get<std::string>();
  595|      1|    cj._fb_viber.viberSender = jj["viber_settings"].at("VIBER_SENDER").get<std::string>();
  596|      1|    for (auto &k : jj["viber_settings"].at("VIBER_RECEIVER"))
  597|      2|    {
  598|      2|        cj._fb_viber.viberReceiver.push_back(k.get<std::string>());
  599|      2|    }
  600|       |    /////////////////////// thread settings
  601|      1|    cj._runThread.MPD = jj["THREAD"].at("MPD").at("run").get<bool>();
  602|      1|    cj._runThread.RFLink = jj["THREAD"].at("RFLink").at("run").get<bool>();
  603|      1|    cj._runThread.CRON = jj["THREAD"].at("CRON").at("run").get<bool>();
  604|      1|    cj._runThread.RS232 = jj["THREAD"].at("RS232").at("run").get<bool>();
  605|      1|    cj._runThread.DUMMY = jj["THREAD"].at("DUMMY").at("run").get<bool>();
  606|      1|    cj._runThread.MQTT = jj["THREAD"].at("MQTT").at("run").get<bool>();
  607|      1|    cj._runThread.SATEL = jj["THREAD"].at("SATEL").at("run").get<bool>();
  608|      1|    cj._runThread.INFLUX = jj["THREAD"].at("INFLUX").at("run").get<bool>();
  609|       |
  610|       |    /////////////////////// mqtt broker
  611|      1|    cj._mqtt_broker.qos = jj["mqtt_broker_settings"].at("qos").get<int>();
  612|      1|    cj._mqtt_broker.port = jj["mqtt_broker_settings"].at("port").get<int>();
  613|      1|    cj._mqtt_broker.host = jj["mqtt_broker_settings"].at("host").get<std::string>();
  614|      1|    cj._mqtt_broker.topicPublish = jj["mqtt_broker_settings"].at("publish topic").get<std::string>();
  615|      1|    cj._mqtt_broker.topicSubscribe = jj["mqtt_broker_settings"].at("subscribe topic").get<std::string>();
  616|       |    /////////////////////// rs232
  617|      1|    cj._rs232.BaudRate = jj["RS232_settings"].at("BaudRate").get<int>();
  618|      1|    cj._rs232.portRS232 = jj["RS232_settings"].at("portRS232").get<std::string>();
  619|       |    /////////////////////// RFLink
  620|      1|    cj._rflink.RFLinkPort = jj["RFLink_settings"].at("RFLinkPort").get<std::string>();
  621|      1|    cj._rflink.RFLinkBaudRate = jj["RFLink_settings"].at("RFLinkBaudRate").get<int>();
  622|       |    /////////////////////// gateway
  623|      1|    cj._gateway.url = jj["gateway"].at("url").get<std::string>();
  624|      1|    cj._gateway.keySize = jj["gateway"].at("key_size").get<unsigned int>();
  625|       |    /////////////////////// SATEL INTEGRA32
  626|      1|    cj._satel_integra.host = jj["satel_integra32"].at("host").get<std::string>();
  627|      1|    cj._satel_integra.port = jj["satel_integra32"].at("port").get<int>();
  628|      1|    cj._satel_integra.pin = jj["satel_integra32"].at("pin").get<std::string>();
  629|      1|    cj._satel_integra.outdoor_siren_lights_id = jj["satel_integra32"].at("outdoor_siren_lights_id").get<unsigned int>();
  630|       |    ///////////////////////// SHED //////////////////////////////////////////////////////////////////////////////
  631|      1|    cj._shedConf = jj["shed"];
  632|       |    ///////////////////////// COMMAND ////////////////////////////////////////////////////
  633|      1|    cj._command = jj["command"];
  634|       |    ///////////////////////// DATABASE //////////////////////////////////////////////////
  635|      1|    cj._database.bucket = jj["Database"].at("bucket").get<std::string>();
  636|      1|    cj._database.ip     = jj["Database"].at("IP").get<std::string>();
  637|      1|    cj._database.port   = jj["Database"].at("port").get<int>();
  638|      1|    cj._database.token  = jj["Database"].at("token").get<std::string>();
  639|      1|    cj._database.org    = jj["Database"].at("org").get<std::string>();
  640|       |
  641|      1|    return cj;
  642|      1|}
  643|       |
  644|       |std::map<std::string, iDom_API *> iDom_API::m_map_iDom_API;
  645|       |std::mutex iDom_API::m_locker;
  646|       |
  647|       |std::string iDom_API::getDump()
  648|      1|{
  649|      1|    std::lock_guard<std::mutex> lock(iDom_API::m_locker);
  650|      1|    std::stringstream ret;
  651|      1|    for (const auto &it : m_map_iDom_API)
  652|      8|    {
  653|      8|        ret << std::endl
  654|      8|            << "----------------------------"
  655|      8|            << std::endl
  656|      8|            << " map element: " << it.first << std::endl
  657|      8|            << it.second->dump();
  658|      8|    }
  659|      1|    return ret.str();
  660|      1|}
  661|       |
  662|       |void iDom_API::addToMap(const std::string &name, iDom_API *ptr)
  663|  1.80k|{
  664|  1.80k|    std::lock_guard<std::mutex> lock(iDom_API::m_locker);
  665|  1.80k|    m_map_iDom_API.insert(std::make_pair(name, ptr));
  666|  1.80k|}
  667|       |
  668|       |void iDom_API::removeFromMap(const std::string &name)
  669|  1.80k|{
  670|  1.80k|    std::lock_guard<std::mutex> lock(iDom_API::m_locker);
  671|  1.80k|    if (m_map_iDom_API.erase(name) == 0)
  672|      0|    {
  673|      0|        puts("nie ma w MAPIE !!");
  674|      0|        puts(name.c_str());
  675|      0|    }
  676|  1.80k|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/functions/tests/functions_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include "../functions.h"
    3|       |#include "../../RADIO_433_eq/radio_433_eq.h"
    4|       |#include "../../iDomTools/mock/iDomToolsMock.h"
    5|       |
    6|       |class functions_fixture : public testing::Test
    7|       |{
    8|       |protected:
    9|       |    functions_fixture() : main_iDomTools(std::make_shared<iDomToolsMock>())
   10|      3|    {
   11|      3|        useful_F::myStaticCtx = &test_context;
   12|      3|        test_context.main_iDomTools = main_iDomTools;
   13|      3|        test_context.server_settings = &test_server_set;
   14|      3|        test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("cyniu");
   15|      3|        test_context.main_Rs232 = std::make_unique<SerialPi>("cyniu");
   16|      3|    }
   17|       |    thread_context test_context;
   18|       |    CONFIG_JSON test_server_set;
   19|       |    std::shared_ptr<iDomToolsMock> main_iDomTools;
   20|       |};
   21|       |
   22|       |void useful_F::sleep(std::chrono::seconds sec)
   23|     34|{
   24|     34|    std::cout << "sleep() sec: " << sec.count() << std::endl;
   25|     34|}
   26|       |
   27|       |TEST(functions_, tokenizer)
   28|      1|{
   29|      1|    std::string test_msg = "one=two three";
   30|      1|    std::vector<std::string> test_v;
   31|       |
   32|      1|    EXPECT_EQ(test_v.size(), 0);
   33|      1|    useful_F::tokenizer(test_v, "= ", test_msg);
   34|       |
   35|      1|    EXPECT_EQ(test_v.size(), 3);
   36|      1|    EXPECT_STREQ(test_v.at(2).c_str(), "three");
   37|      1|}
   38|       |
   39|       |TEST(functions_, sekToUptime)
   40|      1|{
   41|      1|    EXPECT_STREQ(useful_F::sek_to_uptime(34534).c_str(), "\n0 day 9 hours 35 minutes 34 seconds");
   42|      1|}
   43|       |
   44|       |TEST(functions_, tokenizerEmpty)
   45|      1|{
   46|      1|    std::string test_msg = "";
   47|      1|    std::vector<std::string> test_v;
   48|       |
   49|      1|    EXPECT_EQ(test_v.size(), 0);
   50|      1|    EXPECT_THROW(useful_F::tokenizer(test_v, "= ", test_msg), std::string);
   51|      1|}
   52|       |
   53|       |TEST(functions_, removeHtmlTag)
   54|      1|{
   55|      1|    std::string test_msg = "<html>test</html>";
   56|      1|    std::string test_pure_str = useful_F_libs::removeHtmlTag(test_msg);
   57|       |
   58|      1|    EXPECT_STREQ(test_pure_str.c_str(), "test");
   59|      1|}
   60|       |
   61|       |TEST(functions_, repalceAll)
   62|      1|{
   63|      1|    std::string test_msg = "one two three";
   64|      1|    std::string test_pure_str = useful_F_libs::replaceAll(test_msg, "two", "zero");
   65|       |
   66|      1|    EXPECT_STREQ(test_pure_str.c_str(), "one zero three");
   67|      1|}
   68|       |
   69|       |TEST(functions_, stringToHex)
   70|      1|{
   71|      1|    std::string test_msg = "kokos";
   72|      1|    std::string output = useful_F_libs::stringToHex(test_msg);
   73|       |
   74|      1|    EXPECT_STREQ(output.c_str(), "6B6F6B6F73");
   75|      1|}
   76|       |
   77|       |TEST(functions_, split)
   78|      1|{
   79|      1|    std::string test_msg = "one two three";
   80|      1|    std::vector<std::string> test_v;
   81|       |
   82|      1|    EXPECT_EQ(test_v.size(), 0);
   83|      1|    test_v = useful_F::split(test_msg, ' ');
   84|       |
   85|      1|    EXPECT_EQ(test_v.size(), 3);
   86|      1|    EXPECT_STREQ(test_v.at(2).c_str(), "three");
   87|      1|}
   88|       |
   89|       |TEST(functions_, RSHash)
   90|      1|{
   91|      1|    std::string msg = "test msg";
   92|      1|    std::string s1 = useful_F::RSHash(msg, 33, 44);
   93|      1|    std::string s2 = useful_F::RSHash(msg, 33, 44);
   94|      1|    EXPECT_STREQ(s1.c_str(), s2.c_str());
   95|       |
   96|      1|    s1 = useful_F::RSHash(msg, 35, 44);
   97|      1|    s2 = useful_F::RSHash(msg, 33, 44);
   98|      1|    EXPECT_STRNE(s1.c_str(), s2.c_str());
   99|      1|}
  100|       |
  101|       |TEST_F(functions_fixture, setStaticData)
  102|      1|{
  103|      1|    test_context.sleeper = 99;
  104|      1|    EXPECT_EQ(useful_F::myStaticCtx->sleeper, 99);
  105|      1|    thread_context test_context2;
  106|      1|    test_context2.sleeper = 88;
  107|      1|    EXPECT_EQ(test_context2.sleeper, 88);
  108|      1|    EXPECT_EQ(useful_F::myStaticCtx->sleeper, 99);
  109|      1|    useful_F::setStaticData(&test_context2);
  110|      1|    EXPECT_EQ(useful_F::myStaticCtx->sleeper, 88);
  111|      1|}
  112|       |
  113|       |TEST_F(functions_fixture, sleepThread)
  114|      1|{
  115|      1|    EXPECT_CALL(*main_iDomTools.get(), ledClear(testing::_, testing::_)).Times(testing::AnyNumber());
  116|      1|    EXPECT_CALL(*main_iDomTools.get(), ledOFF());
  117|      1|    EXPECT_CALL(*main_iDomTools.get(), MPD_stop());
  118|      1|    EXPECT_CALL(*main_iDomTools.get(), turnOff433MHzSwitch("listwa"));
  119|      1|    std::array<Thread_array_struc, 10> test_THRARRSTR;
  120|      1|    test_context.main_THREAD_arr = &test_THRARRSTR;
  121|       |
  122|      1|    test_context.ptr_MPD_info = std::make_unique<MPD_info>();
  123|      1|    test_context.ptr_MPD_info->volume = 3;
  124|       |
  125|       |    // RADIO_EQ_CONTAINER_STUB test_rec(&test_context);
  126|      1|    std::shared_ptr<RADIO_EQ_CONTAINER> test_rec = std::make_shared<RADIO_EQ_CONTAINER>(&test_context);
  127|      1|    test_rec->loadConfig(test_server_set._server.radio433MHzConfigFile);
  128|      1|    test_context.main_REC = (test_rec);
  129|      1|    test_context.alarmTime.time = Clock::getTime();
  130|      1|    test_context.alarmTime.state = STATE::ACTIVE;
  131|       |
  132|      1|    test_context.sleeper = 10;
  133|       |
  134|      1|    useful_F::sleeper_mpd(&test_context, "test sleep");
  135|      1|}
  136|       |
  137|       |TEST_F(functions_fixture, json_config)
  138|      1|{
  139|       |    // read a JSON file
  140|      1|    std::ifstream i("../config/config_iDom.json");
  141|      1|    nlohmann::json j;
  142|      1|    i >> j;
  143|      1|    auto ret = useful_F::configJsonFileToStruct(j);
  144|       |
  145|      1|    EXPECT_EQ(ret._server.PORT, 8833);
  146|       |
  147|      1|    EXPECT_TRUE(ret._server.encrypted);
  148|       |
  149|      1|    EXPECT_EQ(ret._fb_viber.viberReceiver.size(), 2);
  150|      1|    EXPECT_STREQ(ret._fb_viber.viberReceiver.at(1).c_str(),
  151|      1|                 "5");
  152|      1|    EXPECT_TRUE(ret._runThread.MPD);
  153|      1|    EXPECT_TRUE(ret._runThread.DUMMY);
  154|      1|    EXPECT_TRUE(ret._runThread.CRON);
  155|      1|    EXPECT_TRUE(ret._runThread.RFLink);
  156|      1|    EXPECT_TRUE(ret._runThread.RS232);
  157|      1|    EXPECT_TRUE(ret._runThread.INFLUX);
  158|      1|    EXPECT_FALSE(ret._runThread.MQTT);
  159|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/functions/tests/functions_stub.cpp:
    1|       |#include "../functions.h"
    2|       |#include "test_data.h"
    3|       |
    4|      7|int useful_F::runLinuxCommand(const std::string& cmd){
    5|      7|    std::cout << "runLinuxCommand(): " << cmd << std::endl;
    6|      7|    return TEST_DATA::runLinuxCommandReturn;
    7|      7|}
    8|       |
    9|       |bool useful_F::go_while = true;
   10|       |bool useful_F::workServer = true;

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomKEY_ACCESS/idomkey_access.cpp:
    1|       |#include <iomanip>
    2|       |#include <fstream>
    3|       |#include "idomkey_access.h"
    4|       |#include "../iDom_server_OOP.h"
    5|       |
    6|       |void iDomKEY_ACCESS::writeJSON()
    7|     10|{
    8|     10|    std::ofstream o(m_pathDatabase);
    9|     10|    o << std::setw(4) << m_data << std::endl;
   10|     10|}
   11|       |
   12|       |void iDomKEY_ACCESS::readJSON()
   13|     97|{
   14|       |    // read a JSON file
   15|     97|    std::ifstream i(m_pathDatabase);
   16|     97|    log_file_mutex.mutex_lock();
   17|     97|    log_file_cout << INFO << "czytam zapisany stan kluczy iDom" << std::endl;
   18|     97|    log_file_mutex.mutex_unlock();
   19|     97|    try
   20|     97|    {
   21|     97|        i >> m_data;
   22|     97|    }
   23|     97|    catch (...)
   24|     97|    {
   25|     12|        log_file_mutex.mutex_lock();
   26|     12|        log_file_cout << CRITICAL << "problem z czytaniem zapisanych stanów kluczy iDom" << std::endl;
   27|     12|        log_file_mutex.mutex_unlock();
   28|     12|    }
   29|     97|}
   30|       |
   31|       |iDomKEY_ACCESS::iDomKEY_ACCESS(const std::string &path_database) : m_pathDatabase(path_database)
   32|     97|{
   33|     97|    m_className.insert(0, typeid(this).name());
   34|     97|    iDom_API::addToMap(m_className, this);
   35|     97|    readJSON();
   36|     97|}
   37|       |
   38|       |iDomKEY_ACCESS::iDomKEY_ACCESS(const iDomKEY_ACCESS &k) : m_data(k.m_data), m_pathDatabase(k.m_pathDatabase)
   39|     85|{
   40|     85|    m_className.insert(0, typeid(this).name());
   41|     85|    iDom_API::addToMap(m_className, this);
   42|     85|}
   43|       |
   44|       |iDomKEY_ACCESS::~iDomKEY_ACCESS()
   45|    182|{
   46|    182|    iDom_API::removeFromMap(m_className);
   47|    182|}
   48|       |
   49|       |void iDomKEY_ACCESS::addKEY(const std::string &name, const std::string &command, size_t size, bool temp)
   50|      4|{
   51|      4|    std::string _key = m_generator.random_string(size);
   52|      4|    nlohmann::json temp_J;
   53|      4|    temp_J["name"] = name;
   54|      4|    temp_J["key"] = _key;
   55|      4|    temp_J["temporary"] = temp;
   56|      4|    temp_J["time"] = Clock::getUnixTime();
   57|      4|    temp_J["command"] = command;
   58|      4|    m_data[name] = temp_J;
   59|      4|    writeJSON();
   60|      4|}
   61|       |
   62|       |void iDomKEY_ACCESS::addTempKEY(const std::string &name, const std::string &command, size_t size)
   63|      1|{
   64|      1|    addKEY(name, command, size, true);
   65|      1|}
   66|       |
   67|       |void iDomKEY_ACCESS::removeKEY(const std::string &name)
   68|      4|{
   69|      4|    m_data.erase(name);
   70|      4|    writeJSON();
   71|      4|}
   72|       |
   73|       |std::string iDomKEY_ACCESS::getKEY(const std::string &name) const
   74|      1|{
   75|      1|    return m_data[name].at("key").get<std::string>();
   76|      1|}
   77|       |
   78|       |std::string iDomKEY_ACCESS::listKEY()
   79|      3|{
   80|      3|    std::stringstream ret;
   81|      3|    ret << m_data.dump(4);
   82|      3|    return ret.str();
   83|      3|}
   84|       |
   85|       |bool iDomKEY_ACCESS::useKEY(const std::string &name, const std::string &key)
   86|      0|{
   87|      0|    if (m_data.find(name) == m_data.end())
   88|      0|    {
   89|      0|        log_file_mutex.mutex_lock();
   90|      0|        log_file_cout << INFO << "proba uzycia nieistniejacego klucza access iDom: "
   91|      0|                      << name << " key: " << key << std::endl;
   92|      0|        log_file_mutex.mutex_unlock();
   93|      0|        return false;
   94|      0|    }
   95|       |
   96|      0|    std::string k = m_data[name].at("key").get<std::string>();
   97|      0|    bool toDel = m_data[name].at("temporary").get<bool>();
   98|       |
   99|      0|    if (toDel)
  100|      0|    {
  101|      0|        m_data.erase(name);
  102|      0|        writeJSON();
  103|      0|    }
  104|      0|    return (key == k);
  105|      0|}
  106|       |
  107|       |void iDomKEY_ACCESS::removeExpiredKeys(unsigned int hours)
  108|      2|{
  109|      2|    auto timeNow = Clock::getUnixTime();
  110|      2|    auto timeRef = hours * 3600;
  111|       |
  112|      2|    std::vector<std::string> vv;
  113|       |
  114|      2|    for (auto &jj : m_data)
  115|      3|    {
  116|      3|        if ((timeNow - jj["time"].get<unsigned int>()) > timeRef && jj["temporary"].get<bool>())
  117|      3|        {
  118|      3|            vv.push_back(jj["name"].get<std::string>());
  119|      3|        }
  120|      3|    }
  121|       |
  122|      2|    for (const auto &k : vv)
  123|      3|    {
  124|      3|#ifdef BT_TEST
  125|      3|        std::cout << " kasuje wygasly klucz access key iDom: "
  126|      3|                  << k << std::endl;
  127|      3|#endif
  128|      3|        m_data.erase(k);
  129|      3|    }
  130|      2|    writeJSON();
  131|      2|}
  132|       |
  133|       | std::string iDomKEY_ACCESS::getCommand(const std::string &name) const
  134|      0| {
  135|      0|    if(m_data.find(name) == m_data.end())
  136|      0|    {
  137|      0|        return "null";
  138|      0|    }
  139|      0|    return m_data[name].at("command").get<std::string>();
  140|      0| }
  141|       |
  142|       |std::string iDomKEY_ACCESS::dump() const
  143|      0|{
  144|      0|    std::stringstream ret;
  145|      0|    ret << "m_data.size(): " << m_data.size() << std::endl;
  146|      0|    ret << "m_pathDatabase: " << m_pathDatabase << std::endl;
  147|      0|    return ret.str();
  148|      0|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomSaveState/idom_save_state.cpp:
    1|       |#include "idom_save_state.h"
    2|       |#include "../iDom_server_OOP.h"
    3|       |#include <fstream>
    4|       |#include <iostream> // std::cout
    5|       |
    6|       |iDom_SAVE_STATE::iDom_SAVE_STATE(const std::string &path) : m_path(path)
    7|      7|{
    8|      7|#ifdef BT_TEST
    9|      7|    puts("iDom_SAVE_STATE::iDom_SAVE_STATE()");
   10|      7|#endif
   11|      7|}
   12|       |
   13|       |nlohmann::json iDom_SAVE_STATE::read() const
   14|      3|{
   15|      3|    std::lock_guard<std::mutex> lGuard(m_mutex);
   16|       |    // read a JSON file
   17|      3|    std::ifstream i(m_path);
   18|      3|    nlohmann::json j;
   19|      3|    i >> j;
   20|       |
   21|      3|    log_file_mutex.mutex_lock();
   22|      3|    log_file_cout << INFO << "czytam zapisany stan parametrow iDom" << std::endl;
   23|      3|    log_file_mutex.mutex_unlock();
   24|       |
   25|      3|    return j;
   26|      3|}
   27|       |
   28|       |void iDom_SAVE_STATE::write(const nlohmann::json &jj)
   29|      6|{
   30|      6|    std::lock_guard<std::mutex> lGuard(m_mutex);
   31|       |    // write prettified JSON to another file
   32|      6|    std::ofstream o(m_path);
   33|      6|    o << std::setw(4) << jj << std::endl;
   34|      6|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomSaveState/idom_save_state.h:
    1|       |#pragma once
    2|       |
    3|       |#include <mutex>
    4|       |#include "json.hpp"
    5|       |
    6|       |class iDom_SAVE_STATE
    7|       |{
    8|       |public:
    9|       |    mutable std::mutex m_mutex;
   10|       |    explicit iDom_SAVE_STATE(const std::string &path);
   11|      7|    ~iDom_SAVE_STATE() = default;
   12|       |
   13|       |    nlohmann::json read() const;
   14|       |    void write(const nlohmann::json &jj);
   15|       |
   16|       |private:
   17|       |    std::string m_path = "NULL";
   18|       |};
   19|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomSaveState/test/iDomSaveState_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |
    3|       |#include "test_data.h"
    4|       |#include "../idom_save_state.h"
    5|       |#include "json.hpp"
    6|       |
    7|       |TEST(iDomSaveState, write_and_read)
    8|      1|{
    9|      1|    iDom_SAVE_STATE test_saveState("/mnt/ramdisk/iDomStateTest.save");
   10|      1|    nlohmann::json test_json ;
   11|       |
   12|      1|    test_json["happy"] = true;
   13|      1|    test_json["pi"] = 3.14;
   14|       |
   15|      1|    nlohmann::json test_json_in_json;
   16|      1|    test_json_in_json["name"] = "cyniu";
   17|      1|    test_json_in_json["age"] = 30;
   18|       |
   19|      1|    test_json["person"] = test_json_in_json;
   20|       |
   21|      1|    test_saveState.write(test_json);
   22|      1|    nlohmann::json test_json2 = test_saveState.read();
   23|      2|    EXPECT_DOUBLE_EQ(test_json.at("pi").get<double>(),
   24|      2|                     test_json2.at("pi").get<double>()) << "wartosci pi nie sa rowne";
   25|       |
   26|      2|    EXPECT_TRUE(test_json2.at("happy").get<bool>()) << " nie jest happy";
   27|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomStatus/idomstatus.cpp:
    1|       |#include "idomstatus.h"
    2|       |#include "../functions/functions.h"
    3|       |
    4|       |void iDomSTATUS::addObject(const std::string &name, STATE st)
    5|    434|{
    6|    434|    std::lock_guard<std::mutex> lock(m_lockGuard);
    7|    434|    m_stateMAP.insert(std::make_pair(name, st));
    8|    434|}
    9|       |
   10|       |void iDomSTATUS::setObjectState(const std::string &name, STATE st)
   11|     73|{
   12|     73|    std::lock_guard<std::mutex> lock(m_lockGuard);
   13|     73|    auto i = m_stateMAP.find(name);
   14|     73|    if (i not_eq m_stateMAP.end())
   15|     50|    {
   16|     50|        i->second = st;
   17|     50|    }
   18|     23|    else
   19|     23|    {
   20|     23|        lock.~lock_guard();
   21|     23|        addObject(name, st);
   22|     23|    }
   23|     73|}
   24|       |
   25|       |STATE iDomSTATUS::getObjectState(const std::string &name) const
   26|     39|{
   27|     39|    std::lock_guard<std::mutex> lock(m_lockGuard);
   28|       |
   29|     39|    if (auto i = m_stateMAP.find(name); i not_eq m_stateMAP.end()) {
   30|     35|        return i->second;
   31|     35|    }
   32|      4|    return STATE::UNKNOWN;
   33|     39|}
   34|       |
   35|       |std::string iDomSTATUS::getObjectStateString(const std::string &name) const
   36|     18|{
   37|     18|    std::stringstream dataStr;
   38|     18|    std::lock_guard<std::mutex> lock(m_lockGuard);
   39|       |
   40|     18|    if (auto i = m_stateMAP.find(name); i not_eq m_stateMAP.end()) {
   41|     17|        dataStr << i->second;
   42|     17|        return dataStr.str();
   43|     17|    }
   44|      1|    dataStr << STATE::UNKNOWN << " " << name;
   45|      1|    return dataStr.str();
   46|     18|}
   47|       |
   48|       |std::string iDomSTATUS::getAllObjectsStateString() const
   49|      2|{
   50|      2|    std::stringstream st;
   51|      2|    st << "state: ";
   52|      2|    std::lock_guard<std::mutex> lock(m_lockGuard);
   53|      2|    for (const auto &elm : m_stateMAP)
   54|      7|    {
   55|      7|        st << elm.first << "=";
   56|      7|        st << elm.second << " ";
   57|      7|    }
   58|       |    // shortcut solution for buderus
   59|      2|    st << "burnGas=";
   60|      2|    auto heating = useful_F::myStaticCtx->ptr_buderus->isHeatingActiv();
   61|      2|    if (heating == true)
   62|      1|    {
   63|      1|        st << STATE::ACTIVE;
   64|      1|        st << " burnGasStartTime="
   65|      1|           << useful_F::myStaticCtx->ptr_buderus->getHeatingStartTime() << ' ';
   66|      1|    }
   67|      1|    else
   68|      1|        st << STATE::DEACTIVE << ' ';
   69|      2|    return st.str();
   70|      2|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomStatus/idomstatus.h:
    1|       |#pragma once
    2|       |
    3|       |#include <iostream>
    4|       |#include <map>
    5|       |#include <mutex>
    6|       |#include <string>
    7|       |
    8|       |#include "../../libs/useful/useful.h"
    9|       |
   10|       |class iDomSTATUS
   11|       |{
   12|       |    std::map<std::string, STATE> m_stateMAP;
   13|       |    mutable std::mutex m_lockGuard;
   14|       |
   15|       |public:
   16|    210|    iDomSTATUS() = default;
   17|    210|    ~iDomSTATUS() = default;
   18|       |    void addObject(const std::string &name, STATE st = STATE::UNDEFINE);
   19|       |    void setObjectState(const std::string &name, STATE st);
   20|       |    STATE getObjectState(const std::string &name) const;
   21|       |    std::string getObjectStateString(const std::string &name) const;
   22|       |    std::string getAllObjectsStateString() const;
   23|       |};
   24|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/idomtools.cpp:
    1|       |#include <optional>
    2|       |
    3|       |#include "../../libs/emoji/emoji.h"
    4|       |#include "../functions/functions.h"
    5|       |#include "../RADIO_433_eq/radio_433_eq.h"
    6|       |#include "../thread_functions/iDom_thread.h"
    7|       |#include "idomtools.h"
    8|       |#include "../iDomSaveState/idom_save_state.h"
    9|       |#include "../dbClient/db-client-factory.hpp"
   10|       |#include "../dbClient/DB_DATA.hpp"
   11|       |
   12|       |iDomTOOLS::iDomTOOLS(thread_context *myData) : m_key(myData->server_settings->_server.TS_KEY),
   13|       |                                               m_key2(myData->server_settings->_server.TS_KEY2)
   14|     85|{
   15|     85|    context = myData;
   16|     85|    context->m_keyHandler = std::make_unique<iDomKEY_ACCESS>(iDomKEY_ACCESS(myData->server_settings->_server.keyDatabasePath));
   17|       |    //////////////////////////////////// temeprature /////////////////
   18|     85|    m_allThermometer.add("inside");
   19|     85|    m_allThermometer.add("outside");
   20|     85|    m_allThermometerUpdate.add("inside");
   21|     85|    m_allThermometerUpdate.add("outside");
   22|       |    /////////////////////////////////////////////////////////////////
   23|       |
   24|     85|    context->main_iDomStatus->addObject("printer", STATE::OFF);
   25|     85|    context->main_iDomStatus->addObject("speakers", STATE::OFF);
   26|     85|    context->main_iDomStatus->addObject("alarm", STATE::DEACTIVE);
   27|     85|    context->main_iDomStatus->addObject("KODI", STATE::DEACTIVE);
   28|       |
   29|     85|    m_viber_notif = context->server_settings->_server.viber_notification;
   30|       |
   31|       |    ///////// setup viber api
   32|     85|    m_viber.setAvatar(context->server_settings->_fb_viber.viberAvatar);
   33|     85|    m_viber.setAccessToken(context->server_settings->_fb_viber.viberToken);
   34|     85|    m_viber.setURL("https://chatapi.viber.com/pa/send_message");
   35|       |
   36|       |    //////// button 433MHz
   37|     85|    m_buttonPointerVector = context->main_REC->getButtonPointerVector();
   38|     85|    m_lastButton433MHzLockUnlockTime = Clock::getTime() + Clock(23, 58);
   39|       |
   40|     85|    iDom_API::m_className.insert(0, typeid(this).name());
   41|     85|    iDom_API::addToMap(m_className, this);
   42|     85|}
   43|       |
   44|       |iDomTOOLS::~iDomTOOLS()
   45|     85|{
   46|     85|    iDom_API::removeFromMap(m_className);
   47|     85|}
   48|       |
   49|       |TEMPERATURE_STATE iDomTOOLS::getTHERMOMETER_CONTAINERlastState(const std::string &name)
   50|     12|{
   51|     12|    return m_allThermometer.getLastState(name);
   52|     12|}
   53|       |
   54|       |TEMPERATURE_STATE iDomTOOLS::hasTemperatureChange(const std::string &thermometerName,
   55|       |                                                  double reference, double histereza)
   56|     14|{
   57|     14|    reference += 0.0055;
   58|     14|    const auto newTemp = m_allThermometer.getTemp(thermometerName);
   59|     14|    const auto oldTemp = m_allThermometer.getOldTemp(thermometerName);
   60|     14|    const auto lastState = m_allThermometer.getLastState(thermometerName);
   61|     14|    if (newTemp >= reference + histereza &&
   62|     14|        oldTemp < reference + histereza &&
   63|     14|        lastState not_eq TEMPERATURE_STATE::Over)
   64|      3|    {
   65|      3|        context->myEventHandler.run("test")->addEvent("over: new " + to_string_with_precision(newTemp) + " old: " + to_string_with_precision(oldTemp) + " ref: " + to_string_with_precision(reference));
   66|      3|        m_allThermometer.setState(thermometerName, TEMPERATURE_STATE::Over);
   67|      3|        return TEMPERATURE_STATE::Over;
   68|      3|    }
   69|     11|    else if (newTemp <= reference - histereza &&
   70|     11|             oldTemp > reference - histereza &&
   71|     11|             lastState not_eq TEMPERATURE_STATE::Under)
   72|      2|    {
   73|      2|        context->myEventHandler.run("test")->addEvent("under: new " + to_string_with_precision(newTemp) + " old: " + to_string_with_precision(oldTemp) + " ref: " + to_string_with_precision(reference));
   74|      2|        m_allThermometer.setState(thermometerName, TEMPERATURE_STATE::Under);
   75|      2|        return TEMPERATURE_STATE::Under;
   76|      2|    }
   77|       |
   78|      9|    context->myEventHandler.run("test")->addEvent("noChanges: new " + to_string_with_precision(newTemp) + " old: " + to_string_with_precision(oldTemp) + " ref: " + to_string_with_precision(reference));
   79|      9|    m_allThermometer.setState(thermometerName, TEMPERATURE_STATE::NoChanges);
   80|      9|    return TEMPERATURE_STATE::NoChanges;
   81|     14|}
   82|       |
   83|       |void iDomTOOLS::sendSMSifTempChanged(const std::string &thermomethernName, int reference)
   84|     14|{
   85|     14|    TEMPERATURE_STATE status = hasTemperatureChange(thermomethernName, reference, 0.5);
   86|     14|    std::string m = "temperature " + thermomethernName + " over " + EMOJI::emoji(E_emoji::NORTH_EAST_ARROW) + to_string_with_precision(reference);
   87|       |
   88|     14|    if (status == TEMPERATURE_STATE::Over)
   89|      3|    {
   90|      3|        context->myEventHandler.run("temperature")->addEvent(m);
   91|      3|        if (reference < 2)
   92|      1|        {
   93|      1|            sendViberMsg(m, context->server_settings->_fb_viber.viberReceiver.at(0),
   94|      1|                         context->server_settings->_fb_viber.viberSender);
   95|      1|            sendViberMsg(m, context->server_settings->_fb_viber.viberReceiver.at(1),
   96|      1|                         context->server_settings->_fb_viber.viberSender);
   97|      1|        }
   98|      2|        else
   99|      2|        {
  100|      2|            sendViberMsg(m, context->server_settings->_fb_viber.viberReceiver.at(0),
  101|      2|                         context->server_settings->_fb_viber.viberSender);
  102|      2|        }
  103|      3|        context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/temperature",
  104|      3|                                      m);
  105|      3|    }
  106|     11|    else if (status == TEMPERATURE_STATE::Under)
  107|      2|    {
  108|      2|        m = "temperature " + thermomethernName + " under " + EMOJI::emoji(E_emoji::SOUTH_EAST_ARROW) + to_string_with_precision(reference);
  109|      2|        context->myEventHandler.run("temperature")->addEvent(m);
  110|      2|        if (reference < 2)
  111|      1|        {
  112|      1|            sendViberPicture(m, "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTEU-fCklbx_ZFKaVhdGCymAg8NTldnva1GvnAEl63XfigJa2VV&s",
  113|      1|                             context->server_settings->_fb_viber.viberReceiver.at(0),
  114|      1|                             context->server_settings->_fb_viber.viberSender);
  115|      1|            sendViberPicture(m, "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTEU-fCklbx_ZFKaVhdGCymAg8NTldnva1GvnAEl63XfigJa2VV&s",
  116|      1|                             context->server_settings->_fb_viber.viberReceiver.at(1),
  117|      1|                             context->server_settings->_fb_viber.viberSender);
  118|      1|        }
  119|      1|        else
  120|      1|        {
  121|      1|            sendViberMsg(m, context->server_settings->_fb_viber.viberReceiver.at(0),
  122|      1|                         context->server_settings->_fb_viber.viberSender);
  123|      1|        }
  124|      2|        context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/temperature",
  125|      2|                                      m);
  126|      2|    }
  127|     14|}
  128|       |
  129|       |std::string iDomTOOLS::getThermoStats(const std::string &name)
  130|      2|{
  131|      2|    return m_allThermometerUpdate.getStatsByName(name);
  132|      2|}
  133|       |
  134|       |void iDomTOOLS::updateTemperatureStats()
  135|      6|{
  136|      6|    auto v = getTemperature();
  137|      6|    m_allThermometerUpdate.updateAll(&v);
  138|      6|    m_allThermometerUpdate.updateStats("outside");
  139|      6|    m_allThermometerUpdate.updateStats("inside");
  140|       |
  141|      6|    if (true == m_allThermometerUpdate.isMoreDiff("outside", 2.1))
  142|      2|    {
  143|      2|        auto data = m_allThermometerUpdate.getLast2("outside");
  144|      2|        std::string msg = "alarm roznicy temeratur na polu! " + to_string_with_precision(data.first) + " na " + to_string_with_precision(data.second);
  145|       |
  146|      2|        if (data.first > data.second)
  147|      1|        {
  148|      1|            msg.append(" temperatura maleje " + EMOJI::emoji(E_emoji::CHART_WITH_DOWNWARDS_TREND));
  149|      1|        }
  150|      1|        else
  151|      1|        {
  152|      1|            msg.append(" temperatura rośnie " + EMOJI::emoji(E_emoji::CHART_WITH_UPWARDS_TREND));
  153|      1|        }
  154|       |
  155|      2|        sendViberMsg(msg,
  156|      2|                     context->server_settings->_fb_viber.viberReceiver.at(0),
  157|      2|                     context->server_settings->_fb_viber.viberSender);
  158|       |
  159|      2|        context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/temperature",
  160|      2|                                      msg);
  161|       |
  162|      2|        log_file_mutex.mutex_lock();
  163|      2|        log_file_cout << WARNING << msg << std::endl;
  164|      2|        log_file_mutex.mutex_unlock();
  165|      2|    }
  166|       |
  167|      6|    if (true == m_allThermometerUpdate.isMoreDiff("inside", 2.1))
  168|      2|    {
  169|      2|        auto data = m_allThermometerUpdate.getLast2("inside");
  170|      2|        std::string msg = "alarm roznicy temeratur na mieszkaniu! " + to_string_with_precision(data.first) + " na " + to_string_with_precision(data.second);
  171|       |
  172|      2|        if (data.first > data.second)
  173|      1|        {
  174|      1|            msg.append(" temperatura maleje " + EMOJI::emoji(E_emoji::CHART_WITH_DOWNWARDS_TREND));
  175|      1|        }
  176|      1|        else
  177|      1|        {
  178|      1|            msg.append(" temperatura rośnie " + EMOJI::emoji(E_emoji::CHART_WITH_UPWARDS_TREND));
  179|      1|        }
  180|      2|        sendViberMsg(msg,
  181|      2|                     context->server_settings->_fb_viber.viberReceiver.at(0),
  182|      2|                     context->server_settings->_fb_viber.viberSender);
  183|       |
  184|      2|        context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/temperature",
  185|      2|                                      msg);
  186|       |
  187|      2|        log_file_mutex.mutex_lock();
  188|      2|        log_file_cout << WARNING << msg << std::endl;
  189|      2|        log_file_mutex.mutex_unlock();
  190|      2|    }
  191|      6|}
  192|       |
  193|       |void iDomTOOLS::turnOnSpeakers()
  194|      7|{
  195|      7|    if (context->idom_all_state.houseState == STATE::UNLOCK)
  196|      2|    {
  197|       |        // FIXME temp fix
  198|      2|        context->main_iDomTools->turnOn433MHzSwitch("fan");
  199|       |        ///////////////////////
  200|      2|        context->main_iDomStatus->setObjectState("speakers", STATE::ON);
  201|      2|    }
  202|      5|    else
  203|      5|    {
  204|      5|        context->myEventHandler.run("speakers")->addEvent("speakers can not start due to home state: " + stateToString(context->idom_all_state.houseState));
  205|      5|    }
  206|      7|    context->main_iDomTools->saveState_iDom(context->serverStarted);
  207|      7|}
  208|       |
  209|       |void iDomTOOLS::turnOffSpeakers()
  210|      4|{
  211|       |    // digitalWrite(iDomConst::GPIO_SPIK, LOW);
  212|       |    //  FIXME temp fix
  213|      4|    context->main_iDomTools->turnOff433MHzSwitch("fan");
  214|       |    /////////////////////////////
  215|      4|    context->main_iDomStatus->setObjectState("speakers", STATE::OFF);
  216|      4|    context->main_iDomTools->saveState_iDom(context->serverStarted);
  217|      4|}
  218|       |
  219|       |void iDomTOOLS::turnOnOff230vOutdoor()
  220|      0|{
  221|      0|    unsigned int ID = 99;
  222|      0|    auto state = context->main_house_room_handler->m_lightingBulbMap.at(ID)->getStatus();
  223|      0|    if (state == STATE::ON)
  224|      0|        context->main_house_room_handler->turnOffBulb(ID);
  225|      0|    else
  226|      0|        context->main_house_room_handler->turnOnBulb(ID);
  227|      0|}
  228|       |
  229|       |void iDomTOOLS::turnOnOff433MHzSwitch(const std::string &name)
  230|      3|{
  231|      3|    STATE listwaState = context->main_iDomStatus->getObjectState(name);
  232|      3|    RADIO_SWITCH *m_switch = nullptr;
  233|      3|    try
  234|      3|    {
  235|      3|        m_switch = dynamic_cast<RADIO_SWITCH *>(context->main_REC->getEqPointer(name));
  236|      3|    }
  237|      3|    catch (const std::string &e)
  238|      3|    {
  239|      1|        log_file_mutex.mutex_lock();
  240|      1|        log_file_cout << CRITICAL << "void iDomTOOLS::turnOnOff433MHzSwitch(const std::string& name)"
  241|      1|                      << e << std::endl;
  242|      1|        log_file_mutex.mutex_unlock();
  243|      1|        return;
  244|      1|    }
  245|       |
  246|      2|    if (listwaState == STATE::ON)
  247|      1|    {
  248|       |        // context->mainLCD->set_lcd_STATE(10);
  249|       |        // context->mainLCD->printString(true,0,0,"230V OFF " + name);
  250|      1|        m_switch->off();
  251|      1|    }
  252|      1|    else if (listwaState == STATE::OFF)
  253|      1|    {
  254|       |        // context->mainLCD->set_lcd_STATE(10);
  255|       |        // context->mainLCD->printString(true,0,0,"230V ON " + name);
  256|      1|        m_switch->on();
  257|      1|    }
  258|      2|    saveState_iDom(context->serverStarted);
  259|      2|}
  260|       |
  261|       |void iDomTOOLS::turnOn433MHzSwitch(std::string name)
  262|      5|{
  263|      5|    try
  264|      5|    {
  265|      5|        auto v_switch = context->main_REC->getSwitchPointerVector();
  266|      5|        for (auto s : v_switch)
  267|     25|        {
  268|     25|            if (useful_F_libs::hasSubstring(s->getName(), name) == true)
  269|      2|            {
  270|      2|                s->on();
  271|      2|            }
  272|     25|        }
  273|      5|    }
  274|      5|    catch (const std::string &e)
  275|      5|    {
  276|      0|        log_file_mutex.mutex_lock();
  277|      0|        log_file_cout << CRITICAL << "void iDomTOOLS::turnOn433MHzSwitch(std::string name)"
  278|      0|                      << e << std::endl;
  279|      0|        log_file_mutex.mutex_unlock();
  280|      0|    }
  281|      5|}
  282|       |
  283|       |void iDomTOOLS::turnOff433MHzSwitch(std::string name)
  284|      6|{
  285|      6|    try
  286|      6|    {
  287|      6|        auto v_switch = context->main_REC->getSwitchPointerVector();
  288|      6|        for (auto s : v_switch)
  289|     30|        {
  290|     30|            if (useful_F_libs::hasSubstring(s->getName(), name) == true)
  291|      1|            {
  292|      1|                s->off();
  293|      1|            }
  294|     30|        }
  295|      6|    }
  296|      6|    catch (const std::string &e)
  297|      6|    {
  298|      0|        log_file_mutex.mutex_lock();
  299|      0|        log_file_cout << CRITICAL << "void iDomTOOLS::turnOff433MHzSwitch(std::string name)"
  300|      0|                      << e << std::endl;
  301|      0|        log_file_mutex.mutex_unlock();
  302|      0|    }
  303|      6|}
  304|       |
  305|       |void iDomTOOLS::runOnSunset()
  306|      2|{
  307|       |
  308|      2|    if (context->server_settings->_command.contains("sunset"))
  309|      2|    {
  310|      2|        if (context->idom_all_state.houseState == STATE::LOCK and context->server_settings->_command["sunset"].contains("lock"))
  311|      1|        {
  312|      1|            runCommandFromJson(context->server_settings->_command["sunset"]["lock"].get<std::vector<std::string>>());
  313|      1|        }
  314|      1|        else if (context->idom_all_state.houseState == STATE::UNLOCK and context->server_settings->_command["sunset"].contains("unlock"))
  315|      1|        {
  316|      1|            runCommandFromJson(context->server_settings->_command["sunset"]["unlock"].get<std::vector<std::string>>());
  317|      1|        }
  318|      2|    }
  319|       |
  320|      2|    context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/sun", "SUNSET");
  321|      2|    context->m_keyHandler->removeExpiredKeys(8);
  322|      2|}
  323|       |
  324|       |void iDomTOOLS::runOnSunrise()
  325|      2|{
  326|      2|    if (context->server_settings->_command.contains("sunrise"))
  327|      2|    {
  328|      2|        if (context->idom_all_state.houseState == STATE::LOCK and context->server_settings->_command["sunrise"].contains("lock"))
  329|      1|        {
  330|      1|            runCommandFromJson(context->server_settings->_command["sunrise"]["lock"].get<std::vector<std::string>>());
  331|      1|        }
  332|      1|        else if (context->idom_all_state.houseState == STATE::UNLOCK and context->server_settings->_command["sunrise"].contains("unlock"))
  333|      1|        {
  334|      1|            runCommandFromJson(context->server_settings->_command["sunrise"]["unlock"].get<std::vector<std::string>>());
  335|      1|        }
  336|      2|    }
  337|      2|    context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/sun", "SUNRISE");
  338|      2|}
  339|       |
  340|       |void iDomTOOLS::lockHome()
  341|      7|{
  342|      7|    if (context->idom_all_state.houseState == STATE::LOCK)
  343|      2|    {
  344|      2|        return;
  345|      2|    }
  346|       |
  347|       |    // arm alarm
  348|      5|    if (context->idom_all_state.alarmSatelState != STATE::ARMED and
  349|      5|        context->server_settings->_runThread.SATEL == true)
  350|      2|        context->satelIntegraHandler->getSatelPTR()->armAlarm(context->server_settings->_satel_integra.partitionID);
  351|       |
  352|       |    // run command
  353|      5|    if (context->server_settings->_command.contains("lock"))
  354|      5|    {
  355|      5|        runCommandFromJson(context->server_settings->_command["lock"].get<std::vector<std::string>>());
  356|      5|    }
  357|       |
  358|      5|    context->main_iDomTools->sendViberPicture("dom zablokownay!",
  359|      5|                                              "https://cyniu88.no-ip.pl/images/iDom/iDom/lock.jpg",
  360|      5|                                              context->server_settings->_fb_viber.viberReceiver.at(0),
  361|      5|                                              context->server_settings->_fb_viber.viberSender);
  362|       |
  363|      5|    log_file_mutex.mutex_lock();
  364|      5|    log_file_cout << INFO << "zablokowanie domu - " << (context->idom_all_state.houseState) << std::endl;
  365|      5|    log_file_mutex.mutex_unlock();
  366|       |
  367|      5|    saveState_iDom(context->serverStarted);
  368|       |
  369|      5|    if (context->server_settings->_runThread.SATEL == true)
  370|      2|    {
  371|      2|        context->satelIntegraHandler->getSatelPTR()->outputOn(context->server_settings->_satel_integra.outdoor_siren_lights_id); // turn on satel output to blink outdoor siren
  372|      2|    }
  373|       |
  374|      5|    context->idom_all_state.houseState = STATE::LOCK;
  375|      5|    context->main_iDomStatus->setObjectState("house", STATE::LOCK);
  376|      5|}
  377|       |
  378|       |void iDomTOOLS::unlockHome()
  379|      5|{
  380|      5|    if (context->idom_all_state.houseState == STATE::UNLOCK)
  381|      0|        return;
  382|       |
  383|      5|    context->idom_all_state.houseState = STATE::UNLOCK;
  384|      5|    context->idom_all_state.counter = 0;
  385|      5|    context->main_iDomStatus->setObjectState("house", STATE::UNLOCK);
  386|       |
  387|       |    // disarm alarm
  388|      5|    if (context->idom_all_state.alarmSatelState != STATE::DISARMED and
  389|      5|        context->server_settings->_runThread.SATEL == true)
  390|      2|        context->satelIntegraHandler->getSatelPTR()->disarmAlarm(context->server_settings->_satel_integra.partitionID);
  391|       |
  392|       |    // run command
  393|      5|    if (context->server_settings->_command.contains("unlock"))
  394|      5|    {
  395|      5|        runCommandFromJson(context->server_settings->_command["unlock"].get<std::vector<std::string>>());
  396|      5|    }
  397|       |
  398|       |    // send message on viber
  399|      5|    context->main_iDomTools->sendViberPicture("dom odblokownay!",
  400|      5|                                              "https://cyniu88.no-ip.pl/images/iDom/iDom/unlock.jpg",
  401|      5|                                              context->server_settings->_fb_viber.viberReceiver.at(0),
  402|      5|                                              context->server_settings->_fb_viber.viberSender);
  403|       |
  404|      5|    log_file_mutex.mutex_lock();
  405|      5|    log_file_cout << INFO << "odblokowanie domu - " << context->idom_all_state.houseState << std::endl;
  406|      5|    log_file_mutex.mutex_unlock();
  407|       |
  408|      5|    saveState_iDom(context->serverStarted);
  409|       |
  410|      5|    if (context->server_settings->_runThread.SATEL == true)
  411|      2|    {
  412|      2|        context->satelIntegraHandler->getSatelPTR()->outputOn(context->server_settings->_satel_integra.outdoor_siren_lights_id); // turn on satel output to blink outdoor siren
  413|      2|    }
  414|      5|}
  415|       |
  416|       |void iDomTOOLS::buttonLockHome()
  417|      0|{
  418|      0|    ledOFF();
  419|      0|    MPD_stop();
  420|      0|    lockHome();
  421|      0|}
  422|       |
  423|       |void iDomTOOLS::buttonUnlockHome()
  424|      0|{
  425|      0|    unlockHome();
  426|      0|    MPD_play(context);
  427|      0|}
  428|       |
  429|       |bool iDomTOOLS::isItDay()
  430|      3|{
  431|      3|    Clock now = Clock::getTime();
  432|      3|    if (now < iDomTOOLS::getSunriseClock() or now > iDomTOOLS::getSunsetClock())
  433|      2|    {
  434|      2|        return false;
  435|      2|    }
  436|      1|    return true;
  437|      3|}
  438|       |
  439|       |std::string iDomTOOLS::getAllDataSunriseSunset()
  440|      1|{
  441|      1|    return m_sun.getAllData();
  442|      1|}
  443|       |
  444|       |void iDomTOOLS::checkLightning()
  445|      1|{
  446|      1|    return;
  447|       |    // log_file_mutex.mutex_lock();
  448|       |    // log_file_cout << ERROR << "nie wysłano informacje o burzy" << std::endl;
  449|       |    // log_file_mutex.mutex_unlock();
  450|      1|}
  451|       |
  452|       |std::string iDomTOOLS::getSunrise(bool extend)
  453|      7|{
  454|      7|    Clock tt = m_sun.getSunRise();
  455|      7|    if (extend == true)
  456|      3|    {
  457|      3|        return "Sunrise time: " + tt.getString();
  458|      3|    }
  459|      4|    return tt.getString();
  460|      7|}
  461|       |
  462|       |std::string iDomTOOLS::getSunset(bool extend)
  463|      7|{
  464|      7|    Clock tt = m_sun.getSunSet();
  465|      7|    if (extend == true)
  466|      3|    {
  467|      3|        return "Sunset time: " + tt.getString();
  468|      3|    }
  469|      4|    return tt.getString();
  470|      7|}
  471|       |
  472|       |Clock iDomTOOLS::getSunsetClock()
  473|      1|{
  474|      1|    return m_sun.getSunSet();
  475|      1|}
  476|       |
  477|       |Clock iDomTOOLS::getSunriseClock()
  478|      3|{
  479|      3|    return m_sun.getSunRise();
  480|      3|}
  481|       |
  482|       |std::string iDomTOOLS::getDayLenght(bool extend)
  483|      7|{
  484|      7|    Clock tt = m_sun.getDayLength();
  485|      7|    if (extend == true)
  486|      3|    {
  487|      3|        return "Day Lenght : " + tt.getString();
  488|      3|    }
  489|      4|    return tt.getString();
  490|      7|}
  491|       |
  492|       |std::string iDomTOOLS::getWeatherEvent(const std::string &city, unsigned int radius)
  493|      1|{
  494|      1|    std::string url = "http://burze.dzis.net/ramka.php?miejscowosc=";
  495|      1|    url.append(city);
  496|      1|    url.append("&promien=");
  497|      1|    url.append(std::to_string(radius));
  498|      1|    return useful_F_libs::httpPost(url, 10);
  499|      1|}
  500|       |
  501|       |WEATHER_DATABASE iDomTOOLS::getAlert()
  502|      1|{
  503|      1|    std::string bufferData = useful_F_libs::httpPost(context->server_settings->_server.lightningApiURL);
  504|      1|    std::string d = useful_F_libs::removeHtmlTag(bufferData);
  505|       |
  506|      1|    auto vect = useful_F::split(d, '\n');
  507|      1|    vect.pop_back();
  508|       |
  509|      1|    WEATHER_DATABASE wAlert;
  510|       |
  511|      1|    wAlert.lightning.alert = vect.at(0);
  512|       |
  513|      1|    return wAlert;
  514|      1|}
  515|       |
  516|       |void iDomTOOLS::textToSpeach(std::vector<std::string> *textVector)
  517|      4|{
  518|      4|    if (textVector->empty())
  519|      1|    {
  520|      1|        return;
  521|      1|    }
  522|      3|    std::string txt;
  523|       |
  524|      3|    for (const auto &a : *textVector)
  525|      7|    {
  526|      7|        txt.append(a);
  527|      7|    }
  528|       |    /////////// start thread TTS - python use ////////////////////////
  529|      3|    std::string command = " python /home/pi/programowanie/iDom_server_OOP/script/PYTHON/gadacz.py \\" + txt + "\\";
  530|      3|    if (context->ptr_MPD_info->isPlay == false)
  531|      2|    {
  532|      2|        turnOnSpeakers();
  533|      2|    }
  534|       |
  535|      3|    useful_F::runLinuxCommand(command);
  536|       |
  537|      3|    if (context->ptr_MPD_info->isPlay == false)
  538|      2|    {
  539|      2|        turnOffSpeakers();
  540|      2|    }
  541|      3|}
  542|       |
  543|       |std::string iDomTOOLS::getTextToSpeach()
  544|      3|{
  545|      3|    std::vector<std::string> dayL = useful_F::split(getDayLenght(), ':');
  546|      3|    std::stringstream text;
  547|      3|    std::string smogText = getSmog().value_or("0");
  548|      3|    int smogInt = std::stoi(smogText);
  549|      3|    text << "Godzina: " << Clock::getTime().getString();
  550|      3|    text << ". \nWschód słońca: " << getSunrise();
  551|      3|    text << ". \nZachód słońca: " << getSunset();
  552|      3|    text << ". \nDługość dnia: " << dayL[0] << " godzin " << dayL[1] << " minut";
  553|      3|    text << ". \n";
  554|      3|    dayL = getTemperature();
  555|      3|    text << "Temperatura na zewnątrz: " << dayL[1] << " stopnia. \n";
  556|      3|    text << "Temperatura w pokoju: " << dayL[0] << " stopnia. \n";
  557|      3|    text << "Smog: " << smogText << " mg/m^3. \n";
  558|      3|    if (smogInt > 50)
  559|      0|    {
  560|      0|        int result = smogInt * 2;
  561|      0|        text << "UWAGA! Maksymalna wartość przekroczona " << result << "%.";
  562|      0|    }
  563|      3|    return text.str();
  564|      3|}
  565|       |
  566|       |std::vector<std::string> iDomTOOLS::getTemperature()
  567|     16|{
  568|     16|    std::vector<std::string> vect;
  569|     16|    vect.push_back(to_string_with_precision(context->ptr_buderus->getInsideTemp()));
  570|     16|    vect.push_back(to_string_with_precision(context->ptr_buderus->getOutdoorTemp()));
  571|     16|    std::string msg("Inside: ");
  572|     16|    msg.append(vect[0]);
  573|     16|    msg.append(" Outside: ");
  574|     16|    msg.append(vect[1]);
  575|     16|    context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/temperature", msg);
  576|     16|    return vect;
  577|     16|}
  578|       |
  579|       |std::string iDomTOOLS::getTemperatureString()
  580|      2|{
  581|       |    //    std::stringstream str;
  582|       |    //    str << std::setprecision(4)
  583|       |    //        << context->ptr_buderus->getInsideTemp() << ":"
  584|       |    //        << context->ptr_buderus->getOutdoorTemp() << ":"
  585|       |    //        << context->ptr_buderus->getBoilerTemp() << ":"
  586|       |    //        << getFloorTemp();
  587|       |    //    return str.str();
  588|      2|    nlohmann::json jj;
  589|      2|    jj["inside"] = context->ptr_buderus->getInsideTemp();
  590|      2|    jj["outdoor"] = context->ptr_buderus->getOutdoorTemp();
  591|      2|    jj["boiler"] = context->ptr_buderus->getBoilerTemp();
  592|      2|    jj["floor"] = std::stod(getFloorTemp());
  593|      2|    jj["currentFlow"] = context->ptr_buderus->getCurFlowTemp();
  594|       |
  595|      2|    return jj.dump();
  596|      2|}
  597|       |
  598|       |std::optional<std::string> iDomTOOLS::getSmog()
  599|     14|{
  600|     14|    std::string addres = "https://api.gios.gov.pl/pjp-api/rest/data/getData/20320";
  601|     14|    std::string readBuffer = useful_F_libs::httpPost(addres, 20);
  602|     14|    std::optional<std::string> ret;
  603|     14|    try
  604|     14|    {
  605|     14|        auto jj = nlohmann::json::parse(readBuffer);
  606|     14|        int i = 1;
  607|     15|        while (true)
  608|      3|        {
  609|      3|            readBuffer = jj["values"][i]["value"].dump();
  610|      3|            if (readBuffer != "null" or i == 2)
  611|      2|            {
  612|      2|                break;
  613|      2|            }
  614|      1|            ++i;
  615|      1|        }
  616|     14|    }
  617|     14|    catch (...)
  618|     14|    {
  619|     12|        log_file_mutex.mutex_lock();
  620|     12|        log_file_cout << CRITICAL << "wyjatek substr() e getSmog()  return: " << useful_F_libs::stringToHex(readBuffer) << " size: " << readBuffer.size() << std::endl;
  621|     12|        log_file_mutex.mutex_unlock();
  622|     12|        return std::nullopt;
  623|     12|    }
  624|      2|    if (readBuffer != "null")
  625|      1|        ret = readBuffer;
  626|      2|    context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/smog", readBuffer);
  627|      2|    return ret;
  628|     14|}
  629|       |
  630|       |void iDomTOOLS::send_data_to_thingSpeak()
  631|      7|{
  632|       |    // get temperature in gardener house
  633|      7|    RADIO_WEATHER_STATION *st = static_cast<RADIO_WEATHER_STATION *>(context->main_REC->getEqPointer("first"));
  634|      7|    auto temp = st->data.getTemperature();
  635|       |
  636|      7|    std::vector<std::string> _temperature = getTemperature();
  637|      7|    std::stringstream addres;
  638|      7|    addres << "api.thingspeak.com/update?key=";
  639|      7|    addres << m_key;
  640|      7|    addres << "&field1=" << _temperature.at(1);
  641|      7|    addres << "&field2=" << _temperature.at(0);
  642|      7|    auto smog = getSmog();
  643|      7|    if (smog.has_value())
  644|      0|        addres << "&field5=" << getSmog().value();
  645|      7|    addres << "&field6=" << to_string_with_precision(context->ptr_buderus->getBoilerTemp());
  646|      7|    addres << "&field7=" << context->ptr_buderus->isHeatingActiv();
  647|      7|    if (temp.has_value())
  648|      0|        addres << "&field8=" << temp.value();
  649|       |    //////////////////////////////// pozyskanie temperatury
  650|      7|    m_allThermometer.updateAll(&_temperature);
  651|      7|    sendSMSifTempChanged("outside", 0);
  652|      7|    sendSMSifTempChanged("inside", 24);
  653|      7|    std::string s = useful_F_libs::httpPost(addres.str(), 10);
  654|       |
  655|      7|    std::string s2 = "0";
  656|      7|    try
  657|      7|    {
  658|      7|        addres.str("");
  659|      7|        addres << "api.thingspeak.com/update?key=";
  660|      7|        addres << m_key2;
  661|      7|        addres << "&field1=" << context->lusina.shedFloor.average();
  662|      7|        addres << "&field2=" << context->lusina.shedPres.average();
  663|      7|        addres << "&field3=" << context->lusina.shedHum.average();
  664|      7|        addres << "&field4=" << context->lusina.shedTemp.average();
  665|      7|        addres << "&field5=" << context->ptr_buderus->getCurFlowTemp();
  666|      7|        s2 = useful_F_libs::httpPost(addres.str(), 10);
  667|      7|    }
  668|      7|    catch (...)
  669|      7|    {
  670|      0|        log_file_mutex.mutex_lock();
  671|      0|        log_file_cout << CRITICAL << " błąd wysyłania temperatury na thingspeak brak jsona" << std::endl;
  672|      0|        log_file_mutex.mutex_unlock();
  673|      0|        s2 = "1";
  674|      0|    }
  675|       |
  676|      7|    if (s == "0" or s2 == "0")
  677|      0|    {
  678|      0|        log_file_mutex.mutex_lock();
  679|      0|        log_file_cout << CRITICAL << " błąd wysyłania temperatury na thingspeak s: " << s << " s2: " << s2 << std::endl;
  680|      0|        log_file_mutex.mutex_unlock();
  681|      0|    }
  682|      7|}
  683|       |
  684|       |void iDomTOOLS::send_data_to_influxdb()
  685|      0|{
  686|       |
  687|      0|    std::unordered_map<std::string, std::unordered_map<std::string, std::optional<std::any>>> iDomData;
  688|      0|    uint64_t timestamp = Clock::getTimestamp();
  689|      0|    try
  690|      0|    {
  691|      0|        RADIO_WEATHER_STATION *st = static_cast<RADIO_WEATHER_STATION *>(context->main_REC->getEqPointer("first"));
  692|       |
  693|      0|        std::vector<std::string> _temperature = getTemperature();
  694|       |
  695|      0|        iDomData["temperatura"]["outdoor"] = std::stof(_temperature.at(1));
  696|      0|        iDomData["temperatura"]["inside"] = std::stof(_temperature.at(0));
  697|      0|        iDomData["temperatura"]["floor"] = context->lusina.shedFloor.average();
  698|      0|        iDomData["temperatura"]["bojler"] = context->ptr_buderus->getBoilerTemp();
  699|       |
  700|      0|        std::optional<double> temp = st->data.getTemperature();
  701|      0|        if (temp.has_value())
  702|      0|            iDomData["temperatura"]["domek"] = temp.value();
  703|      0|        else
  704|      0|            iDomData["temperatura"]["domek"] = std::nullopt;
  705|       |
  706|      0|        iDomData["temperatura"]["flow"] = context->ptr_buderus->getCurFlowTemp();
  707|      0|        iDomData["temperatura"]["shedTemp"] = context->lusina.shedTemp.average();
  708|       |
  709|      0|        if (context->lusina.shedHum.getSize() > 1)
  710|      0|            iDomData["wilgoc"]["humi"] = context->lusina.shedHum.average();
  711|      0|        else
  712|      0|            iDomData["wilgoc"]["humi"] = std::nullopt;
  713|       |
  714|      0|        auto smog = getSmog();
  715|      0|        if (smog.has_value())
  716|      0|            iDomData["smog"]["smog"] = std::stof(smog.value());
  717|      0|        else
  718|      0|            iDomData["smog"]["smog"] = std::nullopt;
  719|       |
  720|      0|        if (context->lusina.shedPres.getSize() > 1)
  721|      0|            iDomData["cisnienie"]["dom"] = context->lusina.shedPres.average();
  722|      0|        else
  723|      0|            iDomData["cisnienie"]["dom"] = std::nullopt;
  724|      0|        if (context->lusina.acdc.getSize() > 1)
  725|      0|            iDomData["acdc"]["acdc"] = context->lusina.acdc.average();
  726|      0|        else
  727|      0|            iDomData["acdc"]["acdc"] = std::nullopt;
  728|       |
  729|      0|        iDomData["piec"]["praca"] = context->ptr_buderus->isHeatingActiv();
  730|       |
  731|      0|        dbClientFactory dbFactory;
  732|      0|        auto db = dbFactory.createDbClient();
  733|      0|        auto returnCode = db->upload_iDomData(iDomData, timestamp, &context->server_settings->_database);
  734|       |
  735|      0|        if (returnCode != 204)
  736|      0|        {
  737|      0|            log_file_mutex.mutex_lock();
  738|      0|            log_file_cout << CRITICAL << " błąd wysyłania danych iDom do influxdb " << returnCode << " " << reasonPhrase(returnCode) << std::endl;
  739|      0|            log_file_mutex.mutex_unlock();
  740|       |
  741|      0|            std::exception kk;
  742|      0|            throw kk;
  743|      0|        }
  744|      0|    }
  745|      0|    catch (std::exception &e)
  746|      0|    {
  747|      0|        context->dbDataQueue.Put(DB_DATA(timestamp, iDomData)); // put data to queue, send later
  748|      0|        log_file_mutex.mutex_lock();
  749|      0|        log_file_cout << CRITICAL << " błąd (wyjatek) wysyłania temperatury do influxdb " << e.what() << std::endl;
  750|      0|        log_file_mutex.mutex_unlock();
  751|      0|    }
  752|      0|}
  753|       |
  754|       |std::string iDomTOOLS::getFloorTemp()
  755|      2|{
  756|      2|    return std::to_string(context->lusina.shedFloor.average());
  757|      2|}
  758|       |
  759|       |nlohmann::json iDomTOOLS::sendViberMsg(const std::string &msg,
  760|       |                                       const std::string &receiver,
  761|       |                                       const std::string &senderName,
  762|       |                                       const std::string &accessToken,
  763|       |                                       const std::string &url)
  764|     12|{
  765|     12|    nlohmann::json jj;
  766|     12|    if (m_viber_notif == false)
  767|      0|        return jj;
  768|     12|    std::lock_guard<std::mutex> lock(m_msgMutex);
  769|     12|    try
  770|     12|    {
  771|     12|        jj = nlohmann::json::parse(m_viber.sendViberMSG(msg, receiver, senderName, accessToken, url));
  772|     12|    }
  773|     12|    catch (...)
  774|     12|    {
  775|      0|        log_file_mutex.mutex_lock();
  776|      0|        log_file_cout << CRITICAL << "wyjatek json w wysylaniu sendViberMsg !!!!!!" << std::endl;
  777|      0|        log_file_mutex.mutex_unlock();
  778|      0|    }
  779|     12|    return jj;
  780|     12|}
  781|       |
  782|       |nlohmann::json iDomTOOLS::sendViberPicture(const std::string &msg,
  783|       |                                           const std::string &image,
  784|       |                                           const std::string &receiver,
  785|       |                                           const std::string &senderName,
  786|       |                                           const std::string &accessToken,
  787|       |                                           const std::string &url)
  788|     12|{
  789|     12|    nlohmann::json jj;
  790|     12|    if (m_viber_notif == false)
  791|      0|        return jj;
  792|     12|    std::lock_guard<std::mutex> lock(m_msgMutex);
  793|     12|    try
  794|     12|    {
  795|     12|        jj = nlohmann::json::parse(m_viber.sendViberPicture(msg, image, receiver, senderName, accessToken, url));
  796|     12|    }
  797|     12|    catch (...)
  798|     12|    {
  799|      0|        log_file_mutex.mutex_lock();
  800|      0|        log_file_cout << CRITICAL << "wyjatek json w wysylaniu sendViberPicture() !!!!!!" << std::endl;
  801|      0|        log_file_mutex.mutex_unlock();
  802|      0|    }
  803|     12|    return jj;
  804|     12|}
  805|       |
  806|       |nlohmann::json iDomTOOLS::sendViberUrl(const std::string &msg, const std::string &url2, const std::string &receiver, const std::string &senderName, const std::string &accessToken, const std::string &url)
  807|      0|{
  808|      0|    nlohmann::json jj;
  809|      0|    if (m_viber_notif == false)
  810|      0|        return jj;
  811|      0|    std::lock_guard<std::mutex> lock(m_msgMutex);
  812|      0|    try
  813|      0|    {
  814|      0|        jj = nlohmann::json::parse(m_viber.sendViberUrl(msg, url2, receiver, senderName, accessToken, url));
  815|      0|    }
  816|      0|    catch (...)
  817|      0|    {
  818|      0|        log_file_mutex.mutex_lock();
  819|      0|        log_file_cout << CRITICAL << "wyjatek json w wysylaniu sendViberPicture() !!!!!!" << std::endl;
  820|      0|        log_file_mutex.mutex_unlock();
  821|      0|    }
  822|      0|    return jj;
  823|      0|}
  824|       |
  825|       |STATE iDomTOOLS::sendViberMsgBool(const std::string &msg,
  826|       |                                  const std::string &receiver,
  827|       |                                  const std::string &senderName,
  828|       |                                  const std::string &accessToken,
  829|       |                                  const std::string &url)
  830|      0|{
  831|      0|    nlohmann::json jj;
  832|      0|    if (m_viber_notif == false)
  833|      0|        return jj;
  834|      0|    jj = sendViberMsg(msg, receiver, senderName, accessToken, url);
  835|      0|    STATE ret = STATE::SEND_NOK;
  836|      0|    if (jj.find("status_message") not_eq jj.end())
  837|      0|    {
  838|      0|        if (jj.at("status_message").get<std::string>() == "ok")
  839|      0|        {
  840|      0|            ret = STATE::SEND_OK;
  841|      0|        }
  842|      0|    }
  843|      0|    else
  844|      0|    {
  845|      0|        log_file_mutex.mutex_lock();
  846|      0|        log_file_cout << ERROR << "nie wyslanno wiadomosci viber" << jj.dump() << std::endl;
  847|      0|        log_file_mutex.mutex_unlock();
  848|      0|    }
  849|      0|    return ret;
  850|      0|}
  851|       |
  852|       |STATE iDomTOOLS::sendViberPictureBool(const std::string &msg,
  853|       |                                      const std::string &image,
  854|       |                                      const std::string &receiver,
  855|       |                                      const std::string &senderName,
  856|       |                                      const std::string &accessToken,
  857|       |                                      const std::string &url)
  858|      0|{
  859|      0|    nlohmann::json jj = sendViberPicture(msg, image, receiver, senderName, accessToken, url);
  860|      0|    STATE ret = STATE::SEND_NOK;
  861|      0|    if (m_viber_notif == false)
  862|      0|        return ret;
  863|      0|    if (jj.at("status_message").get<std::string>() == "ok")
  864|      0|    {
  865|      0|        ret = STATE::SEND_OK;
  866|      0|    }
  867|      0|    else
  868|      0|    {
  869|      0|        log_file_mutex.mutex_lock();
  870|      0|        log_file_cout << ERROR << "nie wyslanno wiadomosci viber" << jj.dump() << std::endl;
  871|      0|        log_file_mutex.mutex_unlock();
  872|      0|    }
  873|      0|    return ret;
  874|      0|}
  875|       |
  876|       |std::string iDomTOOLS::ledOFF()
  877|      0|{
  878|      0|    context->main_iDomStatus->setObjectState("Night_Light", STATE::OFF);
  879|       |    // temporary
  880|      0|    turnOff433MHzSwitch("B");
  881|      0|    return "done";
  882|      0|}
  883|       |
  884|       |std::string iDomTOOLS::ledClear()
  885|      1|{
  886|      1|    return "done";
  887|      1|}
  888|       |
  889|       |std::string iDomTOOLS::ledClear(unsigned int from, unsigned int to)
  890|      0|{
  891|      0|    return "Led cleared";
  892|      0|}
  893|       |
  894|       |std::string iDomTOOLS::ledOn()
  895|      0|{
  896|      0|    turnOn433MHzSwitch("B");
  897|      0|    return "done";
  898|      0|}
  899|       |
  900|       |void iDomTOOLS::checkAlarm()
  901|     10|{
  902|     10|    unsigned int fromVol = context->alarmTime.fromVolume;
  903|     10|    unsigned int toVol = context->alarmTime.toVolume;
  904|     10|    unsigned int radioId = context->alarmTime.radioID;
  905|       |
  906|     10|    Clock now = Clock::getTime();
  907|     10|    if (now == context->alarmTime.time && context->alarmTime.state == STATE::ACTIVE)
  908|      1|    {
  909|      1|        context->alarmTime.state = STATE::WORKING;
  910|      1|        MPD_volumeSet(context, static_cast<int>(fromVol));
  911|      1|        MPD_play(context, static_cast<int>(radioId));
  912|      1|        context->main_iDomStatus->setObjectState("alarm", STATE::DEACTIVE);
  913|      1|        context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/alarm",
  914|      1|                                      stateToString(STATE::WORKING));
  915|       |
  916|      1|        auto topic = context->server_settings->_mqtt_broker.topicSubscribe;
  917|      1|        topic.pop_back();
  918|      1|        for (const auto &command : context->alarmTime.commands)
  919|      2|        {
  920|      2|            context->mqttHandler->publish(topic + "command", command);
  921|      2|        }
  922|      1|    }
  923|       |
  924|     10|    if (context->alarmTime.state == STATE::WORKING)
  925|     10|    {
  926|     10|        auto vol = static_cast<unsigned int>(MPD_getVolume(context) + 1);
  927|     10|        if (vol < toVol)
  928|      9|        {
  929|      9|            MPD_volumeSet(context, static_cast<int>(vol));
  930|      9|        }
  931|      1|        else
  932|      1|        {
  933|      1|            context->alarmTime.state = STATE::DEACTIVE;
  934|      1|            context->main_Rs232->print("LED_CLOCK:0;");
  935|      1|            context->mqttHandler->publish(context->server_settings->_mqtt_broker.topicPublish + "/alarm",
  936|      1|                                          stateToString(STATE::DEACTIVE));
  937|      1|            if (iDomTOOLS::isItDay() == false)
  938|      1|            {
  939|      1|                context->main_iDomTools->turnOn433MHzSwitch("ALARM");
  940|      1|                saveState_iDom(context->serverStarted);
  941|      1|                log_file_mutex.mutex_lock();
  942|      1|                log_file_cout << DEBUG << "uruchamiam ALARM 433MHz" << std::endl;
  943|      1|                log_file_mutex.mutex_unlock();
  944|      1|            }
  945|      1|        }
  946|     10|    }
  947|     10|}
  948|       |
  949|       |void iDomTOOLS::saveState_iDom(const bool &started)
  950|     33|{
  951|     33|    if (started == false)
  952|     28|    {
  953|     28|        return;
  954|     28|    }
  955|      5|    iDom_SAVE_STATE info(context->server_settings->_server.saveFilePath);
  956|      5|    nlohmann::json jsonAlarm;
  957|      5|    nlohmann::json jsonMPD;
  958|      5|    nlohmann::json json_iDomLOCK;
  959|      5|    nlohmann::json json433Mhz;
  960|       |    //////////////////// iDom
  961|      5|    json_iDomLOCK["iDomLock"] = stateToString(context->idom_all_state.houseState);
  962|       |    //////////////////// alarm
  963|      5|    jsonAlarm["alarm"] = context->main_iDomStatus->getObjectStateString("alarm");
  964|      5|    jsonAlarm["time"] = context->alarmTime.time.getString();
  965|      5|    jsonAlarm["fromVolume"] = context->alarmTime.fromVolume;
  966|      5|    jsonAlarm["toVolume"] = context->alarmTime.toVolume;
  967|      5|    jsonAlarm["radioID"] = context->alarmTime.radioID;
  968|      5|    jsonAlarm["commands"] = context->alarmTime.commands;
  969|       |    //////////////////// mpd
  970|      5|    jsonMPD["music"] = context->main_iDomStatus->getObjectStateString("music");
  971|      5|    jsonMPD["speakers"] = context->main_iDomStatus->getObjectStateString("speakers");
  972|       |    ////////////////// 433Mhz
  973|      5|    auto switch433vector = context->main_REC->getSwitchPointerVector();
  974|      5|    for (auto v : switch433vector)
  975|     25|    {
  976|     25|        v->getName();
  977|     25|        json433Mhz[v->getName()] = stateToString(v->getState());
  978|     25|    }
  979|       |    ///
  980|      5|    nlohmann::json json;
  981|      5|    json["iDom"] = json_iDomLOCK;
  982|      5|    json["ALARM"] = jsonAlarm;
  983|      5|    json["MPD"] = jsonMPD;
  984|      5|    json["433Mhz"] = json433Mhz;
  985|       |
  986|      5|    info.write(json);
  987|       |
  988|      5|    context->mqttHandler->publishRetained(context->server_settings->_mqtt_broker.topicPublish + "/state", json.dump(4));
  989|       |
  990|      5|#ifdef BT_TEST
  991|      5|    std::cout << json << std::endl;
  992|      5|    std::cout << " saved to " << context->server_settings->_server.saveFilePath << std::endl;
  993|      5|#endif
  994|      5|}
  995|       |
  996|       |void iDomTOOLS::readState_iDom(nlohmann::json jj)
  997|      2|{
  998|      2|    try
  999|      2|    {
 1000|      2|#ifdef BT_TEST
 1001|      2|        std::cout << "JSON: " << jj.dump(4) << std::endl;
 1002|      2|#endif
 1003|      2|        nlohmann::json json433MHz = jj.at("433Mhz");
 1004|       |
 1005|     12|        for (nlohmann::json::iterator it = json433MHz.begin(); it not_eq json433MHz.end(); ++it)
 1006|     10|        {
 1007|     10|            if (it.value() == "ON")
 1008|      0|            {
 1009|      0|                context->main_iDomTools->turnOn433MHzSwitch(it.key());
 1010|      0|            }
 1011|     10|            else if (it.value() == "OFF")
 1012|      0|            {
 1013|      0|                context->main_iDomTools->turnOff433MHzSwitch(it.key());
 1014|      0|            }
 1015|     10|        }
 1016|      2|        auto iDomLock = jj.at("iDom").at("iDomLock").get<std::string>();
 1017|       |
 1018|      2|        if (iDomLock == "UNLOCK")
 1019|      0|            unlockHome();
 1020|      2|        else if (iDomLock == "LOCK")
 1021|      2|            lockHome();
 1022|       |
 1023|      2|        auto mpdMusic = jj.at("MPD").at("music").get<std::string>();
 1024|      2|        auto mpdSpeakers = jj.at("MPD").at("speakers").get<std::string>();
 1025|       |
 1026|      2|        if (mpdMusic == "PLAY")
 1027|      2|            MPD_play(context);
 1028|      0|        else if (mpdMusic == "STOP")
 1029|      0|            MPD_stop();
 1030|      2|        if (mpdSpeakers == "ON")
 1031|      2|            turnOnSpeakers();
 1032|      0|        else if (mpdSpeakers == "OFF")
 1033|      0|            turnOffSpeakers();
 1034|       |
 1035|      2|        auto alarmState = jj.at("ALARM").at("alarm").get<std::string>();
 1036|      2|        auto alarmTime = jj.at("ALARM").at("time").get<std::string>();
 1037|      2|        context->alarmTime.fromVolume = jj.at("ALARM").at("fromVolume").get<unsigned int>();
 1038|      2|        context->alarmTime.toVolume = jj.at("ALARM").at("toVolume").get<unsigned int>();
 1039|      2|        context->alarmTime.radioID = jj.at("ALARM").at("radioID").get<unsigned int>();
 1040|      2|        context->alarmTime.time = Clock(alarmTime);
 1041|      2|        for (const auto &k : jj.at("ALARM").at("commands"))
 1042|      4|        {
 1043|      4|            context->alarmTime.commands.push_back(k);
 1044|      4|        }
 1045|       |
 1046|      2|        if (alarmState == "ACTIVE")
 1047|      2|        {
 1048|      2|            context->alarmTime.state = STATE::ACTIVE;
 1049|      2|            context->main_iDomStatus->setObjectState("alarm", context->alarmTime.state);
 1050|      2|            saveState_iDom(context->serverStarted);
 1051|      2|        }
 1052|      2|    }
 1053|      2|    catch (...)
 1054|      2|    {
 1055|      0|        log_file_mutex.mutex_lock();
 1056|      0|        log_file_cout << ERROR << "nie ma pliku json z stanem iDom" << std::endl;
 1057|      0|        log_file_mutex.mutex_unlock();
 1058|      0|#ifdef BT_TEST
 1059|      0|        std::cout << "nie ma pliku json z stanem iDom" << std::endl;
 1060|      0|#endif
 1061|      0|    }
 1062|      2|}
 1063|       |
 1064|       |std::string iDomTOOLS::startKodi_Thread()
 1065|      3|{
 1066|      3|    STATE kodiState = context->main_iDomStatus->getObjectState("KODI");
 1067|      3|    if (kodiState == STATE::ACTIVE)
 1068|      1|        return "kodi already run";
 1069|      2|    return iDOM_THREAD::start_thread("kodi smartTV", useful_F::kodi, context);
 1070|      3|}
 1071|       |
 1072|       |void iDomTOOLS::wifiClientConnected()
 1073|      0|{
 1074|      0|    buttonUnlockHome();
 1075|      0|}
 1076|       |
 1077|       |void iDomTOOLS::wifiClientDisconnected()
 1078|      0|{
 1079|      0|    buttonLockHome();
 1080|      0|}
 1081|       |
 1082|       |void iDomTOOLS::doorbellDingDong()
 1083|      0|{
 1084|      0|    try
 1085|      0|    {
 1086|      0|        RADIO_SWITCH *m_switch = dynamic_cast<RADIO_SWITCH *>(context->main_REC->getEqPointer("DingDong"));
 1087|      0|        m_switch->onFor15sec();
 1088|      0|        log_file_mutex.mutex_lock();
 1089|      0|        log_file_cout << INFO << "Dzwonek do drzwi" << std::endl;
 1090|      0|        log_file_mutex.mutex_unlock();
 1091|      0|    }
 1092|      0|    catch (...)
 1093|      0|    {
 1094|      0|        log_file_mutex.mutex_lock();
 1095|      0|        log_file_cout << ERROR << "brak dzwonka do drzwi!!! w paśmie 433MHz" << std::endl;
 1096|      0|        log_file_mutex.mutex_unlock();
 1097|      0|    }
 1098|      0|}
 1099|       |
 1100|       |void iDomTOOLS::runCommandFromJson(const std::vector<std::string> &jj)
 1101|     14|{
 1102|     14|    CommandHandlerMQTT commandMQTT;
 1103|     14|    for (const auto &command : jj)
 1104|     28|    {
 1105|     28|        auto v = useful_F::split(command, ' ');
 1106|     28|#ifdef BT_TEST
 1107|     28|        std::cout << "command to run: " << command << std::endl;
 1108|     28|#endif
 1109|     28|        commandMQTT.run(v, context);
 1110|     28|    }
 1111|     14|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/idomtools_interface.h:
    1|       |#pragma once
    2|       |
    3|       |#include <optional>
    4|       |
    5|       |#include "idomtools_useful.h"
    6|       |#include "json.hpp"
    7|       |
    8|       |
    9|       |#include "../THERMOMETER_CONTAINER/thermometer_container.h"
   10|       |#include "../../libs/useful/useful.h"
   11|       |
   12|       |struct thread_context;
   13|       |
   14|       |class iDomTOOLS_INTERFACE
   15|       |{
   16|       |
   17|       |public:
   18|    182|    virtual ~iDomTOOLS_INTERFACE() = default;
   19|       |
   20|       |    virtual TEMPERATURE_STATE getTHERMOMETER_CONTAINERlastState(const std::string &name) = 0;
   21|       |    virtual TEMPERATURE_STATE hasTemperatureChange(const std::string &thermometerName, double reference, double histereza) = 0;
   22|       |    virtual void sendSMSifTempChanged(const std::string &thermomethernName, int reference) = 0;
   23|       |    virtual std::string getThermoStats(const std::string &name) = 0;
   24|       |    virtual void updateTemperatureStats() = 0;
   25|       |
   26|       |    virtual void turnOnSpeakers() = 0;
   27|       |    virtual void turnOffSpeakers() = 0;
   28|       |    virtual void turnOnOff230vOutdoor() = 0;
   29|       |    virtual void turnOnOff433MHzSwitch(const std::string &name) = 0;
   30|       |    virtual void turnOn433MHzSwitch(std::string name) = 0;
   31|       |    virtual void turnOff433MHzSwitch(std::string name) = 0;
   32|       |    virtual void runOnSunset() = 0;
   33|       |    virtual void runOnSunrise() = 0;
   34|       |    virtual void lockHome() = 0;
   35|       |    virtual void unlockHome() = 0;
   36|       |
   37|       |    virtual void buttonLockHome() = 0;
   38|       |    virtual void buttonUnlockHome() = 0;
   39|       |    //////////////////////////// useful /////////////////////////
   40|       |    virtual bool isItDay() = 0;
   41|       |    virtual std::string getAllDataSunriseSunset() = 0;
   42|       |    //////////////////////////// lightning ////////////////////////
   43|       |    virtual void checkLightning() = 0;
   44|       |
   45|       |    //////////////////////////// weather /////////////////////////
   46|       |    virtual std::string getSunrise(bool extend = false) = 0;
   47|       |    virtual std::string getSunset(bool extend = false) = 0;
   48|       |    virtual Clock getSunsetClock() = 0;
   49|       |    virtual Clock getSunriseClock() = 0;
   50|       |    virtual std::string getDayLenght(bool extend = false) = 0;
   51|       |    virtual std::string getWeatherEvent(const std::string &city, unsigned int radius) = 0;
   52|       |
   53|       |    virtual WEATHER_DATABASE getAlert() = 0;
   54|       |
   55|       |    virtual void textToSpeach(std::vector<std::string> *textVector) = 0;
   56|       |    virtual std::string getTextToSpeach() = 0;
   57|       |
   58|       |    virtual std::vector<std::string> getTemperature() = 0;
   59|       |    virtual std::string getTemperatureString() = 0;
   60|       |    virtual std::optional<std::string> getSmog() = 0;
   61|       |    virtual void send_data_to_thingSpeak() = 0;
   62|       |    virtual void send_data_to_influxdb() = 0;
   63|       |    virtual std::string getFloorTemp() = 0;
   64|       |
   65|       |    //////////////////// viber msg /////////////////////////
   66|       |    virtual nlohmann::json sendViberMsg(const std::string &msg,
   67|       |                                        const std::string &receiver,
   68|       |                                        const std::string &senderName,
   69|       |                                        const std::string &accessToken = "NULL",
   70|       |                                        const std::string &url = "NULL") = 0;
   71|       |    virtual nlohmann::json sendViberPicture(const std::string &msg,
   72|       |                                            const std::string &image,
   73|       |                                            const std::string &receiver,
   74|       |                                            const std::string &senderName,
   75|       |                                            const std::string &accessToken = "NULL",
   76|       |                                            const std::string &url = "NULL") = 0;
   77|       |    virtual nlohmann::json sendViberUrl(const std::string &msg,
   78|       |                                        const std::string &url2,
   79|       |                                        const std::string &receiver,
   80|       |                                        const std::string &senderName,
   81|       |                                        const std::string &accessToken = "NULL",
   82|       |                                        const std::string &url = "NULL") = 0;
   83|       |    virtual STATE sendViberMsgBool(const std::string &msg,
   84|       |                                   const std::string &receiver,
   85|       |                                   const std::string &senderName,
   86|       |                                   const std::string &accessToken = "NULL",
   87|       |                                   const std::string &url = "NULL") = 0;
   88|       |    virtual STATE sendViberPictureBool(const std::string &msg,
   89|       |                                       const std::string &image,
   90|       |                                       const std::string &receiver,
   91|       |                                       const std::string &senderName,
   92|       |                                       const std::string &accessToken = "NULL",
   93|       |                                       const std::string &url = "NULL") = 0;
   94|       |
   95|       |    //////////////////// LED part //////////////////////////
   96|       |    virtual std::string ledOFF() = 0;
   97|       |    virtual std::string ledClear() = 0;
   98|       |    virtual std::string ledClear(unsigned int from, unsigned int to) = 0;
   99|       |    virtual std::string ledOn() = 0;
  100|       |    //////////////////// ALERT //////////////////////////
  101|       |    virtual void checkAlarm() = 0;
  102|       |    //////////////////// MPD part //////////////////////////
  103|       |    virtual void MPD_play(thread_context *context) = 0;
  104|       |    virtual void MPD_stop() = 0;
  105|       |    virtual void MPD_next() = 0;
  106|       |    virtual void MPD_prev() = 0;
  107|       |    virtual void MPD_pause() = 0;
  108|       |    virtual void MPD_volumeUp() = 0;
  109|       |    virtual void MPD_volumeDown() = 0;
  110|       |    virtual void MPD_volumeSet(thread_context *context, int vol) = 0;
  111|       |    virtual void MPD_play(thread_context *context, int id) = 0;
  112|       |    virtual int MPD_getVolume(thread_context *context) = 0;
  113|       |
  114|       |    /////////////////////// SAVE STATE iDOM ////////////////
  115|       |    virtual void saveState_iDom(const bool &started) = 0;
  116|       |    virtual void readState_iDom(nlohmann::json jj) = 0;
  117|       |
  118|       |    /////////////////////// system linux ///////////////////
  119|       |    virtual std::string getSystemInfo() = 0;
  120|       |    /////////////////////// KODI ////////////////////////
  121|       |    virtual std::string startKodi_Thread() = 0;
  122|       |    /////////////////////// WiFi //////////////////////////
  123|       |    virtual void wifiClientConnected() = 0;
  124|       |    virtual void wifiClientDisconnected() = 0;
  125|       |
  126|       |    /////////////////////// health check //////////////////
  127|       |    virtual void healthCheck() = 0;
  128|       |
  129|       |    ////////////////////// system /////////////////////////
  130|       |    virtual void close_iDomServer [[noreturn]] () = 0;
  131|       |    virtual void reloadSoft_iDomServer [[noreturn]] () = 0;
  132|       |    virtual void reloadHard_iDomServer [[noreturn]] () = 0;
  133|       |    virtual void raspberryReboot [[noreturn]] () = 0;
  134|       |
  135|       |    //////////////////////// iDom_API /////////////////////
  136|       |    // std::string dump() const override;
  137|       |
  138|       |    //////////////////////// link generator ///////////////
  139|       |    virtual std::string getLink(std::vector<std::string> v) = 0;
  140|       |
  141|       |    //////////////////  doorbell  ////////////////////////
  142|       |    virtual void doorbellDingDong() = 0;
  143|       |
  144|       |    virtual void runCommandFromJson(const std::vector<std::string> &jj) = 0;
  145|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/idomtools_mpd.cpp:
    1|       |#include "idomtools.h"
    2|       |#include "../blockQueue/blockqueue.h"
    3|       |#include "../iDom_server_OOP.h"
    4|       |
    5|       |void iDomTOOLS::MPD_play(thread_context *context)
    6|      7|{
    7|      7|    if (context->idom_all_state.houseState == STATE::UNLOCK)
    8|      2|    {
    9|      2|        blockQueue _q;
   10|      2|        _q._add(MPD_COMMAND::PLAY);
   11|      2|    }
   12|      5|    else
   13|      5|    {
   14|      5|        context->myEventHandler.run("MPD")->addEvent("MPD can not start due to home state: " +
   15|      5|                                                     stateToString(context->idom_all_state.houseState));
   16|      5|    }
   17|      7|}
   18|       |
   19|       |void iDomTOOLS::MPD_stop()
   20|      3|{
   21|      3|    blockQueue _q;
   22|      3|    _q._add(MPD_COMMAND::STOP);
   23|      3|}
   24|       |
   25|       |void iDomTOOLS::MPD_next()
   26|      1|{
   27|      1|    blockQueue _q;
   28|      1|    _q._add(MPD_COMMAND::NEXT);
   29|      1|}
   30|       |
   31|       |void iDomTOOLS::MPD_prev()
   32|      1|{
   33|      1|    blockQueue _q;
   34|      1|    _q._add(MPD_COMMAND::PREV);
   35|      1|}
   36|       |
   37|       |void iDomTOOLS::MPD_pause()
   38|      2|{
   39|      2|    blockQueue _q;
   40|      2|    _q._add(MPD_COMMAND::PAUSE);
   41|      2|}
   42|       |
   43|       |void iDomTOOLS::MPD_volumeUp()
   44|      2|{
   45|      2|    blockQueue _q;
   46|      2|    _q._add(MPD_COMMAND::VOLUP);
   47|      2|}
   48|       |
   49|       |void iDomTOOLS::MPD_volumeDown()
   50|      1|{
   51|      1|    blockQueue _q;
   52|      1|    _q._add(MPD_COMMAND::VOLDOWN);
   53|      1|}
   54|       |
   55|       |void iDomTOOLS::MPD_volumeSet(thread_context *context, int vol)
   56|     11|{
   57|     11|    context->ptr_MPD_info->volume = vol;
   58|     11|    blockQueue _q;
   59|     11|    _q._add(MPD_COMMAND::VOLSET);
   60|     11|}
   61|       |
   62|       |void iDomTOOLS::MPD_play(thread_context *context, int id)
   63|      3|{
   64|      3|    if (context->idom_all_state.houseState == STATE::UNLOCK)
   65|      1|    {
   66|      1|        context->ptr_MPD_info->currentSongID = id;
   67|      1|        blockQueue _q;
   68|      1|        _q._add(MPD_COMMAND::PLAY_ID);
   69|      1|    }
   70|      2|    else
   71|      2|    {
   72|      2|        context->myEventHandler.run("MPD")->addEvent("MPD can not start due to home state: " +
   73|      2|                                                     stateToString(context->idom_all_state.houseState));
   74|      2|    }
   75|      3|}
   76|       |
   77|       |int iDomTOOLS::MPD_getVolume(thread_context *context)
   78|     11|{
   79|     11|    return context->ptr_MPD_info->volume;
   80|     11|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/idomtools_system.cpp:
    1|       |#include "idomtools.h"
    2|       |#include <sys/sysinfo.h>
    3|       |
    4|       |#include "../433MHz/RFLink/rflinkhandler.h"
    5|       |#include "../functions/functions.h"
    6|       |
    7|       |std::string iDomTOOLS::getSystemInfo()
    8|      2|{
    9|      2|    double load[3];
   10|      2|    if (getloadavg(load, 3) not_eq -1)
   11|      2|    {
   12|      2|#ifdef BT_TEST
   13|      2|        printf("load average : %f , %f , %f\n", load[0], load[1], load[2]);
   14|      2|#endif
   15|      2|    }
   16|      2|    const double megabyte = 1024 * 1024;
   17|      2|    struct sysinfo info;
   18|      2|    sysinfo(&info);
   19|       |
   20|      2|    long input_seconds = info.uptime;
   21|      2|    auto days = input_seconds / 60 / 60 / 24;
   22|      2|    auto hours = (input_seconds / 60 / 60) % 24;
   23|      2|    auto minutes = (input_seconds / 60) % 60;
   24|      2|    auto seconds = input_seconds % 60;
   25|       |
   26|      2|    std::stringstream ret;
   27|      2|    ret << "System uptime: " << days << " day " << hours
   28|      2|        << " hours " << minutes << " minutes "
   29|      2|        << seconds << " seconds " << std::endl
   30|      2|        << "Load: "
   31|      2|        << (info.loads[0] / 65536) << "% - 1 min, " << (info.loads[1] / 65536)
   32|      2|        << "% - 5 min, " << (info.loads[2] / 65536) << "% - 15 min." << std::endl
   33|      2|        << "process count : " << info.procs << std::endl
   34|      2|        << "total RAM   : " << (info.totalram / megabyte) << "MB" << std::endl
   35|      2|        << "free RAM   : " << (info.freeram / megabyte) << "MB" << std::endl;
   36|       |
   37|      2|    return ret.str();
   38|      2|}
   39|       |
   40|       |/////////////////////// health check //////////////////
   41|       |void iDomTOOLS::healthCheck()
   42|      1|{
   43|      1|    int alarm_433MHz = 2131;
   44|       |
   45|      1|    if (context->mqttHandler->_connected == false)
   46|      1|    {
   47|      1|        puts("brak polaczenia z serverm MQTT");
   48|      1|    }
   49|      1|    if (context->mqttHandler->_subscribed == false)
   50|      0|    {
   51|      0|        puts("brak subskrybcji do servera mqtt");
   52|      0|    }
   53|       |
   54|       |    ////////////// RFLink ///////////
   55|      1|    auto t = Clock::getUnixTime() - context->main_RFLink->m_pingTime;
   56|       |
   57|      1|    if (t > 310 and context->mqttHandler->_subscribed == true and context->server_settings->_runThread.RFLink == true)
   58|      1|    {
   59|      1|        m_restartAlarmRFLink++;
   60|      1|        if (m_restartAlarmRFLink == 4)
   61|      0|        {
   62|      0|            log_file_mutex.mutex_lock();
   63|      0|            log_file_cout << WARNING << "restart servera z powodu braku polaczenia z RFLinkiem" << std::endl;
   64|      0|            log_file_mutex.mutex_unlock();
   65|      0|            context->main_iDomTools->reloadHard_iDomServer();
   66|      0|        }
   67|      1|        else if (m_restartAlarmRFLink == 3)
   68|      0|        {
   69|      0|            context->main_RFLink = std::make_shared<RFLinkHandler>(context);
   70|      0|            useful_F::sleep(1s);
   71|      0|            context->main_RFLink->init();
   72|       |
   73|       |            // context->main_RFLink->sendCommand("10;REBOOT;");
   74|      0|        }
   75|      1|        context->main_RFLink->sendCommand("10;PING;");
   76|      1|        context->main_RFLink->sendCommand("10;PING;");
   77|      1|        context->main_RFLink->sendCommand("10;PING;");
   78|      1|        std::string m("brak połaczenia RS232 z RFLink'iem");
   79|      1|        std::cout << "brak pingu RFLinka 433MHz t: " << Clock::unixTimeToString(t) << std::endl;
   80|      1|        log_file_mutex.mutex_lock();
   81|      1|        log_file_cout << WARNING << "braku polaczenia z RFLinkiem" << std::endl;
   82|      1|        log_file_mutex.mutex_unlock();
   83|      1|        context->iDomAlarm.raiseAlarm(alarm_433MHz, m);
   84|      1|        context->main_iDomTools->sendViberMsg(m, context->server_settings->_fb_viber.viberReceiver.at(0),
   85|      1|                                              context->server_settings->_fb_viber.viberSender + "health");
   86|      1|    }
   87|      0|    else
   88|      0|    {
   89|      0|        context->iDomAlarm.clearAlarm(alarm_433MHz);
   90|      0|        m_restartAlarmRFLink = 0;
   91|      0|    }
   92|      1|}
   93|       |
   94|       |std::string iDomTOOLS::dump() const
   95|      0|{
   96|      0|    std::stringstream ret;
   97|      0|    ret << std::boolalpha;
   98|      0|    ret << "m_viber_notif: " << m_viber_notif << std::endl;
   99|      0|    ret << " m_restartAlarmRFLink: " << this->m_restartAlarmRFLink << std::endl;
  100|      0|    ret << " key: " << this->m_key << std::endl;
  101|      0|    ret << " lastButton433MHzLockUnlockTime: " << this->m_lastButton433MHzLockUnlockTime << std::endl;
  102|      0|    return ret.str();
  103|      0|}
  104|       |
  105|       |std::string iDomTOOLS::getLink(std::vector<std::string> v)
  106|      1|{
  107|      1|    generator gg;
  108|      1|    std::string tempName = gg.random_string(20);
  109|      1|    auto command = std::accumulate(std::begin(v), std::end(v), std::string(), [](const std::string &lhs, const std::string &rhs)
  110|      1|                                   { return lhs.empty() ? rhs : lhs + ' ' + rhs; });
  111|      1|    context->m_keyHandler->addTempKEY(tempName, command, context->server_settings->_gateway.keySize);
  112|      1|    std::string key = context->m_keyHandler->getKEY(tempName);
  113|      1|    std::stringstream ret;
  114|       |
  115|      1|    ret << context->server_settings->_gateway.url << "?name=" << tempName << "&key=" << key;
  116|       |
  117|      1|    for (const auto &s : v)
  118|      1|    {
  119|      1|        ret << "&" << s;
  120|      1|    }
  121|       |
  122|      1|    return ret.str();
  123|      1|}
  124|       |
  125|       |void iDomTOOLS::reloadSoft_iDomServer()
  126|      0|{
  127|      0|    context->iDomProgramState = iDomStateEnum::RELOAD;
  128|      0|    context->main_iDomTools->saveState_iDom(context->serverStarted);
  129|      0|    useful_F::workServer = false;
  130|      0|}
  131|       |
  132|       |void iDomTOOLS::reloadHard_iDomServer()
  133|      1|{
  134|      1|    context->iDomProgramState = iDomStateEnum::HARD_RELOAD;
  135|      1|    context->main_iDomTools->saveState_iDom(context->serverStarted);
  136|      1|    useful_F::workServer = false;
  137|      1|}
  138|       |
  139|       |void iDomTOOLS::raspberryReboot()
  140|      0|{
  141|      0|    iDomTOOLS::MPD_stop();
  142|      0|    context->iDomProgramState = iDomStateEnum::RASPBERRY_RELOAD;
  143|      0|    context->main_iDomTools->saveState_iDom(context->serverStarted);
  144|      0|    useful_F::workServer = false;
  145|      0|}
  146|       |
  147|       |void iDomTOOLS::close_iDomServer()
  148|      1|{
  149|      1|    iDomTOOLS::MPD_stop();
  150|      1|    context->iDomProgramState = iDomStateEnum::CLOSE;
  151|      1|    context->main_iDomTools->saveState_iDom(context->serverStarted);
  152|      1|    useful_F::workServer = false;
  153|      1|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/mock/iDomToolsMock.h:
    1|       |#pragma once
    2|       |
    3|       |#include <gmock/gmock.h>
    4|       |
    5|       |#include "../idomtools_interface.h"
    6|       |
    7|       |class iDomToolsMock : public iDomTOOLS_INTERFACE
    8|       |{
    9|       |public:
   10|     97|    ~iDomToolsMock() = default;
   11|       |    MOCK_METHOD1(getTHERMOMETER_CONTAINERlastState, TEMPERATURE_STATE(const std::string &name));
   12|       |    MOCK_METHOD3(hasTemperatureChange, TEMPERATURE_STATE(const std::string &thermometerName, double reference, double histereza));
   13|       |    MOCK_METHOD2(sendSMSifTempChanged, void(const std::string &thermomethernName, int reference));
   14|       |    MOCK_METHOD1(getThermoStats, std::string(const std::string &name));
   15|       |    MOCK_METHOD0(updateTemperatureStats, void());
   16|       |
   17|       |    MOCK_METHOD0(turnOnSpeakers, void());
   18|       |    MOCK_METHOD0(turnOffSpeakers, void());
   19|       |    MOCK_METHOD0(turnOnOff230vOutdoor, void());
   20|       |    MOCK_METHOD1(turnOnOff433MHzSwitch, void(const std::string &name));
   21|       |    MOCK_METHOD1(turnOn433MHzSwitch, void(std::string name));
   22|       |    MOCK_METHOD1(turnOff433MHzSwitch, void(std::string name));
   23|       |    MOCK_METHOD0(runOnSunset, void());
   24|       |    MOCK_METHOD0(runOnSunrise, void());
   25|       |    MOCK_METHOD0(lockHome, void());
   26|       |    MOCK_METHOD0(unlockHome, void());
   27|       |    //////////////////////////// 433MHz action ///////////////////
   28|       |    MOCK_METHOD0(switchActionOnLockHome, void());
   29|       |    MOCK_METHOD0(switchActionOnUnlockHome, void());
   30|       |
   31|       |    MOCK_METHOD0(buttonLockHome, void());
   32|       |    MOCK_METHOD0(buttonUnlockHome, void());
   33|       |    //////////////////////////// useful /////////////////////////
   34|       |    MOCK_METHOD0(isItDay, bool());
   35|       |    MOCK_METHOD0(getAllDataSunriseSunset, std::string());
   36|       |    //////////////////////////// lightning ////////////////////////
   37|       |    MOCK_METHOD0(checkLightning, void());
   38|       |
   39|       |    //////////////////////////// weather /////////////////////////
   40|       |    MOCK_METHOD1(getSunrise, std::string(bool extend));
   41|       |    MOCK_METHOD1(getSunset, std::string(bool extende));
   42|       |    MOCK_METHOD0(getSunsetClock, Clock());
   43|       |    MOCK_METHOD0(getSunriseClock, Clock());
   44|       |    MOCK_METHOD1(getDayLenght, std::string(bool extend));
   45|       |    MOCK_METHOD2(getWeatherEvent, std::string(const std::string &city, unsigned int radius));
   46|       |
   47|       |    MOCK_METHOD0(getAlert, WEATHER_DATABASE());
   48|       |
   49|       |    MOCK_METHOD1(textToSpeach, void(std::vector<std::string> *textVector));
   50|       |    MOCK_METHOD0(getTextToSpeach, std::string());
   51|       |
   52|       |    MOCK_METHOD0(getTemperature, std::vector<std::string>());
   53|       |    MOCK_METHOD0(getTemperatureString, std::string());
   54|       |    MOCK_METHOD0(getSmog, std::optional<std::string>());
   55|       |    MOCK_METHOD0(send_data_to_thingSpeak, void());
   56|       |    MOCK_METHOD0(send_data_to_influxdb, void());
   57|       |    MOCK_METHOD0(getFloorTemp, std::string());
   58|       |
   59|       |    //////////////////// viber msg /////////////////////////
   60|       |    MOCK_METHOD5(sendViberMsg, nlohmann::json(const std::string &msg,
   61|       |                                              const std::string &receiver,
   62|       |                                              const std::string &senderName,
   63|       |                                              const std::string &accessToken,
   64|       |                                              const std::string &url));
   65|       |    MOCK_METHOD6(sendViberPicture, nlohmann::json(const std::string &msg,
   66|       |                                                  const std::string &image,
   67|       |                                                  const std::string &receiver,
   68|       |                                                  const std::string &senderName,
   69|       |                                                  const std::string &accessToken,
   70|       |                                                  const std::string &url));
   71|       |    MOCK_METHOD6(sendViberUrl, nlohmann::json(const std::string &msg,
   72|       |                                              const std::string &url2,
   73|       |                                              const std::string &receiver,
   74|       |                                              const std::string &senderName,
   75|       |                                              const std::string &accessToken,
   76|       |                                              const std::string &url));
   77|       |    MOCK_METHOD5(sendViberMsgBool, STATE(const std::string &msg,
   78|       |                                         const std::string &receiver,
   79|       |                                         const std::string &senderName,
   80|       |                                         const std::string &accessToken,
   81|       |                                         const std::string &url));
   82|       |    MOCK_METHOD6(sendViberPictureBool, STATE(const std::string &msg,
   83|       |                                             const std::string &image,
   84|       |                                             const std::string &receiver,
   85|       |                                             const std::string &senderName,
   86|       |                                             const std::string &accessToken,
   87|       |                                             const std::string &url));
   88|       |
   89|       |    //////////////////// LED part //////////////////////////
   90|       |    MOCK_METHOD0(ledOFF, std::string());
   91|       |    MOCK_METHOD0(ledClear, std::string());
   92|       |    MOCK_METHOD2(ledClear, std::string(unsigned int from, unsigned int to));
   93|       |    MOCK_METHOD0(ledOn, std::string());
   94|       |    //////////////////// ALERT //////////////////////////
   95|       |    MOCK_METHOD0(checkAlarm, void());
   96|       |    //////////////////// MPD part //////////////////////////
   97|       |    MOCK_METHOD1(MPD_play, void(thread_context *context));
   98|       |    MOCK_METHOD0(MPD_stop, void());
   99|       |    MOCK_METHOD0(MPD_next, void());
  100|       |    MOCK_METHOD0(MPD_prev, void());
  101|       |    MOCK_METHOD0(MPD_pause, void());
  102|       |    MOCK_METHOD0(MPD_volumeUp, void());
  103|       |    MOCK_METHOD0(MPD_volumeDown, void());
  104|       |    MOCK_METHOD2(MPD_volumeSet, void(thread_context *context, int vol));
  105|       |    MOCK_METHOD2(MPD_play, void(thread_context *context, int id));
  106|       |    MOCK_METHOD1(MPD_getVolume, int(thread_context *context));
  107|       |
  108|       |    /////////////////////// SAVE STATE iDOM ////////////////
  109|       |    MOCK_METHOD1(saveState_iDom, void(const bool &started));
  110|       |    MOCK_METHOD1(readState_iDom, void(nlohmann::json jj));
  111|       |
  112|       |    /////////////////////// system linux ///////////////////
  113|       |    MOCK_METHOD0(getSystemInfo, std::string());
  114|       |    /////////////////////// KODI ////////////////////////
  115|       |    MOCK_METHOD0(startKodi_Thread, std::string());
  116|       |    /////////////////////// WiFi //////////////////////////
  117|       |    MOCK_METHOD0(wifiClientConnected, void());
  118|       |    MOCK_METHOD0(wifiClientDisconnected, void());
  119|       |
  120|       |    /////////////////////// health check //////////////////
  121|       |    MOCK_METHOD0(healthCheck, void());
  122|       |
  123|       |    ////////////////////// system /////////////////////////
  124|       |    MOCK_METHOD0(close_iDomServer, void());
  125|       |    MOCK_METHOD0(reloadSoft_iDomServer, void());
  126|       |    MOCK_METHOD0(reloadHard_iDomServer, void());
  127|       |    MOCK_METHOD0(raspberryReboot, void());
  128|       |
  129|       |    //////////////////////// iDom_API /////////////////////
  130|       |    // std::string dump() const override;
  131|       |
  132|       |    //////////////////////// link generator ///////////////
  133|       |    MOCK_METHOD1(getLink, std::string(std::vector<std::string> v));
  134|       |
  135|       |    //////////////////  doorbell  ////////////////////////
  136|       |    MOCK_METHOD0(doorbellDingDong, void());
  137|       |    
  138|       |    MOCK_METHOD1(runCommandFromJson, void(const std::vector<std::string> &jj));
  139|       |};
  140|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/test/iDomTools_fixture.h:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include "testJSON.h"
    4|       |#include "../../src/functions/functions.h"
    5|       |#include "../../RADIO_433_eq/radio_433_eq.h"
    6|       |#include "../../HOUSE/TEST/house_room_handler_stub.h"
    7|       |#include "../../SATEL_INTEGRA/BT/satel_integra_stub.h"
    8|       |#include "../../buderus/mock/buderus_mock.h"
    9|       |#include "../../iDomTools/idomtools.h"
   10|       |
   11|       |class iDomTOOLS_ClassTest : public testing::Test
   12|       |{
   13|       |public:
   14|       |    TEST_JSON test_Json;
   15|       |    thread_context test_context;
   16|       |    CONFIG_JSON test_server_set;
   17|       |    std::shared_ptr<RADIO_EQ_CONTAINER> test_rec;
   18|       |    ALERT test_alarmTime;
   19|       |    SATEL_INTEGRA_HANDLER_STUB test_satel;
   20|       |    std::shared_ptr<BUDERUS_MOCK> testBuderusMock;
   21|       |    /////// method
   22|       |    iDomTOOLS_ClassTest():test_rec(std::make_shared<RADIO_EQ_CONTAINER>(&test_context)),
   23|       |                            testBuderusMock(std::make_shared<BUDERUS_MOCK>())
   24|     68|    {
   25|     68|        std::cout << "konstruktor testu " <<std::endl;
   26|     68|        test_server_set._server.TS_KEY = "key test";
   27|     68|        test_server_set._fb_viber.viberSender = "test sender";
   28|     68|        test_server_set._fb_viber.viberReceiver = {"R1","R2"};
   29|     68|        test_server_set._server.saveFilePath = "/mnt/ramdisk/iDomStateTest2.save";
   30|     68|        test_server_set._server.radio433MHzConfigFile = "/mnt/ramdisk/433_eq_conf.json";
   31|     68|        test_server_set._server.keyDatabasePath = "/mnt/ramdisk/key.database";
   32|     68|        test_server_set._command = nlohmann::json::parse(R"({
   33|     68|        "lock":["jedna komenda", "druga komenda"],
   34|     68|        "unlock":["jedna komenda unlock", "druga komenda unlock"],
   35|     68|        "sunrise":{
   36|     68|            "lock": ["433MHz switch B OFF", "sdruga komenda sunrise lock"],
   37|     68|            "unlock": ["sjedna komenda sunrise unlock", "433MHz switch B ON"]
   38|     68|        },
   39|     68|        "sunset":{
   40|     68|            "unlock": ["sjedna komenda sunset unlock", "433MHz switch B ON"],
   41|     68|            "lock": ["433MHz switch B OFF", "sdruga komenda sunset lock"]
   42|     68|        }
   43|     68|    })");
   44|       |
   45|       |
   46|     68|        test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   47|       |
   48|     68|        test_rec->loadConfig(test_server_set._server.radio433MHzConfigFile);
   49|       |
   50|     68|        test_server_set._satel_integra.host = "127.0.0.1";
   51|     68|        test_server_set._satel_integra.port = 7094;
   52|     68|        test_server_set._satel_integra.pin = "1234";
   53|       |
   54|     68|        test_server_set._server.lightningApiURL = "http://burze.dzis.net/ramka.php?miejscowosc=krakow&promien=20";
   55|       |
   56|     68|        test_context.idom_all_state.houseState = STATE::UNDEFINE;
   57|     68|        test_context.idom_all_state.alarmSatelState = STATE::UNDEFINE;
   58|       |
   59|     68|        test_context.main_REC = test_rec;
   60|     68|        test_context.server_settings = &test_server_set;
   61|     68|        test_context.main_iDomStatus = std::make_unique<iDomSTATUS>();
   62|     68|        test_context.alarmTime = test_alarmTime;
   63|     68|        test_context.ptr_MPD_info = std::make_unique<MPD_info>();
   64|       |
   65|     68|        test_context.main_iDomStatus->addObject("house");
   66|       |
   67|       |        /////////// create
   68|     68|        test_context.ptr_buderus = testBuderusMock;
   69|     68|        test_context.main_iDomTools = std::make_shared<iDomTOOLS>(&test_context);
   70|     68|        test_context.ptr_MPD_info = std::make_unique<MPD_info>();
   71|     68|        test_context.ptr_MPD_info->volume = 3;
   72|     68|        test_context.main_house_room_handler = std::make_shared<house_room_handler_stub>(&test_context);
   73|     68|        test_context.server_settings->_satel_integra.partitionID = 1;
   74|     68|        test_context.server_settings->_satel_integra.pin = "1122";
   75|     68|        test_context.satelIntegraHandler = &test_satel;
   76|     68|        test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("cyniu");
   77|     68|        test_context.main_Rs232 = std::make_unique<SerialPi>("test");
   78|     68|        useful_F::myStaticCtx = &test_context;
   79|     68|    }
   80|       |};

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDomTools/test/idomTools_BT.cpp:
    1|       |#include <gtest/gtest.h>
    2|       |#include <gmock/gmock.h>
    3|       |#include <curl/curl.h>
    4|       |
    5|       |#include "iDomTools_fixture.h"
    6|       |#include "../mqtt_mosquitto/MQTT_mosquitto/mqtt.h"
    7|       |#include "test_data.h"
    8|       |#include "../src/blockQueue/blockqueue.h"
    9|       |#include "../src/iDomSaveState/idom_save_state.h"
   10|       |// #include
   11|       |
   12|       |TEST_F(iDomTOOLS_ClassTest, smog)
   13|      1|{
   14|      1|  TEST_DATA::return_httpPost = R"({"key":"PM10","values":[{"date":"2022-09-18 21:00:00","value":null},
   15|      1|                                                          {"date":"2022-09-18 20:00:00","value":9.39816},
   16|      1|                                                          {"date":"2022-09-18 19:00:00","value":12.0452},
   17|      1|                                                          {"date":"2022-09-18 18:00:00","value":7.71783},
   18|      1|                                                          {"date":"2022-09-18 17:00:00","value":5.58138},
   19|      1|                                                          {"date":"2022-09-18 16:00:00","value":5.96127},
   20|      1|                                                          {"date":"2022-09-18 15:00:00","value":3.52143},
   21|      1|                                                          {"date":"2022-09-18 14:00:00","value":3.23153},
   22|      1|                                                          {"date":"2022-09-18 13:00:00","value":3.79682},
   23|      1|                                                          {"date":"2022-09-18 12:00:00","value":3.81874},
   24|      1|                                                          {"date":"2022-09-18 11:00:00","value":7.35033},
   25|      1|                                                          {"date":"2022-09-18 10:00:00","value":9.24619},
   26|      1|                                                          {"date":"2022-09-18 09:00:00","value":14.3077},
   27|      1|                                                          {"date":"2022-09-18 08:00:00","value":12.4325},
   28|      1|                                                          {"date":"2022-09-18 07:00:00","value":16.6621},
   29|      1|                                                          {"date":"2022-09-18 06:00:00","value":10.9937},
   30|      1|                                                          {"date":"2022-09-18 05:00:00","value":14.2917},
   31|      1|                                                          {"date":"2022-09-18 04:00:00","value":6.98446},
   32|      1|                                                          {"date":"2022-09-18 03:00:00","value":7.39819},
   33|      1|                                                          {"date":"2022-09-18 02:00:00","value":null},
   34|      1|                                                          {"date":"2022-09-18 01:00:00","value":null},
   35|      1|                                                          {"date":"2022-09-18 00:00:00","value":14.3364},
   36|      1|                                                          {"date":"2022-09-17 23:00:00","value":19.8663},
   37|      1|                                                          {"date":"2022-09-17 22:00:00","value":14.5161},
   38|      1|                                                          {"date":"2022-09-17 21:00:00","value":18.4722},
   39|      1|                                                          {"date":"2022-09-17 20:00:00","value":15.3854},
   40|      1|                                                          {"date":"2022-09-17 19:00:00","value":13.9772},
   41|      1|                                                          {"date":"2022-09-17 18:00:00","value":7.60115},
   42|      1|                                                          {"date":"2022-09-17 17:00:00","value":8.61767},
   43|      1|                                                          {"date":"2022-09-17 16:00:00","value":11.1545},
   44|      1|                                                          {"date":"2022-09-17 15:00:00","value":10.7922},
   45|      1|                                                          {"date":"2022-09-17 14:00:00","value":10.7604},
   46|      1|                                                          {"date":"2022-09-17 13:00:00","value":10.7005},
   47|      1|                                                          {"date":"2022-09-17 12:00:00","value":11.8406},
   48|      1|                                                          {"date":"2022-09-17 11:00:00","value":8.45462},
   49|      1|                                                          {"date":"2022-09-17 10:00:00","value":15.2733},
   50|      1|                                                          {"date":"2022-09-17 09:00:00","value":7.76904},
   51|      1|                                                          {"date":"2022-09-17 08:00:00","value":11.4458},
   52|      1|                                                          {"date":"2022-09-17 07:00:00","value":14.2888},
   53|      1|                                                          {"date":"2022-09-17 06:00:00","value":10.4557},
   54|      1|                                                          {"date":"2022-09-17 05:00:00","value":10.6562},
   55|      1|                                                          {"date":"2022-09-17 04:00:00","value":10.123},
   56|      1|                                                          {"date":"2022-09-17 03:00:00","value":11.2047},
   57|      1|                                                          {"date":"2022-09-17 02:00:00","value":12.4495},
   58|      1|                                                          {"date":"2022-09-17 01:00:00","value":12.4994},
   59|      1|                                                          {"date":"2022-09-17 00:00:00","value":12.4703},
   60|      1|                                                          {"date":"2022-09-16 23:00:00","value":14.535},
   61|      1|                                                          {"date":"2022-09-16 22:00:00","value":11.3169},
   62|      1|                                                          {"date":"2022-09-16 21:00:00","value":15.4572},
   63|      1|                                                          {"date":"2022-09-16 20:00:00","value":13.6611},
   64|      1|                                                          {"date":"2022-09-16 19:00:00","value":11.8847},
   65|      1|                                                          {"date":"2022-09-16 18:00:00","value":14.3912},
   66|      1|                                                          {"date":"2022-09-16 17:00:00","value":11.7449},
   67|      1|                                                          {"date":"2022-09-16 16:00:00","value":6.38429},
   68|      1|                                                          {"date":"2022-09-16 15:00:00","value":8.89824},
   69|      1|                                                          {"date":"2022-09-16 14:00:00","value":9.68496},
   70|      1|                                                          {"date":"2022-09-16 13:00:00","value":13.1708},
   71|      1|                                                          {"date":"2022-09-16 12:00:00","value":17.1235},
   72|      1|                                                          {"date":"2022-09-16 11:00:00","value":11.2962},
   73|      1|                                                          {"date":"2022-09-16 10:00:00","value":10.5516},
   74|      1|                                                          {"date":"2022-09-16 09:00:00","value":16.6316},
   75|      1|                                                          {"date":"2022-09-16 08:00:00","value":15.0429},
   76|      1|                                                          {"date":"2022-09-16 07:00:00","value":13.9154},
   77|      1|                                                          {"date":"2022-09-16 06:00:00","value":15.1331},
   78|      1|                                                          {"date":"2022-09-16 05:00:00","value":11.9056},
   79|      1|                                                          {"date":"2022-09-16 04:00:00","value":18.5934},
   80|      1|                                                          {"date":"2022-09-16 03:00:00","value":14.2742},
   81|      1|                                                          {"date":"2022-09-16 02:00:00","value":14.8644},
   82|      1|                                                          {"date":"2022-09-16 01:00:00","value":null}]})";
   83|      1|  std::string smog = test_context.main_iDomTools->getSmog().value();
   84|      1|  puts(smog.c_str());
   85|      1|  puts(" smog");
   86|      1|  ASSERT_GE(smog.size(), 1);
   87|       |
   88|      1|  unsigned int smog_int = std::stoi(smog);
   89|      1|  ASSERT_GT(smog_int, 1);
   90|      1|  ASSERT_LT(smog_int, 1000);
   91|      1|}
   92|       |
   93|       |TEST_F(iDomTOOLS_ClassTest, smog_null)
   94|      1|{
   95|      1|  TEST_DATA::return_httpPost = R"({"key":"PM10","values":[{"date":"2022-09-18 21:00:00","value":null},
   96|      1|                                                          {"date":"2022-09-18 14:00:00","value":null},
   97|      1|                                                          {"date":"2022-09-18 13:00:00","value":null},
   98|      1|                                                          {"date":"2022-09-18 12:00:00","value":null},
   99|      1|                                                          {"date":"2022-09-18 11:00:00","value":null},
  100|      1|                                                          {"date":"2022-09-18 10:00:00","value":null},
  101|      1|                                                          {"date":"2022-09-18 09:00:00","value":null},
  102|      1|                                                          {"date":"2022-09-18 08:00:00","value":null},
  103|      1|                                                          {"date":"2022-09-18 07:00:00","value":null},
  104|      1|                                                          {"date":"2022-09-18 06:00:00","value":null},
  105|      1|                                                          {"date":"2022-09-18 05:00:00","value":null},
  106|      1|                                                          {"date":"2022-09-18 04:00:00","value":null},
  107|      1|                                                          {"date":"2022-09-18 03:00:00","value":null},
  108|      1|                                                          {"date":"2022-09-18 02:00:00","value":null},
  109|      1|                                                          {"date":"2022-09-18 01:00:00","value":null},
  110|      1|                                                          {"date":"2022-09-18 00:00:00","value":null},
  111|      1|                                                          {"date":"2022-09-17 23:00:00","value":null},
  112|      1|                                                          {"date":"2022-09-17 22:00:00","value":null},
  113|      1|                                                          {"date":"2022-09-17 21:00:00","value":null},
  114|      1|                                                          {"date":"2022-09-17 20:00:00","value":null},
  115|      1|                                                          {"date":"2022-09-17 19:00:00","value":null},
  116|      1|                                                          {"date":"2022-09-17 18:00:00","value":null},
  117|      1|                                                          {"date":"2022-09-17 17:00:00","value":null},
  118|      1|                                                          {"date":"2022-09-17 16:00:00","value":null},
  119|      1|                                                          {"date":"2022-09-17 15:00:00","value":null},
  120|      1|                                                          {"date":"2022-09-17 14:00:00","value":null},
  121|      1|                                                          {"date":"2022-09-17 13:00:00","value":null},
  122|      1|                                                          {"date":"2022-09-17 12:00:00","value":null},
  123|      1|                                                          {"date":"2022-09-17 11:00:00","value":null},
  124|      1|                                                          {"date":"2022-09-16 02:00:00","value":null},
  125|      1|                                                          {"date":"2022-09-16 01:00:00","value":null}]})";
  126|      1|  EXPECT_FALSE(test_context.main_iDomTools->getSmog().has_value());
  127|      1|}
  128|       |
  129|       |TEST_F(iDomTOOLS_ClassTest, smog_no_data)
  130|      1|{
  131|      1|  TEST_DATA::return_httpPost = "";
  132|      1|  EXPECT_FALSE(test_context.main_iDomTools->getSmog().has_value());
  133|      1|}
  134|       |
  135|       |TEST_F(iDomTOOLS_ClassTest, hasTemperatureChange)
  136|      1|{
  137|      1|  std::cout << "##################################### 0" << std::endl;
  138|       |
  139|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(-7.7));
  140|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(-1.0));
  141|      1|  EXPECT_CALL(*testBuderusMock.get(), getBoilerTemp()).WillOnce(testing::Return(60));
  142|      1|  EXPECT_CALL(*testBuderusMock.get(), getCurFlowTemp()).WillOnce(testing::Return(60));
  143|      1|  EXPECT_CALL(*testBuderusMock.get(), isHeatingActiv()).WillOnce(testing::Return(false));
  144|      1|  test_context.main_iDomTools->send_data_to_thingSpeak();
  145|       |
  146|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("outside"), TEMPERATURE_STATE::Under);
  147|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("inside"), TEMPERATURE_STATE::NoChanges);
  148|      1|  std::cout << "##################################### 1" << std::endl;
  149|       |
  150|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(-7.7));
  151|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(27.7));
  152|      1|  EXPECT_CALL(*testBuderusMock.get(), getBoilerTemp()).WillOnce(testing::Return(60));
  153|      1|  EXPECT_CALL(*testBuderusMock.get(), getCurFlowTemp()).WillOnce(testing::Return(60));
  154|      1|  EXPECT_CALL(*testBuderusMock.get(), isHeatingActiv()).WillOnce(testing::Return(false));
  155|      1|  test_context.main_iDomTools->send_data_to_thingSpeak();
  156|       |
  157|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("outside"), TEMPERATURE_STATE::NoChanges);
  158|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("inside"), TEMPERATURE_STATE::Over);
  159|       |
  160|      1|  std::cout << "##################################### 2" << std::endl;
  161|       |
  162|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(1.1));
  163|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(20.3));
  164|      1|  EXPECT_CALL(*testBuderusMock.get(), getBoilerTemp()).WillOnce(testing::Return(60));
  165|      1|  EXPECT_CALL(*testBuderusMock.get(), getCurFlowTemp()).WillOnce(testing::Return(60));
  166|      1|  EXPECT_CALL(*testBuderusMock.get(), isHeatingActiv()).WillOnce(testing::Return(false));
  167|      1|  test_context.main_iDomTools->send_data_to_thingSpeak();
  168|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("outside"), TEMPERATURE_STATE::Over);
  169|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("inside"), TEMPERATURE_STATE::Under);
  170|       |
  171|      1|  std::cout << "##################################### 3" << std::endl;
  172|       |
  173|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(1.1));
  174|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(-0.3));
  175|      1|  EXPECT_CALL(*testBuderusMock.get(), getBoilerTemp()).WillOnce(testing::Return(60));
  176|      1|  EXPECT_CALL(*testBuderusMock.get(), getCurFlowTemp()).WillOnce(testing::Return(60));
  177|      1|  EXPECT_CALL(*testBuderusMock.get(), isHeatingActiv()).WillOnce(testing::Return(false));
  178|      1|  test_context.main_iDomTools->send_data_to_thingSpeak();
  179|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("outside"), TEMPERATURE_STATE::NoChanges);
  180|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("inside"), TEMPERATURE_STATE::NoChanges);
  181|       |
  182|      1|  std::cout << "##################################### 4" << std::endl;
  183|       |
  184|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(1.1));
  185|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(-0.3));
  186|      1|  EXPECT_CALL(*testBuderusMock.get(), getBoilerTemp()).WillOnce(testing::Return(60));
  187|      1|  EXPECT_CALL(*testBuderusMock.get(), getCurFlowTemp()).WillOnce(testing::Return(60));
  188|      1|  EXPECT_CALL(*testBuderusMock.get(), isHeatingActiv()).WillOnce(testing::Return(false));
  189|      1|  test_context.main_iDomTools->send_data_to_thingSpeak();
  190|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("outside"), TEMPERATURE_STATE::NoChanges);
  191|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("inside"), TEMPERATURE_STATE::NoChanges);
  192|       |
  193|      1|  std::cout << "##################################### 5" << std::endl;
  194|       |
  195|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(1.1));
  196|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(30.3));
  197|      1|  EXPECT_CALL(*testBuderusMock.get(), getBoilerTemp()).WillOnce(testing::Return(60));
  198|      1|  EXPECT_CALL(*testBuderusMock.get(), getCurFlowTemp()).WillOnce(testing::Return(60));
  199|      1|  EXPECT_CALL(*testBuderusMock.get(), isHeatingActiv()).WillOnce(testing::Return(false));
  200|      1|  test_context.main_iDomTools->send_data_to_thingSpeak();
  201|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("outside"), TEMPERATURE_STATE::NoChanges);
  202|      1|  EXPECT_EQ(test_context.main_iDomTools->getTHERMOMETER_CONTAINERlastState("inside"), TEMPERATURE_STATE::Over);
  203|      1|  std::cout << "##################################### 6" << std::endl;
  204|       |
  205|       |  ////// getThermoStats
  206|       |
  207|      1|  std::cout << "WYNIK: " << test_context.main_iDomTools->getThermoStats("inside") << std::endl;
  208|      1|}
  209|       |
  210|       |TEST_F(iDomTOOLS_ClassTest, weatherAlert)
  211|      1|{
  212|       |  /* std::string test_data_from_www = R"( <div style="margin:0;padding:0;width:350px;font:0.8em Lucida,Arial,sans-seri f;background:#FFC">)"
  213|       |                                     R"(<p style="margin:1px;padding:1px;text-align:center;background:#FF9;borde \\ r:1px dotted"><b><a href="http://burze.dzis.net?page=wyszukiwarka&amp;miejscowos\\ c=krakow" target="_blank" style="color:#00E">krakow</a></b>)"
  214|       |                                     R"(<i>(50°03'N 19°57'E)</i> </p>)"
  215|       |                                     R"(<dl style="margin:1px 1px 0 1px;padding:0;cl ear:both;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:\\ center">Zarejestrowano 54 wyładowania atmosferyczne w promieniu 300km . Najbliższe 79.76km na zachód.)"
  216|       |                                     R"(</dl> <dl style="margin:1px 1px 0 1px;padding:0;cl ear:both;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align: \\ center">Mróz, brak ostrzeżeń</dl>)"
  217|       |                                     R"(<dl style="margin:1px 1px 0 1px;padding:0;clear:both ;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:center">  Upał, brak ostrzeżeń</dl>)"
  218|       |                                     R"(<dl style="margin:1px 1px 0 1px;padding:0;clear:both ;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:center">  Wiatr, brak ostrzeżeń</dl>)"
  219|       |                                     R"(<dl style="margin:1px 1px 0 1px;padding:0;clear:both ;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:center">  Opady, brak ostrzeżeń</dl>)"
  220|       |                                     R"(<dl style="margin:1px 1px 0 1px;padding:0;clear:both ;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:center">  Burze, brak ostrzeżeń</dl>)"
  221|       |                                     R"(<dl style="margin:1px 1px 0 1px;padding:0;clear:both ;background:#FFD;border:1px dotted;overflow:auto;color:green;text-align:center">  Trąby powietrzne, brak ostrzeżeń</dl></div>)";
  222|       |*/
  223|      1|  WEATHER_DATABASE test_WA;
  224|      1|  test_WA = test_context.main_iDomTools->getAlert();
  225|      1|  std::cout << std::endl
  226|      1|            << test_WA.lightning.alert << std::endl;
  227|      1|}
  228|       |
  229|       |TEST_F(iDomTOOLS_ClassTest, send_data_to_thingSpeak)
  230|      1|{
  231|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(-0.3));
  232|      1|  EXPECT_CALL(*testBuderusMock.get(), isHeatingActiv()).WillOnce(testing::Return(true));
  233|      1|  EXPECT_CALL(*testBuderusMock.get(), getBoilerTemp()).WillOnce(testing::Return(62.2));
  234|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(12));
  235|      1|  EXPECT_CALL(*testBuderusMock.get(), getCurFlowTemp()).WillOnce(testing::Return(12));
  236|      1|  TEST_DATA::return_send_to_arduino = "-2.3:-2";
  237|      1|  TEST_DATA::return_httpPost_expect = "NULL";
  238|      1|  EXPECT_STREQ(TEST_DATA::return_httpPost_expect.c_str(), "NULL");
  239|      1|  test_context.main_iDomTools->send_data_to_thingSpeak();
  240|      1|  std::cout << "DATA: " << TEST_DATA::return_httpPost_expect << std::endl;
  241|      1|  EXPECT_STREQ(TEST_DATA::return_httpPost_expect.c_str(), "httpPost");
  242|      1|}
  243|       |
  244|       |TEST_F(iDomTOOLS_ClassTest, checkAlarm)
  245|      1|{
  246|      1|  blockQueue test_q;
  247|      1|  unsigned int fromVol = 48;
  248|      1|  unsigned int toVol = 57;
  249|       |
  250|       |  ///////////////////////////////////// to save
  251|      1|  test_context.main_iDomStatus->setObjectState("house", STATE::UNLOCK);
  252|      1|  test_context.main_iDomStatus->setObjectState("music", STATE::PLAY);
  253|      1|  test_context.main_iDomStatus->setObjectState("speakers", STATE::ON);
  254|      1|  test_context.idom_all_state.houseState = STATE::LOCK;
  255|       |
  256|      1|  test_context.main_iDomStatus->setObjectState("listwa", STATE::ON);
  257|       |
  258|      1|  test_alarmTime.time = Clock::getTime();
  259|      1|  test_alarmTime.state = STATE::ACTIVE;
  260|      1|  test_alarmTime.toVolume = 58;
  261|      1|  test_alarmTime.fromVolume = 48;
  262|       |
  263|      1|  test_alarmTime.commands.push_back("komenda 1");
  264|      1|  test_alarmTime.commands.push_back("komenda 2");
  265|       |
  266|      1|  test_context.main_iDomStatus->setObjectState("alarm", test_alarmTime.state);
  267|      1|  test_context.alarmTime = test_alarmTime;
  268|      1|  useful_F::myStaticCtx = &test_context;
  269|       |
  270|       |  //////////////////////////////////////////////////////////////
  271|       |
  272|      1|  test_context.alarmTime.time = Clock::getTime();
  273|      1|  test_context.alarmTime.state = STATE::ACTIVE;
  274|       |
  275|      1|  EXPECT_EQ(test_context.alarmTime.state, STATE::ACTIVE);
  276|       |
  277|     10|  for (unsigned int i = fromVol; i < toVol; ++i)
  278|      9|  {
  279|      9|    test_context.main_iDomTools->checkAlarm();
  280|      9|    test_q._get();
  281|     18|    EXPECT_EQ(test_context.alarmTime.state, STATE::WORKING) << "zły stan w for " << i << " " << toVol;
  282|     18|    EXPECT_EQ(test_context.ptr_MPD_info->volume, i + 1) << "zły poziom glosnosci w for";
  283|      9|  }
  284|       |
  285|      1|  test_context.main_iDomTools->checkAlarm();
  286|       |
  287|      2|  EXPECT_EQ(test_context.alarmTime.state, STATE::DEACTIVE) << "nie jest STATE::DEACTIVE";
  288|      2|  EXPECT_EQ(test_context.ptr_MPD_info->volume, toVol) << "nie inkrementowane?";
  289|      1|}
  290|       |
  291|       |TEST_F(iDomTOOLS_ClassTest, homeLockPlayStopMusic)
  292|      1|{
  293|      1|  EXPECT_CALL(*testBuderusMock.get(), isHeatingActiv()).WillOnce(testing::Return(false));
  294|       |  ///////////////////////////////////// to save
  295|      1|  test_context.main_iDomStatus->setObjectState("house", STATE::UNDEFINE);
  296|      1|  test_context.main_iDomStatus->setObjectState("music", STATE::PLAY);
  297|      1|  test_context.main_iDomStatus->setObjectState("speakers", STATE::ON);
  298|      1|  test_context.idom_all_state.houseState = STATE::UNDEFINE;
  299|       |
  300|      1|  test_context.main_iDomStatus->setObjectState("listwa", STATE::ON);
  301|       |
  302|      1|  test_alarmTime.time = Clock::getTime();
  303|      1|  test_alarmTime.state = STATE::ACTIVE;
  304|      1|  test_context.main_iDomStatus->setObjectState("alarm", test_alarmTime.state);
  305|       |
  306|      1|  blockQueue test_q;
  307|      1|  test_q._clearAll();
  308|      1|  EXPECT_EQ(test_q._size(), 0);
  309|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("house"), STATE::UNDEFINE);
  310|      1|  test_context.main_iDomTools->lockHome();
  311|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("house"), STATE::LOCK);
  312|      1|  test_context.main_iDomTools->MPD_play(&test_context);
  313|      1|  EXPECT_EQ(test_q._size(), 0);
  314|      1|  test_context.main_iDomTools->unlockHome();
  315|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("house"), STATE::UNLOCK);
  316|      1|  test_context.main_iDomTools->MPD_play(&test_context);
  317|      1|  EXPECT_EQ(test_q._size(), 1);
  318|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
  319|      1|  EXPECT_EQ(test_q._size(), 0);
  320|      1|  test_context.main_iDomTools->lockHome();
  321|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("house"), STATE::LOCK);
  322|      1|  test_context.main_iDomTools->MPD_stop();
  323|      1|  EXPECT_EQ(test_q._size(), 1);
  324|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP);
  325|      1|  EXPECT_EQ(test_q._size(), 0);
  326|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("house"), STATE::LOCK);
  327|      1|  std::string returnedString = test_context.main_iDomStatus->getAllObjectsStateString();
  328|      1|  EXPECT_THAT(returnedString, testing::HasSubstr("LOCK"));
  329|      1|}
  330|       |
  331|       |TEST_F(iDomTOOLS_ClassTest, testCPU_Load)
  332|      1|{
  333|      1|  std::cout << "TEST LOAD" << std::endl;
  334|      1|  std::cout << test_context.main_iDomTools->getSystemInfo() << std::endl;
  335|      1|}
  336|       |
  337|       |TEST_F(iDomTOOLS_ClassTest, saveState_readState)
  338|      1|{
  339|      1|  test_context.server_settings->_server.saveFilePath = "/mnt/ramdisk/iDomStateTest3.save";
  340|      1|  test_context.main_iDomStatus->setObjectState("house", STATE::UNLOCK);
  341|       |  //////////////////// mpd
  342|      1|  test_context.main_iDomStatus->setObjectState("music", STATE::PLAY);
  343|      1|  test_context.main_iDomStatus->setObjectState("speakers", STATE::ON);
  344|      1|  test_context.idom_all_state.houseState = STATE::LOCK;
  345|       |
  346|      1|  test_context.main_iDomStatus->setObjectState("listwa", STATE::ON);
  347|      1|  test_alarmTime.time = Clock::getTime();
  348|      1|  test_alarmTime.state = STATE::ACTIVE;
  349|      1|  test_alarmTime.fromVolume = 0;
  350|      1|  test_alarmTime.toVolume = 100;
  351|      1|  test_alarmTime.radioID = 44;
  352|      1|  test_alarmTime.commands.push_back("command 1");
  353|      1|  test_alarmTime.commands.push_back("command 2");
  354|      1|  test_context.alarmTime = test_alarmTime;
  355|      1|  test_context.main_iDomStatus->setObjectState("alarm", test_alarmTime.state);
  356|      1|  test_context.serverStarted = true;
  357|       |
  358|      1|  test_context.main_iDomTools->saveState_iDom(test_context.serverStarted);
  359|       |
  360|      1|  nlohmann::json testJson;
  361|      1|  std::ifstream i(test_server_set._server.saveFilePath);
  362|      1|  i >> testJson;
  363|      1|  EXPECT_STREQ(test_context.main_iDomStatus->getObjectStateString("music").c_str(),
  364|      1|               testJson.at("MPD").at("music").get<std::string>().c_str());
  365|      1|  EXPECT_STREQ((test_context.main_iDomStatus->getObjectStateString("alarm")).c_str(),
  366|      1|               testJson.at("ALARM").at("alarm").get<std::string>().c_str());
  367|      1|  EXPECT_EQ(test_alarmTime.radioID,
  368|      1|            testJson.at("ALARM").at("radioID").get<int>());
  369|      1|  EXPECT_EQ(test_alarmTime.fromVolume,
  370|      1|            testJson.at("ALARM").at("fromVolume").get<int>());
  371|      1|  EXPECT_EQ(test_alarmTime.toVolume,
  372|      1|            testJson.at("ALARM").at("toVolume").get<int>());
  373|       |
  374|       |  ////////////////////////////////// read
  375|      1|  test_context.alarmTime.state = STATE::UNDEFINE;
  376|      1|  test_context.alarmTime.commands.clear();
  377|      1|  iDom_SAVE_STATE info(test_context.server_settings->_server.saveFilePath);
  378|      1|  nlohmann::json inf = info.read();
  379|      1|  test_context.main_iDomTools->readState_iDom(inf);
  380|      1|  EXPECT_EQ(test_context.alarmTime.state, STATE::ACTIVE);
  381|       |
  382|      1|  EXPECT_STREQ(test_context.alarmTime.commands.at(0).c_str(), "command 1");
  383|      1|  test_context.server_settings->_server.saveFilePath = "null";
  384|      1|  EXPECT_NO_THROW(test_context.main_iDomTools->readState_iDom(info.read()));
  385|      1|}
  386|       |
  387|       |TEST_F(iDomTOOLS_ClassTest, checkLightning)
  388|      1|{
  389|      1|  test_context.server_settings->_server.lightningApiURL = "http://45.90.3.84/test/json/lightning.json";
  390|      1|  test_context.main_iDomTools->checkLightning();
  391|      1|}
  392|       |
  393|       |TEST_F(iDomTOOLS_ClassTest, updateTemperatureStats)
  394|      1|{
  395|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(12));
  396|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(12));
  397|      1|  test_context.main_iDomTools->updateTemperatureStats();
  398|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(16));
  399|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(16));
  400|       |
  401|      1|  test_context.main_iDomTools->updateTemperatureStats();
  402|       |
  403|       |  ////////////// maleje na mieskzaniu
  404|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(16));
  405|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(12));
  406|       |
  407|      1|  test_context.main_iDomTools->updateTemperatureStats();
  408|      1|  EXPECT_THAT(TEST_DATA::return_viber_msg, testing::HasSubstr("temperatura maleje"));
  409|      1|  EXPECT_THAT(TEST_DATA::return_viber_msg, testing::HasSubstr("mieszkaniu"));
  410|       |
  411|       |  ////////////// maleje na polu
  412|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(12));
  413|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(12));
  414|       |
  415|      1|  test_context.main_iDomTools->updateTemperatureStats();
  416|      1|  EXPECT_THAT(TEST_DATA::return_viber_msg, testing::HasSubstr("temperatura maleje"));
  417|      1|  EXPECT_THAT(TEST_DATA::return_viber_msg, testing::HasSubstr("polu"));
  418|       |
  419|       |  ////////////// rośnie na mieskzaniu
  420|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(12));
  421|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(17));
  422|       |
  423|      1|  test_context.main_iDomTools->updateTemperatureStats();
  424|      1|  EXPECT_THAT(TEST_DATA::return_viber_msg, testing::HasSubstr("temperatura rośnie"));
  425|      1|  EXPECT_THAT(TEST_DATA::return_viber_msg, testing::HasSubstr("mieszkaniu"));
  426|       |
  427|       |  ////////////// rośnie na polu
  428|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(17));
  429|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(17));
  430|       |
  431|      1|  test_context.main_iDomTools->updateTemperatureStats();
  432|      1|  EXPECT_THAT(TEST_DATA::return_viber_msg, testing::HasSubstr("temperatura rośnie"));
  433|      1|  EXPECT_THAT(TEST_DATA::return_viber_msg, testing::HasSubstr("polu"));
  434|      1|}
  435|       |
  436|       |TEST_F(iDomTOOLS_ClassTest, speakersON_OFF)
  437|      1|{
  438|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::OFF);
  439|      1|  useful_F::myStaticCtx->idom_all_state.houseState = STATE::UNLOCK;
  440|      1|  test_context.main_iDomTools->turnOnSpeakers();
  441|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::ON);
  442|      1|  test_context.main_iDomTools->turnOffSpeakers();
  443|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::OFF);
  444|      1|  useful_F::myStaticCtx->idom_all_state.houseState = STATE::LOCK;
  445|      1|  test_context.main_iDomTools->turnOnSpeakers();
  446|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::OFF);
  447|      1|  std::string retStr = useful_F::myStaticCtx->myEventHandler.run("speakers")->getEvent();
  448|      1|  EXPECT_THAT(retStr, testing::HasSubstr("speakers can not start due to home state: LOCK"));
  449|      1|}
  450|       |
  451|       |TEST_F(iDomTOOLS_ClassTest, onOff230vOutdoor)
  452|      1|{
  453|       |  //   test_context.main_iDomTools->turnOnOff230vOutdoor();
  454|      1|}
  455|       |
  456|       |TEST_F(iDomTOOLS_ClassTest, turn_On_Off_433MHzSwitch)
  457|      1|{
  458|      1|  useful_F::myStaticCtx->idom_all_state.houseState = STATE::UNLOCK;
  459|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("B"), STATE::UNKNOWN);
  460|      1|  test_context.main_iDomTools->turnOn433MHzSwitch("B");
  461|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("B"), STATE::ON);
  462|      1|  test_context.main_iDomTools->turnOff433MHzSwitch("B");
  463|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("B"), STATE::OFF);
  464|      1|}
  465|       |
  466|       |TEST_F(iDomTOOLS_ClassTest, turn_On_Off_fake_433MHzSwitch)
  467|      1|{
  468|      1|  EXPECT_NO_THROW(test_context.main_iDomTools->turnOn433MHzSwitch("B-fake"));
  469|      1|  EXPECT_NO_THROW(test_context.main_iDomTools->turnOff433MHzSwitch("B-fake"));
  470|      1|  EXPECT_NO_THROW(test_context.main_iDomTools->turnOnOff433MHzSwitch("B-fake"));
  471|      1|}
  472|       |
  473|       |TEST_F(iDomTOOLS_ClassTest, turnOnOff433MHzSwitch)
  474|      1|{
  475|      1|  useful_F::myStaticCtx->idom_all_state.houseState = STATE::UNLOCK;
  476|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("B"), STATE::UNKNOWN);
  477|      1|  test_context.main_iDomStatus->setObjectState("B", STATE::ON);
  478|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("B"), STATE::ON);
  479|      1|  test_context.main_iDomTools->turnOnOff433MHzSwitch("B");
  480|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("B"), STATE::OFF);
  481|      1|  test_context.main_iDomTools->turnOnOff433MHzSwitch("B");
  482|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("B"), STATE::ON);
  483|      1|}
  484|       |
  485|       |TEST_F(iDomTOOLS_ClassTest, runOnSunset)
  486|      1|{
  487|      1|  test_context.idom_all_state.houseState = STATE::UNLOCK;
  488|      1|  test_context.main_iDomTools->runOnSunset();
  489|      1|  EXPECT_EQ(test_context.main_REC->getEqPointer("B")->getState(), STATE::ON);
  490|       |
  491|      1|  test_context.idom_all_state.houseState = STATE::LOCK;
  492|      1|  test_context.main_iDomTools->runOnSunset();
  493|      1|  EXPECT_EQ(test_context.main_REC->getEqPointer("B")->getState(), STATE::OFF);
  494|      1|}
  495|       |
  496|       |TEST_F(iDomTOOLS_ClassTest, runOnSunrise)
  497|      1|{
  498|      1|  test_context.idom_all_state.houseState = STATE::UNLOCK;
  499|      1|  test_context.main_iDomTools->runOnSunrise();
  500|      1|  EXPECT_EQ(test_context.main_REC->getEqPointer("B")->getState(), STATE::ON);
  501|       |
  502|      1|  test_context.idom_all_state.houseState = STATE::LOCK;
  503|      1|  test_context.main_iDomTools->runOnSunrise();
  504|      1|  EXPECT_EQ(test_context.main_REC->getEqPointer("B")->getState(), STATE::OFF);
  505|      1|}
  506|       |
  507|       |TEST_F(iDomTOOLS_ClassTest, getSunrise_Sunset)
  508|      1|{
  509|      1|  std::string ret = test_context.main_iDomTools->getSunrise();
  510|      1|  EXPECT_THAT(ret, testing::HasSubstr(":"));
  511|      1|  std::cout << "sunrise: " << ret << std::endl;
  512|       |
  513|      1|  ret = test_context.main_iDomTools->getSunset();
  514|      1|  EXPECT_THAT(ret, testing::HasSubstr(":"));
  515|       |
  516|      1|  std::cout << "sunset: " << ret << std::endl;
  517|       |
  518|      1|  ret = test_context.main_iDomTools->getSunrise(true);
  519|      1|  EXPECT_THAT(ret, testing::HasSubstr("Sunrise time:"));
  520|       |
  521|      1|  ret = test_context.main_iDomTools->getSunset(true);
  522|      1|  EXPECT_THAT(ret, testing::HasSubstr("Sunset time:"));
  523|      1|}
  524|       |
  525|       |TEST_F(iDomTOOLS_ClassTest, getDayLenght)
  526|      1|{
  527|      1|  std::string ret = test_context.main_iDomTools->getDayLenght();
  528|      1|  EXPECT_THAT(ret, testing::HasSubstr(":"));
  529|       |
  530|      1|  ret = test_context.main_iDomTools->getDayLenght(true);
  531|      1|  EXPECT_THAT(ret, testing::HasSubstr("Day Lenght :"));
  532|      1|}
  533|       |
  534|       |TEST_F(iDomTOOLS_ClassTest, getTextToSpeach)
  535|      1|{
  536|       |
  537|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(22.0));
  538|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(-12.0));
  539|      1|  TEST_DATA::return_send_to_arduino = "22:23";
  540|      1|  std::string ret = test_context.main_iDomTools->getTextToSpeach();
  541|      1|  EXPECT_THAT(ret, testing::HasSubstr("Smog:"));
  542|      1|  std::cout << "TEXT :" << std::endl
  543|      1|            << ret << std::endl;
  544|      1|}
  545|       |
  546|       |TEST_F(iDomTOOLS_ClassTest, mpd)
  547|      1|{
  548|      1|  test_context.ptr_MPD_info = std::make_unique<MPD_info>();
  549|      1|  test_context.ptr_MPD_info->volume = 3;
  550|      1|  blockQueue test_q;
  551|      1|  test_q._clearAll();
  552|      1|  useful_F::myStaticCtx->idom_all_state.houseState = STATE::LOCK;
  553|      1|  test_context.main_iDomTools->MPD_play(&test_context);
  554|      1|  std::string retStr = useful_F::myStaticCtx->myEventHandler.run("MPD")->getEvent();
  555|      1|  EXPECT_THAT(retStr, testing::HasSubstr("MPD can not start due to home state: LOCK"));
  556|      1|  EXPECT_EQ(test_q._size(), 0);
  557|       |
  558|      1|  useful_F::myStaticCtx->idom_all_state.houseState = STATE::UNLOCK;
  559|      1|  test_context.main_iDomTools->MPD_play(&test_context);
  560|      1|  EXPECT_EQ(test_q._size(), 1);
  561|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY);
  562|      1|  EXPECT_EQ(test_q._size(), 0);
  563|       |  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  564|      1|  useful_F::myStaticCtx->idom_all_state.houseState = STATE::LOCK;
  565|       |
  566|      1|  useful_F::myStaticCtx->myEventHandler.run("MPD")->clearEvent();
  567|      1|  test_context.main_iDomTools->MPD_play(&test_context, 2);
  568|      1|  retStr = useful_F::myStaticCtx->myEventHandler.run("MPD")->getEvent();
  569|      1|  EXPECT_THAT(retStr, testing::HasSubstr("MPD can not start due to home state: LOCK"));
  570|      1|  EXPECT_EQ(test_q._size(), 0);
  571|       |
  572|      1|  useful_F::myStaticCtx->idom_all_state.houseState = STATE::UNLOCK;
  573|      1|  test_context.main_iDomTools->MPD_play(&test_context, 2);
  574|      1|  EXPECT_EQ(test_q._size(), 1);
  575|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::PLAY_ID);
  576|      1|  EXPECT_EQ(test_q._size(), 0);
  577|       |  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  578|       |
  579|      1|  test_context.main_iDomTools->MPD_stop();
  580|      1|  EXPECT_EQ(test_q._size(), 1);
  581|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::STOP);
  582|      1|  EXPECT_EQ(test_q._size(), 0);
  583|       |
  584|      1|  test_context.main_iDomTools->MPD_next();
  585|      1|  EXPECT_EQ(test_q._size(), 1);
  586|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::NEXT);
  587|      1|  EXPECT_EQ(test_q._size(), 0);
  588|       |
  589|      1|  test_context.main_iDomTools->MPD_prev();
  590|      1|  EXPECT_EQ(test_q._size(), 1);
  591|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::PREV);
  592|      1|  EXPECT_EQ(test_q._size(), 0);
  593|       |
  594|      1|  test_context.main_iDomTools->MPD_pause();
  595|      1|  EXPECT_EQ(test_q._size(), 1);
  596|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::PAUSE);
  597|      1|  EXPECT_EQ(test_q._size(), 0);
  598|       |
  599|      1|  test_context.main_iDomTools->MPD_volumeUp();
  600|      1|  EXPECT_EQ(test_q._size(), 1);
  601|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::VOLUP);
  602|      1|  EXPECT_EQ(test_q._size(), 0);
  603|       |
  604|      1|  test_context.main_iDomTools->MPD_volumeDown();
  605|      1|  EXPECT_EQ(test_q._size(), 1);
  606|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::VOLDOWN);
  607|      1|  EXPECT_EQ(test_q._size(), 0);
  608|       |
  609|      1|  test_context.main_iDomTools->MPD_volumeSet(&test_context, 99);
  610|      1|  EXPECT_EQ(test_q._size(), 1);
  611|      1|  EXPECT_EQ(test_q._get(), MPD_COMMAND::VOLSET);
  612|      1|  EXPECT_EQ(test_q._size(), 0);
  613|      1|  EXPECT_EQ(test_context.ptr_MPD_info->volume, 99);
  614|       |
  615|      1|  EXPECT_EQ(test_context.main_iDomTools->MPD_getVolume(&test_context), 99);
  616|      1|}
  617|       |
  618|       |TEST_F(iDomTOOLS_ClassTest, getTemperatureString)
  619|      1|{
  620|      1|  EXPECT_CALL(*testBuderusMock.get(), getOutdoorTemp()).WillOnce(testing::Return(1.1));
  621|      1|  EXPECT_CALL(*testBuderusMock.get(), getInsideTemp()).WillOnce(testing::Return(-0.3));
  622|      1|  EXPECT_CALL(*testBuderusMock.get(), getBoilerTemp()).WillOnce(testing::Return(62.2));
  623|      1|  EXPECT_CALL(*testBuderusMock.get(), getCurFlowTemp()).WillOnce(testing::Return(35.2));
  624|      1|  test_context.lusina.shedFloor.push_back(21);
  625|       |
  626|      1|  EXPECT_STREQ(test_context.main_iDomTools->getTemperatureString().c_str(), "{\"boiler\":62.2,\"currentFlow\":35.2,\"floor\":21.0,\"inside\":-0.3,\"outdoor\":1.1}");
  627|      1|}
  628|       |
  629|       |TEST_F(iDomTOOLS_ClassTest, textToSpeach)
  630|      1|{
  631|      1|  test_context.ptr_MPD_info->isPlay = true;
  632|      1|  test_context.main_iDomStatus->setObjectState("speakers", STATE::UNDEFINE);
  633|       |
  634|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::UNDEFINE);
  635|      1|  std::vector<std::string> test_v;
  636|      1|  test_context.main_iDomTools->textToSpeach(&test_v); // empty
  637|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::UNDEFINE);
  638|       |
  639|      1|  test_v = {"test", "msg", "clock"};
  640|      1|  test_context.ptr_MPD_info->isPlay = true;
  641|      1|  test_context.main_iDomTools->textToSpeach(&test_v);
  642|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::UNDEFINE);
  643|      1|  test_context.ptr_MPD_info->isPlay = false;
  644|      1|  test_context.main_iDomTools->textToSpeach(&test_v);
  645|      1|  EXPECT_EQ(test_context.main_iDomStatus->getObjectState("speakers"), STATE::OFF);
  646|      1|}
  647|       |
  648|       |TEST_F(iDomTOOLS_ClassTest, getWeatherEvent)
  649|      1|{
  650|      1|  TEST_DATA::return_httpPost = "httpPost";
  651|      1|  std::string retStr = test_context.main_iDomTools->getWeatherEvent("test", 10);
  652|      1|  EXPECT_STREQ(retStr.c_str(), "httpPost");
  653|      1|}
  654|       |
  655|       |TEST_F(iDomTOOLS_ClassTest, isItDay)
  656|      1|{
  657|      1|  Clock::setTime_forBT_usage(12, 12);
  658|      1|  EXPECT_TRUE(test_context.main_iDomTools->isItDay());
  659|      1|  Clock::setTime_forBT_usage(2, 12);
  660|      1|  EXPECT_FALSE(test_context.main_iDomTools->isItDay());
  661|      1|}
  662|       |
  663|       |TEST_F(iDomTOOLS_ClassTest, ledClear)
  664|      1|{
  665|      1|  TEST_DATA::return_send_to_arduino = "done";
  666|      1|  std::string retStr = test_context.main_iDomTools->ledClear();
  667|      1|  EXPECT_STREQ(retStr.c_str(), "done");
  668|      1|}
  669|       |
  670|       |TEST_F(iDomTOOLS_ClassTest, getAllDataSunriseSunset)
  671|      1|{
  672|      1|  EXPECT_THAT(test_context.main_iDomTools->getAllDataSunriseSunset(),
  673|      1|              testing::HasSubstr("Days until Y2K"));
  674|      1|}
  675|       |
  676|       |TEST_F(iDomTOOLS_ClassTest, health_check)
  677|      1|{
  678|      1|  test_context.mqttHandler = std::make_unique<MQTT_mosquitto>("iDomSERVER test");
  679|      1|  test_context.mqttHandler->_subscribed = true;
  680|      1|  test_context.server_settings->_runThread.RFLink = true;
  681|       |
  682|      1|  test_context.main_RFLink = std::make_shared<RFLinkHandler>(&test_context);
  683|      1|  test_context.main_RFLink->m_pingTime = Clock::getUnixTime() - 321;
  684|      1|  test_context.main_iDomTools->healthCheck();
  685|      1|  EXPECT_EQ(test_context.iDomProgramState, iDomStateEnum::WORKING);
  686|      1|  test_context.main_RFLink->m_pingTime = Clock::getUnixTime() - 321;
  687|       |  //  EXPECT_EQ(test_context.iDomProgramState, iDomStateEnum::HARD_RELOAD);
  688|      1|}
  689|       |/*
  690|       |TEST_F(iDomTOOLS_ClassTest, access_KEYGEN)
  691|       |{
  692|       |    test_context.main_iDomTools->m_keyHandler->addKEY("test",256);
  693|       |    std::cout << "KEY " << test_context.main_iDomTools->m_keyHandler->listKEY() << std::endl;
  694|       |    test_context.main_iDomTools->m_keyHandler->addTempKEY("tmp",20);
  695|       |
  696|       |    std::cout << "KEY " << test_context.main_iDomTools->m_keyHandler->listKEY() << std::endl;
  697|       |    auto ret = test_context.main_iDomTools->m_keyHandler->getKEY("tmp");
  698|       |
  699|       |    EXPECT_TRUE(test_context.main_iDomTools->m_keyHandler->useKEY("tmp",ret));
  700|       |
  701|       |    std::cout << "KEY " << test_context.main_iDomTools->m_keyHandler->listKEY() << std::endl;
  702|       |
  703|       |    ////// remove expired keys
  704|       |    std::cout << std::endl << "======== remove expired keys ==========" << std::endl;
  705|       |    test_context.main_iDomTools->m_keyHandler->addTempKEY("tmp1",20);
  706|       |    test_context.main_iDomTools->m_keyHandler->addTempKEY("tmp2",20);
  707|       |
  708|       |    std::cout << "KEY " << test_context.main_iDomTools->m_keyHandler->listKEY() << std::endl;
  709|       |    sleep(1);
  710|       |    ret = test_context.main_iDomTools->m_keyHandler->getKEY("tmp2");
  711|       |    test_context.main_iDomTools->m_keyHandler->removeExpiredKeys(0);
  712|       |
  713|       |    EXPECT_FALSE(test_context.main_iDomTools->m_keyHandler->useKEY("tmp2",ret));
  714|       |}
  715|       |
  716|       |TEST_F(iDomTOOLS_ClassTest, openGate_getLink)
  717|       |{
  718|       |    test_context.server_settings->_gateway.url = "http://tst.pl?";
  719|       |    test_context.server_settings->_gateway.keySize = 128;
  720|       |    auto ret = test_context.main_iDomTools->getLink({"t1","t2"});
  721|       |    EXPECT_THAT(ret, testing::HasSubstr("http://"));
  722|       |
  723|       |    std::string t_name = ret.substr(14,20);
  724|       |    std::string t_key = ret.substr(35,128);
  725|       |
  726|       |    EXPECT_TRUE(test_context.main_iDomTools->m_keyHandler->useKEY(t_name,t_key));
  727|       |
  728|       |    std::cout << "wygenerowalem link: " << ret << std::endl;
  729|       |}
  730|       |*/

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/iDom_server_OOP.h:
    1|       |#pragma once
    2|       |
    3|       |#include <iostream>
    4|       |#include <fstream>
    5|       |#include <string>
    6|       |#include <cstdlib>
    7|       |#include <pthread.h>
    8|       |#include <stdio.h>
    9|       |#include <stdlib.h>
   10|       |#include <sys/socket.h>
   11|       |#include <sys/types.h>
   12|       |#include <netinet/in.h>
   13|       |#include <vector>
   14|       |#include <thread>
   15|       |#include <arpa/inet.h>
   16|       |#include <netinet/in.h>
   17|       |#include <unistd.h>
   18|       |#include <sys/fcntl.h>
   19|       |#include <unistd.h>
   20|       |#include <errno.h>
   21|       |#include <signal.h>
   22|       |#include <time.h>
   23|       |#include <chrono>
   24|       |#include <array>
   25|       |#include <atomic>
   26|       |
   27|       |// MOJE BIBLIOTEKI
   28|       |#include "logger/logger.hpp"
   29|       |#include "../libs/event_counters/event_counters_handler.h"
   30|       |#include "../libs/alarm/alarm.h"
   31|       |#include "../libs/Statistic/statistic.h"
   32|       |#include "iDomStatus/idomstatus.h"
   33|       |#include "../mqtt_mosquitto/MQTT_mosquitto/mqtt.h"
   34|       |#include "buderus/buderus_interface.h"
   35|       |#include "HOUSE/house_room_handler.h"
   36|       |#include "SerialPi/serialpi.h"
   37|       |#include "SATEL_INTEGRA/satel_integra_interface.h"
   38|       |#include "iDomKEY_ACCESS/idomkey_access.h"
   39|       |
   40|  1.31k|#define log_file_cout f_log // std::cout zmien f_log na std::cout i bedzie wypisywac na ekran
   41|    508|#define log_file_mutex f_log
   42|       |
   43|       |
   44|       |enum class iDomStateEnum
   45|       |{
   46|       |    CLOSE = 0,
   47|       |    RELOAD,
   48|       |    ERROR,
   49|       |    WORKING,
   50|       |    HARD_RELOAD,
   51|       |    RASPBERRY_RELOAD
   52|       |};
   53|       |inline std::ostream &operator<<(std::ostream &os, const iDomStateEnum &v)
   54|      0|{
   55|      0|    switch (v)
   56|      0|    {
   57|      0|    case iDomStateEnum::CLOSE:
   58|      0|        os << "CLOSE";
   59|      0|        break;
   60|      0|    case iDomStateEnum::RELOAD:
   61|      0|        os << "RELOAD";
   62|      0|        break;
   63|      0|    case iDomStateEnum::ERROR:
   64|      0|        os << "ERROR";
   65|      0|        break;
   66|      0|    case iDomStateEnum::WORKING:
   67|      0|        os << "WORKING";
   68|      0|        break;
   69|      0|    case iDomStateEnum::HARD_RELOAD:
   70|      0|        os << "HARD_RELOAD";
   71|      0|        break;
   72|      0|    case iDomStateEnum::RASPBERRY_RELOAD:
   73|      0|        os << "RASPBERRY_RELOAD";
   74|      0|        break;
   75|      0|    default:
   76|      0|        os << "Unknown";
   77|      0|    }
   78|      0|    return os;
   79|      0|};
   80|       |
   81|       |namespace iDomConst
   82|       |{
   83|       |constexpr int MAX_CONNECTION = 10;
   84|       |constexpr int FREE = 1;
   85|       |constexpr int RS232 = 11;
   86|       |constexpr int CLOCK = 12;
   87|       |constexpr int ok = 0;
   88|       |constexpr int GPIO_SPIK = 21;
   89|       |constexpr int GPIO_PRINTER = 22;
   90|       |}
   91|       |
   92|       |struct ALERT
   93|       |{
   94|       |    Clock time;
   95|       |    STATE state = STATE::DEACTIVE;
   96|       |    unsigned int fromVolume = 48;
   97|       |    unsigned int toVolume = 58;
   98|       |    unsigned int radioID = 8;
   99|       |    std::vector<std::string> commands;
  100|       |};
  101|       |
  102|       |extern std::string _logfile;
  103|       |extern Logger log_file_mutex;
  104|       |extern std::string buffer;
  105|       |
  106|       |enum class TEMPERATURE_STATE;
  107|       |
  108|       |struct MPD_info
  109|       |{
  110|       |    std::string title = "NULL";
  111|       |    std::string radio = "NULL";
  112|       |    std::string artist = "NULL";
  113|       |    int volume = 0;
  114|       |    bool isPlay = false;
  115|       |    int currentSongID = 0;
  116|       |    std::vector<std::string> songList = {"NULL"};
  117|       |};
  118|       |
  119|       |struct Thread_array_struc
  120|       |{
  121|       |    std::thread thread;
  122|       |    std::thread::id thread_ID = std::thread::id(0);
  123|       |    std::string thread_name;
  124|       |    unsigned int thread_socket = 0;
  125|       |};
  126|       |
  127|       |struct address_another_servers
  128|       |{
  129|       |    int id;
  130|       |    std::string SERVER_IP;
  131|       |};
  132|       |
  133|       |struct FTP_SERVER
  134|       |{
  135|       |    std::string URL;
  136|       |    std::string user;
  137|       |    std::string pass;
  138|       |};
  139|       |
  140|       |struct iDOM_STATE
  141|       |{
  142|       |    STATE houseState = STATE::UNDEFINE;
  143|       |    unsigned int counter = 0;
  144|       |    STATE alarmSatelState = STATE::UNDEFINE;
  145|       |};
  146|       |
  147|       |struct GATEWAY
  148|       |{
  149|       |    std::string url = "NULL";
  150|       |    unsigned int keySize = 0;
  151|       |};
  152|       |
  153|       |struct RunThread_CFG
  154|       |{
  155|       |    bool RFLink = false;
  156|       |    bool MPD = false;
  157|       |    bool CRON = false;
  158|       |    bool RS232 = false;
  159|       |    bool DUMMY = false;
  160|       |    bool MQTT = false;
  161|       |    bool SATEL = false;
  162|       |    bool INFLUX = false;
  163|       |};
  164|       |
  165|       |struct RFLink_CFG
  166|       |{
  167|       |    std::string RFLinkPort;
  168|       |    int RFLinkBaudRate;
  169|       |};
  170|       |
  171|       |struct RS232_CFG
  172|       |{
  173|       |    std::string portRS232;
  174|       |    int BaudRate;
  175|       |};
  176|       |
  177|       |struct FB_AND_VIBER_CFG
  178|       |{
  179|       |    std::string viberToken = "NULL";
  180|       |    std::string viberAvatar;
  181|       |    std::vector<std::string> viberReceiver;
  182|       |    std::string viberSender;
  183|       |};
  184|       |
  185|       |struct CONFIG_SERVER
  186|       |{
  187|       |    int PORT;
  188|       |    std::string SERVER_IP;
  189|       |    std::string MPD_IP;
  190|       |    std::string TS_KEY = " gg ";
  191|       |    std::string TS_KEY2 = " gg ";
  192|       |    std::string radio433MHzConfigFile;
  193|       |    int ID_server = 0;
  194|       |    int v_delay;
  195|       |    bool encrypted = true;
  196|       |    bool viber_notification = true;
  197|       |    FTP_SERVER ftpServer;
  198|       |    std::string lightningApiURL = "NULL";
  199|       |    std::string saveFilePath = "NULL";
  200|       |    std::string keyDatabasePath = "NULL";
  201|       |};
  202|       |
  203|       |struct MQTT_BROKER_CFG
  204|       |{
  205|       |    std::string host = "localhost";
  206|       |    std::string topicSubscribe = "iDom";
  207|       |    std::string topicPublish = "iDom";
  208|       |    int port = 1883;
  209|       |    int qos = 2;
  210|       |};
  211|       |
  212|       |struct SATEL_INTEGRA_CFG
  213|       |{
  214|       |    std::string host = "null";
  215|       |    int port = 7094;
  216|       |    std::string pin = "null";
  217|       |    unsigned int outdoor_siren_lights_id = 0;
  218|       |    unsigned int partitionID = 1;
  219|       |};
  220|       |struct DATABASE
  221|       |{
  222|       |    std::string ip = "127.0.0.1";
  223|       |    int port = 8086;
  224|       |    std::string token = "NULL";
  225|       |    std::string org = "";
  226|       |    std::string bucket = "";
  227|       |};
  228|       |
  229|       |struct CONFIG_JSON
  230|       |{
  231|       |    RunThread_CFG _runThread;
  232|       |    FB_AND_VIBER_CFG _fb_viber;
  233|       |    CONFIG_SERVER _server;
  234|       |    RS232_CFG _rs232;
  235|       |    RFLink_CFG _rflink;
  236|       |    MQTT_BROKER_CFG _mqtt_broker;
  237|       |    GATEWAY _gateway;
  238|       |    SATEL_INTEGRA_CFG _satel_integra;
  239|       |    nlohmann::json _shedConf;
  240|       |    nlohmann::json _command;
  241|       |    DATABASE _database;
  242|       |};
  243|       |
  244|       |//class command; // for struc thread_data req
  245|       |class iDomTOOLS_INTERFACE;
  246|       |class RADIO_EQ_CONTAINER;
  247|       |class RFLinkHandler;
  248|       |class SATEL_INTEGRA_HANDLER_INTERFACE;
  249|       |// TODO temporary
  250|       |enum class PILOT_KEY
  251|       |{
  252|       |    KEY_POWER,
  253|       |    KEY_AUDIO,
  254|       |    KEY_EPG,
  255|       |    KEY_OK,
  256|       |    KEY_RADIO,
  257|       |    KEY_TV,
  258|       |    KEY_0,
  259|       |    KEY_1,
  260|       |    KEY_2,
  261|       |    KEY_3,
  262|       |    KEY_4,
  263|       |    KEY_5,
  264|       |    KEY_6,
  265|       |    KEY_7,
  266|       |    KEY_8,
  267|       |    KEY_9,
  268|       |    KEY_CHANNELDOWN,
  269|       |    KEY_CHANNELUP,
  270|       |    KEY_DOWN,
  271|       |    KEY_EXIT,
  272|       |    KEY_FAVORITES,
  273|       |    KEY_INFO,
  274|       |    KEY_LANGUAGE,
  275|       |    KEY_MENU,
  276|       |    KEY_MUTE,
  277|       |    KEY_REFRESH,
  278|       |    KEY_SAT,
  279|       |    KEY_SUBTITLE,
  280|       |    KEY_TEXT,
  281|       |    KEY_UP,
  282|       |    KEY_VOLUMEDOWN,
  283|       |    KEY_VOLUMEUP,
  284|       |    SLEEPER,
  285|       |    DUMMY
  286|       |};
  287|       |
  288|       |enum class KEY_PAD : int
  289|       |{
  290|       |    POWER = 1,
  291|       |    OK = 2,
  292|       |    RES = 4,
  293|       |    UP = 16,
  294|       |    MENU = 32,
  295|       |    RIGHT = 64,
  296|       |    DOWN = 256,
  297|       |    LEFT = 512,
  298|       |    EPG = 1024,
  299|       |    REBOOT = 5,
  300|       |    OFF_LCD = 777,
  301|       |    TIMEOUT = 778,
  302|       |};
  303|       |
  304|       |class KEY_HANDLER_BASE{
  305|       |public:
  306|      4|    virtual ~KEY_HANDLER_BASE() = default;
  307|       |    virtual void recKeyEvent(KEY_PAD eventId) = 0;
  308|       |    virtual void recIrdaEvent(PILOT_KEY eventId) = 0;
  309|       |    virtual void timeout() = 0;
  310|       |    virtual void quickPrint(const std::string &row1, const std::string &row2) = 0;
  311|       |    virtual void scrollText() = 0;
  312|       |};
  313|       |
  314|       |struct LUSINA
  315|       |{
  316|       |    nlohmann::json shedJson;
  317|       |    nlohmann::json shedConfJson;
  318|       |    STATISTIC<float> shedTemp;
  319|       |    STATISTIC<float> shedHum;
  320|       |    STATISTIC<float> shedFloor;
  321|       |    STATISTIC<float> shedPres;
  322|       |    STATISTIC<float> acdc;
  323|    229|    LUSINA() : shedTemp(18), shedHum(18), shedFloor(18), shedPres(18), acdc(18) {}
  324|       |};
  325|       |
  326|       |struct thread_context
  327|       |{
  328|       |    int s_client_sock;
  329|       |    struct sockaddr_in from;
  330|       |    struct CONFIG_JSON *server_settings = NULL;
  331|       |    std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> *main_THREAD_arr = NULL;
  332|       |    time_t start;
  333|       |    time_t now_time;
  334|       |    int sleeper;
  335|       |    event_counters_handler myEventHandler;
  336|       |    std::string encriptionKey = "40%";
  337|       |    iDOM_STATE idom_all_state;
  338|       |    ALERT alarmTime;
  339|       |    iDomStateEnum iDomProgramState = iDomStateEnum::WORKING;
  340|       |    alarm_C iDomAlarm;
  341|       |    bool serverStarted = false;
  342|       |    LUSINA lusina;
  343|       |    BlockingQueue<std::any> dbDataQueue;
  344|       |    SATEL_INTEGRA_HANDLER_INTERFACE *satelIntegraHandler = std::nullptr_t();
  345|       |    std::unique_ptr<KEY_HANDLER_BASE> main_key_menu_handler = std::nullptr_t();
  346|       |    std::shared_ptr<iDomTOOLS_INTERFACE> main_iDomTools = std::nullptr_t();
  347|       |    std::unique_ptr<SerialPi> main_Rs232 = std::nullptr_t();
  348|       |    std::shared_ptr<RFLinkHandler> main_RFLink = std::nullptr_t();
  349|       |    std::shared_ptr<house_room_handler> main_house_room_handler = std::nullptr_t();
  350|       |    std::unique_ptr<MPD_info> ptr_MPD_info = std::nullptr_t();
  351|       |    std::shared_ptr<BUDERUS_IF> ptr_buderus = std::nullptr_t();
  352|       |    std::unique_ptr<MQTT_mosquitto> mqttHandler = std::nullptr_t();
  353|       |    std::shared_ptr<RADIO_EQ_CONTAINER> main_REC = std::nullptr_t();
  354|       |    std::unique_ptr<iDomSTATUS> main_iDomStatus = std::nullptr_t();
  355|       |    std::unique_ptr<iDomKEY_ACCESS> m_keyHandler = std::nullptr_t();
  356|    229|    ~thread_context() = default;
  357|       |};
  358|       |
  359|       |iDomStateEnum iDom_main();
  360|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/idom_api.h:
    1|       |#pragma once
    2|       |
    3|       |#include <map>
    4|       |#include <mutex>
    5|       |
    6|       |#include "../libs/generator/generator.h"
    7|       |
    8|       |class iDom_API
    9|       |{
   10|       |public:
   11|       |    std::string m_className;
   12|       |    static std::mutex m_locker;
   13|       |    static std::map<std::string, iDom_API*> m_map_iDom_API;
   14|  1.80k|    iDom_API(){
   15|  1.80k|        generator g;
   16|  1.80k|        m_className = "\n";
   17|  1.80k|        m_className.append(g.random_string(10));
   18|       |       // m_className.append(" \n");
   19|  1.80k|    }
   20|  1.80k|    virtual ~iDom_API() = default;
   21|       |    virtual std::string dump() const = 0;
   22|       |
   23|       |    static void addToMap(const std::string& , iDom_API*); // add to constructor
   24|       |    static void removeFromMap(const std::string&); // add to destructor
   25|       |
   26|       |    static std::string getDump();
   27|       |};
   28|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/logger/logger.cc:
    1|       |/*
    2|       | * logger.cc
    3|       | *
    4|       | *
    5|       | * Logger Library
    6|       | *
    7|       | *
    8|       | * Copyright (C) 2013-2014  Bryant Moscon - bmoscon@gmail.com
    9|       | *
   10|       | * Permission is hereby granted, free of charge, to any person obtaining a copy
   11|       | * of this software and associated documentation files (the "Software"), to
   12|       | * deal in the Software without restriction, including without limitation the
   13|       | * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
   14|       | * sell copies of the Software, and to permit persons to whom the Software is
   15|       | * furnished to do so, subject to the following conditions:
   16|       | *
   17|       | * 1. Redistributions of source code must retain the above copyright notice,
   18|       | *    this list of conditions, and the following disclaimer.
   19|       | *
   20|       | * 2. Redistributions in binary form must reproduce the above copyright notice,
   21|       | *    this list of conditions and the following disclaimer in the documentation
   22|       | *    and/or other materials provided with the distribution, and in the same
   23|       | *    place and form as other copyright, license and disclaimer information.
   24|       | *
   25|       | * 3. The end-user documentation included with the redistribution, if any, must
   26|       | *    include the following acknowledgment: "This product includes software
   27|       | *    developed by Bryant Moscon (http://www.bryantmoscon.org/)", in the same
   28|       | *    place and form as other third-party acknowledgments. Alternately, this
   29|       | *    acknowledgment may appear in the software itself, in the same form and
   30|       | *    location as other such third-party acknowledgments.
   31|       | *
   32|       | * 4. Except as contained in this notice, the name of the author, Bryant Moscon,
   33|       | *    shall not be used in advertising or otherwise to promote the sale, use or
   34|       | *    other dealings in this Software without prior written authorization from
   35|       | *    the author.
   36|       | *
   37|       | *
   38|       | * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   39|       | * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   40|       | * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   41|       | * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   42|       | * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   43|       | * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   44|       | * THE SOFTWARE.
   45|       | *
   46|       | */
   47|       |
   48|       |#include "logger.hpp"
   49|       |
   50|       |pthread_mutex_t Logger::mutex_log = PTHREAD_MUTEX_INITIALIZER;
   51|       |
   52|       |Logger::Logger(const char *f) : _file(f, std::ios::out | std::ios::app),
   53|       |    _log(_file),
   54|       |    _level(INFO),
   55|       |    _line_level(VERBOSE)
   56|      0|{
   57|      0|    assert(_file.is_open());
   58|      0|}
  ------------------
  | Unexecuted instantiation: _ZN6LoggerC2EPKc
  ------------------
  | Unexecuted instantiation: _ZN6LoggerC1EPKc
  ------------------
   59|       |
   60|       |Logger::Logger(const std::string &f) : _file(f.c_str(), std::ios::out | std::ios::app),
   61|       |    _log(_file),
   62|       |    _level(INFO),
   63|       |    _line_level(VERBOSE)
   64|      1|{
   65|      1|    assert(_file.is_open());
   66|      1|}
  ------------------
  | Unexecuted instantiation: _ZN6LoggerC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  ------------------
  | _ZN6LoggerC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
  |   64|      1|{
  |   65|      1|    assert(_file.is_open());
  |   66|      1|}
  ------------------
   67|       |
   68|       |Logger::~Logger()
   69|      0|{
   70|      0|    if (_file.is_open())
   71|      0|    {
   72|      0|        _log.flush();
   73|      0|        _file.close();
   74|      0|    }
   75|      0|}
   76|       |
   77|       |void Logger::set_level(const logger_level &level)
   78|      0|{
   79|      0|    _level = level;
   80|      0|}
   81|       |
   82|       |void Logger::flush()
   83|    286|{
   84|    286|    if (_line_level >= _level)
   85|    273|    {
   86|    273|        _log << get_time() << " -- [" << level_str(_line_level) << "] -- " << str();
   87|    273|        _log.flush();
   88|    273|    }
   89|     13|    else
   90|     13|    {
   91|     13|        _log << get_time() << " -- [" << level_str(_line_level) << "] -- " << str();
   92|     13|        _log.flush();
   93|     13|    }
   94|       |
   95|    286|    str("");
   96|    286|    _line_level = VERBOSE;
   97|    286|}
   98|       |
   99|       |Logger &Logger::operator<<(const logger_level &level)
  100|    281|{
  101|    281|    _line_level = level;
  102|    281|    return (*this);
  103|    281|}
  104|       |
  105|       |Logger &Logger::operator<<(LoggerManip m)
  106|    286|{
  107|    286|    return m(*this);
  108|    286|}
  109|       |
  110|       |std::string Logger::get_time() const
  111|    286|{
  112|    286|    struct tm *timeinfo;
  113|    286|    time_t rawtime;
  114|    286|    char *time_buf;
  115|       |
  116|    286|    time(&rawtime);
  117|    286|    timeinfo = localtime(&rawtime);
  118|    286|    time_buf = asctime(timeinfo);
  119|       |
  120|    286|    std::string ret(time_buf);
  121|    286|    if (!ret.empty() && ret[ret.length() - 1] == '\n')
  122|    286|    {
  123|    286|        ret.erase(ret.length() - 1);
  124|    286|    }
  125|       |
  126|    286|    return (ret);
  127|    286|}
  128|       |
  129|       |inline const char *Logger::level_str(const logger_level &level)
  130|    286|{
  131|    286|    switch (level)
  132|    286|    {
  133|      7|    case VERBOSE:
  134|      7|        return ("VERBOSE ");
  135|      6|    case DEBUG:
  136|      6|        return (" DEBUG  ");
  137|    184|    case INFO:
  138|    184|        return ("  INFO  ");
  139|     14|    case WARNING:
  140|     14|        return ("WARNING ");
  141|     20|    case ERROR:
  142|     20|        return (" ERROR  ");
  143|     54|    case CRITICAL:
  144|     54|        return ("CRITICAL");
  145|      1|    case FATAL:
  146|      1|        return (" FATAL  ");
  147|      0|    default:
  148|      0|        assert(false);
  149|    286|    }
  150|      0|    return ("  INFO  ");
  151|    286|}
  152|       |
  153|       |void Logger::mutex_lock()
  154|    255|{
  155|    255|    pthread_mutex_lock(&Logger::mutex_log);
  156|    255|}
  157|       |
  158|       |void Logger::mutex_unlock()
  159|    255|{
  160|    255|    pthread_mutex_unlock(&Logger::mutex_log);
  161|    255|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/logger/logger.hpp:
    1|       |/*
    2|       | * logger.hpp
    3|       | *
    4|       | *
    5|       | * Logger Library Header
    6|       | *
    7|       | *
    8|       | * Copyright (C) 2013-2014  Bryant Moscon - bmoscon@gmail.com
    9|       | *
   10|       | * Permission is hereby granted, free of charge, to any person obtaining a copy
   11|       | * of this software and associated documentation files (the "Software"), to
   12|       | * deal in the Software without restriction, including without limitation the
   13|       | * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
   14|       | * sell copies of the Software, and to permit persons to whom the Software is
   15|       | * furnished to do so, subject to the following conditions:
   16|       | *
   17|       | * 1. Redistributions of source code must retain the above copyright notice,
   18|       | *    this list of conditions, and the following disclaimer.
   19|       | *
   20|       | * 2. Redistributions in binary form must reproduce the above copyright notice,
   21|       | *    this list of conditions and the following disclaimer in the documentation
   22|       | *    and/or other materials provided with the distribution, and in the same
   23|       | *    place and form as other copyright, license and disclaimer information.
   24|       | *
   25|       | * 3. The end-user documentation included with the redistribution, if any, must
   26|       | *    include the following acknowledgment: "This product includes software
   27|       | *    developed by Bryant Moscon (http://www.bryantmoscon.org/)", in the same
   28|       | *    place and form as other third-party acknowledgments. Alternately, this
   29|       | *    acknowledgment may appear in the software itself, in the same form and
   30|       | *    location as other such third-party acknowledgments.
   31|       | *
   32|       | * 4. Except as contained in this notice, the name of the author, Bryant Moscon,
   33|       | *    shall not be used in advertising or otherwise to promote the sale, use or
   34|       | *    other dealings in this Software without prior written authorization from
   35|       | *    the author.
   36|       | *
   37|       | *
   38|       | * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   39|       | * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   40|       | * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   41|       | * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   42|       | * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   43|       | * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   44|       | * THE SOFTWARE.
   45|       | *
   46|       | */
   47|       |#pragma once
   48|       |
   49|       |#include <fstream>
   50|       |#include <cassert>
   51|       |#include <ctime>
   52|       |#include <sstream>
   53|       |
   54|       |// Log levels
   55|       |typedef enum
   56|       |{
   57|       |    US = 0,
   58|       |    VERBOSE,
   59|       |    DEBUG,
   60|       |    INFO,
   61|       |    WARNING,
   62|       |    ERROR,
   63|       |    CRITICAL,
   64|       |    FATAL
   65|       |} logger_level;
   66|       |
   67|       |class Logger : public std::ostringstream
   68|       |{
   69|       |public:
   70|       |    explicit Logger(const char *f);
   71|       |    explicit Logger(const std::string &f);
   72|       |    Logger(const Logger &);
   73|       |    Logger &operator=(const Logger &);
   74|       |    ~Logger();
   75|       |    static pthread_mutex_t mutex_log;
   76|       |
   77|       |    void set_level(const logger_level &level);
   78|       |    void flush();
   79|       |    void mutex_lock();
   80|       |    void mutex_unlock();
   81|       |
   82|       |    template <typename T>
   83|       |    Logger &operator<<(const T &t)
   84|    472|    {
   85|    472|        *static_cast<std::ostringstream *>(this) << t;
   86|    472|        return (*this);
   87|    472|    }
  ------------------
  | _ZN6LoggerlsIA45_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA10_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS_RKT_:
  |   84|     96|    {
  |   85|     96|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     96|        return (*this);
  |   87|     96|    }
  ------------------
  | _ZN6LoggerlsIA35_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA36_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA43_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA40_cEERS_RKT_
  ------------------
  | _ZN6LoggerlsIA42_cEERS_RKT_:
  |   84|     17|    {
  |   85|     17|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     17|        return (*this);
  |   87|     17|    }
  ------------------
  | _ZN6LoggerlsIA30_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA31_cEERS_RKT_
  ------------------
  | _ZN6LoggerlsIA39_cEERS_RKT_:
  |   84|     14|    {
  |   85|     14|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     14|        return (*this);
  |   87|     14|    }
  ------------------
  | _ZN6LoggerlsIA63_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA53_cEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA54_cEERS_RKT_
  ------------------
  | _ZN6LoggerlsIA21_cEERS_RKT_:
  |   84|     11|    {
  |   85|     11|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     11|        return (*this);
  |   87|     11|    }
  ------------------
  | _ZN6LoggerlsI5STATEEERS_RKT_:
  |   84|     10|    {
  |   85|     10|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     10|        return (*this);
  |   87|     10|    }
  ------------------
  | _ZN6LoggerlsIA8_cEERS_RKT_:
  |   84|     20|    {
  |   85|     20|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     20|        return (*this);
  |   87|     20|    }
  ------------------
  | _ZN6LoggerlsImEERS_RKT_:
  |   84|     12|    {
  |   85|     12|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     12|        return (*this);
  |   87|     12|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA56_cEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA49_cEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA6_cEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA44_cEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIN10HttpStatus4CodeEEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA2_cEERS_RKT_
  ------------------
  | _ZN6LoggerlsIPKcEERS_RKT_:
  |   84|      6|    {
  |   85|      6|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      6|        return (*this);
  |   87|      6|    }
  ------------------
  | _ZN6LoggerlsIA51_cEERS_RKT_:
  |   84|     12|    {
  |   85|     12|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     12|        return (*this);
  |   87|     12|    }
  ------------------
  | _ZN6LoggerlsIA24_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | _ZN6LoggerlsIA32_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | _ZN6LoggerlsIA17_cEERS_RKT_:
  |   84|     11|    {
  |   85|     11|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     11|        return (*this);
  |   87|     11|    }
  ------------------
  | _ZN6LoggerlsIA37_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | _ZN6LoggerlsIA47_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | _ZN6LoggerlsIA29_cEERS_RKT_:
  |   84|      2|    {
  |   85|      2|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      2|        return (*this);
  |   87|      2|    }
  ------------------
  | _ZN6LoggerlsIA28_cEERS_RKT_:
  |   84|      4|    {
  |   85|      4|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      4|        return (*this);
  |   87|      4|    }
  ------------------
  | _ZN6LoggerlsIA23_cEERS_RKT_:
  |   84|     13|    {
  |   85|     13|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     13|        return (*this);
  |   87|     13|    }
  ------------------
  | _ZN6LoggerlsIA14_cEERS_RKT_:
  |   84|     19|    {
  |   85|     19|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     19|        return (*this);
  |   87|     19|    }
  ------------------
  | _ZN6LoggerlsIA27_cEERS_RKT_:
  |   84|     12|    {
  |   85|     12|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     12|        return (*this);
  |   87|     12|    }
  ------------------
  | _ZN6LoggerlsIiEERS_RKT_:
  |   84|     12|    {
  |   85|     12|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     12|        return (*this);
  |   87|     12|    }
  ------------------
  | _ZN6LoggerlsIPcEERS_RKT_:
  |   84|     14|    {
  |   85|     14|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     14|        return (*this);
  |   87|     14|    }
  ------------------
  | _ZN6LoggerlsIA25_cEERS_RKT_:
  |   84|      5|    {
  |   85|      5|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      5|        return (*this);
  |   87|      5|    }
  ------------------
  | _ZN6LoggerlsIA3_cEERS_RKT_:
  |   84|      3|    {
  |   85|      3|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      3|        return (*this);
  |   87|      3|    }
  ------------------
  | _ZN6LoggerlsIA19_cEERS_RKT_:
  |   84|      5|    {
  |   85|      5|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      5|        return (*this);
  |   87|      5|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA4_cEERS_RKT_
  ------------------
  | _ZN6LoggerlsIA15_cEERS_RKT_:
  |   84|     16|    {
  |   85|     16|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     16|        return (*this);
  |   87|     16|    }
  ------------------
  | _ZN6LoggerlsIA18_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA13_cEERS_RKT_:
  |   84|     11|    {
  |   85|     11|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     11|        return (*this);
  |   87|     11|    }
  ------------------
  | _ZN6LoggerlsIA22_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA7_cEERS_RKT_:
  |   84|     13|    {
  |   85|     13|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     13|        return (*this);
  |   87|     13|    }
  ------------------
  | _ZN6LoggerlsINSt6thread2idEEERS_RKT_:
  |   84|     13|    {
  |   85|     13|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     13|        return (*this);
  |   87|     13|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA26_cEERS_RKT_
  ------------------
  | _ZN6LoggerlsIA55_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIN8nlohmann10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerEEEEERS_RKT_
  ------------------
  | _ZN6LoggerlsIA16_cEERS_RKT_:
  |   84|      1|    {
  |   85|      1|        *static_cast<std::ostringstream *>(this) << t;
  |   86|      1|        return (*this);
  |   87|      1|    }
  ------------------
  | _ZN6LoggerlsIA33_cEERS_RKT_:
  |   84|     98|    {
  |   85|     98|        *static_cast<std::ostringstream *>(this) << t;
  |   86|     98|        return (*this);
  |   87|     98|    }
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA50_cEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIjEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA52_cEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA34_cEERS_RKT_
  ------------------
  | Unexecuted instantiation: _ZN6LoggerlsIA41_cEERS_RKT_
  ------------------
   88|       |
   89|       |    Logger &operator<<(const logger_level &level);
   90|       |    typedef Logger &(*LoggerManip)(Logger &);
   91|       |    Logger &operator<<(LoggerManip m);
   92|       |
   93|       |private:
   94|       |    std::string get_time() const;
   95|       |    inline const char *level_str(const logger_level &level);
   96|       |
   97|       |public:
   98|       |    std::ofstream _file;
   99|       |
  100|       |private:
  101|       |    std::ostream &_log;
  102|       |    logger_level _level;
  103|       |    logger_level _line_level;
  104|       |};
  105|       |
  106|       |namespace std
  107|       |{
  108|       |    inline Logger &endl(Logger &out)
  109|    286|    {
  110|    286|        out.put('\n');
  111|    286|        out.flush();
  112|    286|        return (out);
  113|    286|    }
  114|       |} // end namespace std
  115|       |

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/thread_functions/iDom_thread.cpp:
    1|       |#include <tuple>
    2|       |#include <array>
    3|       |#include <functional>
    4|       |
    5|       |#include "iDom_thread.h"
    6|       |
    7|       |using namespace std::chrono_literals;
    8|       |
    9|       |std::string iDOM_THREAD::start_thread(const std::string &name,
   10|       |                                      std::function<void(thread_context *, const std::string &threadName)> functionToThread, // void(fn)(thread_data),
   11|       |                                      thread_context *context,
   12|       |                                      unsigned int thread_socket)
   13|     14|{
   14|     14|    int freeSlotID = iDOM_THREAD::findFreeThreadSlot(context->main_THREAD_arr);
   15|       |
   16|     14|    if (freeSlotID not_eq -1)
   17|     13|    {
   18|     13|        std::size_t it = static_cast<std::size_t>(freeSlotID);
   19|     13|        context->main_THREAD_arr->at(it).thread = std::thread(functionToThread, context, name);
   20|       |
   21|     13|        context->main_THREAD_arr->at(it).thread_name = name;
   22|     13|        context->main_THREAD_arr->at(it).thread_ID = context->main_THREAD_arr->at(it).thread.get_id();
   23|     13|        context->main_THREAD_arr->at(it).thread_socket = thread_socket;
   24|     13|        context->main_THREAD_arr->at(it).thread.detach();
   25|       |
   26|     13|        log_file_mutex.mutex_lock();
   27|     13|        log_file_cout << INFO << "watek " << name << " wystartowal "
   28|     13|                      << context->main_THREAD_arr->at(it).thread_ID << std::endl;
   29|     13|        log_file_mutex.mutex_unlock();
   30|       |
   31|     13|        return "DONE - " + name + " STARTED";
   32|     13|    }
   33|      1|    return "not free space to new thread";
   34|     14|}
   35|       |
   36|       |void iDOM_THREAD::stop_thread(const std::string &name,
   37|       |                              thread_context *context)
   38|     14|{
   39|     14|    try
   40|     14|    {
   41|     27|        for (std::size_t i = 0; i < iDomConst::MAX_CONNECTION; ++i)
   42|     26|        {
   43|     26|            if (context->main_THREAD_arr->at(i).thread_ID == std::this_thread::get_id())
   44|     13|            {
   45|     13|                context->main_THREAD_arr->at(i).thread_name = "  -empty-  ";
   46|     13|                context->main_THREAD_arr->at(i).thread_ID = std::thread::id();
   47|     13|                context->main_THREAD_arr->at(i).thread_socket = 0;
   48|     13|                break;
   49|     13|            }
   50|     26|        }
   51|     14|    }
   52|     14|    catch (std::system_error &e)
   53|     14|    {
   54|      0|        log_file_mutex.mutex_lock();
   55|      0|        log_file_cout << ERROR << "zlapano wyjatek w watku: " << name << ": " << e.what() << std::endl;
   56|      0|        log_file_mutex.mutex_unlock();
   57|      0|    }
   58|       |
   59|     14|    log_file_mutex.mutex_lock();
   60|     14|    log_file_cout << INFO << "koniec watku: " << name << std::endl;
   61|     14|    log_file_mutex.mutex_unlock();
   62|     14|}
   63|       |
   64|       |void iDOM_THREAD::waitUntilAllThreadEnd(thread_context *context)
   65|     12|{
   66|     12|    int threadCounter = 0;
   67|     12|    int counter = 20;
   68|     12|    do
   69|     12|    {
   70|     12|        if (--counter == 0)
   71|      0|        {
   72|      0|            puts("niedoczekalem sie konca watkow");
   73|      0|            break;
   74|      0|        }
   75|     12|        std::this_thread::sleep_for(1.5s);
   76|     12|        threadCounter = 0;
   77|    132|        for (auto i = context->main_THREAD_arr->begin(); i < context->main_THREAD_arr->end(); ++i)
   78|    120|        {
   79|    120|            threadCounter += i->thread_socket;
   80|    120|            if (i->thread_socket not_eq 0)
   81|      0|                std::cout << "thread name: " << i->thread_name << std::endl;
   82|    120|        }
   83|     12|        std::cout << "watki pracuja " << threadCounter << std::endl;
   84|     12|    } while (threadCounter not_eq 0);
   85|     12|}
   86|       |
   87|       |int iDOM_THREAD::findFreeThreadSlot(std::array<Thread_array_struc, iDomConst::MAX_CONNECTION> *array)
   88|     26|{
   89|     52|    for (std::size_t i = 0; i < array->size(); ++i)
   90|     50|    {
   91|     50|        if (array->at(i).thread_socket == 0)
   92|     24|            return static_cast<int>(i);
   93|     50|    }
   94|      2|    return -1;
   95|     26|}

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/src/thread_functions/rs232_thread.h:
    1|       |#ifndef RS232_THREAD_H
    2|       |#define RS232_THREAD_H
    3|       |
    4|       |#include "../SerialPi/serialpi.h"
    5|       |#include "../thread_functions/iDom_thread.h"
    6|       |#include "../functions/functions.h"
    7|       |
    8|       |using namespace std::chrono_literals;
    9|       |
   10|       |//////////// watek wysylajacy/obdbierajacy dane z portu RS232 ////////
   11|       |void Send_Recieve_rs232_thread(thread_context *context, const std::string &threadName)
   12|      0|{
   13|      0|    context->main_Rs232 = std::make_unique<SerialPi>(context->server_settings->_rs232.portRS232);
   14|      0|    context->main_Rs232->begin(context->server_settings->_rs232.BaudRate);
   15|      0|    log_file_mutex.mutex_lock();
   16|      0|    log_file_cout << INFO << "otwarcie portu RS232 " << context->server_settings->_rs232.portRS232 << " " << context->server_settings->_rs232.BaudRate << std::endl;
   17|      0|    log_file_mutex.mutex_unlock();
   18|      0|    std::string buffor;
   19|       |
   20|      0|    while (useful_F::go_while)
   21|      0|    {
   22|      0|        if (context->main_Rs232->available() > 0)
   23|      0|        {
   24|      0|            char t = context->main_Rs232->read();
   25|      0|            if (t == '\n')
   26|      0|            {
   27|      0|                context->main_Rs232->flush();
   28|      0|                auto data = useful_F::split(buffor, ':');
   29|      0|                if (data.at(0) == "KEY_PAD")
   30|      0|                {
   31|      0|                    int id = std::stoi(data.at(1));
   32|      0|                    KEY_PAD keyEvent = static_cast<KEY_PAD>(id);
   33|      0|                    context->main_key_menu_handler->recKeyEvent(keyEvent);
   34|      0|                }
   35|      0|                else if (data.at(0) == "TIMEOUT")
   36|      0|                {
   37|      0|                    context->main_key_menu_handler->timeout();
   38|      0|                }
   39|      0|                else
   40|      0|                {
   41|      0|                    context->mqttHandler->publish("rs232", buffor);
   42|      0|                }
   43|      0|                buffor.clear();
   44|      0|            }
   45|      0|            else
   46|      0|            {
   47|      0|                buffor.push_back(t);
   48|      0|            }
   49|      0|        }
   50|      0|        std::this_thread::sleep_for(50ms);
   51|      0|    }
   52|      0|    std::this_thread::sleep_for(1.5s);
   53|      0|    context->main_Rs232->flush();
   54|      0|    iDOM_THREAD::stop_thread(threadName, context);
   55|      0|}
   56|       |#endif // RS232_THREAD_H

/mnt/e/inne/PROGRAMOWANIE/malina/iDom_server_OOP/test/iDom_TESTs-CMAKE/main.cpp:
    1|       |#include <curl/curl.h>
    2|       |#include <gconv.h>
    3|       |#include <gtest/gtest.h>
    4|       |#include <iostream>
    5|       |#include <test_data.h>
    6|       |
    7|       |#include "../libs/useful/useful.h"
    8|       |#include "../libs/viberAPI/viber_api.h"
    9|       |#include "../libs/backTrace/backTrace.h"
   10|       |#include "../src/SerialPi/serialpi.h"
   11|       |#include "../src/logger/logger.hpp"
   12|       |
   13|     10|#define log_file_cout f_log // std::cout zmien f_log na std::cout i bedzie wypisywac na ekran
   14|      2|#define log_file_mutex f_log
   15|       |
   16|       |std::string  _logfile = "/mnt/ramdisk/iDom_log_BT.log";
   17|       |
   18|       |Logger log_file_mutex(_logfile);
   19|       |
   20|       |std::string TEST_DATA::return_send_to_arduino = "-2:-2";
   21|       |std::string TEST_DATA::return_httpPost = "ok.\n";
   22|       |std::string TEST_DATA::return_httpPost_expect = "";
   23|       |std::string TEST_DATA::return_viber_msg = "";
   24|       |std::string TEST_DATA::serial_b = "NULL";
   25|       |std::string TEST_DATA::serial_sended = "NULL";
   26|       |std::string TEST_DATA::LCD_print = "NULL";
   27|       |int TEST_DATA::test_pin = 0;
   28|       |int TEST_DATA::runLinuxCommandReturn = 0;
   29|       |
   30|       |unsigned int Clock::m_BT_H = 0;
   31|       |unsigned int Clock::m_BT_M = 0;
   32|       |
   33|      3|void SerialPi_set_recv_msg(const std::string& m){
   34|      3|  TEST_DATA::serial_b = m;
   35|      3|}
   36|       |
   37|     69|void SerialPi_set_serial_sended(const std::string& m){
   38|     69|  TEST_DATA::serial_sended = m;
   39|     69|}
   40|    137|SerialPi::SerialPi(const std::string& a):m_serial_port(10){
   41|    137|  std::cout << "SerialPi() addres: " << a << std::endl;
   42|    137|}
   43|    137|SerialPi::~SerialPi(){
   44|    137|  std::cout << "~SerialPi()" << std::endl;
   45|    137|}
   46|       |
   47|     69|void SerialPi::print(const std::string& msg){
   48|     69|  std::cout << "SerialPi::print() msg: " << msg << std::endl;
   49|     69|  SerialPi_set_serial_sended(msg);
   50|     69|}
   51|       |
   52|       |
   53|      1|void SerialPi::begin(int serialSpeed){
   54|      1|  std::cout << "SerialPi::int() serialSpeed: " << serialSpeed << std::endl;
   55|      1|}
   56|       |
   57|      1|void SerialPi::flush(){
   58|      1|  std::cout << "SerialPi::flush()" << std::endl;
   59|      1|  TEST_DATA::serial_b.clear();
   60|      1|}
   61|       |
   62|      4|int SerialPi::available(){
   63|      4|  std::cout << "SerialPi::available() " << TEST_DATA::serial_b.size() << std::endl;
   64|      4|  return static_cast<int>(TEST_DATA::serial_b.size());
   65|      4|}
   66|       |
   67|     29|char SerialPi::read(){
   68|     29|  char r = TEST_DATA::serial_b.at(0);
   69|     29|  TEST_DATA::serial_b.erase(0,1);
   70|     29|  std::cout << "SerialPi::read(): "<<r<< std::endl;
   71|     29|  return r;
   72|     29|}
   73|       |
   74|     85|viber_API::viber_API(){}
   75|     85|void viber_API::setAccessToken(const std::string& accessToken){}
   76|     85|void viber_API::setURL(const std::string& url){}
   77|     85|void viber_API::setAvatar(const std::string& avatar){}
   78|       |std::string viber_API::sendViberMSG(const std::string& msg,
   79|       |                                    const std::string& receiver,
   80|       |                                    const std::string& senderName,
   81|       |                                    const std::string& accessToken,
   82|     12|                                    const std::string& url){
   83|       |
   84|     12|  std::cout << "sendViberMSG() "<< msg <<" to: "<< receiver << std::endl;
   85|     12|  TEST_DATA::return_viber_msg = msg;
   86|     12|  return R"({"message_status":"ok"})";
   87|     12|}
   88|       |std::string viber_API::sendViberPicture(const std::string& msg,
   89|       |                                        const std::string& image,
   90|       |                                        const std::string& receiver,
   91|       |                                        const std::string& senderName,
   92|       |                                        const std::string& accessToken ,
   93|     12|                                        const std::string& url){
   94|     12|  std::cout << "sendViberPicture() "<< msg <<" to: "<< receiver << std::endl;
   95|     12|  TEST_DATA::return_viber_msg = msg;
   96|     12|  return R"({"message_status":"ok"})";
   97|     12|}
   98|       |std::string viber_API::sendViberUrl(const std::string& msg,
   99|       |                                    const std::string& url2,
  100|       |                                    const std::string& receiver,
  101|       |                                    const std::string& senderName,
  102|       |                                    const std::string& accessToken ,
  103|      0|                                    const std::string& url){
  104|      0|  std::cout << "sendViberUrl() "<< msg <<" to: "<< receiver << std::endl;
  105|      0|  TEST_DATA::return_viber_msg = msg;
  106|      0|  return R"({"message_status":"ok"})";
  107|      0|}
  108|       |
  109|     31|std::string useful_F_libs::httpPost(const std::string& url, int timeoutSeconds){
  110|       |
  111|     31|  std::cout << "url: "<< url << " return "<< TEST_DATA::return_httpPost << "|"<< std::endl;
  112|     31|  TEST_DATA::return_httpPost_expect = "httpPost";
  113|     31|  return TEST_DATA::return_httpPost;
  114|     31|}
  115|      2|std::string useful_F_libs::httpPost(const std::string& url){
  116|      2|  CURL *curl;
  117|      2|  CURLcode res;
  118|      2|  std::string readBuffer;
  119|      2|  curl = curl_easy_init();
  120|       |
  121|      2|  if(curl) {
  122|      2|      curl_easy_setopt(curl, CURLOPT_TIMEOUT, 10);
  123|      2|      curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
  124|      2|      curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, useful_F_libs::WriteCallback);
  125|      2|      curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);
  126|      2|      res = curl_easy_perform(curl);
  127|       |      /* Check for errors */
  128|      2|      if(res not_eq CURLE_OK)
  129|      0|        fprintf(stderr, "curl_easy_perform() failed: %s\n",
  130|      0|                curl_easy_strerror(res));
  131|       |
  132|       |      /* always cleanup */
  133|      2|      curl_easy_cleanup(curl);
  134|      2|    }
  135|      2|  curl_global_cleanup();
  136|       |
  137|      2|  return readBuffer;
  138|      2|}
  139|       |#define OUTPUT 0
  140|       |
  141|      0|void digitalWrite(int pin, int mode){}
  142|       |
  143|       |void setReturnPinState(int i)
  144|      0|{
  145|      0|  TEST_DATA::test_pin = i;
  146|      0|}
  147|       |
  148|      0|int digitalRead(int pin){ return TEST_DATA::test_pin; }
  149|       |
  150|       |class test_433
  151|       |{
  152|       |public:
  153|       |  std::string config433 = R"({"BUTTON":{"night-light":{"commandRun":"test_command","OFF":"NULL","ON":"NULL","id":"458","name":"night-light","type":"BUTTON"},"locker-main":{"commandRun":"test_command","OFF":"NULL","ON":"NULL","id":"01e7be","name":"locker-main","type":"BUTTON"},"locker-2":{"commandRun":"test_command","OFF":"NULL","ON":"NULL","id":"123456789","name":"locker-2","type":"BUTTON"}},"SWITCH":{"A":{"OFF":"10;TriState;0280aa;0;OFF","ON":"10;TriState;0280aa;0;ON","id":"1444","name":"A","on15sec":"null","sunrise":"NULL","sunset":"NULL","lock":"null","unlock":"null","type":"SWITCH"},"ALARM":{"OFF":"dummyOFF","ON":"dummyON","id":"1223","name":"ALARM","on15sec":"null","sunrise":"NULL","sunset":"NULL","lock":"null","unlock":"null","type":"SWITCH"},"B":{"OFF":"10;TriState;02822a;0;OFF","ON":"10;TriState;02822a;0;ON","id":"1445","name":"B","on15sec":"10;TriState;02822a;0;ON","sunrise":"ON","sunset":"OFF","lock":"null","unlock":"null","type":"SWITCH"},"C":{"OFF":"null","ON":"null","id":"1446","name":"C","on15sec":"null","sunrise":"OFF","sunset":"ON","lock":"null","unlock":"null","type":"SWITCH"},"listwa":{"OFF":"10;Kaku;0ad04d;15;OFF","ON":"10;Kaku;0ad04d;15;ON","id":"1450","name":"listwa","on15sec":"null","sunrise":"NULL","sunset":"NULL","lock":"OFF","unlock":"ON","type":"SWITCH"}},"WEATHER":{"first":{"OFF":"NULL","ON":"NULL","id":"0704","name":"first","on15sec":"null","sunrise":"NULL","sunset":"NULL","type":"WEATHER"}}})";
  154|       |  std::string config433_fake = R"({ "BUTTON": { "locker": { "commandRun":"test_command","OFF": "NULL", "ON": "NULL", "id": "01e7be", "name": "locker",  "type": "BUTTON" } }, "SWITCH": { "A": { "OFF": "10;TriState;0280aa;0;OFF", "ON": "10;TriState;0280aa;0;ON", "id": "1444", "name": "A", "on15sec": "null", "sunrise": "NULL", "sunset": "NULL","lock": "null", "unlock": "null", "type": "SWITCH" }, "ALARM": { "OFF": "dummyOFF", "ON": "dummyON", "id": "1223", "name": "ALARM", "on15sec": "null", "sunrise": "NULL", "sunset": "NULL","lock": "null", "unlock": "null", "type": "SWITCH" }, "B": { "OFF": "10;TriState;02822a;0;OFF", "ON": "10;TriState;02822a;0;ON", "id": "1445", "name": "B", "on15sec": "null", "sunrise": "NULL", "sunset": "NULL", "lock": "null", "unlock": "null","type": "SWITCH" }, "C": { "OFF": "10;TriState;02828a;0;OFF", "ON": "10;TriState;02828a;0;ON", "id": "1446", "name": "C", "on15sec": "null", "sunrise": "NULL", "sunset": "NULL","lock": "null", "unlock": "null", "type": "SWITCH" }, "listwa": { "OFF": "10;Kaku;0ad04d;15;OFF", "ON": "10;Kaku;0ad04d;15;ON", "id": "1450", "name": "listwa", "on15sec": "null", "sunrise": "NULL", "sunset": "NULL","lock": "OFF", "unlock": "null", "type": "SWITCH" } } } )";
  155|       |
  156|       |  void makeFile(const std::string& path)
  157|      1|  {
  158|      1|    std::ofstream o(path);
  159|      1|    o << config433 ;
  160|      1|  }
  161|       |  void makeFileFake(const std::string& path)
  162|      1|  {
  163|      1|    std::ofstream o(path);
  164|      1|    o << config433_fake ;
  165|      1|  }
  166|       |};
  167|       |
  168|       |int main(int argc, char **argv)
  169|      1|{
  170|      1|  signal(SIGABRT, cyniu::BACKTRACE::handleCrash);
  171|      1|  test_433 t;
  172|      1|  t.makeFile("/mnt/ramdisk/433_eq_conf.json");
  173|      1|  t.makeFileFake("/mnt/ramdisk/433_eq_conf_fake.json");
  174|       |
  175|      1|  std::fstream ofs;
  176|      1|  ofs.open(_logfile, std::ios::out | std::ios::trunc);
  177|      1|  ofs.close(); //Using microsoft incremental linker version 14
  178|       |
  179|      1|  pthread_mutex_init(&Logger::mutex_log, nullptr);
  180|       |
  181|      1|  log_file_mutex.mutex_lock();
  182|      1|  log_file_cout << std::endl<< std::endl<<"============================================"
  183|      1|                << std::endl<< std::endl<< std::endl<< INFO << "START BT "<< std::endl;
  184|      1|  log_file_mutex.mutex_unlock();
  185|       |
  186|      1|  ::testing::InitGoogleTest( &argc, argv );
  187|       |  //::testing::GTEST_FLAG(filter) = "Switch_Class_fixture.loadConfig";
  188|       |  //::testing::GTEST_FLAG(filter) = "event_counter_fixture.getLast1minNumberEvent";
  189|       |  //:testing::GTEST_FLAG(filter) = "satel_integra_fixture.turnOnOffOutput";
  190|       |  //:testing::GTEST_FLAG(throw_on_failure) = true;
  191|      1|  auto ret = RUN_ALL_TESTS();
  192|      1|  pthread_mutex_destroy(&Logger::mutex_log);
  193|       |
  194|      1|  const char * PROG_INFO = " Basic TEST iDomServer: " __DATE__ ", " __TIME__;
  195|      1|  std::cout << "wersja " <<PROG_INFO <<" "<< GIT_BRANCH <<" " << GIT_COMMIT_HASH << std::endl;
  196|      1|  return ret;
  197|      1|}

